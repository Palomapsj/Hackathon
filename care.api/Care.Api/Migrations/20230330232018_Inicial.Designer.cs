// <auto-generated />
using System;
using Care.Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Care.Api.Migrations
{
    [DbContext(typeof(CareDbContext))]
    [Migration("20230330232018_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccessProcedureByProgramAccount", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessProcedureByProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId", "AccessProcedureByProgramId")
                        .HasName("PK_dbo.AccessProcedureByProgramAccount");

                    b.HasIndex(new[] { "AccessProcedureByProgramId" }, "IX_AccessProcedureByProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessProcedureByProgramId" }, "IX_AccessProcedureByProgramId"), 90);

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.ToTable("AccessProcedureByProgramAccount", (string)null);
                });

            modelBuilder.Entity("AccessProfileUser", b =>
                {
                    b.HasNoKey();
                    b.Property<Guid>("AccessProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccessProfileId", "UserId")
                        .HasName("PK_dbo.AccessProfileUser");

                    b.HasIndex(new[] { "AccessProfileId" }, "IX_AccessProfileId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessProfileId" }, "IX_AccessProfileId"), 90);

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "IX_UserId"), 90);

                    b.ToTable("AccessProfileUser", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RoleId" }, "IX_RoleId"), 90);

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "IX_UserId"), 90);

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("CampaignHealthProfessional", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CampaignId", "HealthProfessionalId")
                        .HasName("PK_dbo.CampaignHealthProfessional");

                    b.HasIndex(new[] { "CampaignId" }, "IX_CampaignId");

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    b.ToTable("CampaignHealthProfessional", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessHistoryAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AttemptAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AttemptAccessDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentDataShare")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateToStart")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DetailDifficultyWithAccessStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DetailDifficultyWithDocumentsStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DetailNoDifficultyWithAccessStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DifficultyWithAccess")
                        .HasColumnType("bit");

                    b.Property<bool?>("DifficultyWithDocument")
                        .HasColumnType("bit");

                    b.Property<bool?>("DocumentDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DocumentDeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DocumentSeparated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DocumentSeparatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("ExplainedByAttendant")
                        .HasColumnType("bit");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("GotAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GotAccessDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("InactivateTreatment")
                        .HasColumnType("bit");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("KeepAttempt")
                        .HasColumnType("bit");

                    b.Property<bool?>("KeepAttemptAccess")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicamentAccessId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("NextAttemptAccess")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSettingsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("TreatmentStarted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("WaiverDetailStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("WillStart")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccessHistoryAttendance");

                    b.HasIndex(new[] { "DetailDifficultyWithAccessStringMapId" }, "IX_DetailDifficultyWithAccessStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DetailDifficultyWithAccessStringMapId" }, "IX_DetailDifficultyWithAccessStringMapId"), 90);

                    b.HasIndex(new[] { "DetailDifficultyWithDocumentsStringMapId" }, "IX_DetailDifficultyWithDocumentsStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DetailDifficultyWithDocumentsStringMapId" }, "IX_DetailDifficultyWithDocumentsStringMapId"), 90);

                    b.HasIndex(new[] { "DetailNoDifficultyWithAccessStringMapId" }, "IX_DetailNoDifficultyWithAccessStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DetailNoDifficultyWithAccessStringMapId" }, "IX_DetailNoDifficultyWithAccessStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "MedicamentAccessId" }, "IX_MedicamentAccessId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentAccessId" }, "IX_MedicamentAccessId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "TreatmentSettingsId" }, "IX_TreatmentSettingsId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentSettingsId" }, "IX_TreatmentSettingsId"), 90);

                    b.HasIndex(new[] { "WaiverDetailStringMapId" }, "IX_WaiverDetailStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "WaiverDetailStringMapId" }, "IX_WaiverDetailStringMapId"), 90);

                    b.ToTable("AccessHistoryAttendance", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessHistoryAttendanceAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessHistoryAttendanceAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessManner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccessManner");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccessManner", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessMannerAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessMannerAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessMannerByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccessMannerByProgram");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccessMannerByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessMannerByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessMannerByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessOrderByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessDocuments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AccessExam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AccessMannerByProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessMannerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AccessOriented")
                        .HasColumnType("bit");

                    b.Property<string>("AccessProcedure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("AccessRecord")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AccessWayId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccessOrderByProgram");

                    b.HasIndex(new[] { "AccessMannerByProgramId" }, "IX_AccessMannerByProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessMannerByProgramId" }, "IX_AccessMannerByProgramId"), 90);

                    b.HasIndex(new[] { "AccessMannerId" }, "IX_AccessMannerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessMannerId" }, "IX_AccessMannerId"), 90);

                    b.HasIndex(new[] { "AccessWayId" }, "IX_AccessWayId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessWayId" }, "IX_AccessWayId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccessOrderByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessOrderByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessOrderByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessProcedureByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessExam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Documents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Procedure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccessProcedureByProgram");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccessProcedureByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessProcedureByProgramAccountAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessProcedureByProgramAccountAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessProcedureByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessProcedureByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessProfileTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccessProfile");

                    b.HasIndex(new[] { "AccessProfileTypeStringMapId" }, "IX_AccessProfileTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessProfileTypeStringMapId" }, "IX_AccessProfileTypeStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccessProfile", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessProfileAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessProfileAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessProfileUserAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessProfileUserAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessRightEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessProfileId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Annotations")
                        .HasColumnType("bit");

                    b.Property<bool?>("Create")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Delete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasActivities")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasSurvey")
                        .HasColumnType("bit");

                    b.Property<bool?>("Inactivation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsVisibleMenu")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Update")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccessRightEntity");

                    b.HasIndex(new[] { "AccessProfileId" }, "IX_AccessProfileId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessProfileId" }, "IX_AccessProfileId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccessRightEntity", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessRightEntityAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessRightEntityAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessWay", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccessWay");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccessWay", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccessWayAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccessWayAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessCoverageAreaStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AccessMakesInformation")
                        .HasColumnType("bit");

                    b.Property<bool?>("AccessMakesStatement")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AccessMannerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("AccessWayId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Ansnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ANSNumber");

                    b.Property<Guid?>("ClinicPublicOrPrivateStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DoctorResponsableId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfessional_Id");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MainContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OfficeHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<string>("StateRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TelephoneFax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Account");

                    b.HasIndex(new[] { "AccessCoverageAreaStringMapId" }, "IX_AccessCoverageAreaStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessCoverageAreaStringMapId" }, "IX_AccessCoverageAreaStringMapId"), 90);

                    b.HasIndex(new[] { "AccessMannerId" }, "IX_AccessMannerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessMannerId" }, "IX_AccessMannerId"), 90);

                    b.HasIndex(new[] { "AccessWayId" }, "IX_AccessWayId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessWayId" }, "IX_AccessWayId"), 90);

                    b.HasIndex(new[] { "AccountTypeStringMapId" }, "IX_AccountTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountTypeStringMapId" }, "IX_AccountTypeStringMapId"), 90);

                    b.HasIndex(new[] { "ClinicPublicOrPrivateStringMapId" }, "IX_ClinicPublicOrPrivateStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ClinicPublicOrPrivateStringMapId" }, "IX_ClinicPublicOrPrivateStringMapId"), 90);

                    b.HasIndex(new[] { "ClinicTypeStringMapId" }, "IX_ClinicTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ClinicTypeStringMapId" }, "IX_ClinicTypeStringMapId"), 90);

                    b.HasIndex(new[] { "DoctorResponsableId" }, "IX_DoctorResponsableId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorResponsableId" }, "IX_DoctorResponsableId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessional_Id");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessional_Id"), 90);

                    b.HasIndex(new[] { "Name" }, "IX_NC_ACCOUNT_1");

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccountAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountBkp1904", b =>
                {
                    b.Property<Guid?>("AccessCoverageAreaStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AccessMakesInformation")
                        .HasColumnType("bit");

                    b.Property<bool?>("AccessMakesStatement")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AccessMannerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("AccessWayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Ansnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ANSNumber");

                    b.Property<Guid?>("ClinicPublicOrPrivateStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DoctorResponsableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProfessional_Id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MainContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OfficeHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<string>("StateRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TelephoneFax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("Account_BKP_19_04", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountBkp1904audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("Account_BKP_19_04Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountCoverageArea", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccountCoverageArea");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccountCoverageArea", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountCoverageAreaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccountCoverageAreaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountExamTypeByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccountExamTypeByProgram");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("AccountExamTypeByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountExamTypeByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccountExamTypeByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountInternalDemand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountSettingsByProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountSettingsByProgram_Id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ValidationResultId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ValidationResult_Id");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccountInternalDemand");

                    b.HasIndex(new[] { "AccountSettingsByProgramId" }, "IX_AccountSettingsByProgram_Id");

                    b.HasIndex(new[] { "ValidationResultId" }, "IX_ValidationResult_Id");

                    b.ToTable("AccountInternalDemand", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountInternalDemandAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("AccountInternalDemandAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountSettingsByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnalysisTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AndKm")
                        .HasColumnType("int")
                        .HasColumnName("AndKM");

                    b.Property<int?>("AnnualVouchers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BetweenKm")
                        .HasColumnType("int")
                        .HasColumnName("BetweenKM");

                    b.Property<decimal?>("BetweenKmvalue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("BetweenKMValue");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ");

                    b.Property<int>("CodeClinicIntegra")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorByProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HomeCare")
                        .HasColumnType("bit");

                    b.Property<bool?>("HomeCollect")
                        .HasColumnType("bit");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("MainContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MakesInfusion")
                        .HasColumnType("bit");

                    b.Property<bool?>("MakesInfusionSubsidy")
                        .HasColumnType("bit");

                    b.Property<bool?>("MakesIt")
                        .HasColumnType("bit")
                        .HasColumnName("MakesIT");

                    b.Property<bool?>("MakesOt")
                        .HasColumnType("bit")
                        .HasColumnName("MakesOT");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MounthlyVouchers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherExam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutsideCoverageAreaAboveKm")
                        .HasColumnType("int")
                        .HasColumnName("OutsideCoverageAreaAboveKM");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PatientTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SpecialtyDerm")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpecialtyGastro")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpecialtyRheumato")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UntilKm")
                        .HasColumnType("int")
                        .HasColumnName("UntilKM");

                    b.Property<decimal?>("UntilKmvalue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("UntilKMValue");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AccountSettingsByProgram");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "AccountStatusStringMapId" }, "IX_AccountStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountStatusStringMapId" }, "IX_AccountStatusStringMapId"), 90);

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "DoctorByProgramId" }, "IX_DoctorByProgramId");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "ExamTypeStringMapId" }, "IX_ExamTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamTypeStringMapId" }, "IX_ExamTypeStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "PatientTypeStringMapId" }, "IX_PatientTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientTypeStringMapId" }, "IX_PatientTypeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "SystemUserId" }, "IX_SystemUserId");

                    b.ToTable("AccountSettingsByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountSettingsByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AccountSettingsByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountSettingsByProgramBkp190422", b =>
                {
                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnalysisTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AndKm")
                        .HasColumnType("int")
                        .HasColumnName("AndKM");

                    b.Property<int?>("AnnualVouchers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BetweenKm")
                        .HasColumnType("int")
                        .HasColumnName("BetweenKM");

                    b.Property<decimal?>("BetweenKmvalue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("BetweenKMValue");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ");

                    b.Property<int>("CodeClinicIntegra")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorByProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HomeCare")
                        .HasColumnType("bit");

                    b.Property<bool?>("HomeCollect")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("MainContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MakesInfusion")
                        .HasColumnType("bit");

                    b.Property<bool?>("MakesInfusionSubsidy")
                        .HasColumnType("bit");

                    b.Property<bool?>("MakesIt")
                        .HasColumnType("bit")
                        .HasColumnName("MakesIT");

                    b.Property<bool?>("MakesOt")
                        .HasColumnType("bit")
                        .HasColumnName("MakesOT");

                    b.Property<Guid?>("MedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MounthlyVouchers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherExam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutsideCoverageAreaAboveKm")
                        .HasColumnType("int")
                        .HasColumnName("OutsideCoverageAreaAboveKM");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PatientTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SpecialtyDerm")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpecialtyGastro")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpecialtyRheumato")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UntilKm")
                        .HasColumnType("int")
                        .HasColumnName("UntilKM");

                    b.Property<decimal?>("UntilKmvalue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("UntilKMValue");

                    b.ToTable("AccountSettingsByProgram_BKP_19_04_22", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AccountSettingsByProgramBkp190422audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("AccountSettingsByProgram_BKP_19_04_22Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ActionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionColorHex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ActionCategory");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("ActionCategory", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ActionCategoryAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ActionCategoryAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ActionConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActionCategoryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ActionColorHex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ActionOwnerStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseDateField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Receiver")
                        .HasColumnType("int");

                    b.Property<string>("SourceEntityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SourceEntityTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool?>("UnplannedSubject")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ActionConfiguration");

                    b.HasIndex(new[] { "ActionCategoryId" }, "IX_ActionCategoryId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActionCategoryId" }, "IX_ActionCategoryId"), 90);

                    b.HasIndex(new[] { "ActionOwnerStringMapId" }, "IX_ActionOwnerStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActionOwnerStringMapId" }, "IX_ActionOwnerStringMapId"), 90);

                    b.HasIndex(new[] { "ProgramId" }, "IX_ProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ProgramId" }, "IX_ProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("ActionConfiguration", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ActionConfigurationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ActionConfigurationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ActionRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActionConfigurationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsContinuous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("PeriodicityDays")
                        .HasColumnType("int");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ActionRule");

                    b.HasIndex(new[] { "ActionConfigurationId" }, "IX_ActionConfigurationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActionConfigurationId" }, "IX_ActionConfigurationId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("ActionRule", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ActionRuleAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ActionRuleAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AdhesionAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ConsentDataShare")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Cycle")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateToStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateofLastConsultation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateofLastInfusion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateofNextInfusion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateofUse")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateoftheNextConsultation")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DetailDifficultyWithAccessStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DosageStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DoseOptimizationPatient")
                        .HasColumnType("bit");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ExpectedDateToReturn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FollowedPrescription")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FrequencyStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasUsed")
                        .HasColumnType("bit");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("KeepOnTheProgram")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("MedicamentCompetitorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicationNonadherenceReasonId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("NextDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("OriginStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("PharmacovigilanceReported")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReleaseNextShipment")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentFinishedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentIntervalStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSettingsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("TreatmentStarted")
                        .HasColumnType("bit");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.Property<bool?>("WillStart")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AdhesionAttendance");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "DetailDifficultyWithAccessStringMapId" }, "IX_DetailDifficultyWithAccessStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DetailDifficultyWithAccessStringMapId" }, "IX_DetailDifficultyWithAccessStringMapId"), 90);

                    b.HasIndex(new[] { "FrequencyStringMapId" }, "IX_FrequencyStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FrequencyStringMapId" }, "IX_FrequencyStringMapId"), 90);

                    b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "MedicationNonadherenceReasonId" }, "IX_MedicationNonadherenceReasonId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicationNonadherenceReasonId" }, "IX_MedicationNonadherenceReasonId"), 90);

                    b.HasIndex(new[] { "CreatedByName" }, "IX_NC_AdhesionAttendance");

                    b.HasIndex(new[] { "HasUsed", "IsDeleted" }, "IX_NC_AdhesionAttendance_0");

                    b.HasIndex(new[] { "OriginStringMapId" }, "IX_OriginStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OriginStringMapId" }, "IX_OriginStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "TreatmentIntervalStringMapId" }, "IX_TreatmentIntervalStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentIntervalStringMapId" }, "IX_TreatmentIntervalStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentSettingsId" }, "IX_TreatmentSettingsId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentSettingsId" }, "IX_TreatmentSettingsId"), 90);

                    b.ToTable("AdhesionAttendance", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AdhesionAttendanceAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AdhesionAttendanceAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AkkaActor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBroadCastActor")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHealthProgramActor")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AkkaActors");

                    b.HasIndex(new[] { "Path", "IsActive" }, "idx_PathIsActive");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Path", "IsActive" }, "idx_PathIsActive"), 90);

                    b.ToTable("AkkaActors");
                });

            modelBuilder.Entity("Care.Api.Models.AkkaActorsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AkkaActorsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AkkaMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AkkaActorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AkkaActorsIdName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("AkkaActorsProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AkkaActorsProgramIdName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SourceEntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceEntityMetadataIdName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AkkaMessages");

                    b.HasIndex(new[] { "AkkaActorsId", "AkkaActorsProgramId", "EntityMetadataId", "EntityMetadataIdName" }, "idx_ActorProgramEntity");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AkkaActorsId", "AkkaActorsProgramId", "EntityMetadataId", "EntityMetadataIdName" }, "idx_ActorProgramEntity"), 90);

                    b.ToTable("AkkaMessages");
                });

            modelBuilder.Entity("Care.Api.Models.AkkaMessagesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AkkaMessagesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AkkaPublishEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AkkaActorsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AkkaPublishEvents");

                    b.HasIndex(new[] { "AkkaActorsId" }, "IX_AkkaActorsId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AkkaActorsId" }, "IX_AkkaActorsId"), 90);

                    b.ToTable("AkkaPublishEvents");
                });

            modelBuilder.Entity("Care.Api.Models.AkkaPublishEventsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AkkaPublishEventsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AkkaSubscribeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AkkaActorsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AkkaSubscribeEvents");

                    b.HasIndex(new[] { "AkkaActorsId" }, "IX_AkkaActorsId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AkkaActorsId" }, "IX_AkkaActorsId"), 90);

                    b.ToTable("AkkaSubscribeEvents");
                });

            modelBuilder.Entity("Care.Api.Models.AkkaSubscribeEventsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AkkaSubscribeEventsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Annotation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnnotationTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasAttachment")
                        .HasColumnType("bit");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Annotation");

                    b.HasIndex(new[] { "AnnotationTypeStringMapId" }, "IX_AnnotationTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AnnotationTypeStringMapId" }, "IX_AnnotationTypeStringMapId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Annotation", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AnnotationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AnnotationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetRoles");

                    b.HasIndex(new[] { "Name" }, "RoleNameIndex")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "RoleNameIndex"), 90);

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Care.Api.Models.AspNetRolesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AspNetRolesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUsers");

                    b.HasIndex(new[] { "UserName" }, "UserNameIndex")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserName" }, "UserNameIndex"), 90);

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUserClaims");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "IX_UserId"), 90);

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUserClaimsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AspNetUserClaimsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "IX_UserId"), 90);

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUserLoginsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AspNetUserLoginsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUserRolesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AspNetUserRolesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUsersAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AspNetUsersAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnnotationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Attachment");

                    b.HasIndex(new[] { "AnnotationId" }, "IX_AnnotationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AnnotationId" }, "IX_AnnotationId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AttachmentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AttachmentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AttemptCallLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiagnosticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PhoneCallId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentAndDiagnosticActionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AttemptCallLog");

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId"), 90);

                    b.HasIndex(new[] { "PhoneCallId" }, "IX_PhoneCallId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhoneCallId" }, "IX_PhoneCallId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentAndDiagnosticActionId" }, "IX_TreatmentAndDiagnosticActionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentAndDiagnosticActionId" }, "IX_TreatmentAndDiagnosticActionId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.ToTable("AttemptCallLog", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AttemptCallLogAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("AttemptCallLogAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.AttributeMetadatum", b =>
                {
                    b.Property<Guid>("AttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AttributeHashCode")
                        .HasColumnType("int");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerTable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("IsCollection")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDateTimeWithHour")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLookup")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsManyToMany")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNotMapped")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPickList")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrimaryKey")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsStateCode")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsStatusCode")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSystemField")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTextArea")
                        .HasColumnType("bit")
                        .HasColumnName("isTextArea");

                    b.Property<bool?>("IsTimeLine")
                        .HasColumnType("bit");

                    b.HasKey("AttributeMetadataId")
                        .HasName("PK_dbo.AttributeMetadata");

                    b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId"), 90);

                    b.HasIndex(new[] { "EntityMetadataId", "AttributeName", "AttributeType" }, "idx_AttributeName");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId", "AttributeName", "AttributeType" }, "idx_AttributeName"), 90);

                    b.ToTable("AttributeMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Bank");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BankAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("BankAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BaseDoctorRepresentative", b =>
                {
                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Doenca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LIcenseNumber");

                    b.Property<string>("LicenseState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LIcenseState");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.ToTable("BaseDoctorRepresentative", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BaseDoctorRepresentativeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("BaseDoctorRepresentativeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BaseTreatment", b =>
                {
                    b.Property<int?>("AbbreviationName")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AmpouleAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BirthdateCaregiver")
                        .HasColumnType("int")
                        .HasColumnName("Birthdate_Caregiver");

                    b.Property<Guid?>("CaregiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cid")
                        .HasColumnType("int")
                        .HasColumnName("CID");

                    b.Property<Guid?>("CivilStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ConsentDataShare")
                        .HasColumnType("int");

                    b.Property<int?>("ConsentToReceiveEmail")
                        .HasColumnType("int");

                    b.Property<int?>("ConsentToReceiveLogistics")
                        .HasColumnType("int");

                    b.Property<int?>("ConsentToReceivePhonecalls")
                        .HasColumnType("int");

                    b.Property<int?>("ConsentToReceiveSms")
                        .HasColumnType("int")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<int?>("ConsentToReceiveVisit")
                        .HasColumnType("int");

                    b.Property<int?>("ConsentToSendDataToDoctor")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContractTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cpf")
                        .HasColumnType("int")
                        .HasColumnName("CPF");

                    b.Property<int?>("CpfCaregiver")
                        .HasColumnType("int")
                        .HasColumnName("CPF_Caregiver");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DeletedByName")
                        .HasColumnType("int");

                    b.Property<int?>("DeletedOn")
                        .HasColumnType("int");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Diseaseid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("diseaseid");

                    b.Property<Guid?>("Doctorid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("doctorid");

                    b.Property<int?>("Dosage")
                        .HasColumnType("int");

                    b.Property<Guid?>("DosageUnitStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducationStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EmailAddress1")
                        .HasColumnType("int");

                    b.Property<int?>("EmailAddress1Caregiver")
                        .HasColumnType("int")
                        .HasColumnName("EmailAddress1_Caregiver");

                    b.Property<int?>("EmailAddress2")
                        .HasColumnType("int");

                    b.Property<int?>("EntityOriginalValues")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FirstNameCaregiver")
                        .HasColumnType("int")
                        .HasColumnName("FirstName_Caregiver");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FullNameCaregiver")
                        .HasColumnType("int")
                        .HasColumnName("FullName_Caregiver");

                    b.Property<Guid?>("GenderStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("GotAccessDate")
                        .HasColumnType("int");

                    b.Property<Guid?>("HealthCareProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("HealthInsuranceType")
                        .HasColumnType("int");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Importcode")
                        .HasColumnType("float");

                    b.Property<Guid?>("InfusionPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InternalControl")
                        .HasColumnType("int");

                    b.Property<string>("IsDeleted")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("KinshipStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("LastNameCaregiver")
                        .HasColumnType("int")
                        .HasColumnName("LastName_Caregiver");

                    b.Property<Guid?>("MainContactStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MedicamentCompetitorId")
                        .HasColumnType("int");

                    b.Property<Guid?>("Medicamentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Mobilephone1")
                        .HasColumnType("int");

                    b.Property<int?>("Mobilephone1Caregiver")
                        .HasColumnType("int")
                        .HasColumnName("Mobilephone1_Caregiver");

                    b.Property<int?>("Mobilephone1Observation")
                        .HasColumnType("int");

                    b.Property<int?>("Mobilephone2")
                        .HasColumnType("int");

                    b.Property<int?>("Mobilephone2Observation")
                        .HasColumnType("int");

                    b.Property<int?>("Mobilephone3")
                        .HasColumnType("int");

                    b.Property<int?>("Mobilephone3Observation")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Password")
                        .HasColumnType("int");

                    b.Property<int?>("PatientDiagnosedDate")
                        .HasColumnType("int");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PatientSourceStringMapId")
                        .HasColumnType("int");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Pncode")
                        .HasColumnType("int")
                        .HasColumnName("PNCode");

                    b.Property<Guid?>("PosologeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreferredTimeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PrescriptionDueDate")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionHasDateMissing")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionHasDivergentDosage")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionHasDivergentInterval")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionHasLackOfDosage")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionHasLackOfInterval")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionHasMissingMedicationName")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionHasStampSignatureMissing")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionIsValid")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionReceived")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionReceivedDate")
                        .HasColumnType("int");

                    b.Property<Guid?>("PrescriptionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PrescriptionValidatedByName")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionValidationDate")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramParticipationConsent")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramParticipationConsentDate")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramTime")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonStateCode")
                        .HasColumnType("int");

                    b.Property<int?>("Rg")
                        .HasColumnType("int")
                        .HasColumnName("RG");

                    b.Property<int?>("Rne")
                        .HasColumnType("int")
                        .HasColumnName("RNE");

                    b.Property<int?>("SkypeUser")
                        .HasColumnType("int");

                    b.Property<int?>("SkypeUserCaregiver")
                        .HasColumnType("int")
                        .HasColumnName("SkypeUser_Caregiver");

                    b.Property<int>("Statecode")
                        .HasColumnType("int")
                        .HasColumnName("statecode");

                    b.Property<int?>("Stature")
                        .HasColumnType("int");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StrengthMedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SupportField")
                        .HasColumnType("int");

                    b.Property<int?>("SystemAccessStartDate")
                        .HasColumnType("int");

                    b.Property<int?>("SystemLastContactDate")
                        .HasColumnType("int");

                    b.Property<int?>("SystemLastSuccessfullContactDate")
                        .HasColumnType("int");

                    b.Property<int?>("SystemRegistrationEndDate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SystemTreatmentInativationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SystemTreatmentStartDate")
                        .HasColumnType("int");

                    b.Property<int?>("Telephone1")
                        .HasColumnType("int");

                    b.Property<int?>("Telephone1Caregiver")
                        .HasColumnType("int")
                        .HasColumnName("Telephone1_Caregiver");

                    b.Property<int?>("Telephone1Observation")
                        .HasColumnType("int");

                    b.Property<int?>("Telephone2")
                        .HasColumnType("int");

                    b.Property<int?>("Telephone2Observation")
                        .HasColumnType("int");

                    b.Property<int?>("Telephone3")
                        .HasColumnType("int");

                    b.Property<int?>("Telephone3Observation")
                        .HasColumnType("int");

                    b.Property<Guid?>("TreatmentCustomDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSituationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TreatmentStartDate")
                        .HasColumnType("int");

                    b.Property<Guid?>("TreatmentStatusDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TreatmentStopDate")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentTime")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<int?>("WillDoctorMakeNewPrescription")
                        .HasColumnType("int");

                    b.ToTable("BASE_TREATMENT", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BaseTreatmentaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("BASE_TREATMENTAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BemestarVoucherPendenteLaudo", b =>
                {
                    b.Property<string>("CódigoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Código_do_Paciente");

                    b.Property<DateTime>("DataProcedimento")
                        .HasColumnType("datetime2")
                        .HasColumnName("Data_Procedimento");

                    b.Property<string>("LocalProcedimento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Local_Procedimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NúmeroVoucherAzimute")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Número_Voucher_Azimute");

                    b.Property<string>("StatusAtualizado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status_atualizado");

                    b.Property<string>("TipoDeAnálise")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tipo_de_Análise");

                    b.ToTable("BEMESTAR_VOUCHER_PENDENTE_LAUDO", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BemestarVoucherPendenteLaudoaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("BEMESTAR_VOUCHER_PENDENTE_LAUDOAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Benefit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BenefitStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BenefitTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Custom1StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Custom2StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CustomBoolean1")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean2")
                        .HasColumnType("bit");

                    b.Property<string>("CustomString1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiagnosticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LocalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PreviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RealizationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("SourceStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Benefit");

                    b.HasIndex(new[] { "BenefitStatusStringMapId" }, "IX_BenefitStatusStringMapId");

                    b.HasIndex(new[] { "BenefitTypeStringMapId" }, "IX_BenefitTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "BenefitTypeStringMapId" }, "IX_BenefitTypeStringMapId"), 90);

                    b.HasIndex(new[] { "Custom1StringMapId" }, "IX_Custom1StringMapId");

                    b.HasIndex(new[] { "Custom2StringMapId" }, "IX_Custom2StringMapId");

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "LocalId" }, "IX_LocalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LocalId" }, "IX_LocalId"), 90);

                    b.HasIndex(new[] { "SourceStringMapId" }, "IX_SourceStringMapId");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId"), 90);

                    b.ToTable("Benefit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BenefitAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("BenefitAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BkpEntrenosReativado20200624", b =>
                {
                    b.Property<string>("AbbreviationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AccessTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BirthdateCaregiver")
                        .HasColumnType("datetime")
                        .HasColumnName("Birthdate_Caregiver");

                    b.Property<Guid?>("CaregiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CID");

                    b.Property<Guid?>("CivilStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ConsentDataShare")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveDiagnosticEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveDiagnosticPhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveLogistics")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<bool?>("ConsentToReceiveVisit")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToSendDataToDoctor")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ContractTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CPF");

                    b.Property<string>("CpfCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DiagnosticEmailConsentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiagnosticPhonecallConsentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorPrescriberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Dosage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("DosageUnitStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducationStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailAddress1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("GenderStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("GotAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GotAccessDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Haspatientusedmedicationbefore")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthCareProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HealthInsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("InfusionPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("KinshipStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LastNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("MainContactStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentCompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mobilephone1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModalityStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OnlyCareMigration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PatientDiagnosed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PatientDiagnosedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientSourceStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhaseStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pncode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PNCode");

                    b.Property<Guid?>("PosologeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreferredTimeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PrescriptionDueDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PrescriptionHasDateMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasDivergentDosage")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasDivergentInterval")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasLackOfDosage")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasLackOfInterval")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasMissingMedicationName")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasStampSignatureMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionIsValid")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrescriptionReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PrescriptionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrescriptionValidatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("PrescriptionValidationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProgramParticipationConsentDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ProgramParticipationDiagnosticConsent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProgramParticipationDiagnosticConsentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ProgramTime")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ReasonInactivationStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Rne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RNE");

                    b.Property<string>("SampleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUserCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SkypeUser_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Stature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StrengthMedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupportField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SystemAccessStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemLastContactDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemLastSuccessfullContactDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemRegistrationEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemTreatmentInativationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemTreatmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Telephone1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TreatmentCustomDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSituationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TreatmentStatusDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusDetailStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentStopDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TreatmentTime")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("WillDoctorMakeNewPrescription")
                        .HasColumnType("bit");

                    b.ToTable("BKP_ENTRENOS_REATIVADO_20200624", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.BkpEntrenosReativado20200624audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("BKP_ENTRENOS_REATIVADO_20200624Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CadastrosTakedaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("CadastrosTakedaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CadastrosTakedum", b =>
                {
                    b.Property<string>("AceitaParticiparDoPrograma")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Aceita Participar do Programa?");

                    b.Property<string>("AceitaReceberEMail")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Aceita receber E-mail?");

                    b.Property<string>("AceitaReceberLigações")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Aceita receber ligações?");

                    b.Property<string>("AceitaReceberMateriais")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Aceita receber materiais?");

                    b.Property<string>("AceiteWhatsApp")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ConsentimentoLgpd")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Consentimento LGPD");

                    b.Property<string>("ConsentimentoLgpdMedico")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Consentimento LGPD Medico");

                    b.Property<string>("Consultor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CódigoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Código do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DataAceitaReceberEMail")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data aceita receber E-mail");

                    b.Property<DateTime?>("DataAceitaReceberMateriais")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data aceita receber materiais");

                    b.Property<DateTime?>("DataAceiteParticiparDoPrograma")
                        .HasColumnType("datetime")
                        .HasColumnName("Data aceite participar do programa");

                    b.Property<DateTime?>("DataAceiteReceberLigações")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data aceite receber ligações");

                    b.Property<DateTime?>("DataDaInativação")
                        .HasColumnType("date")
                        .HasColumnName("Data da Inativação");

                    b.Property<DateTime?>("DataDeCadastro")
                        .HasColumnType("date")
                        .HasColumnName("Data de Cadastro");

                    b.Property<DateTime?>("DataDeNascimento")
                        .HasColumnType("date")
                        .HasColumnName("Data de Nascimento");

                    b.Property<DateTime?>("DataDoConsentimentoLgpd")
                        .HasColumnType("datetime")
                        .HasColumnName("Data do Consentimento LGPD");

                    b.Property<DateTime?>("DataDoConsentimentoLgpdMedico")
                        .HasColumnType("date")
                        .HasColumnName("Data do Consentimento LGPD Medico");

                    b.Property<DateTime?>("DataPrescricao")
                        .HasColumnType("date");

                    b.Property<string>("DetalheDoStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Detalhe do status")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Email2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailMedico1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailMedico2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Estado do paciente");

                    b.Property<string>("FaixaEtária")
                        .IsRequired()
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)")
                        .HasColumnName("Faixa Etária");

                    b.Property<string>("FaseAtual")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Fase Atual")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("GrauDeHemofilia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("Modalidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoDaInativação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Motivo da Inativação")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeDoMedicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Nome do medicamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeDoMédico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Nome do Médico")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomePaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OrigemConsentimento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Origem Consentimento");

                    b.Property<string>("OrigemConsentimentoMedico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Origem Consentimento Medico");

                    b.Property<string>("OrigemPaciente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Origem Paciente");

                    b.Property<string>("Patologia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Programa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("RegiaoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SePossuiPrescricao")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("SePossuiPrescricaoAnexada")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UfPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UF Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Ufcrm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UFCRM")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("CadastrosTakeda");
                });

            modelBuilder.Entity("Care.Api.Models.CalendarScheduled", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AllDay")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScheduleTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScheduleTypeStringMapStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ScheduleTypeStringMap_StringMapId");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CalendarScheduled");

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "ScheduleTypeStringMapStringMapId" }, "IX_ScheduleTypeStringMap_StringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ScheduleTypeStringMapStringMapId" }, "IX_ScheduleTypeStringMap_StringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "VisitId" }, "IX_VisitId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VisitId" }, "IX_VisitId"), 90);

                    b.ToTable("CalendarScheduled", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CalendarScheduledAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("CalendarScheduledAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateScheduledEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateScheduledStart")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NumberOfHealthProfessional")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Campaign");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    b.HasIndex(new[] { "StatusStringMapId" }, "IX_StatusStringMapId");

                    b.ToTable("Campaign", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CampaignAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("CampaignAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CampaignHealthProfessionalAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("CampaignHealthProfessionalAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Caregiver", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CivilStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EducationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("GenderStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("KinshipStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OccupationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Stature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Caregiver");

                    b.HasIndex(new[] { "CivilStatusStringMapId" }, "IX_CivilStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CivilStatusStringMapId" }, "IX_CivilStatusStringMapId"), 90);

                    b.HasIndex(new[] { "EducationStringMapId" }, "IX_EducationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EducationStringMapId" }, "IX_EducationStringMapId"), 90);

                    b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "KinshipStringMapId" }, "IX_KinshipStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "KinshipStringMapId" }, "IX_KinshipStringMapId"), 90);

                    b.HasIndex(new[] { "OccupationId" }, "IX_OccupationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OccupationId" }, "IX_OccupationId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Caregiver", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CaregiverAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("CaregiverAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CargaMedicoConsultor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CITY")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Consultor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CONSULTOR")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Crmmedico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CRMMEDICO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Crmstate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CRMSTATE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MEDICO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("STATE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("USUARIO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK__CargaMed__3214EC2751949C76");

                    b.ToTable("CargaMedicoConsultor", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CargaMedicoConsultorAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("CargaMedicoConsultorAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ChatTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OperatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OriginRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Chat");

                    b.HasIndex(new[] { "ChatTypeStringMapId" }, "IX_ChatTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ChatTypeStringMapId" }, "IX_ChatTypeStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "OperatorId" }, "IX_OperatorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OperatorId" }, "IX_OperatorId"), 90);

                    b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ChatAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ChatAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ChatDialog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChatId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ChatDialogs");

                    b.HasIndex(new[] { "ChatId" }, "IX_ChatId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ChatId" }, "IX_ChatId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("ChatDialogs");
                });

            modelBuilder.Entity("Care.Api.Models.ChatDialogsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ChatDialogsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ClinicasImport", b =>
                {
                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CNPJ");

                    b.Property<int>("ColunaIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColunaIdentity"));

                    b.Property<string>("Doenca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DOENCA");

                    b.Property<string>("Procedimento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PROCEDIMENTO");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Clinicas_Import", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ClinicasImport2", b =>
                {
                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CNPJ");

                    b.Property<string>("Doenca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DOENCA");

                    b.Property<string>("Procedimento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PROCEDIMENTO");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TIPO");

                    b.ToTable("Clinicas_Import2", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ClinicasImport2Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("Clinicas_Import2Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ClinicasImportAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("Clinicas_ImportAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ClinicasInfusaoImport", b =>
                {
                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CNPJ");

                    b.Property<string>("Doenca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DOENCA");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TIPO");

                    b.ToTable("Clinicas_Infusao_Import", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ClinicasInfusaoImportAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("Clinicas_Infusao_ImportAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommunicationTypeByProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("FromId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OriginRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ToId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VisitRequest")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Communication");

                    b.HasIndex(new[] { "CommunicationTypeByProgramId" }, "IX_CommunicationTypeByProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CommunicationTypeByProgramId" }, "IX_CommunicationTypeByProgramId"), 90);

                    b.HasIndex(new[] { "FromId" }, "IX_FromId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FromId" }, "IX_FromId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "ToId" }, "IX_ToId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ToId" }, "IX_ToId"), 90);

                    b.ToTable("Communication", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CommunicationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("CommunicationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CommunicationTypeByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CommunicationTypeByProgram");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("CommunicationTypeByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CommunicationTypeByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("CommunicationTypeByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CommunicationTypeByProgramHealthProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("CommunicationTypeByProgramHealthProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Configuration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Configuration");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ConfigurationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ConfigurationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Workschedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Contact");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ContactAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ContactAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CoverageArea", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeliveryTime")
                        .HasColumnType("int");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PostalCodeCityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostalCodeStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostalcodeEndId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostalcodeStartId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VipserviceZone")
                        .HasColumnType("bit")
                        .HasColumnName("VIPServiceZone");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CoverageArea");

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "PostalCodeCityId" }, "IX_PostalCodeCityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalCodeCityId" }, "IX_PostalCodeCityId"), 90);

                    b.HasIndex(new[] { "PostalCodeStateId" }, "IX_PostalCodeStateId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalCodeStateId" }, "IX_PostalCodeStateId"), 90);

                    b.HasIndex(new[] { "PostalcodeEndId" }, "IX_PostalcodeEndId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalcodeEndId" }, "IX_PostalcodeEndId"), 90);

                    b.HasIndex(new[] { "PostalcodeStartId" }, "IX_PostalcodeStartId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalcodeStartId" }, "IX_PostalcodeStartId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("CoverageArea", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CoverageAreaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("CoverageAreaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("AddressTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaregiverId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("PrincipalAddress")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.CustomerAddress");

                    b.HasIndex(new[] { "AddressTypeStringMapId" }, "IX_AddressTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AddressTypeStringMapId" }, "IX_AddressTypeStringMapId"), 90);

                    b.HasIndex(new[] { "CaregiverId" }, "IX_CaregiverId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaregiverId" }, "IX_CaregiverId"), 90);

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("CustomerAddress", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.CustomerAddressAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("CustomerAddressAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DashboardAstella", b =>
                {
                    b.Property<string>("AccessStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CodigoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DataLigacao")
                        .HasColumnType("datetime");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FormaDeAcesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Glosas")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<int?>("LigacaoAtiva")
                        .HasColumnType("int");

                    b.Property<int?>("LigacaoReceptiva")
                        .HasColumnType("int");

                    b.Property<string>("LocalDeAcesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OperadoraDeSaude")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PerfilPaciente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int?>("TempoEmAcessoEmDias")
                        .HasColumnType("int");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Ufmedico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UFMedico")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasIndex(new[] { "TableId" }, "ClusteredIndex-20200507-145503")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "TableId" }, "ClusteredIndex-20200507-145503"));

                    b.ToTable("DASHBOARD_ASTELLAS", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DashboardAstellasaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("DASHBOARD_ASTELLASAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Diagnostic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave primária da tabela");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela Account onde indica qual é o local de tratamento");

                    b.Property<Guid?>("AccountSettingsByProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Cidade do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCityPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AddressCity_Patient");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Informações complementares do endereço do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("País do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Bairro do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Logradouro do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Número da residência do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("CEP do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("UF da localidade do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressStatePatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AddressState_Patient");

                    b.Property<Guid?>("AddressTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela string map para o tipo de endereço");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasComment("Idade do paciente");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime")
                        .HasComment("Data de aniversário do paciente");

                    b.Property<DateTime?>("BirthdateCaregiver")
                        .HasColumnType("datetime")
                        .HasColumnName("Birthdate_Caregiver")
                        .HasComment("Aniversário do cuidador do paciente");

                    b.Property<DateTime?>("BlockReturnDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CaregiverId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela Caregiver, que indica qual é o cuidador do paciente");

                    b.Property<Guid?>("CategoryOfExamsStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ConsentAccreditedLaboratory")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentFormCompleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentLgpd")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentLGPD");

                    b.Property<DateTime?>("ConsentLgpddate")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentLGPDDate");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveLogistics")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<bool?>("ConsentToSendDataToDoctor")
                        .HasColumnType("bit");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF")
                        .HasComment("CPF do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CpfCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF_Caregiver")
                        .HasComment("CPF do cuidador")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela User, indica qual usuário que inseriu o registro no sistema");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nome do usuário que inseriu o registro no sistema.")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Data de criação do registro no banco de dados");

                    b.Property<bool?>("CustomBoolean1")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean2")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean3")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean4")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean5")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean6")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean7")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateLogisticalCollection")
                        .HasColumnType("datetime");

                    b.Property<string>("DeclarationInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela User, indica qual usuário deletou o registro no sistema");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nome do usuário que deletou o registro no sistema.")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime")
                        .HasComment("Data de inativação do registro no banco de dados");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiagnosticStatusDetailStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela StringMap, indica qual o SubStatus do tratamento");

                    b.Property<Guid?>("DiagnosticStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela StringMap, indica qual status de andamento do diagnóstico");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("chave estrangeira da tabela Disease, que indica qual é a doença diagnosticada do paciente");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("chave estrangeira da tabela Doctor, que indica qual médico diagnosticou este paciente");

                    b.Property<Guid?>("DoctorPrescriberId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorsEmailforExamResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Endereço de email 1 do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailAddress1_Caregiver")
                        .HasComment("Endereço de email 1 do cuidador do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Endereço de email 2 do paciente");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("EthnicityStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Primeiro nome do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName_Caregiver")
                        .HasComment("Primeiro nome do cuidador do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("FridayStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Codigo alfanumérico de identificação do diagnóstico no sistema")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FromSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FromSystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nome completo do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName_Caregiver")
                        .HasComment("Nome completo do cuidador do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("GenderStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela StringMap, indica qual o gênero do paciente.");

                    b.Property<bool?>("HasKit")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasOps")
                        .HasColumnType("bit")
                        .HasColumnName("HasOPS");

                    b.Property<bool?>("HasProgramMaterial")
                        .HasColumnType("bit");

                    b.Property<bool?>("HaveMedicalRequesTofHlab27orMagneticResonance")
                        .HasColumnType("bit")
                        .HasColumnName("HaveMedicalRequesTofHLAB27OrMagneticResonance");

                    b.Property<Guid?>("HealthCareProviderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("chave estrangeira da tabela HealthProgram, que indica a qual programa o paciente participa");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Codigo alfanumérico de identificação do diagnóstico no sistema, também utilizado para códigos provenientes de importação de dados")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("InTreatment")
                        .HasColumnType("bit");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("campo para informações internas.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasComment("Campo que indica se o diagnóstico está deletado");

                    b.Property<bool?>("IsQualified")
                        .HasColumnType("bit");

                    b.Property<Guid?>("KinshipStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela StringMap, indica qual o grau de parentesco entre o cuidador e o paciente.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Ultimo nome do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LastNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName_Caregiver")
                        .HasComment("Ultimo nome do cuidador do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("MainContactStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da stringmap onde indica se o contato cadastrado é o contato principal");

                    b.Property<Guid?>("MedicalSpecialtyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentCompetitorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela MedicamentCompetitor onde indica qual medicamento é utilizado para o tratamento.");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone móvel 1 do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mobilephone1_Caregiver")
                        .HasComment("Telefone móvel 1 do cuidador do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone móvel de observação 1 do paciente");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone móvel 2 do paciente");

                    b.Property<string>("Mobilephone2Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone móvel de observação 2 do paciente");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone móvel 3  do paciente");

                    b.Property<string>("Mobilephone3Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone móvel de observação 4 do paciente");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela User, indica qual usuário que alterou o registro no sistema");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nome do usuário que alterou o registro no sistema.")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Data de modificação do registro no banco de dados");

                    b.Property<Guid?>("MondayStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MultipleExamsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultipleMedicamentCompetitor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Campo que indica qual programa o paciente participa")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OtherTypeExams")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela User, indica qual usuário é o dono do registro");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nome do usuário que é o dono do registro.")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("PatientDiagnosed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PatientDiagnosedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("chave estrangeira da tabela Patient, que indica qual paciente está vinculado a este diagnóstido");

                    b.Property<Guid?>("PatientSourceStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("chave estrangeira da tabela StringMap, indica qual meio de contato da operação e o paciente para tratar de assuntos do programa");

                    b.Property<bool?>("PatientUsedAnotherMedication")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PreferredTimeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da tabela StringMap onde indica a preferência do paciente para realizar o tratamento.");

                    b.Property<DateTime?>("PrescriptionDueDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PrescriptionHasDateMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasDivergentInterval")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasLackOfInterval")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasStampSignatureMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionIsValid")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrescriptionReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PrescriptionStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrescriptionValidatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrescriptionValidationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PreviousMedicamentCompetitorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PreviousTreatmentAmount")
                        .HasColumnType("int");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit")
                        .HasComment("Campo que atesta o consentimento do paciente a participar do programa");

                    b.Property<string>("ProtocolNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Campo para detalhar quais os motivos da exclusão do diagnóstico.")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Campo para detalhar quais os motivos da inativação do diagnóstico.");

                    b.Property<bool?>("ReportReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReportReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReturnDateContact")
                        .HasColumnType("datetime");

                    b.Property<string>("Rne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RNE")
                        .HasComment("Campo para inserir o Registro Nacional Unico, para pacientes de origem estrangeira.");

                    b.Property<Guid?>("SaturdayStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SkypeUserCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SkypeUser_Caregiver");

                    b.Property<Guid?>("SourceConsentStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpecificTimeFriday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificTimeMonday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificTimeSaturday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificTimeThursday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificTimeTuesday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificTimeWednesday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StageOfDiseaseStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit")
                        .HasComment("Campo que indica se o diagnóstico está ativo.");

                    b.Property<decimal?>("Stature")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("Campo onde é informado a altura do paciente");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Chave estrangeira da stringmap onde descreve qual o status do diagnóstico.");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone 1 do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Telephone1_Caregiver")
                        .HasComment("Telefone 1 do cuidador do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone de observação 1 do paciente");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone 2 do paciente");

                    b.Property<string>("Telephone2Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone de observação 2 do paciente");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone 3 do paciente");

                    b.Property<string>("Telephone3Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Telefone de observação 3 do paciente");

                    b.Property<Guid?>("ThursdayStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TransitDateToLaboratory")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TreatmentLine2StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentLineStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TuesdayStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TypeOfAnalysisStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WednesdayStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("Campo onde é informado o peso do paciente");

                    b.Property<bool?>("WillDoctorMakeNewPrescription")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Diagnostic");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "AccountSettingsByProgramId" }, "IX_AccountSettingsByProgramId");

                    b.HasIndex(new[] { "AddressTypeStringMapId" }, "IX_AddressTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AddressTypeStringMapId" }, "IX_AddressTypeStringMapId"), 90);

                    b.HasIndex(new[] { "CaregiverId" }, "IX_CaregiverId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaregiverId" }, "IX_CaregiverId"), 90);

                    b.HasIndex(new[] { "CategoryOfExamsStringMapId" }, "IX_CategoryOfExamsStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CategoryOfExamsStringMapId" }, "IX_CategoryOfExamsStringMapId"), 90);

                    b.HasIndex(new[] { "DiagnosticStatusDetailStringMapId" }, "IX_DiagnosticStatusDetailStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticStatusDetailStringMapId" }, "IX_DiagnosticStatusDetailStringMapId"), 90);

                    b.HasIndex(new[] { "DiagnosticStatusStringMapId" }, "IX_DiagnosticStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticStatusStringMapId" }, "IX_DiagnosticStatusStringMapId"), 90);

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "DoctorPrescriberId" }, "IX_DoctorPrescriberId");

                    b.HasIndex(new[] { "EthnicityStringMapId" }, "IX_EthnicityStringMapId");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "FridayStringMapId" }, "IX_FridayStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FridayStringMapId" }, "IX_FridayStringMapId"), 90);

                    b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId"), 90);

                    b.HasIndex(new[] { "HealthCareProviderId" }, "IX_HealthCareProviderId");

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "KinshipStringMapId" }, "IX_KinshipStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "KinshipStringMapId" }, "IX_KinshipStringMapId"), 90);

                    b.HasIndex(new[] { "MainContactStringMapId" }, "IX_MainContactStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MainContactStringMapId" }, "IX_MainContactStringMapId"), 90);

                    b.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId"), 90);

                    b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId"), 90);

                    b.HasIndex(new[] { "MondayStringMapId" }, "IX_MondayStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MondayStringMapId" }, "IX_MondayStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_DIAGNOSTIC_1");

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_DIAGNOSTIC_20");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_Diagnostic");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_Diagnostic"), 90);

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "PatientSourceStringMapId" }, "IX_PatientSourceStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientSourceStringMapId" }, "IX_PatientSourceStringMapId"), 90);

                    b.HasIndex(new[] { "PreferredTimeStringMapId" }, "IX_PreferredTimeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PreferredTimeStringMapId" }, "IX_PreferredTimeStringMapId"), 90);

                    b.HasIndex(new[] { "PrescriptionStatusStringMapId" }, "IX_PrescriptionStatusStringMapId");

                    b.HasIndex(new[] { "PreviousMedicamentCompetitorId" }, "IX_PreviousMedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PreviousMedicamentCompetitorId" }, "IX_PreviousMedicamentCompetitorId"), 90);

                    b.HasIndex(new[] { "SaturdayStringMapId" }, "IX_SaturdayStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SaturdayStringMapId" }, "IX_SaturdayStringMapId"), 90);

                    b.HasIndex(new[] { "SourceConsentStringMapId" }, "IX_SourceConsentStringMapId");

                    b.HasIndex(new[] { "StageOfDiseaseStringMapId" }, "IX_StageOfDiseaseStringMapId");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "ThursdayStringMapId" }, "IX_ThursdayStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ThursdayStringMapId" }, "IX_ThursdayStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentLine2StringMapId" }, "IX_TreatmentLine2StringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentLine2StringMapId" }, "IX_TreatmentLine2StringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentLineStringMapId" }, "IX_TreatmentLineStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentLineStringMapId" }, "IX_TreatmentLineStringMapId"), 90);

                    b.HasIndex(new[] { "TuesdayStringMapId" }, "IX_TuesdayStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TuesdayStringMapId" }, "IX_TuesdayStringMapId"), 90);

                    b.HasIndex(new[] { "TypeOfAnalysisStringMapId" }, "IX_TypeOfAnalysisStringMapId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId"), 90);

                    b.HasIndex(new[] { "WednesdayStringMapId" }, "IX_WednesdayStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "WednesdayStringMapId" }, "IX_WednesdayStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "ix_nc_diagnostic_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "ix_nc_diagnostic_2"), 90);

                    b.ToTable("Diagnostic", null, t =>
                        {
                            t.HasComment("Tabela de diagnósticos ");

                            t.HasTrigger("TR_UpdateFriendlyCodeGilead");
                        });
                });

            modelBuilder.Entity("Care.Api.Models.DiagnosticAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("DiagnosticAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DiagnosticExam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiagnosticStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LocalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("NeedCaptation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("RealizationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleForReceiving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.DiagnosticExam");

                    b.HasIndex(new[] { "DiagnosticStatusStringMapId" }, "IX_DiagnosticStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticStatusStringMapId" }, "IX_DiagnosticStatusStringMapId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "ExamTypeStringMapId" }, "IX_ExamTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamTypeStringMapId" }, "IX_ExamTypeStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "LocalId" }, "IX_LocalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LocalId" }, "IX_LocalId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId"), 90);

                    b.ToTable("DiagnosticExam", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DiagnosticExamAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("DiagnosticExamAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessExam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Disease");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Disease", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DiseaseAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("DiseaseAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ClinicId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("GenderStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LicenseState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("LicenseStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LicenseTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Doctor");

                    b.HasIndex(new[] { "ClinicId" }, "IX_ClinicId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ClinicId" }, "IX_ClinicId"), 90);

                    b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId"), 90);

                    b.HasIndex(new[] { "LicenseStatusStringMapId" }, "IX_LicenseStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LicenseStatusStringMapId" }, "IX_LicenseStatusStringMapId"), 90);

                    b.HasIndex(new[] { "LicenseTypeStringMapId" }, "IX_LicenseTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LicenseTypeStringMapId" }, "IX_LicenseTypeStringMapId"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_DOCTOR_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_DOCTOR_2"), 90);

                    b.HasIndex(new[] { "Name" }, "IX_NC_DOCTOR_3");

                    b.HasIndex(new[] { "FullName" }, "IX_NC_Doctor");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FullName" }, "IX_NC_Doctor"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("DoctorAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizeSmsstringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorizeSMSStringMapId");

                    b.Property<Guid?>("AuthorizeVisitStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorizesTitrationofDosageStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConfirmPersonalInformation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentLgpd")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentLGPD");

                    b.Property<DateTime?>("ConsentLgpddate")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentLGPDDate");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<Guid?>("ConsultantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosticConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("DiagnosticConsent2")
                        .HasColumnType("bit");

                    b.Property<string>("DiagnosticConsentComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsDiagnosticConsentApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProgramParticipationApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProgramParticipationConsent2")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProgramParticipationConsent3")
                        .HasColumnType("bit");

                    b.Property<string>("ProgramParticipationConsentComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProgramParticipationConsentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProgramRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestDiagnosticConsentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SourceConsentStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.DoctorByProgram");

                    b.HasIndex(new[] { "AuthorizeSmsstringMapId" }, "IX_AuthorizeSMSStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AuthorizeSmsstringMapId" }, "IX_AuthorizeSMSStringMapId"), 90);

                    b.HasIndex(new[] { "AuthorizeVisitStringMapId" }, "IX_AuthorizeVisitStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AuthorizeVisitStringMapId" }, "IX_AuthorizeVisitStringMapId"), 90);

                    b.HasIndex(new[] { "AuthorizesTitrationofDosageStringMapId" }, "IX_AuthorizesTitrationofDosageStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AuthorizesTitrationofDosageStringMapId" }, "IX_AuthorizesTitrationofDosageStringMapId"), 90);

                    b.HasIndex(new[] { "ConsultantId" }, "IX_ConsultantId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ConsultantId" }, "IX_ConsultantId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "SourceConsentStringMapId" }, "IX_SourceConsentStringMapId");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "SystemUserId" }, "IX_SystemUserId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SystemUserId" }, "IX_SystemUserId"), 90);

                    b.ToTable("DoctorByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgramAccountAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("DoctorByProgramAccountAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("DoctorByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgramBkp02122021", b =>
                {
                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizeSmsstringMapId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorizeSMSStringMapId");

                    b.Property<Guid?>("AuthorizeVisitStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorizesTitrationofDosageStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConfirmPersonalInformation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentLgpd")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentLGPD");

                    b.Property<DateTime?>("ConsentLgpddate")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentLGPDDate");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosticConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("DiagnosticConsent2")
                        .HasColumnType("bit");

                    b.Property<string>("DiagnosticConsentComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsDiagnosticConsentApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProgramParticipationApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProgramParticipationConsent2")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProgramParticipationConsent3")
                        .HasColumnType("bit");

                    b.Property<string>("ProgramParticipationConsentComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProgramParticipationConsentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProgramRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestDiagnosticConsentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SourceConsentStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("DoctorByProgram_bkp02122021", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgramBkp02122021Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("DoctorByProgram_bkp02122021Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgramBkp05112021", b =>
                {
                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizeSmsstringMapId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorizeSMSStringMapId");

                    b.Property<Guid?>("AuthorizeVisitStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorizesTitrationofDosageStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConfirmPersonalInformation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentLgpd")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentLGPD");

                    b.Property<DateTime?>("ConsentLgpddate")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentLGPDDate");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosticConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("DiagnosticConsent2")
                        .HasColumnType("bit");

                    b.Property<string>("DiagnosticConsentComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsDiagnosticConsentApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProgramParticipationApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProgramParticipationConsent2")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProgramParticipationConsent3")
                        .HasColumnType("bit");

                    b.Property<string>("ProgramParticipationConsentComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProgramParticipationConsentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProgramRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestDiagnosticConsentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SourceConsentStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("DoctorByProgram_bkp_05_11_2021", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgramBkp05112021audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("DoctorByProgram_bkp_05_11_2021Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgramBkp231121", b =>
                {
                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizeSmsstringMapId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorizeSMSStringMapId");

                    b.Property<Guid?>("AuthorizeVisitStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorizesTitrationofDosageStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConfirmPersonalInformation")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentLgpd")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentLGPD");

                    b.Property<DateTime?>("ConsentLgpddate")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentLGPDDate");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosticConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("DiagnosticConsent2")
                        .HasColumnType("bit");

                    b.Property<string>("DiagnosticConsentComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsDiagnosticConsentApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProgramParticipationApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProgramParticipationConsent2")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProgramParticipationConsent3")
                        .HasColumnType("bit");

                    b.Property<string>("ProgramParticipationConsentComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProgramParticipationConsentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProgramRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestDiagnosticConsentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SourceConsentStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("DoctorByProgram_Bkp231121", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgramBkp231121Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("DoctorByProgram_Bkp231121Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorMedicalSpecialtyAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("DoctorMedicalSpecialtyAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorsRepresentative", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ManagerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.DoctorsRepresentative");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "ManagerId" }, "IX_ManagerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ManagerId" }, "IX_ManagerId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_DoctorsRepresentative");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_DoctorsRepresentative"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_DoctorsRepresentative_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_DoctorsRepresentative_2"), 90);

                    b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("DoctorsRepresentative", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.DoctorsRepresentativeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("DoctorsRepresentativeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ElmahError", b =>
                {
                    b.Property<Guid>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AllXml")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("ErrorId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ErrorId"), false);

                    b.HasIndex(new[] { "Application", "TimeUtc", "Sequence" }, "IX_ELMAH_Error_App_Time_Seq")
                        .IsDescending(false, true, true);

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Application", "TimeUtc", "Sequence" }, "IX_ELMAH_Error_App_Time_Seq"), 90);

                    b.ToTable("ELMAH_Error", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ElmahErrorAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ELMAH_ErrorAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Ccc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EmailBoxSettingId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("LastAttempt")
                        .HasColumnType("datetime");

                    b.Property<string>("MessageError")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OriginRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SendedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Email");

                    b.HasIndex(new[] { "EmailBoxSettingId" }, "IX_EmailBoxSettingId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EmailBoxSettingId" }, "IX_EmailBoxSettingId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Email", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.EmailAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("EmailAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.EmailBoxSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smtp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.EmailBoxSetting");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("EmailBoxSetting", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.EmailBoxSettingAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("EmailBoxSettingAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.EntityConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("HasCalendar")
                        .HasColumnType("bit");

                    b.Property<int?>("HasMap")
                        .HasColumnType("int");

                    b.Property<bool>("HasSurvey")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.EntityConfiguration");

                    b.ToTable("EntityConfiguration", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.EntityConfigurationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("EntityConfigurationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.EntityMetadatum", b =>
                {
                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityAbreviationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("EntityConfigurationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EntityTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("IconMenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("IsActivityEntity")
                        .HasColumnType("bit");

                    b.Property<int?>("MenuDisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("NoActivities")
                        .HasColumnType("bit");

                    b.HasKey("EntityMetadataId")
                        .HasName("PK_dbo.EntityMetadata");

                    b.HasIndex(new[] { "EntityConfigurationId" }, "IX_EntityConfigurationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityConfigurationId" }, "IX_EntityConfigurationId"), 90);

                    b.HasIndex(new[] { "EntityName", "EntityTypeCode" }, "idx_EntityName");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityName", "EntityTypeCode" }, "idx_EntityName"), 90);

                    b.ToTable("EntityMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Especialidade", b =>
                {
                    b.Property<Guid?>("Doctorid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("doctorid");

                    b.Property<string>("Especialidade1")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Especialidade");

                    b.Property<Guid?>("Healthprogramid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("healthprogramid");

                    b.ToTable("Especialidade", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.EspecialidadeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("EspecialidadeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ConsentCloseDiagnostic")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentEligibilityCriteria")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentResponsibility")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentSample")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentTermReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConsentTermReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentTermValidated")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentTermValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsentTermValidatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentUseImatinibNilotinib")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateIssueReport")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfApproval")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReturnDoctor")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiagnosticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("DoctorHasFilterPaper")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueEticket")
                        .HasColumnType("datetime")
                        .HasColumnName("DueETicket");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Eticket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ETicket");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpectedDateToSend")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasDiagnosis")
                        .HasColumnType("bit");

                    b.Property<bool?>("HaveDateReturnDoctor")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LocalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsSchedule_Id");

                    b.Property<Guid?>("LogisticsScheduleId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsScheduleId");

                    b.Property<Guid?>("LogisticsScheduleItemId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("MedicationUseDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("NeedCaptation")
                        .HasColumnType("bit");

                    b.Property<int>("NumberofTubes")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnershipLevelStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RealizationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReportSent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReschedulingReasonStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResultStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ScheduleSourceStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoucherByEmail")
                        .HasColumnType("bit");

                    b.Property<Guid?>("VoucherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoucherReceived")
                        .HasColumnType("bit");

                    b.Property<bool?>("VoucherValidated")
                        .HasColumnType("bit");

                    b.Property<string>("VoucherValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoucherValidatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("WithdrawalPreferenceStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Exam");

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "ExamStatusStringMapId" }, "IX_ExamStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamStatusStringMapId" }, "IX_ExamStatusStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "LocalId" }, "IX_LocalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LocalId" }, "IX_LocalId"), 90);

                    b.HasIndex(new[] { "LogisticsScheduleId1" }, "IX_LogisticsScheduleId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsScheduleId1" }, "IX_LogisticsScheduleId"), 90);

                    b.HasIndex(new[] { "LogisticsScheduleItemId" }, "IX_LogisticsScheduleItemId");

                    b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsSchedule_Id");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsSchedule_Id"), 90);

                    b.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_EXAM_1");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_EXAM_10");

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "StateCode" }, "IX_NC_EXAM_11");

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_EXAM_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_EXAM_2"), 90);

                    b.HasIndex(new[] { "IsDeleted", "StateCode", "TreatmentId" }, "IX_NC_EXAM_3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted", "StateCode", "TreatmentId" }, "IX_NC_EXAM_3"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_EXAM_5");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_EXAM_7");

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_EXAM_8");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_EXAM_9");

                    b.HasIndex(new[] { "ExamDefinitionId", "IsDeleted" }, "IX_NC_Exam");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId", "IsDeleted" }, "IX_NC_Exam"), 90);

                    b.HasIndex(new[] { "OwnershipLevelStringMapId" }, "IX_OwnershipLevelStringMapId");

                    b.HasIndex(new[] { "ReschedulingReasonStringMapId" }, "IX_ReschedulingReasonStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ReschedulingReasonStringMapId" }, "IX_ReschedulingReasonStringMapId"), 90);

                    b.HasIndex(new[] { "ResultStringMapId" }, "IX_ResultStringMapId");

                    b.HasIndex(new[] { "ScheduleSourceStringMapId" }, "IX_ScheduleSourceStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ScheduleSourceStringMapId" }, "IX_ScheduleSourceStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId"), 90);

                    b.HasIndex(new[] { "WithdrawalPreferenceStringMapId" }, "IX_WithdrawalPreferenceStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "WithdrawalPreferenceStringMapId" }, "IX_WithdrawalPreferenceStringMapId"), 90);

                    b.HasIndex(new[] { "IsDeleted", "StateCode" }, "ix_nc_Exam_4");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted", "StateCode" }, "ix_nc_Exam_4"), 90);

                    b.HasIndex(new[] { "ExamDefinitionId", "IsDeleted", "StateCode" }, "ix_nc_exam_6");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId", "IsDeleted", "StateCode" }, "ix_nc_exam_6"), 90);

                    b.ToTable("Exam", null, t =>
                        {
                            t.HasTrigger("TR_ExamStatusHistory");

                            t.HasTrigger("TR_ExamUpdateVoucherIdInLogisticsSchedule");
                        });
                });

            modelBuilder.Entity("Care.Api.Models.ExamAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ExamAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamBkp190422", b =>
                {
                    b.Property<bool?>("ConsentCloseDiagnostic")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentEligibilityCriteria")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentResponsibility")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentSample")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentTermReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConsentTermReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentTermValidated")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentTermValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsentTermValidatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentUseImatinibNilotinib")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateIssueReport")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfApproval")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReturnDoctor")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("DoctorHasFilterPaper")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueEticket")
                        .HasColumnType("datetime")
                        .HasColumnName("DueETicket");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Eticket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ETicket");

                    b.Property<Guid?>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpectedDateToSend")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasDiagnosis")
                        .HasColumnType("bit");

                    b.Property<bool?>("HaveDateReturnDoctor")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsSchedule_Id");

                    b.Property<Guid?>("LogisticsScheduleId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsScheduleId");

                    b.Property<Guid?>("LogisticsScheduleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("MedicationUseDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("NeedCaptation")
                        .HasColumnType("bit");

                    b.Property<int>("NumberofTubes")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnershipLevelStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RealizationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReportSent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReschedulingReasonStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResultStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ScheduleSourceStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoucherByEmail")
                        .HasColumnType("bit");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoucherReceived")
                        .HasColumnType("bit");

                    b.Property<bool?>("VoucherValidated")
                        .HasColumnType("bit");

                    b.Property<string>("VoucherValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoucherValidatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("WithdrawalPreferenceStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("Exam_BKP_19_04_22", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamBkp190422audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("Exam_BKP_19_04_22Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamBkp3011", b =>
                {
                    b.Property<bool?>("ConsentCloseDiagnostic")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentEligibilityCriteria")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentResponsibility")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentSample")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentTermReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConsentTermReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentTermValidated")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentTermValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsentTermValidatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentUseImatinibNilotinib")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateIssueReport")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfApproval")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReturnDoctor")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("DoctorHasFilterPaper")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueEticket")
                        .HasColumnType("datetime")
                        .HasColumnName("DueETicket");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Eticket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ETicket");

                    b.Property<Guid?>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpectedDateToSend")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasDiagnosis")
                        .HasColumnType("bit");

                    b.Property<bool?>("HaveDateReturnDoctor")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsSchedule_Id");

                    b.Property<Guid?>("LogisticsScheduleId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsScheduleId");

                    b.Property<Guid?>("LogisticsScheduleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("MedicationUseDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("NeedCaptation")
                        .HasColumnType("bit");

                    b.Property<int>("NumberofTubes")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnershipLevelStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RealizationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReportSent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReschedulingReasonStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResultStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ScheduleSourceStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoucherByEmail")
                        .HasColumnType("bit");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoucherReceived")
                        .HasColumnType("bit");

                    b.Property<bool?>("VoucherValidated")
                        .HasColumnType("bit");

                    b.Property<string>("VoucherValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoucherValidatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("WithdrawalPreferenceStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("Exam_BKP3011", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamBkp3011audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("Exam_BKP3011Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamBkpUpdtNivelSerico", b =>
                {
                    b.Property<bool?>("ConsentCloseDiagnostic")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentEligibilityCriteria")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentResponsibility")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentSample")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentTermReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConsentTermReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentTermValidated")
                        .HasColumnType("bit");

                    b.Property<string>("ConsentTermValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsentTermValidatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ConsentUseImatinibNilotinib")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateIssueReport")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfApproval")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReturnDoctor")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("DoctorHasFilterPaper")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueEticket")
                        .HasColumnType("datetime")
                        .HasColumnName("DueETicket");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Eticket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ETicket");

                    b.Property<Guid?>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpectedDateToSend")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasDiagnosis")
                        .HasColumnType("bit");

                    b.Property<bool?>("HaveDateReturnDoctor")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsSchedule_Id");

                    b.Property<Guid?>("LogisticsScheduleId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsScheduleId");

                    b.Property<Guid?>("LogisticsScheduleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("MedicationUseDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("NeedCaptation")
                        .HasColumnType("bit");

                    b.Property<int>("NumberofTubes")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnershipLevelStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RealizationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReportSent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReschedulingReasonStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResultStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ScheduleSourceStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoucherByEmail")
                        .HasColumnType("bit");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoucherReceived")
                        .HasColumnType("bit");

                    b.Property<bool?>("VoucherValidated")
                        .HasColumnType("bit");

                    b.Property<string>("VoucherValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VoucherValidatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("WithdrawalPreferenceStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("exam_BKP_updt_nivel_serico", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamBkpUpdtNivelSericoAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("exam_BKP_updt_nivel_sericoAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExamTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasLogisticsSchedule")
                        .HasColumnType("bit");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ExamDefinition");

                    b.HasIndex(new[] { "ExamTypeStringMapId" }, "IX_ExamTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamTypeStringMapId" }, "IX_ExamTypeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("ExamDefinition", null, t =>
                        {
                            t.HasTrigger("INTEGRA_EXAME_GE");

                            t.HasTrigger("INTEGRA_EXAME_GE_UPDATE");
                        });
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinitionAccountExamTypeByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ExamDefinitionAccountExamTypeByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinitionAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ExamDefinitionAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinitionExamAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ExamDefinitionExamAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinitionHealthProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ExamDefinitionHealthProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinitionSettingsByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnnualAmount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ExamPeriodicity")
                        .HasColumnType("int");

                    b.Property<int?>("ExamQuantity")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("LabManagementLastUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LabManagementLastUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LabManagementLastUserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LabManagementQuantityExamInternedPatient")
                        .HasColumnType("int");

                    b.Property<int?>("LabManagementQuantityExamNotInternedPatient")
                        .HasColumnType("int");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MounthlyAmount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ExamDefinitionSettingsByProgram");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    b.ToTable("ExamDefinitionSettingsByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinitionSettingsByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("ExamDefinitionSettingsByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinitionVoucherConfigurationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ExamDefinitionVoucherConfigurationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength();

                    b.Property<Guid?>("Examid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NewExamStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OldExamStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__ExamStat__3214EC0794EBDA8A");

                    b.ToTable("ExamStatusHistory", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ExamStatusHistoryAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("ExamStatusHistoryAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Feriado", b =>
                {
                    b.Property<short>("NrAno")
                        .HasColumnType("smallint")
                        .HasColumnName("Nr_Ano");

                    b.Property<short>("NrMes")
                        .HasColumnType("smallint")
                        .HasColumnName("Nr_Mes");

                    b.Property<short>("NrDia")
                        .HasColumnType("smallint")
                        .HasColumnName("Nr_Dia");

                    b.Property<string>("SgUf")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("Sg_UF")
                        .IsFixedLength();

                    b.Property<string>("DsFeriado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ds_Feriado");

                    b.Property<string>("TpFeriado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("Tp_Feriado")
                        .IsFixedLength();

                    b.HasKey("NrAno", "NrMes", "NrDia", "SgUf")
                        .HasName("Pk_Feriado");

                    b.ToTable("Feriado", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.FeriadoAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("FeriadoAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("BankAccountTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAgencyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("BankId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContactHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("GenderStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HiringTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("NurseProfessionalTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Pis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PIS")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProfessionalLicenseTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.HealthProfessional");

                    b.HasIndex(new[] { "BankAccountTypeStringMapId" }, "IX_BankAccountTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "BankAccountTypeStringMapId" }, "IX_BankAccountTypeStringMapId"), 90);

                    b.HasIndex(new[] { "BankId" }, "IX_BankId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "BankId" }, "IX_BankId"), 90);

                    b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId"), 90);

                    b.HasIndex(new[] { "HiringTypeStringMapId" }, "IX_HiringTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HiringTypeStringMapId" }, "IX_HiringTypeStringMapId"), 90);

                    b.HasIndex(new[] { "NurseProfessionalTypeStringMapId" }, "IX_NurseProfessionalTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "NurseProfessionalTypeStringMapId" }, "IX_NurseProfessionalTypeStringMapId"), 90);

                    b.HasIndex(new[] { "ProfessionalLicenseTypeStringMapId" }, "IX_ProfessionalLicenseTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ProfessionalLicenseTypeStringMapId" }, "IX_ProfessionalLicenseTypeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "IX_UserId"), 90);

                    b.ToTable("HealthProfessional", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessionalAccount", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId", "HealthProfessionalId");

                    b.ToTable("HealthProfessionalAccount", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessionalAccountAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProfessionalAccountAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessionalAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProfessionalAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessionalByProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ConsultantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveDateFinalDocument")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EffectiveDateInitialDocument")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("HasTraining")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IndicatedConsultantEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndicatedConsultantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("LocalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("NurceStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ValueAttendance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ValuePerKm")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ValuePerKM");

                    b.HasKey("Id")
                        .HasName("PK_dbo.HealthProfessionalByProgram");

                    b.HasIndex(new[] { "ConsultantId" }, "IX_ConsultantId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ConsultantId" }, "IX_ConsultantId"), 90);

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "LocalId" }, "IX_LocalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LocalId" }, "IX_LocalId"), 90);

                    b.HasIndex(new[] { "NurceStatusStringMapId" }, "IX_NurceStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "NurceStatusStringMapId" }, "IX_NurceStatusStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("HealthProfessionalByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessionalByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProfessionalByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessionalHealthProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProfessionalHealthProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessionalMedicalSpecialtyAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProfessionalMedicalSpecialtyAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AfternoonFinalHour")
                        .HasColumnType("int");

                    b.Property<int?>("AfternoonInitialHour")
                        .HasColumnType("int");

                    b.Property<Guid?>("AkkaActorsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DashBoardPageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosisByLogisticSchedule")
                        .HasColumnType("bit");

                    b.Property<int?>("EligibilityMinimumAge")
                        .HasColumnType("int");

                    b.Property<bool?>("EligibilityRequiresAttachmentPrescription")
                        .HasColumnType("bit");

                    b.Property<bool?>("EligibilityRequiresPrescription")
                        .HasColumnType("bit");

                    b.Property<int?>("EligibilitymaximumAge")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasAccess")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasAdhesion")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasDiagnosis")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasDiagnosisExams")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasExam")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasIncident")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasInfusion")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasInfusionExpiration")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLogistics")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasPeriodSubject")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasPharmacovigilance")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasPreRegistration")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasPurchase")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasRegister")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasTherapeuticHistory")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasTreatment")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasTreatmentCustomData")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasVisit")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasVisitSla")
                        .HasColumnType("bit")
                        .HasColumnName("HasVisitSLA");

                    b.Property<bool?>("HasVisitSurvey")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasVoucher")
                        .HasColumnType("bit");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("InfusionDaysToExpire")
                        .HasColumnType("int");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LogisticPartnerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MorningFinalHour")
                        .HasColumnType("int");

                    b.Property<int?>("MorningInitialHour")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("NeedBudgetToExams")
                        .HasColumnType("bit");

                    b.Property<decimal?>("NurseDefaultValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScriptNamespace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.HealthProgram");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "AkkaActorsId" }, "IX_AkkaActorsId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AkkaActorsId" }, "IX_AkkaActorsId"), 90);

                    b.HasIndex(new[] { "LogisticPartnerId" }, "IX_LogisticPartnerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticPartnerId" }, "IX_LogisticPartnerId"), 90);

                    b.HasIndex(new[] { "LogisticsTypeStringMapId" }, "IX_LogisticsTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsTypeStringMapId" }, "IX_LogisticsTypeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("HealthProgram", null, t =>
                        {
                            t.HasTrigger("INTEGRA_PROGRAMA_GE");
                        });
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramAccountAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProgramAccountAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramAccountBkp190422", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("HealthProgramAccount_BKP_19_04_22", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramAccountBkp190422audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("HealthProgramAccount_BKP_19_04_22Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsDiseaseSuspect")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuspectDiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.HealthProgramDisease");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "SuspectDiseaseId" }, "IX_SuspectDiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SuspectDiseaseId" }, "IX_SuspectDiseaseId"), 90);

                    b.ToTable("HealthProgramDisease", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramDiseaseAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProgramDiseaseAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramDiseaseExam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CoveredByProgram")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramDiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HealthProgramDisease_Id");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.HealthProgramDiseaseExam");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "ExamTypeStringMapId" }, "IX_ExamTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamTypeStringMapId" }, "IX_ExamTypeStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramDiseaseId" }, "IX_HealthProgramDisease_Id");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramDiseaseId" }, "IX_HealthProgramDisease_Id"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("HealthProgramDiseaseExam", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramDiseaseExamAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProgramDiseaseExamAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramExamByEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.HealthProgramExamByEntity");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("HealthProgramExamByEntity", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramExamByEntityAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProgramExamByEntityAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramMedicamentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProgramMedicamentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramServiceTypeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProgramServiceTypeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramTemplateSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Ccc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EmailBoxSettingId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityMetadataId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleDays")
                        .HasColumnType("int");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TemplateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TemplateTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TemplateTypeStringMapStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TemplateTypeStringMap_StringMapId");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.HealthProgramTemplateSetting");

                    b.HasIndex(new[] { "EmailBoxSettingId" }, "IX_EmailBoxSettingId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EmailBoxSettingId" }, "IX_EmailBoxSettingId"), 90);

                    b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TemplateId" }, "IX_TemplateId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TemplateId" }, "IX_TemplateId"), 90);

                    b.HasIndex(new[] { "TemplateTypeStringMapStringMapId" }, "IX_TemplateTypeStringMap_StringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TemplateTypeStringMapStringMapId" }, "IX_TemplateTypeStringMap_StringMapId"), 90);

                    b.ToTable("HealthProgramTemplateSetting", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramTemplateSettingAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("HealthProgramTemplateSettingAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.HemoEnf", b =>
                {
                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Enfremeio")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Hemocentro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Referência")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.ToTable((string)null);

                    b.ToView("HemoEnf", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IdentityCode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SequentialValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Sufix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IdentityCode");

                    b.ToTable("IdentityCode", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IdentityCodeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IdentityCodeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Incident", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountAuthorizationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcquisitionLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCityDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressCityPatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressStateDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressStatePatient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("AmountPatientInfusing")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("ConsentDataShare")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveLogistics")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<bool?>("ConsentToReceiveVisit")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToSendDataToDoctor")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ContactTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Cte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CTE");

                    b.Property<Guid?>("Custom1StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Custom2StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CustomBoolean1")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean2")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean3")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean4")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CustomDateTime1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CustomDateTime2")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomString1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CustomerTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DeliveryDone")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DistributorLogisticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorCpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DoctorCPF");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("IncidentProductId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncidentSubjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncidentTypeDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncidentTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InformedDateByPartner")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalSpecialtyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OriginStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PartnerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PartnerConfirmDelivery")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("PrescriptionIsValid")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrescriptionReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PrescriptionStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrescriptionValidatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrescriptionValidationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PreviousMedicamentCompetitorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestDateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequestDateStart")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("RequestStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponsibleForReceiving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectorOfTheRequester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SendPeriodicity")
                        .HasColumnType("int");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TelephoneFax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TelephoneReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentLineStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Incident");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "AccountTypeStringMapId" }, "IX_AccountTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountTypeStringMapId" }, "IX_AccountTypeStringMapId"), 90);

                    b.HasIndex(new[] { "ContactTypeStringMapId" }, "IX_ContactTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ContactTypeStringMapId" }, "IX_ContactTypeStringMapId"), 90);

                    b.HasIndex(new[] { "Custom1StringMapId" }, "IX_Custom1StringMapId");

                    b.HasIndex(new[] { "Custom2StringMapId" }, "IX_Custom2StringMapId");

                    b.HasIndex(new[] { "CustomerTypeStringMapId" }, "IX_CustomerTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CustomerTypeStringMapId" }, "IX_CustomerTypeStringMapId"), 90);

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "DistributorLogisticId" }, "IX_DistributorLogisticId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DistributorLogisticId" }, "IX_DistributorLogisticId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "IncidentProductId" }, "IX_IncidentProductId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentProductId" }, "IX_IncidentProductId"), 90);

                    b.HasIndex(new[] { "IncidentSubjectId" }, "IX_IncidentSubjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentSubjectId" }, "IX_IncidentSubjectId"), 90);

                    b.HasIndex(new[] { "IncidentTypeDetailId" }, "IX_IncidentTypeDetailId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentTypeDetailId" }, "IX_IncidentTypeDetailId"), 90);

                    b.HasIndex(new[] { "IncidentTypeId" }, "IX_IncidentTypeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentTypeId" }, "IX_IncidentTypeId"), 90);

                    b.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId");

                    b.HasIndex(new[] { "OriginStringMapId" }, "IX_OriginStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OriginStringMapId" }, "IX_OriginStringMapId"), 90);

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "PrescriptionStatusStringMapId" }, "IX_PrescriptionStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PrescriptionStatusStringMapId" }, "IX_PrescriptionStatusStringMapId"), 90);

                    b.HasIndex(new[] { "PreviousMedicamentCompetitorId" }, "IX_PreviousMedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PreviousMedicamentCompetitorId" }, "IX_PreviousMedicamentCompetitorId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId"), 90);

                    b.HasIndex(new[] { "RequestStatusStringMapId" }, "IX_RequestStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RequestStatusStringMapId" }, "IX_RequestStatusStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusStringMapId" }, "IX_StatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusStringMapId" }, "IX_StatusStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "TreatmentLineStringMapId" }, "IX_TreatmentLineStringMapId");

                    b.ToTable("Incident", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IncidentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<bool?>("Aproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AprovedAccessDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Elegible")
                        .HasColumnType("bit");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("GenderStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Haspatientusedbiologiccmedicationbefore")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("IncidentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestAccessDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Used")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IncidentItem");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId"), 90);

                    b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsScheduleId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsScheduleId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("IncidentItem", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentItemAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IncidentItemAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IncidentProduct");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("IncidentProduct", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentProductAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IncidentProductAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IncidentSubject");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("IncidentSubject", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentSubjectAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IncidentSubjectAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IncidentType");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("IncidentType", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentTypeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IncidentTypeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentTypeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IncidentTypeDetail");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("IncidentTypeDetail", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentTypeDetailAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IncidentTypeDetailAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentTypeDetailProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("IncidentProductId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncidentSubjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncidentTypeDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncidentTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IncidentTypeDetailProgram");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "IncidentProductId" }, "IX_IncidentProductId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentProductId" }, "IX_IncidentProductId"), 90);

                    b.HasIndex(new[] { "IncidentSubjectId" }, "IX_IncidentSubjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentSubjectId" }, "IX_IncidentSubjectId"), 90);

                    b.HasIndex(new[] { "IncidentTypeDetailId" }, "IX_IncidentTypeDetailId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentTypeDetailId" }, "IX_IncidentTypeDetailId"), 90);

                    b.HasIndex(new[] { "IncidentTypeId" }, "IX_IncidentTypeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentTypeId" }, "IX_IncidentTypeId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("IncidentTypeDetailProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IncidentTypeDetailProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IncidentTypeDetailProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IndexViewsEntityMetadatum", b =>
                {
                    b.Property<Guid>("IndexViewsEntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("EntityMetadataId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSystemView")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ViewCode")
                        .HasColumnType("int");

                    b.HasKey("IndexViewsEntityMetadataId")
                        .HasName("PK_dbo.IndexViewsEntityMetadata");

                    b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId"), 90);

                    b.HasIndex(new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" }, "idx_EntityAttributieProgram");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" }, "idx_EntityAttributieProgram"), 90);

                    b.ToTable("IndexViewsEntityMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.InformationCollect", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CollectionDiagnosisStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateandTimeCollect")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaceOfCollectionStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.InformationCollect");

                    b.HasIndex(new[] { "CollectionDiagnosisStringMapId" }, "IX_CollectionDiagnosisStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CollectionDiagnosisStringMapId" }, "IX_CollectionDiagnosisStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "PlaceOfCollectionStringMapId" }, "IX_PlaceOfCollectionStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PlaceOfCollectionStringMapId" }, "IX_PlaceOfCollectionStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "VisitId" }, "IX_VisitId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VisitId" }, "IX_VisitId"), 90);

                    b.ToTable("InformationCollect", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.InformationCollectAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("InformationCollectAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.InformationVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AbsenceJustificationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DepartureDateandTimeVisit")
                        .HasColumnType("datetime");

                    b.Property<bool>("DoctorPrescription")
                        .HasColumnType("bit");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDateandTimeVisit")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalkmTraveled")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("VisitId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.InformationVisit");

                    b.HasIndex(new[] { "AbsenceJustificationStringMapId" }, "IX_AbsenceJustificationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AbsenceJustificationStringMapId" }, "IX_AbsenceJustificationStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "VisitId" }, "IX_VisitId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VisitId" }, "IX_VisitId"), 90);

                    b.HasIndex(new[] { "VisitStatusStringMapId" }, "IX_VisitStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VisitStatusStringMapId" }, "IX_VisitStatusStringMapId"), 90);

                    b.ToTable("InformationVisit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.InformationVisitAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("InformationVisitAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Infusion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountableHealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmpouleAmountExpected")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmpouleAmountStored")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("ApplicationTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Dosage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ExceptionReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("InfusionApproved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("InfusionDispatchNumberStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionPlaceProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionPlaceTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionWeekStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LogisticsId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientSalesOrderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaymentSubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PlaceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("PrescriptionSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionValidated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrescriptionValidationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PreviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PreviousInfusionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ReasonInfusionNotDoneStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RemipackKitQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupportFieldStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UseNumber")
                        .HasColumnType("int");

                    b.Property<string>("ValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Infusion");

                    b.HasIndex(new[] { "AccountableHealthProfessionalId" }, "IX_AccountableHealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountableHealthProfessionalId" }, "IX_AccountableHealthProfessionalId"), 90);

                    b.HasIndex(new[] { "ApplicationTypeStringMapId" }, "IX_ApplicationTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ApplicationTypeStringMapId" }, "IX_ApplicationTypeStringMapId"), 90);

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "InfusionDispatchNumberStringMapId" }, "IX_InfusionDispatchNumberStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionDispatchNumberStringMapId" }, "IX_InfusionDispatchNumberStringMapId"), 90);

                    b.HasIndex(new[] { "InfusionPlaceProfessionalId" }, "IX_InfusionPlaceProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionPlaceProfessionalId" }, "IX_InfusionPlaceProfessionalId"), 90);

                    b.HasIndex(new[] { "InfusionPlaceTypeStringMapId" }, "IX_InfusionPlaceTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionPlaceTypeStringMapId" }, "IX_InfusionPlaceTypeStringMapId"), 90);

                    b.HasIndex(new[] { "InfusionStatusStringMapId" }, "IX_InfusionStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionStatusStringMapId" }, "IX_InfusionStatusStringMapId"), 90);

                    b.HasIndex(new[] { "InfusionTypeStringMapId" }, "IX_InfusionTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionTypeStringMapId" }, "IX_InfusionTypeStringMapId"), 90);

                    b.HasIndex(new[] { "InfusionTypeStringMapId" }, "IX_InfusionTypeStringMapId_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionTypeStringMapId" }, "IX_InfusionTypeStringMapId_2"), 90);

                    b.HasIndex(new[] { "InfusionWeekStringMapId" }, "IX_InfusionWeekStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionWeekStringMapId" }, "IX_InfusionWeekStringMapId"), 90);

                    b.HasIndex(new[] { "LogisticsId" }, "IX_LogisticsId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsId" }, "IX_LogisticsId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_INFUSION_0");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_INFUSION_1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_INFUSION_1"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_INFUSION_11");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_INFUSION_11"), 90);

                    b.HasIndex(new[] { "InfusionStatusStringMapId", "HealthProgramId", "IsDeleted" }, "IX_NC_INFUSION_13");

                    b.HasIndex(new[] { "AmpouleAmountExpected" }, "IX_NC_INFUSION_14");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_INFUSION_15");

                    b.HasIndex(new[] { "InfusionStatusStringMapId", "HealthProgramId" }, "IX_NC_INFUSION_3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionStatusStringMapId", "HealthProgramId" }, "IX_NC_INFUSION_3"), 90);

                    b.HasIndex(new[] { "InfusionStatusStringMapId", "IsDeleted", "HealthProgramId" }, "IX_NC_INFUSION_4");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionStatusStringMapId", "IsDeleted", "HealthProgramId" }, "IX_NC_INFUSION_4"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_INFUSION_5");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_INFUSION_5"), 90);

                    b.HasIndex(new[] { "InfusionTypeStringMapId", "IsDeleted" }, "IX_NC_INFUSION_6");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionTypeStringMapId", "IsDeleted" }, "IX_NC_INFUSION_6"), 90);

                    b.HasIndex(new[] { "InfusionStatusStringMapId", "IsDeleted", "HealthProgramId" }, "IX_NC_INFUSION_7");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionStatusStringMapId", "IsDeleted", "HealthProgramId" }, "IX_NC_INFUSION_7"), 90);

                    b.HasIndex(new[] { "IsDeleted", "InfusionTypeStringMapId" }, "IX_NC_INFUSION_8");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted", "InfusionTypeStringMapId" }, "IX_NC_INFUSION_8"), 90);

                    b.HasIndex(new[] { "InfusionStatusStringMapId", "IsDeleted", "HealthProgramId" }, "IX_NC_INFUSION_9");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionStatusStringMapId", "IsDeleted", "HealthProgramId" }, "IX_NC_INFUSION_9"), 90);

                    b.HasIndex(new[] { "InfusionStatusStringMapId" }, "IX_NC_Infusion");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionStatusStringMapId" }, "IX_NC_Infusion"), 90);

                    b.HasIndex(new[] { "Weight" }, "IX_NC_Infusion_12");

                    b.HasIndex(new[] { "InfusionStatusStringMapId" }, "IX_NC_Infusion_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionStatusStringMapId" }, "IX_NC_Infusion_2"), 90);

                    b.HasIndex(new[] { "PatientSalesOrderId" }, "IX_PatientSalesOrderId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientSalesOrderId" }, "IX_PatientSalesOrderId"), 90);

                    b.HasIndex(new[] { "PlaceId" }, "IX_PlaceId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PlaceId" }, "IX_PlaceId"), 90);

                    b.HasIndex(new[] { "ReasonInfusionNotDoneStringMapId" }, "IX_ReasonInfusionNotDoneStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ReasonInfusionNotDoneStringMapId" }, "IX_ReasonInfusionNotDoneStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "SupportFieldStringMapId" }, "IX_SupportFieldStringMapId");

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId"), 90);

                    b.HasIndex(new[] { "ActualDate" }, "ix_nc_Infusion_10");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActualDate" }, "ix_nc_Infusion_10"), 90);

                    b.ToTable("Infusion", null, t =>
                        {
                            t.HasTrigger("tr_InfusaoRealizada");
                        });
                });

            modelBuilder.Entity("Care.Api.Models.InfusionAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("InfusionAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.InfusionBkp190422", b =>
                {
                    b.Property<Guid?>("AccountableHealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmpouleAmountExpected")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmpouleAmountStored")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("ApplicationTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Dosage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ExceptionReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("InfusionApproved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("InfusionDispatchNumberStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionPlaceProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionPlaceTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionWeekStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LogisticsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientSalesOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaymentSubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("PrescriptionSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionValidated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrescriptionValidationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PreviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PreviousInfusionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ReasonInfusionNotDoneStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RemipackKitQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupportFieldStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UseNumber")
                        .HasColumnType("int");

                    b.Property<string>("ValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("Infusion_BKP_19_04_22", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.InfusionBkp190422audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("Infusion_BKP_19_04_22Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Infuso", b =>
                {
                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA");

                    b.Property<string>("DataInativacao")
                        .IsRequired()
                        .HasMaxLength(19)
                        .IsUnicode(false)
                        .HasColumnType("varchar(19)")
                        .HasColumnName("DATA_INATIVACAO");

                    b.Property<DateTime?>("DataRealizada")
                        .HasColumnType("datetime")
                        .HasColumnName("DATA_REALIZADA");

                    b.Property<string>("Datareferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATAREFERENCIA");

                    b.Property<string>("Doenca")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("DOENCA")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InfusaoIdAprovadaClinicas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("INFUSAO_ID_APROVADA_CLINICAS")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<Guid>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LocalAnterior")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL_ANTERIOR")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<long?>("Ordem")
                        .HasColumnType("bigint")
                        .HasColumnName("ORDEM");

                    b.Property<long?>("OrdemSequencial")
                        .HasColumnType("bigint")
                        .HasColumnName("ORDEM_SEQUENCIAL");

                    b.Property<decimal?>("QtdAmpolas")
                        .HasColumnType("money")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<decimal?>("QtdAmpolasIdeais")
                        .HasColumnType("money")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STATUS_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("StatusInfusaoClinicas")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_INFUSAO_CLINICAS");

                    b.Property<string>("TipoAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_ACESSO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoInfusaoAnterior")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_INFUSAO_ANTERIOR")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Treatmentid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TREATMENTID");

                    b.ToTable("infusoes", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.InfusoesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("infusoesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IntegrationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempt")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Return")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Send")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.IntegrationLog");

                    b.ToTable("IntegrationLog", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.IntegrationLogAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("IntegrationLogAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.JsRulesByEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.JsRulesByEntity");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    b.ToTable("JsRulesByEntity", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.JsRulesByEntityAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("JsRulesByEntityAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.JsRulesByEntityBkp20201015", b =>
                {
                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("JsRulesByEntity_BKP_20201015", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.JsRulesByEntityBkp20201015audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("JsRulesByEntity_BKP_20201015Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LanguageAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeMetadataIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ErrorMessageDefault")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ErrorMessageForCustomValidation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ErrorMessageForMask")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ErrorMessageForRegexValidation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ErrorMessageForRequeried")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<string>("ToolTip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Translate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LanguageAttribute");

                    b.HasIndex(new[] { "AttributeMetadataId", "EntityMetadataId", "AttributeMetadataIdName", "EntityMetadataIdName" }, "Idx_EntityAttributie");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AttributeMetadataId", "EntityMetadataId", "AttributeMetadataIdName", "EntityMetadataIdName" }, "Idx_EntityAttributie"), 90);

                    b.HasIndex(new[] { "ProgramId" }, "idx_ProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ProgramId" }, "idx_ProgramId"), 90);

                    b.ToTable("LanguageAttribute", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LanguageAttributeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("LanguageAttributeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LanguageDefault", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequencialId")
                        .HasColumnType("int");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Portuguese")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id", "SequencialId")
                        .HasName("PK_dbo.LanguageDefault");

                    b.ToTable("LanguageDefault", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LanguageDefaultAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("LanguageDefaultAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LanguageEntitiesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("LanguageEntitiesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LanguageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<string>("Translate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LanguageEntities");

                    b.ToTable("LanguageEntities");
                });

            modelBuilder.Entity("Care.Api.Models.LanguageMenuMetadatum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MenuMetadataId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Translate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LanguageMenuMetadata");

                    b.HasIndex(new[] { "MenuMetadataId" }, "IX_MenuMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MenuMetadataId" }, "IX_MenuMetadataId"), 90);

                    b.ToTable("LanguageMenuMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.LanguageSectionMetadatum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SectionMetadataId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<string>("Translate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LanguageSectionMetadata");

                    b.HasIndex(new[] { "SectionMetadataId" }, "IX_SectionMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SectionMetadataId" }, "IX_SectionMetadataId"), 90);

                    b.ToTable("LanguageSectionMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.ListaDeTabela", b =>
                {
                    b.Property<string>("Coluna")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("Linha")
                        .HasColumnType("bigint");

                    b.Property<string>("Tabela")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.ToTable("ListaDeTabelas");
                });

            modelBuilder.Entity("Care.Api.Models.ListaDeTabelasAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("ListaDeTabelasAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogAtualizacaoNonoDigito", b =>
                {
                    b.Property<string>("Campo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("campo");

                    b.Property<Guid?>("Codigo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("codigo");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime")
                        .HasColumnName("data");

                    b.Property<string>("Entidade")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("entidade");

                    b.Property<string>("Valoranterior")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("valoranterior");

                    b.Property<string>("Valornovo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("valornovo");

                    b.ToTable("log_atualizacao_nono_digito", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogAtualizacaoNonoDigitoAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("log_atualizacao_nono_digitoAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Logistic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("ConfirmedReceipt")
                        .HasColumnType("bit");

                    b.Property<string>("CorreiosTrackingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Custom1StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Custom2StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CustomBoolean1")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean2")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CustomDateTime1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CustomDateTime2")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomString1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateActionLogistics")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeliveryTime")
                        .HasColumnType("int");

                    b.Property<string>("Devolutive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DevolutiveDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Devolutivedate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ExpectecdDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("IncidentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IncidentStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IntegrationStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LogisticsPartnerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PreviousDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("SendStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SendSubStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UcbDateSendedPrescription")
                        .HasColumnType("datetime")
                        .HasColumnName("UCB_DateSendedPrescription");

                    b.Property<bool?>("UcbHasPrescription")
                        .HasColumnType("bit")
                        .HasColumnName("UCB_HasPrescription");

                    b.Property<Guid?>("UcbKitSentReasonStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UCB_KitSentReasonStringMapId");

                    b.Property<string>("UcbPrescriptionValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UCB_PrescriptionValidatedBy");

                    b.Property<string>("UcbReasonSendedBlank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UCB_ReasonSendedBlank");

                    b.Property<bool?>("UcbValidatedPrescription")
                        .HasColumnType("bit")
                        .HasColumnName("UCB_ValidatedPrescription");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Logistics");

                    b.HasIndex(new[] { "Custom1StringMapId" }, "IX_Custom1StringMapId");

                    b.HasIndex(new[] { "Custom2StringMapId" }, "IX_Custom2StringMapId");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "IncidentStatusStringMapId" }, "IX_IncidentStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentStatusStringMapId" }, "IX_IncidentStatusStringMapId"), 90);

                    b.HasIndex(new[] { "IntegrationStatusStringMapId" }, "IX_IntegrationStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IntegrationStatusStringMapId" }, "IX_IntegrationStatusStringMapId"), 90);

                    b.HasIndex(new[] { "LogisticsPartnerId" }, "IX_LogisticsPartnerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsPartnerId" }, "IX_LogisticsPartnerId"), 90);

                    b.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId"), 90);

                    b.HasIndex(new[] { "LogisticsTypeStringMapId" }, "IX_LogisticsTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsTypeStringMapId" }, "IX_LogisticsTypeStringMapId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_LOGISTICS_2");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_LOGISTICS_3");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_Logistics");

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "SendStatusStringMapId" }, "IX_SendStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SendStatusStringMapId" }, "IX_SendStatusStringMapId"), 90);

                    b.HasIndex(new[] { "SendSubStatusStringMapId" }, "IX_SendSubStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SendSubStatusStringMapId" }, "IX_SendSubStatusStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "UcbKitSentReasonStringMapId" }, "IX_UCB_KitSentReasonStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UcbKitSentReasonStringMapId" }, "IX_UCB_KitSentReasonStringMapId"), 90);

                    b.ToTable("Logistics");
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("LogisticsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountSettingsByProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("AmountCanceled")
                        .HasColumnType("int");

                    b.Property<int?>("AmountUsed")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AuthorizedByClient")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ChosenExamTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ");

                    b.Property<bool?>("ConfirmWithdrawal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConfirmWithdrawalDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ConsentTermRecivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ConsultantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactTelephoneExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpfdoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPFDoctor")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Cte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateForCollecting")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateForReceiving")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReceivingBlock")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryConfirmationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryConfirmationPendingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeliveryLaboratoryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiagnosticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("EnoughSampleSupplyForOneExam")
                        .HasColumnType("bit");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Exam_Id");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FgfrthroughNgs")
                        .HasColumnType("bit")
                        .HasColumnName("FGFRThroughNGS");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("IncidentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IntegrationStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsLegacy")
                        .HasColumnType("bit")
                        .HasColumnName("isLegacy");

                    b.Property<Guid?>("KitTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LegacyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalDeliveryWithdrawStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogisticsPartnerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("LogisticsPartnerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLocalDeliveryWithdraw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("PendingAnalysisDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PendingCollectionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PreferredTimeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingDelivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsSchedulingPendency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecollectDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RecollectionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReportReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestDoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponsibleForCollecting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleForReceiving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleTelephoneWithdrawal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("RetesteReleased")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ScheduleStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduledStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SchedulingPendencyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SendRequestKit")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShortSampleSupplyForTwoExams")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageTubeTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WithdrawalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LogisticsSchedule");

                    b.HasIndex(new[] { "AccountSettingsByProgramId" }, "IX_AccountSettingsByProgramId");

                    b.HasIndex(new[] { "ChosenExamTypeStringMapId" }, "IX_ChosenExamTypeStringMapId");

                    b.HasIndex(new[] { "ClientId" }, "IX_ClientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ClientId" }, "IX_ClientId"), 90);

                    b.HasIndex(new[] { "ConsultantId" }, "IX_ConsultantId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ConsultantId" }, "IX_ConsultantId"), 90);

                    b.HasIndex(new[] { "DeliveryLaboratoryId" }, "IX_DeliveryLaboratoryId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DeliveryLaboratoryId" }, "IX_DeliveryLaboratoryId"), 90);

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId"), 90);

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "ExamId" }, "IX_ExamId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamId" }, "IX_ExamId"), 90);

                    b.HasIndex(new[] { "ExamId1" }, "IX_Exam_Id");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamId1" }, "IX_Exam_Id"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId"), 90);

                    b.HasIndex(new[] { "IntegrationStatusStringMapId" }, "IX_IntegrationStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IntegrationStatusStringMapId" }, "IX_IntegrationStatusStringMapId"), 90);

                    b.HasIndex(new[] { "KitTypeStringMapId" }, "IX_KitTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "KitTypeStringMapId" }, "IX_KitTypeStringMapId"), 90);

                    b.HasIndex(new[] { "LocalDeliveryWithdrawStringMapId" }, "IX_LocalDeliveryWithdrawStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LocalDeliveryWithdrawStringMapId" }, "IX_LocalDeliveryWithdrawStringMapId"), 90);

                    b.HasIndex(new[] { "LocalId" }, "IX_LocalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LocalId" }, "IX_LocalId"), 90);

                    b.HasIndex(new[] { "LocalTypeStringMapId" }, "IX_LocalTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LocalTypeStringMapId" }, "IX_LocalTypeStringMapId"), 90);

                    b.HasIndex(new[] { "LogisticsPartnerId" }, "IX_LogisticsPartnerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsPartnerId" }, "IX_LogisticsPartnerId"), 90);

                    b.HasIndex(new[] { "LogisticsScheduleTypeStringMapId" }, "IX_LogisticsScheduleTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsScheduleTypeStringMapId" }, "IX_LogisticsScheduleTypeStringMapId"), 90);

                    b.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_LogisticsSchedule");

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_NC_LogisticsSchedule_1");

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_NC_LogisticsSchedule_2");

                    b.HasIndex(new[] { "PreferredTimeStringMapId" }, "IX_PreferredTimeStringMapId");

                    b.HasIndex(new[] { "RequestDoctorId" }, "IX_RequestDoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RequestDoctorId" }, "IX_RequestDoctorId"), 90);

                    b.HasIndex(new[] { "ScheduleStatusStringMapId" }, "IX_ScheduleStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ScheduleStatusStringMapId" }, "IX_ScheduleStatusStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "StorageTubeTypeStringMapId" }, "IX_StorageTubeTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StorageTubeTypeStringMapId" }, "IX_StorageTubeTypeStringMapId"), 90);

                    b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId");

                    b.HasIndex(new[] { "LogisticsScheduleTypeStringMapId", "HealthProgramId", "Name" }, "ix_nc_LogisticsSchedule_0");

                    b.ToTable("LogisticsSchedule", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("LogisticsScheduleAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleBkp01072022", b =>
                {
                    b.Property<Guid?>("AccountSettingsByProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("AmountCanceled")
                        .HasColumnType("int");

                    b.Property<int?>("AmountUsed")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AuthorizedByClient")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ChosenExamTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ");

                    b.Property<bool?>("ConfirmWithdrawal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConfirmWithdrawalDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ConsentTermRecivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactTelephoneExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpfdoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPFDoctor")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Cte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateForCollecting")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateForReceiving")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReceivingBlock")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryConfirmationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryConfirmationPendingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeliveryLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("EnoughSampleSupplyForOneExam")
                        .HasColumnType("bit");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Exam_Id");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FgfrthroughNgs")
                        .HasColumnType("bit")
                        .HasColumnName("FGFRThroughNGS");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IntegrationStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsLegacy")
                        .HasColumnType("bit")
                        .HasColumnName("isLegacy");

                    b.Property<Guid?>("KitTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LegacyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalDeliveryWithdrawStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogisticsPartnerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("LogisticsPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLocalDeliveryWithdraw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("PendingAnalysisDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PendingCollectionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PreferredTimeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingDelivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsSchedulingPendency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecollectDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RecollectionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReportReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestDoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponsibleForCollecting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleForReceiving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleTelephoneWithdrawal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("RetesteReleased")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ScheduleStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduledStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SchedulingPendencyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SendRequestKit")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShortSampleSupplyForTwoExams")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageTubeTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WithdrawalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("LogisticsSchedule_BKP_01072022", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleBkp010720221106", b =>
                {
                    b.Property<Guid?>("AccountSettingsByProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("AmountCanceled")
                        .HasColumnType("int");

                    b.Property<int?>("AmountUsed")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AuthorizedByClient")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ChosenExamTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ");

                    b.Property<bool?>("ConfirmWithdrawal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ConfirmWithdrawalDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ConsentTermRecivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactTelephoneExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpfdoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPFDoctor")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Cte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateForCollecting")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateForReceiving")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReceivingBlock")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryConfirmationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryConfirmationPendingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeliveryLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("EnoughSampleSupplyForOneExam")
                        .HasColumnType("bit");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Exam_Id");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FgfrthroughNgs")
                        .HasColumnType("bit")
                        .HasColumnName("FGFRThroughNGS");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IntegrationStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsLegacy")
                        .HasColumnType("bit")
                        .HasColumnName("isLegacy");

                    b.Property<Guid?>("KitTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LegacyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalDeliveryWithdrawStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogisticsPartnerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("LogisticsPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLocalDeliveryWithdraw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("PendingAnalysisDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PendingCollectionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PreferredTimeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsPendingDelivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonsSchedulingPendency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecollectDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RecollectionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReportReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestDoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponsibleForCollecting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleForReceiving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleTelephoneWithdrawal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("RetesteReleased")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ScheduleStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduledStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SchedulingPendencyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SendRequestKit")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShortSampleSupplyForTwoExams")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageTubeTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WithdrawalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("LogisticsSchedule_BKP_01072022_1106", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleBkp010720221106audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("LogisticsSchedule_BKP_01072022_1106Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleBkp01072022audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("LogisticsSchedule_BKP_01072022Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbbreviationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Mutable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LogisticsScheduleItem");

                    b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsScheduleId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsScheduleId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId"), 90);

                    b.ToTable("LogisticsScheduleItem", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleItemAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("LogisticsScheduleItemAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsStuff", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anvisacode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ANVISACode")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ForecastCast")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasPeriodicSend")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasServFarmaIntegration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsControlled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReset")
                        .HasColumnType("bit");

                    b.Property<Guid?>("KitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LaboratoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ListPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LogisticsSchedule_Id");

                    b.Property<Guid?>("LogisticsStuffTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManufacturerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("NeedsAprovals")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Packing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("PrescritionIsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ProductFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sapcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SAPCode")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StrengthMedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StuffStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxClassification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.LogisticsStuff");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "KitId" }, "IX_KitId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "KitId" }, "IX_KitId"), 90);

                    b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsSchedule_Id");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsSchedule_Id"), 90);

                    b.HasIndex(new[] { "LogisticsStuffTypeStringMapId" }, "IX_LogisticsStuffTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsStuffTypeStringMapId" }, "IX_LogisticsStuffTypeStringMapId"), 90);

                    b.HasIndex(new[] { "ManufacturerId" }, "IX_ManufacturerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ManufacturerId" }, "IX_ManufacturerId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId"), 90);

                    b.HasIndex(new[] { "StuffStatusStringMapId" }, "IX_StuffStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StuffStatusStringMapId" }, "IX_StuffStatusStringMapId"), 90);

                    b.ToTable("LogisticsStuff", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsStuffAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("LogisticsStuffAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsStuffKitsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("LogisticsStuffKitsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicalSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MedicalSpecialty");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("MedicalSpecialty", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicalSpecialtyAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicalSpecialtyAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Medicament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UseInterval")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Medicament");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Medicament", null, t =>
                        {
                            t.HasTrigger("INTEGRA_MEDICAMENTO_GE");

                            t.HasTrigger("INTEGRA_MEDICAMENTO_GE_UPDATE");
                        });
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessMannerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessSubStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessWayId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AttemptAccessCancelDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AttemptAccessDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AttemptAccessDateSystem")
                        .HasColumnType("datetime");

                    b.Property<bool?>("AttemptAccessFinished")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AttemptAccessModifiedById")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DetailDifficultyWithAccessStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DetailDifficultyWithDocumentsStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DetailNoDifficultyWithAccessStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DocumentDeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DocumentDeliveredDateSystem")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DocumentSeparatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DocumentSeparatedDateSystem")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("GotAccessDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("GotAccessDateSystem")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("LastAttemptAccessDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NextAccessAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextAttemptAccessDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NextStepAccess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MedicamentAccess");

                    b.HasIndex(new[] { "AccessMannerId" }, "IX_AccessMannerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessMannerId" }, "IX_AccessMannerId"), 90);

                    b.HasIndex(new[] { "AccessStatusStringMapId" }, "IX_AccessStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessStatusStringMapId" }, "IX_AccessStatusStringMapId"), 90);

                    b.HasIndex(new[] { "AccessSubStatusStringMapId" }, "IX_AccessSubStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessSubStatusStringMapId" }, "IX_AccessSubStatusStringMapId"), 90);

                    b.HasIndex(new[] { "AccessTypeStringMapId" }, "IX_AccessTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessTypeStringMapId" }, "IX_AccessTypeStringMapId"), 90);

                    b.HasIndex(new[] { "AccessWayId" }, "IX_AccessWayId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessWayId" }, "IX_AccessWayId"), 90);

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "AttemptAccessModifiedById" }, "IX_AttemptAccessModifiedById");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AttemptAccessModifiedById" }, "IX_AttemptAccessModifiedById"), 90);

                    b.HasIndex(new[] { "DetailDifficultyWithAccessStringMapId" }, "IX_DetailDifficultyWithAccessStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DetailDifficultyWithAccessStringMapId" }, "IX_DetailDifficultyWithAccessStringMapId"), 90);

                    b.HasIndex(new[] { "DetailDifficultyWithDocumentsStringMapId" }, "IX_DetailDifficultyWithDocumentsStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DetailDifficultyWithDocumentsStringMapId" }, "IX_DetailDifficultyWithDocumentsStringMapId"), 90);

                    b.HasIndex(new[] { "DetailNoDifficultyWithAccessStringMapId" }, "IX_DetailNoDifficultyWithAccessStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DetailNoDifficultyWithAccessStringMapId" }, "IX_DetailNoDifficultyWithAccessStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_MedicamentAccess");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_MedicamentAccess"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_MedicamentAccess_1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_MedicamentAccess_1"), 90);

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.ToTable("MedicamentAccess", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentAccessAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicamentAccessAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicamentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentCompetitor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Biologic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MedicamentCompetitor");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("MedicamentCompetitor", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentCompetitorAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicamentCompetitorAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentCompetitorDiseaseAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicamentCompetitorDiseaseAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentCompetitorHealthProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicamentCompetitorHealthProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentConcomitant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DiseaseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EndDateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Indication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StartDateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MedicamentConcomitant");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.ToTable("MedicamentConcomitant", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentConcomitantAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicamentConcomitantAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentDiseaseAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicamentDiseaseAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentStrengthMedicamentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicamentStrengthMedicamentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicationNonadherenceReason", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MedicationNonadherenceReason");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("MedicationNonadherenceReason", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicationNonadherenceReasonAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicationNonadherenceReasonAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MedicationNonadherenceReasonHealthProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("MedicationNonadherenceReasonHealthProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.MenuMetadatum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconMenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Menu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("MenuDisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentMenuMetadataId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.MenuMetadata");

                    b.HasIndex(new[] { "ParentMenuMetadataId" }, "IX_ParentMenuMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ParentMenuMetadataId" }, "IX_ParentMenuMetadataId"), 90);

                    b.ToTable("MenuMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Occupation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("MainSubGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Occupation");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Occupation", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.OccupationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("OccupationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Paciente", b =>
                {
                    b.Property<bool?>("AlteraçãoManual")
                        .HasColumnType("bit")
                        .HasColumnName("Alteração Manual");

                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cpfpaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPFPaciente");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("Criadoem")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataAniversario")
                        .HasColumnType("date");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaseDaPatologia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("Healthprogramid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("healthprogramid");

                    b.Property<Guid?>("InstituicaoPacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NecessitaDevolucao")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("NomePaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Patologia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PrecisaDeLogística")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Precisa de Logística");

                    b.Property<string>("Programa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TelefonePaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoAnalise")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TipoAnaliseMédico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("UfDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UF do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Care.Api.Models.PacientesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("PacientesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PacientesPesquisa", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OrigemPaciente")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Programa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("PacientesPesquisa", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PacientesPesquisaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("PacientesPesquisaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PainelMedicoEntyvio", b =>
                {
                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CRM");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GERENTE");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MEDICO");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("REPRESENTANTE");

                    b.Property<string>("Setor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SETOR");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("STATUS");

                    b.ToTable("PainelMedicoEntyvio$", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PainelMedicoEntyvioAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PainelMedicoEntyvio$Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PainelMedicoMelanoma", b =>
                {
                    b.Property<string>("AceiteMktEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Aceite_MKT_Email");

                    b.Property<string>("AceiteMktEmailSecundario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Aceite_MKT_Email_Secundario");

                    b.Property<string>("AceiteRteEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Aceite_RTE_Email");

                    b.Property<string>("AceiteRteEmailSecundário")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Aceite_RTE_Email_Secundário");

                    b.Property<string>("BusinessLine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Business_Line");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Business_Unit");

                    b.Property<string>("CategoriaEspecial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Categoria_Especial");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CEP");

                    b.Property<string>("Ciclo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ");

                    b.Property<string>("Column45")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("column45");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Conselho")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentimentoDeAmostra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Consentimento_de_Amostra");

                    b.Property<string>("ConsentimentoPerfil")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Consentimento_Perfil");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CRM");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailColaborador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email_Colaborador");

                    b.Property<string>("EmailSecundário")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email_secundário");

                    b.Property<string>("Endereço")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EspecialidadePrincipal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Especialidade_Principal");

                    b.Property<string>("EspecialidadePromocional")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Especialidade_promocional");

                    b.Property<string>("Estrutura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gestor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ID");

                    b.Property<string>("IdDaConta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ID_da_conta");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LOGIN");

                    b.Property<string>("Matrícula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nome_Completo");

                    b.Property<string>("NomeDaConta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nome_da_conta");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OutroTelefone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Outro_Telefone");

                    b.Property<string>("ProdutoRteEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Produto_RTE_Email");

                    b.Property<string>("ProdutoRteEmailSecundário")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Produto_RTE_Email_Secundário");

                    b.Property<string>("RazãoSocial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Razão_social");

                    b.Property<string>("Segmentação")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelefonePrimário")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Telefone_primário");

                    b.Property<string>("Território")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TerritórioSugerido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Território_Sugerido");

                    b.Property<string>("TipoDeConta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tipo_de_conta");

                    b.Property<string>("TipoDeRegistroDaConta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tipo_de_registro_da_conta");

                    b.Property<string>("TsfIdOncore")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TSF_ID_ONCORE");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UF");

                    b.ToTable("Painel MedicoMelanoma", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PainelMedicoMelanomaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("Painel MedicoMelanomaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PainelMedicoTasigna", b =>
                {
                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ct")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CT");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("E_mail");

                    b.Property<string>("GerCidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GER_Cidade");

                    b.Property<string>("GerEMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GER_E_mail");

                    b.Property<string>("GerTelefone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GER_Telefone");

                    b.Property<string>("GerUf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GER_UF");

                    b.Property<string>("Gr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GR");

                    b.Property<string>("Região")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UF");

                    b.ToTable("Painel MedicoTASIGNA", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PainelMedicoTasignaaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("Painel MedicoTASIGNAAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbbreviationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CivilStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EducationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("GenderStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OccupationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PatientTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Stature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SystemUserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Patient");

                    b.HasIndex(new[] { "CivilStatusStringMapId" }, "IX_CivilStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CivilStatusStringMapId" }, "IX_CivilStatusStringMapId"), 90);

                    b.HasIndex(new[] { "EducationStringMapId" }, "IX_EducationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EducationStringMapId" }, "IX_EducationStringMapId"), 90);

                    b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_Patient");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_Patient"), 90);

                    b.HasIndex(new[] { "OccupationId" }, "IX_OccupationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OccupationId" }, "IX_OccupationId"), 90);

                    b.HasIndex(new[] { "PatientTypeStringMapId" }, "IX_PatientTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientTypeStringMapId" }, "IX_PatientTypeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "SystemUserId" }, "IX_SystemUserId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SystemUserId" }, "IX_SystemUserId"), 90);

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PatientAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PatientAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PatientSalesOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BillingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpfcnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPFCNPJ");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DiagnosticDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorLicenseState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormOfPayment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasBoughtOnFirstContact")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasHealthcareProvider")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasPrescription")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasReturned")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasStoreSent")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasUsedProductBefore")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasUsedProgramClinic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthcareProviderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsNewPatient")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPurchaseDone")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalInsurance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSpecialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientSourceStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PurchaseAskDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonOrderFailed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SolicitorStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StoreSentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("StrengthMedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PatientSalesOrder");

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "HealthcareProviderId" }, "IX_HealthcareProviderId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthcareProviderId" }, "IX_HealthcareProviderId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "PatientSourceStringMapId" }, "IX_PatientSourceStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientSourceStringMapId" }, "IX_PatientSourceStringMapId"), 90);

                    b.HasIndex(new[] { "SolicitorStringMapId" }, "IX_SolicitorStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SolicitorStringMapId" }, "IX_SolicitorStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId"), 90);

                    b.ToTable("PatientSalesOrder", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PatientSalesOrderAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PatientSalesOrderAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Pharmacovigilance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("IncidentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Pharmacovigilance");

                    b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.ToTable("Pharmacovigilance", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PharmacovigilanceAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PharmacovigilanceAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Phase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Phase");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Phase", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PhaseAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PhaseAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PhaseRulesMetadatum", b =>
                {
                    b.Property<Guid>("PhaseRulesMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeMetadataIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RulesAttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhaseRulesMetadataId")
                        .HasName("PK_dbo.PhaseRulesMetadata");

                    b.HasIndex(new[] { "RulesAttributeMetadataId" }, "IX_RulesAttributeMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RulesAttributeMetadataId" }, "IX_RulesAttributeMetadataId"), 90);

                    b.ToTable("PhaseRulesMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.PhoneCall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("datetime");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CallForRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CallFromRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CallId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Counter")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OriginRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PhoneCallStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhoneCallTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PhoneNumber3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduleReturnDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduledEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduledStart")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UnSuccessfulReasonStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("UnSuccessfully")
                        .HasColumnType("bit");

                    b.Property<int?>("UserAttempts")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PhoneCall");

                    b.HasIndex(new[] { "CallForRegardingEntityId" }, "IX_CallForRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CallForRegardingEntityId" }, "IX_CallForRegardingEntityId"), 90);

                    b.HasIndex(new[] { "CallFromRegardingEntityId" }, "IX_CallFromRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CallFromRegardingEntityId" }, "IX_CallFromRegardingEntityId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_PHONECALL_1");

                    b.HasIndex(new[] { "UnSuccessfully" }, "IX_NC_PHONECALL_3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UnSuccessfully" }, "IX_NC_PHONECALL_3"), 90);

                    b.HasIndex(new[] { "PhoneCallStatusStringMapId", "UnSuccessfully" }, "IX_NC_PHONECALL_4");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhoneCallStatusStringMapId", "UnSuccessfully" }, "IX_NC_PHONECALL_4"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_PHONECALL_6");

                    b.HasIndex(new[] { "ActualEnd", "HealthProgramId" }, "IX_NC_PhoneCall");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActualEnd", "HealthProgramId" }, "IX_NC_PhoneCall"), 90);

                    b.HasIndex(new[] { "UnSuccessfully" }, "IX_NC_PhoneCall_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UnSuccessfully" }, "IX_NC_PhoneCall_2"), 90);

                    b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId"), 90);

                    b.HasIndex(new[] { "PhoneCallStatusStringMapId" }, "IX_PhoneCallStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhoneCallStatusStringMapId" }, "IX_PhoneCallStatusStringMapId"), 90);

                    b.HasIndex(new[] { "PhoneCallTypeStringMapId" }, "IX_PhoneCallTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhoneCallTypeStringMapId" }, "IX_PhoneCallTypeStringMapId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "UnSuccessfulReasonStringMapId" }, "IX_UnSuccessfulReasonStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UnSuccessfulReasonStringMapId" }, "IX_UnSuccessfulReasonStringMapId"), 90);

                    b.HasIndex(new[] { "ActualEnd" }, "ix_nc_phonecall_0");

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "ix_nc_phonecall_5");

                    b.ToTable("PhoneCall", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PhoneCallAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PhoneCallAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Posologe", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Posologe");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Posologe", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PosologeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PosologeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PosologeMedicamentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PosologeMedicamentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PostalCode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("AddressTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PostalCode1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PostalCode")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PostalCodeCityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostalCodeStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PostalCodes");

                    b.HasIndex(new[] { "AddressTypeStringMapId" }, "IX_AddressTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AddressTypeStringMapId" }, "IX_AddressTypeStringMapId"), 90);

                    b.HasIndex(new[] { "PostalCodeCityId" }, "IX_PostalCodeCityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalCodeCityId" }, "IX_PostalCodeCityId"), 90);

                    b.HasIndex(new[] { "PostalCodeStateId" }, "IX_PostalCodeStateId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalCodeStateId" }, "IX_PostalCodeStateId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodeCity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PostalCodeStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PostalCodeCity");

                    b.HasIndex(new[] { "PostalCodeStateId" }, "IX_PostalCodeStateId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalCodeStateId" }, "IX_PostalCodeStateId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("PostalCodeCity", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodeCityAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PostalCodeCityAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodeState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.PostalCodeState");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("PostalCodeState", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodeStateAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PostalCodeStateAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PostalCodesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ProcessLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("EndProcessOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityCode")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("IsScreenLocker")
                        .HasColumnType("bit")
                        .HasColumnName("isScreenLocker");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ProcessLog");

                    b.HasIndex(new[] { "ObjectId", "Status", "IsScreenLocker", "EntityCode", "EntityName" }, "idx_ObjectIdStatusEntity");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ObjectId", "Status", "IsScreenLocker", "EntityCode", "EntityName" }, "idx_ObjectIdStatusEntity"), 90);

                    b.ToTable("ProcessLog", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ProcessLogAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ProcessLogAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Profarmaacesso", b =>
                {
                    b.Property<string>("Acesso")
                        .IsRequired()
                        .HasMaxLength(31)
                        .IsUnicode(false)
                        .HasColumnType("varchar(31)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CodPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cod paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataDaTentativaDoAcessoSistema")
                        .IsRequired()
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("varchar(23)")
                        .HasColumnName("Data da tentativa do Acesso Sistema");

                    b.Property<string>("DataDeAcesso")
                        .IsRequired()
                        .HasMaxLength(23)
                        .IsUnicode(false)
                        .HasColumnType("varchar(23)")
                        .HasColumnName("Data de Acesso");

                    b.Property<int?>("DiasAcesso")
                        .HasColumnType("int")
                        .HasColumnName("Dias Acesso");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaseDoPaciente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Fase do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FormaDeAcesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Forma de Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Formularioid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FORMULARIOID");

                    b.Property<string>("IdLocalDeAcesso")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id - Local de Acesso");

                    b.Property<string>("LocalDeAcesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Local de Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoDaDificuldadeDeAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Motivo da Dificuldade de Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoNãoAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Motivo Não Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Programa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("StatusdoAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SubStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Sub Status")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tipo de Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TypeOfCoverage")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Type of Coverage")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Via")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("VIA")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("profarmaacesso", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ProfarmaacessoAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("profarmaacessoAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Profile");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ProfileAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ProfileAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("AmpouleDuration")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("FrequencyStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PenDosage")
                        .HasColumnType("int");

                    b.Property<string>("PointOfPurchase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("PrescribedDosage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("PrescriptionTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Purchase");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "FrequencyStringMapId" }, "IX_FrequencyStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FrequencyStringMapId" }, "IX_FrequencyStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "PrescriptionTypeStringMapId" }, "IX_PrescriptionTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PrescriptionTypeStringMapId" }, "IX_PrescriptionTypeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.ToTable("Purchase", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.PurchaseAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("PurchaseAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("ExibitionOrder")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Question");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.QuestionAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("QuestionAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("ExibitionOrder")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OptionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("QuestionCondition")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.QuestionOptions");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Care.Api.Models.QuestionOptionsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("QuestionOptionsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RegardingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegardingEntityNameSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("RegardingEntityNameTarget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("RegardingEntityTypeCodeSource")
                        .HasColumnType("int");

                    b.Property<int?>("RegardingEntityTypeCodeTarget")
                        .HasColumnType("int");

                    b.Property<string>("RegardingObjectIdNameSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("RegardingObjectIdNameTarget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("RegardingObjectIdSource")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegardingObjectIdTarget")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.RegardingEntity");

                    b.HasIndex(new[] { "RegardingObjectIdSource" }, "IX_NC_RegardingEntity");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectIdSource" }, "IX_NC_RegardingEntity"), 90);

                    b.HasIndex(new[] { "RegardingObjectIdTarget" }, "IX_NC_RegardingObjectIdTarget");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectIdTarget" }, "IX_NC_RegardingObjectIdTarget"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("RegardingEntity", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RegardingEntityAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("RegardingEntityAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RegionalManager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PostalCodeCityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostalCodeStateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RepresentativeSupervisorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.RegionalManager");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "PostalCodeCityId" }, "IX_PostalCodeCityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalCodeCityId" }, "IX_PostalCodeCityId"), 90);

                    b.HasIndex(new[] { "PostalCodeStateId" }, "IX_PostalCodeStateId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PostalCodeStateId" }, "IX_PostalCodeStateId"), 90);

                    b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId"), 90);

                    b.HasIndex(new[] { "RepresentativeSupervisorId" }, "IX_RepresentativeSupervisorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RepresentativeSupervisorId" }, "IX_RepresentativeSupervisorId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("RegionalManager", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RegionalManagerAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("RegionalManagerAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RelatorioPacientesAtivosEmFrente", b =>
                {
                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaixaEtaria")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Faixa Etaria");

                    b.Property<string>("GrauDeHemofília")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Grau de Hemofília")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Hemcasa")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<decimal?>("Idade")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("Infusoes")
                        .HasColumnType("int")
                        .HasColumnName("infusoes");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Modalidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("TratamentoPrograma")
                        .HasColumnType("datetime")
                        .HasColumnName("Tratamento Programa");

                    b.Property<int?>("Visita")
                        .HasColumnType("int")
                        .HasColumnName("visita");

                    b.ToTable("relatorio_pacientes_ativos_em_frente", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RelatorioPacientesAtivosEmFrenteAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("relatorio_pacientes_ativos_em_frenteAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RelatorioPacientesAtivosEmFrenteTotalInfuso", b =>
                {
                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("Referencia")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalDeInfusões")
                        .HasColumnType("int")
                        .HasColumnName("Total de Infusões");

                    b.ToTable("relatorio_pacientes_ativos_em_frente_Total_infusoes", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RelatorioPacientesAtivosEmFrenteTotalInfusoesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("relatorio_pacientes_ativos_em_frente_Total_infusoesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RelatorioPacientesAtivosEmFrenteTotalVisita", b =>
                {
                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("Referencia")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalDeVisita")
                        .HasColumnType("int")
                        .HasColumnName("Total de Visita");

                    b.ToTable("relatorio_pacientes_ativos_em_frente_Total_Visitas", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RelatorioPacientesAtivosEmFrenteTotalVisitasAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("relatorio_pacientes_ativos_em_frente_Total_VisitasAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Representative", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Representative");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "FullName", "IsDeleted" }, "IX_NC_Representative");

                    b.HasIndex(new[] { "IsDeleted", "Name" }, "IX_NC_Representative_1");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("Representative", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RepresentativeAccount", b =>
                {
                    b.Property<Guid>("RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RepresentativeId", "AccountId")
                        .HasName("PK_dbo.RepresentativeAccount");

                    b.ToTable("RepresentativeAccount", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RepresentativeAccountAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("RepresentativeAccountAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RepresentativeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("RepresentativeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RepresentativeBkp15072021", b =>
                {
                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("Representative_bkp15072021", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RepresentativeBkp15072021Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("Representative_bkp15072021Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RepresentativeRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsMainRepresentative")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Representative_Id");

                    b.Property<Guid?>("ValidationResultId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ValidationResult_Id");

                    b.HasKey("Id")
                        .HasName("PK_dbo.RepresentativeRegion");

                    b.HasIndex(new[] { "RepresentativeId" }, "IX_Representative_Id");

                    b.HasIndex(new[] { "ValidationResultId" }, "IX_ValidationResult_Id");

                    b.ToTable("RepresentativeRegion", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RepresentativeRegionAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("RepresentativeRegionAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ResourceWorkSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CalendarTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CalendarTypeStringMapStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CalendarTypeStringMap_StringMapId");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("Friday")
                        .HasColumnType("bit");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Monday")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PeriodAfternoon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PeriodMorning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PeriodNocturnal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Saturday")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceDuration")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Sunday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValityEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValityStart")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Wednesday")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ResourceWorkSettings");

                    b.HasIndex(new[] { "CalendarTypeStringMapStringMapId" }, "IX_CalendarTypeStringMap_StringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CalendarTypeStringMapStringMapId" }, "IX_CalendarTypeStringMap_StringMapId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "ServiceTypeId" }, "IX_ServiceTypeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ServiceTypeId" }, "IX_ServiceTypeId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("ResourceWorkSettings");
                });

            modelBuilder.Entity("Care.Api.Models.ResourceWorkSettingsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ResourceWorkSettingsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RulesAttributeMetadataBkp30092021", b =>
                {
                    b.Property<Guid>("AttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CustomValidation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DefaultCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtensionCssClassExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("HidePickListOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAllowNull")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabledByHealthProgram")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnlyNumber")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnlyNumberDecimal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnlyString")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPickList")
                        .HasColumnType("bit")
                        .HasColumnName("isPickList");

                    b.Property<bool?>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisibleInFormAdd")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisibleInFormEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MaskValidation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PremiseFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("RulesAttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScreenAttribuiteSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ScreenFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SectionMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("SectionOrder")
                        .HasColumnType("int");

                    b.ToTable("RulesAttributeMetadata_bkp_30092021", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RulesAttributeMetadataBkp30092021audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("RulesAttributeMetadata_bkp_30092021Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.RulesAttributeMetadatum", b =>
                {
                    b.Property<Guid>("RulesAttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AttributeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CustomValidation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DefaultCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtensionCssClassExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("HidePickListOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAllowNull")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabledByHealthProgram")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnlyNumber")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnlyNumberDecimal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnlyString")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPickList")
                        .HasColumnType("bit")
                        .HasColumnName("isPickList");

                    b.Property<bool?>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisibleInFormAdd")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisibleInFormEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MaskValidation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PremiseFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ScreenAttribuiteSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ScreenFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SectionMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("SectionOrder")
                        .HasColumnType("int");

                    b.HasKey("RulesAttributeMetadataId")
                        .HasName("PK_dbo.RulesAttributeMetadata");

                    b.HasIndex(new[] { "AttributeMetadataId" }, "IX_AttributeMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AttributeMetadataId" }, "IX_AttributeMetadataId"), 90);

                    b.HasIndex(new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" }, "idx_EntityAtrributieProgram");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" }, "idx_EntityAtrributieProgram"), 90);

                    b.HasIndex(new[] { "ProgramId" }, "idx_ProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ProgramId" }, "idx_ProgramId"), 90);

                    b.ToTable("RulesAttributeMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.SchedulingDate", b =>
                {
                    b.Property<DateTime?>("Data")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Ordem")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("SchedulingDates");
                });

            modelBuilder.Entity("Care.Api.Models.SchedulingDatesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("SchedulingDatesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SchedulingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExamId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReschedulingReasonStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduledDateBefore")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<string>("StatusAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.SchedulingHistory");

                    b.HasIndex(new[] { "CampaignId" }, "IX_CampaignId");

                    b.HasIndex(new[] { "ExamId" }, "IX_ExamId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamId" }, "IX_ExamId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsScheduleId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsScheduleId" }, "IX_LogisticsScheduleId"), 90);

                    b.HasIndex(new[] { "ReschedulingReasonStringMapId" }, "IX_ReschedulingReasonStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ReschedulingReasonStringMapId" }, "IX_ReschedulingReasonStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "VisitId" }, "IX_VisitId");

                    b.ToTable("SchedulingHistory", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SchedulingHistoryAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("SchedulingHistoryAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SectionExcludedByPhase", b =>
                {
                    b.Property<Guid>("SectionExcludedByPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectionExcludedByPhaseId")
                        .HasName("PK_dbo.SectionExcludedByPhase");

                    b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId"), 90);

                    b.ToTable("SectionExcludedByPhase", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SectionExcludedByPhaseAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("SectionExcludedByPhaseAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SectionMetadataBkp24092021", b =>
                {
                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("HasCalendar")
                        .HasColumnType("bit");

                    b.Property<int?>("HasMap")
                        .HasColumnType("int");

                    b.Property<bool>("HasSurvey")
                        .HasColumnType("bit");

                    b.Property<string>("Help")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("IsAdvanced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsSystemSection")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisibleInFormAdd")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisibleInFormEdit")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SectionIdHtm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<string>("Tooltip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("SectionMetadata_bkp_24092021", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SectionMetadataBkp24092021audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("SectionMetadata_bkp_24092021Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SectionMetadatum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("EntityMetadataId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("HasCalendar")
                        .HasColumnType("bit");

                    b.Property<int?>("HasMap")
                        .HasColumnType("int");

                    b.Property<bool>("HasSurvey")
                        .HasColumnType("bit");

                    b.Property<string>("Help")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("IsAdvanced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsSystemSection")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisibleInFormAdd")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisibleInFormEdit")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SectionIdHtm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<string>("Tooltip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.SectionMetadata");

                    b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId"), 90);

                    b.HasIndex(new[] { "EntityMetadataId", "ProgramId" }, "idx_EntityAndProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId", "ProgramId" }, "idx_EntityAndProgramId"), 90);

                    b.ToTable("SectionMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ServiceType");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("ServiceType", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ServiceTypeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ServiceTypeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Sm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualSend")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("MessageLevel")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("OriginRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ParentSmsid")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ParentSMSId");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledSend")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("SmsStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SmsTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SmsfromRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SMSFromRegardingEntityId");

                    b.Property<Guid?>("SmstoRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SMSToRegardingEntityId");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ToPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.SMS");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId"), 90);

                    b.HasIndex(new[] { "ParentSmsid" }, "IX_ParentSMSId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ParentSmsid" }, "IX_ParentSMSId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "SmsfromRegardingEntityId" }, "IX_SMSFromRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SmsfromRegardingEntityId" }, "IX_SMSFromRegardingEntityId"), 90);

                    b.HasIndex(new[] { "SmstoRegardingEntityId" }, "IX_SMSToRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SmstoRegardingEntityId" }, "IX_SMSToRegardingEntityId"), 90);

                    b.HasIndex(new[] { "SmsStatusStringMapId" }, "IX_SmsStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SmsStatusStringMapId" }, "IX_SmsStatusStringMapId"), 90);

                    b.HasIndex(new[] { "SmsTypeStringMapId" }, "IX_SmsTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SmsTypeStringMapId" }, "IX_SmsTypeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "SubjectTypeStringMapId" }, "IX_SubjectTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SubjectTypeStringMapId" }, "IX_SubjectTypeStringMapId"), 90);

                    b.ToTable("SMS", null, t =>
                        {
                            t.HasTrigger("TR_CRE_SMS_DSP_TEMP");
                        });
                });

            modelBuilder.Entity("Care.Api.Models.Smsaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("SMSAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.StepLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("EndStepOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProcessLogId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_dbo.StepLogs");

                    b.HasIndex(new[] { "ProcessLogId" }, "IX_ProcessLogId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ProcessLogId" }, "IX_ProcessLogId"), 90);

                    b.ToTable("StepLogs");
                });

            modelBuilder.Entity("Care.Api.Models.StepLogsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("StepLogsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.StrengthMedicament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.StrengthMedicament");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("StrengthMedicament", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.StrengthMedicamentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("StrengthMedicamentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.StringMap", b =>
                {
                    b.Property<Guid>("StringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSystemOption")
                        .HasColumnType("bit");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OptionNameLangEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OptionNameLangEN")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("OptionValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StringMapId")
                        .HasName("PK_dbo.StringMap");

                    b.HasIndex(new[] { "AttributeMetadataId" }, "IX_AttributeMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AttributeMetadataId" }, "IX_AttributeMetadataId"), 90);

                    b.HasIndex(new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" }, "idx_EntityAttributieProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" }, "idx_EntityAttributieProgramId"), 90);

                    b.ToTable("StringMap", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.StringMapAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("StringMapAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ParentSubjectId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Subject");

                    b.HasIndex(new[] { "ParentSubjectId" }, "IX_ParentSubjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ParentSubjectId" }, "IX_ParentSubjectId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SubjectAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("SubjectAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SourceEntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SourceEntityID");

                    b.Property<string>("SourceEntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SourceEntityTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SurveyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SurveyTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Survey");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "SurveyTypeStringMapId" }, "IX_SurveyTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SurveyTypeStringMapId" }, "IX_SurveyTypeStringMapId"), 90);

                    b.ToTable("Survey", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SurveyAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("SurveyAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SurveyQuestionList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("ExibitionOrder")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("QuestionConditionMultiple")
                        .HasColumnType("bit");

                    b.Property<Guid?>("QuestionConditionNo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionConditionYes")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionOrderRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionSequence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.SurveyQuestionList");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("SurveyQuestionList", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SurveyQuestionListAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("SurveyQuestionListAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SurveyResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.SurveyResponse");

                    b.HasIndex(new[] { "QuestionId", "SurveyId", "IsDeleted" }, "IX_NC_SurveyResponse");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "QuestionId", "SurveyId", "IsDeleted" }, "IX_NC_SurveyResponse"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "ObjectId" }, "ix_nc_SurveyResponse_2");

                    b.ToTable("SurveyResponse", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SurveyResponseAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("SurveyResponseAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SurveyResponseLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("ExibitionOrder")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.SurveyResponseLine");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("SurveyResponseLine", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.SurveyResponseLineAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("SurveyResponseLineAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TLogCollate", b =>
                {
                    b.Property<string>("Coluna")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("COLUNA");

                    b.Property<string>("Obs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OBS");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("QUERY");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.Property<string>("Tabela")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("TABELA");

                    b.Property<string>("Tamanho")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TAMANHO");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TIPO");

                    b.ToTable("T_LOG_COLLATE", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TLogCollateaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("T_LOG_COLLATEAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OriginRegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegardingEntityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Task");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OriginRegardingEntityId" }, "IX_OriginRegardingEntityId"), 90);

                    b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingEntityId" }, "IX_RegardingEntityId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TaskAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TaskAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TbRelatorioJanssenSustenna", b =>
                {
                    b.Property<string>("AnoAcesso")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Ano acesso");

                    b.Property<string>("AnoCadastro")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Ano (Cadastro)");

                    b.Property<int>("AnoInativação")
                        .HasColumnType("int")
                        .HasColumnName("Ano (inativação)");

                    b.Property<string>("CidadeMédicoAcompanhamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade médico acompanhamento");

                    b.Property<string>("CidadePaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade - Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CrmMédicoAcompanhamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM médico acompanhamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CrmMédicoPrescritor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM médico prescritor")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CrmUfMédicoAcompanhamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM UF médico acompanhamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CrmUfMédicoPrescritor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM UF médico prescritor")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Código")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataDoÚltimoEnvioDoBenefícioDeIt")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data do último envio do Benefício de IT");

                    b.Property<int?>("DiaDoTratamentoDoBenefícioDeIt")
                        .HasColumnType("int")
                        .HasColumnName("Dia do Tratamento do Benefício de IT");

                    b.Property<string>("DoseDoBenefícioDeIt")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Dose do Benefício de IT")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DtCadastro")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Dt. Cadastro");

                    b.Property<string>("DtDaMigração")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Dt da migração");

                    b.Property<string>("DtFinalTentativa")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Dt. Final Tentativa");

                    b.Property<string>("DtInativação")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Dt. Inativação");

                    b.Property<string>("DtInícioTentativa")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Dt. Início Tentativa");

                    b.Property<string>("DtInícioTratamento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Dt. Início Tratamento");

                    b.Property<string>("DtÚltimoContato")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Dt. Último Contato");

                    b.Property<string>("DtÚltimoContatoSucesso")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Dt. Último Contato Sucesso");

                    b.Property<string>("ExcedeuLimiteDoBenefício")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Excedeu Limite do Benefício");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FormaDeAquisição")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Forma de Aquisição");

                    b.Property<string>("InformaçõesPrimeiroLaudo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("Informações primeiro laudo");

                    b.Property<string>("LocalQueRecebeuOBenefícioDeIt")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Local que recebeu o Benefício de IT")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MedicamentoAnterior")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Medicamento Anterior?");

                    b.Property<string>("MedicamentoAnterior1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Medicamento Anterior")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MedicamentoAtual")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Medicamento Atual")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MesAcesso")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Mes acesso");

                    b.Property<string>("MesAcessoNum")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Mes acesso Num");

                    b.Property<string>("MigrouDoBeneficioDeIt")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Migrou do Beneficio de IT ?");

                    b.Property<string>("MotivoDeInativação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Motivo de Inativação")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MédicoAcompanhamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Médico Acompanhamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MédicoPrescritor")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Médico Prescritor")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MêsCadastro")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Mês (Cadastro)");

                    b.Property<int?>("MêsCadastroNum")
                        .HasColumnType("int")
                        .HasColumnName("Mês (Cadastro) num");

                    b.Property<string>("MêsInativação")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Mês (inativação)");

                    b.Property<int>("MêsInativaçãoNum")
                        .HasColumnType("int")
                        .HasColumnName("Mês (inativação) Num");

                    b.Property<string>("NovoLaudoEnviadoEstáCorreto")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("Novo laudo enviado está correto?");

                    b.Property<string>("OrigemCadastro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Origem Cadastro")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OrigemTratamento")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Origem Tratamento");

                    b.Property<string>("PacientesQueReceberamOBenefícioDeIt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pacientes que receberam o Benefício de IT")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PacientesQueSolicitaramOBeneficioDeIt")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pacientes que solicitaram o Beneficio de IT");

                    b.Property<string>("Patologia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PlanoDeSaúde")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Plano de saúde")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PlanoDeSaúdeDetalhe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Plano de Saúde detalhe")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PossuiPlanoDeSaúde")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Possui plano de saúde");

                    b.Property<int?>("QtdContatosSemSucesso")
                        .HasColumnType("int")
                        .HasColumnName("QTD CONTATOS SEM SUCESSO");

                    b.Property<int>("QtdDeEnviosBenefícioDeIt")
                        .HasColumnType("int")
                        .HasColumnName("Qtd de envios (benefício de  IT)");

                    b.Property<string>("StatusAcesso")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("Status Acesso");

                    b.Property<string>("StatusDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SubstatusAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Substatus Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("TempoDeAcessoDias")
                        .HasColumnType("int")
                        .HasColumnName("Tempo de Acesso (Dias)");

                    b.Property<string>("TempoDeAcessoDiasResumo")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Tempo de acesso (dias) - Resumo");

                    b.Property<int?>("TempoDeProgramaEmMeses")
                        .HasColumnType("int")
                        .HasColumnName("Tempo de Programa (em meses)");

                    b.Property<string>("TempoDeProgramaEmMesesResumo")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Tempo de Programa (em meses) - Resumo");

                    b.Property<int>("TempoDeTratamentoEmMesesPersistência")
                        .HasColumnType("int")
                        .HasColumnName("Tempo de tratamento em meses (persistência)");

                    b.Property<string>("TempoDeTratamentoEmMesesPersistênciaResumo")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Tempo de tratamento em meses (persistência) - Resumo");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Tipo de acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("UfPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UF Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("TB_RELATORIO_JANSSEN_SUSTENNA", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TbRelatorioJanssenSustennaaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TB_RELATORIO_JANSSEN_SUSTENNAAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblAcompanhamentoInfusaoShire", b =>
                {
                    b.Property<int>("Aberto")
                        .HasColumnType("int");

                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Código")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CódigoDoTratamento")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código do Tratamento");

                    b.Property<Guid>("CódigoPaciente")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código Paciente");

                    b.Property<string>("DataAgendada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Agendada");

                    b.Property<string>("DataDeInícioDoTratamento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data de Início do Tratamento");

                    b.Property<string>("DataInativação")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Inativação");

                    b.Property<DateTime?>("DataPrevista")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Prevista");

                    b.Property<string>("DataPrimeiraInfusão")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Primeira Infusão");

                    b.Property<string>("DataPrimeiroAtendimento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Primeiro Atendimento");

                    b.Property<string>("DataRealizada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Realizada");

                    b.Property<DateTime?>("DataReferencia")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Referencia");

                    b.Property<string>("DataReferência")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Data Referência");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName(" Doença")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Estado do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaseDoTratamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Fase do tratamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Importcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("importcode")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("InfusionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Iniciais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LocalDaInfusão")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Local da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoDaFalta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Motivo da Falta")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoDoAfastamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Motivo do Afastamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("NaoRealizado")
                        .HasColumnType("int");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("QtdeAmpolasIdeais")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Qtde Ampolas Ideais");

                    b.Property<decimal?>("QtdeAmpolasReais")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Qtde Ampolas Reais");

                    b.Property<int>("Realizado")
                        .HasColumnType("int");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDaInfusão")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Tipo de Acesso");

                    b.ToTable("tbl_AcompanhamentoInfusao_Shire", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblAcompanhamentoInfusaoShireAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tbl_AcompanhamentoInfusao_ShireAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblCare", b =>
                {
                    b.Property<string>("CodigoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codigo do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CpfCare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF_CARE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DataAgendadaCare")
                        .HasColumnType("datetime")
                        .HasColumnName("data agendada care");

                    b.Property<DateTime?>("DataRealizadoCare")
                        .HasColumnType("datetime")
                        .HasColumnName("data_realizado_care");

                    b.Property<Guid>("Diagnosticid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("diagnosticid");

                    b.Property<Guid?>("Exameid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exameid");

                    b.Property<string>("LocalExameCare")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL EXAME CARE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusDoExameCare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status do exame care")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDoExameCare")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("tipo_do_exame_care")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("VoucherCare")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("voucher_care")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("TBL_CARE", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblCareaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TBL_CAREAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblClinica", b =>
                {
                    b.Property<string>("CpfClinica")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("CPF_CLINICA")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<DateTime?>("DataRealizadaClinica")
                        .HasColumnType("datetime")
                        .HasColumnName("data_realizada_clinica");

                    b.Property<string>("LocalExameClinica")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("LOCAL EXAME CLINICA")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("NomePaciente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("NOME_PACIENTE")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("StatusVoucherClinica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status voucher clinica")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("VoucherClinica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("voucher_clinica")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.ToTable("TBL_CLINICAS", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblClinicasaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TBL_CLINICASAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblCorrecaoInfuso", b =>
                {
                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("InfusionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<long?>("Ordem")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PreviewDate")
                        .HasColumnType("datetime");

                    b.ToTable("tbl_correcao_infusoes", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblCorrecaoInfusoesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tbl_correcao_infusoesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblDddsNonoDigito", b =>
                {
                    b.Property<int?>("Ddd")
                        .HasColumnType("int")
                        .HasColumnName("DDD");

                    b.ToTable("TBL_DDDS_NONO_DIGITO", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblDddsNonoDigitoaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TBL_DDDS_NONO_DIGITOAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblDeletarInfusao", b =>
                {
                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<long?>("Ordem")
                        .HasColumnType("bigint");

                    b.ToTable("tbl_deletar_infusao", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblDeletarInfusaoAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tbl_deletar_infusaoAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblFeriadosNacionai", b =>
                {
                    b.Property<DateTime?>("Data")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("data");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("descricao");

                    b.ToTable("tbl_feriados_nacionais", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblFeriadosNacionaisAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("tbl_feriados_nacionaisAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblFinal", b =>
                {
                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("QtdeAtivos")
                        .HasColumnType("int");

                    b.Property<int?>("QtdeInativos")
                        .HasColumnType("int");

                    b.ToTable("tbl_final", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblFinalAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tbl_finalAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblInfuso", b =>
                {
                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cidade do paciente");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CRM");

                    b.Property<string>("CódigoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Código do paciente");

                    b.Property<string>("DataDaPrimeiraInfusão")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Data da primeira infusão");

                    b.Property<DateTime?>("DataPrevista")
                        .HasColumnType("datetime")
                        .HasColumnName("Data prevista");

                    b.Property<DateTime?>("DataRealizada")
                        .HasColumnType("datetime")
                        .HasColumnName("Data realizada");

                    b.Property<DateTime?>("DataReferencia")
                        .HasColumnType("datetime");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmailMedico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Estado do paciente");

                    b.Property<string>("FaseDoTratamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Fase do tratamento");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("InfusionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IniciaisDoPaciente")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("Iniciais do paciente");

                    b.Property<int?>("LinhaAtual")
                        .HasColumnType("int");

                    b.Property<string>("LocalDaInfusão")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Local da infusão");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ModalidadeDaInfusão")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Modalidade da infusão");

                    b.Property<string>("ModalidadeDeFornecimento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Modalidade de fornecimento");

                    b.Property<string>("MotivoDaFalta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Motivo da falta");

                    b.Property<string>("NomeDoPaciente")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Nome do paciente");

                    b.Property<decimal?>("QtdeAmpolas")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Qtde ampolas");

                    b.Property<decimal?>("QtdeAmpolasIdeais")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Qtde ampolas ideais");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("StatusDaInfusão")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status da infusão");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ufcrm")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("UFCRM");

                    b.ToTable("tbl_infusoes", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblInfusoes2", b =>
                {
                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cidade do paciente");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CRM");

                    b.Property<string>("CódigoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Código do paciente");

                    b.Property<string>("DataDaPrimeiraInfusão")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Data da primeira infusão");

                    b.Property<DateTime?>("DataPrevista")
                        .HasColumnType("datetime")
                        .HasColumnName("Data prevista");

                    b.Property<DateTime?>("DataRealizada")
                        .HasColumnType("datetime")
                        .HasColumnName("Data realizada");

                    b.Property<DateTime?>("DataReferencia")
                        .HasColumnType("datetime");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmailMedico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Estado do paciente");

                    b.Property<string>("FaseDoTratamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Fase do tratamento");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("InfusionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IniciaisDoPaciente")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("Iniciais do paciente");

                    b.Property<int?>("Linha")
                        .HasColumnType("int");

                    b.Property<int?>("LinhaAtual")
                        .HasColumnType("int");

                    b.Property<string>("LocalDaInfusão")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Local da infusão");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ModalidadeDaInfusão")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Modalidade da infusão");

                    b.Property<string>("ModalidadeDeFornecimento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Modalidade de fornecimento");

                    b.Property<string>("MotivoDaFalta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Motivo da falta");

                    b.Property<string>("NomeDoPaciente")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Nome do paciente");

                    b.Property<decimal?>("QtdeAmpolas")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Qtde ampolas");

                    b.Property<decimal?>("QtdeAmpolasIdeais")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Qtde ampolas ideais");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("StatusDaInfusão")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status da infusão");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ufcrm")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("UFCRM");

                    b.ToTable("tbl_infusoes_2", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblInfusoes2audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("tbl_infusoes_2Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblInfusoesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("tbl_infusoesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblInfusoesPrevista", b =>
                {
                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cidade do paciente");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CRM");

                    b.Property<string>("CódigoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Código do paciente");

                    b.Property<string>("DataDaPrimeiraInfusão")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Data da primeira infusão");

                    b.Property<string>("DataPrevista")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)")
                        .HasColumnName("Data prevista");

                    b.Property<DateTime?>("DataRealizada")
                        .HasColumnType("datetime")
                        .HasColumnName("Data realizada");

                    b.Property<DateTime?>("DataReferencia")
                        .HasColumnType("datetime");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmailMedico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Estado do paciente");

                    b.Property<string>("FaseDoTratamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Fase do tratamento");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("InfusionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IniciaisDoPaciente")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("Iniciais do paciente");

                    b.Property<long?>("Linha")
                        .HasColumnType("bigint");

                    b.Property<int?>("LinhaAtual")
                        .HasColumnType("int");

                    b.Property<string>("LocalDaInfusão")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Local da infusão");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ModalidadeDaInfusão")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Modalidade da infusão");

                    b.Property<string>("ModalidadeDeFornecimento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Modalidade de fornecimento");

                    b.Property<string>("MotivoDaFalta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Motivo da falta");

                    b.Property<string>("NomeDoPaciente")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Nome do paciente");

                    b.Property<decimal?>("QtdeAmpolas")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Qtde ampolas");

                    b.Property<decimal?>("QtdeAmpolasIdeais")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Qtde ampolas ideais");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("StatusDaInfusão")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Status da infusão");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ufcrm")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("UFCRM");

                    b.HasIndex(new[] { "Linha" }, "IX_NC_tbl_infusoes_previstas");

                    b.ToTable("tbl_infusoes_previstas", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblInfusoesPrevistasAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("tbl_infusoes_previstasAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblNovartisGeral", b =>
                {
                    b.Property<bool?>("AlteraçãoManual")
                        .HasColumnType("bit")
                        .HasColumnName("Alteração Manual");

                    b.Property<string>("CanceladoPor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cancelado Por");

                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CnpjinstituicaoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJInstituicaoPaciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CodigoDoExame")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CodigoMultirao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ConsultorVoucher")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cpfpaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPFPaciente");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("Criadoem")
                        .HasColumnType("datetime");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DataAgendadoPosPendenciaRecebimentoColeta")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataAgendamentoLogistica")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataAniversario")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataCancelamentoVoucher")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Cancelamento Voucher");

                    b.Property<string>("DataColetaEmAnalise")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataDevolucaoLogistica")
                        .HasColumnType("date");

                    b.Property<string>("DataLaudoAnexado")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("DataMultirao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataPendenciaRecebimentoColeta")
                        .HasColumnType("date");

                    b.Property<string>("DataRecolhimento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("DataSolicitacaoExame")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataSolicitacaoProtocolo")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataTransporte")
                        .HasColumnType("date");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DocumentosPendentes")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DocumentosPendentesPfs")
                        .HasColumnType("date")
                        .HasColumnName("DocumentosPendentesPFS");

                    b.Property<string>("EmailPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EnderecoInstituicaoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("especialidade");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExameSolicitado")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaseDaPatologia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("GerenteVoucher")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("Healthprogramid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("healthprogramid");

                    b.Property<string>("InstituicaoPaciente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("InstituicaoPacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Laboratorio")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("LogisticsScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotivoCancelamentoVoucher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Motivo Cancelamento Voucher");

                    b.Property<string>("Multirao")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("NecessitaDevolucao")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("NomePaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NumeroInstituicaoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParceiroLogístico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Parceiro Logístico")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Patologia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PendenciaRecebimentoColeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrecisaDeLogística")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Precisa de Logística");

                    b.Property<string>("Programa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ProgramaVoucher")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultadoCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Resultado Completo");

                    b.Property<bool?>("StatusDoMédico")
                        .HasColumnType("bit")
                        .HasColumnName("Status do Médico");

                    b.Property<string>("StatusExame")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StatusVoucher")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("TelefonePaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoAnalise")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TipoAnaliseMédico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeColeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tipo de Coleta")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UfDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UF do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Ufcrm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UFCRM")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("UfinstituicaoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UFInstituicaoPaciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Uflaboratorio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UFLaboratorio")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Visao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Voucher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("VoucherCriadoEm")
                        .HasColumnType("date");

                    b.Property<DateTime?>("VoucherUsadoEm")
                        .HasColumnType("date");

                    b.Property<Guid?>("Voucherid")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("TBL_NOVARTIS_GERAL", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblNovartisGeralaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TBL_NOVARTIS_GERALAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblRelatorioComparativoPatientmapEnzimai", b =>
                {
                    b.Property<string>("AceitaVisita")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Aceita Visita");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("crm");

                    b.Property<string>("DataConclusaoCadastro")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Data Conclusao Cadastro");

                    b.Property<string>("DataEntrada")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)")
                        .HasColumnName("Data Entrada");

                    b.Property<string>("DataInativacao")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Data Inativacao");

                    b.Property<string>("DataNascimento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Data Nascimento");

                    b.Property<string>("DataProximaAcao")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Data Proxima Acao");

                    b.Property<string>("DetalheDoStatusDoTratamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Detalhe do status do Tratamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Doenca")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaixaEtaria")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Faixa Etaria");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoInativacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Motivo Inativacao")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeOperadoraDeSaude")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Nome Operadora de Saude")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OrigemDoCadastro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Origem do Cadastro")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("PossuiPlanoDeSaude")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Possui Plano de Saude");

                    b.Property<string>("Programa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Região")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SituacaoTratamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Situacao Tratamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusDoTratamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status do Tratamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("UltimoContatoComSucesso")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)")
                        .HasColumnName("Ultimo contato Com Sucesso");

                    b.Property<string>("UltimoContatoSemSucesso")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)")
                        .HasColumnName("Ultimo contato Sem Sucesso");

                    b.ToTable("tbl_relatorio_comparativo_patientmap_enzimais", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblRelatorioComparativoPatientmapEnzimaisAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tbl_relatorio_comparativo_patientmap_enzimaisAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblRelatorioEntrenosEntyvioGeral2", b =>
                {
                    b.Property<string>("AcessoAprovado")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("Acesso Aprovado?");

                    b.Property<string>("AcessoVigente")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Acesso Vigente?");

                    b.Property<string>("AgingIdade")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("CanalDeAcesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Canal de Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CódPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cód. Paciente");

                    b.Property<string>("CódTratamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cód. Tratamento");

                    b.Property<DateTime?>("DataAdesão")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataCriação")
                        .HasColumnType("date")
                        .HasColumnName("Data Criação");

                    b.Property<DateTime?>("DataDeRespostaSobreAcesso")
                        .HasColumnType("date")
                        .HasColumnName("Data de Resposta sobre Acesso");

                    b.Property<DateTime?>("DataDeSolicitaçãoDeAcesso")
                        .HasColumnType("date")
                        .HasColumnName("Data de Solicitação de Acesso");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("Data Nascimento");

                    b.Property<DateTime?>("DataPrescrição")
                        .HasColumnType("date")
                        .HasColumnName("Data Prescrição");

                    b.Property<DateTime?>("DataQueForneceuOrientaçãoSobreAcesso")
                        .HasColumnType("date")
                        .HasColumnName("Data que Forneceu Orientação Sobre Acesso");

                    b.Property<DateTime?>("DataResultado")
                        .HasColumnType("date")
                        .HasColumnName("Data Resultado");

                    b.Property<int?>("DataUtilizaçãoIt")
                        .HasColumnType("int")
                        .HasColumnName("Data Utilização IT");

                    b.Property<DateTime?>("DtPrimeiraDoseInduçãoDoTratamento")
                        .HasColumnType("date")
                        .HasColumnName("Dt. Primeira Dose Indução do Tratamento");

                    b.Property<DateTime?>("DtPrimeiraDoseManutençãoDoTratamento")
                        .HasColumnType("date")
                        .HasColumnName("Dt. Primeira Dose Manutenção do Tratamento");

                    b.Property<DateTime?>("DtRetornoAoMédico")
                        .HasColumnType("date")
                        .HasColumnName("Dt. Retorno ao Médico");

                    b.Property<DateTime?>("DtÚltimaDoseInduçãoDoTratamento")
                        .HasColumnType("date")
                        .HasColumnName("Dt. Última Dose Indução do Tratamento");

                    b.Property<DateTime?>("DtÚltimaDoseManutençãoDoTratamento")
                        .HasColumnType("date")
                        .HasColumnName("Dt. Última Dose Manutenção do Tratamento");

                    b.Property<DateTime?>("DtÚltimoContato")
                        .HasColumnType("date")
                        .HasColumnName("Dt. Último Contato");

                    b.Property<DateTime?>("DtÚltimoContatoEfetivo")
                        .HasColumnType("date")
                        .HasColumnName("Dt. Último Contato Efetivo");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtapaAtual")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Etapa Atual");

                    b.Property<string>("FaixaEtaria")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("Faixa Etaria");

                    b.Property<string>("FaseAtual")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Fase Atual");

                    b.Property<string>("FormaDeAcesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FrequênciaManutençãoTrat")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("Frequência Manutenção Trat.");

                    b.Property<decimal?>("Idade")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<DateTime?>("InativadoEm")
                        .HasColumnType("date")
                        .HasColumnName("Inativado Em");

                    b.Property<string>("Indicação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LocalExame")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Local Exame");

                    b.Property<string>("MedicamentosAnteriores")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Medicamentos Anteriores");

                    b.Property<string>("MotivoInativação")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Motivo Inativação");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NroCrm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nro. CRM");

                    b.Property<string>("OperadoraDeSaúde")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Operadora de Saúde");

                    b.Property<string>("OperadoraDeSaúdeAcesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Operadora de Saúde - Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("PossuiPlano")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Possui Plano?");

                    b.Property<string>("PossuiPrescrição")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("Possui Prescrição?");

                    b.Property<string>("Produto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long?>("QtdDosesInduçãoDoTratamento")
                        .HasColumnType("bigint")
                        .HasColumnName("Qtd. Doses Indução do Tratamento");

                    b.Property<long?>("QtdDosesManutençãoDoTratamento")
                        .HasColumnType("bigint")
                        .HasColumnName("Qtd. Doses Manutenção do tratamento");

                    b.Property<int?>("QtdeContatos")
                        .HasColumnType("int")
                        .HasColumnName("Qtde Contatos");

                    b.Property<int?>("QtdeContatosEfetivos")
                        .HasColumnType("int")
                        .HasColumnName("Qtde. Contatos Efetivos");

                    b.Property<int>("QuantidadePrescrição")
                        .HasColumnType("int")
                        .HasColumnName("Quantidade Prescrição");

                    b.Property<string>("RecebeuIt")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("Recebeu IT?");

                    b.Property<string>("Regiao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.Property<int?>("TratamentosAnteriores")
                        .HasColumnType("int")
                        .HasColumnName("Tratamentos Anteriores");

                    b.Property<string>("UfCrm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UF CRM");

                    b.Property<string>("UfNúmeroCrm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UF/Número CRM");

                    b.Property<string>("ÓrgãoPúblico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Órgão Público")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("tbl_relatorio_entrenos_entyvio_geral_2", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TblRelatorioEntrenosEntyvioGeral2audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tbl_relatorio_entrenos_entyvio_geral_2Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempContingenciaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TempContingenciaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempContingencium", b =>
                {
                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("QtdeAnexos")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegardingObjectIdTarget")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("TempContingencia");
                });

            modelBuilder.Entity("Care.Api.Models.TempCuidarMaisAcesso", b =>
                {
                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(217)
                        .IsUnicode(false)
                        .HasColumnType("varchar(217)")
                        .HasColumnName("documento");

                    b.Property<string>("Exame")
                        .IsRequired()
                        .HasMaxLength(1026)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1026)")
                        .HasColumnName("exame");

                    b.Property<string>("Forma")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("forma");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("nome");

                    b.Property<string>("Procedimento")
                        .IsRequired()
                        .HasMaxLength(436)
                        .IsUnicode(false)
                        .HasColumnType("varchar(436)")
                        .HasColumnName("procedimento");

                    b.Property<string>("Via")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("via");

                    b.ToTable("TEMP_CUIDAR_MAIS_ACESSO", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempCuidarMaisAcessoAccessProcedureByProgram", b =>
                {
                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("codigo");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(183)
                        .IsUnicode(false)
                        .HasColumnType("varchar(183)")
                        .HasColumnName("documento");

                    b.Property<string>("Forma")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("forma");

                    b.Property<string>("Procedimento")
                        .IsRequired()
                        .HasMaxLength(775)
                        .IsUnicode(false)
                        .HasColumnType("varchar(775)")
                        .HasColumnName("procedimento");

                    b.Property<string>("Via")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("via");

                    b.ToTable("TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempCuidarMaisAcessoAccessProcedureByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempCuidarMaisAcessoaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TEMP_CUIDAR_MAIS_ACESSOAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempInfusionCare", b =>
                {
                    b.Property<DateTime?>("MostRecentAdministrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Most Recent Administration Date");

                    b.Property<long?>("Row")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhoAdministerTreatment")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Who Administer Treatment?")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("TempInfusionCare", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempInfusionCareAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TempInfusionCareAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempPesquisa", b =>
                {
                    b.Property<DateTime?>("DataPesquisa")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Diagnosticid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DIAGNOSTICID");

                    b.Property<string>("Pergunta1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERGUNTA1")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Pergunta2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PERGUNTA2")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("TempPesquisa", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TempPesquisaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TempPesquisaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SmsTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("TemplateTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ValidationResultId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ValidationResult_Id");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Template");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "SmsTypeStringMapId" }, "IX_SmsTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SmsTypeStringMapId" }, "IX_SmsTypeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TemplateTypeStringMapId" }, "IX_TemplateTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TemplateTypeStringMapId" }, "IX_TemplateTypeStringMapId"), 90);

                    b.HasIndex(new[] { "ValidationResultId" }, "IX_ValidationResult_Id");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ValidationResultId" }, "IX_ValidationResult_Id"), 90);

                    b.ToTable("Template", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TemplateAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TemplateAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TesteSomar22112019", b =>
                {
                    b.Property<int?>("AnoInativacao")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MesInativacao")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusDetalheDoTratamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Status detalhe do tratamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusDoTratamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Status do tratamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("teste_somar_22112019", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TesteSomar22112019audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("teste_somar_22112019Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TesteXml", b =>
                {
                    b.Property<string>("Xml")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("XML");

                    b.ToTable("TESTE_XML", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TesteXmlaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TESTE_XMLAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TherapeuticHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModificationDosage")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Dosage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("DosageUnitStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("IncidentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("MedicamentCompetitorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplyMethodStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TherapeuticHistory");

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "DosageUnitStringMapId" }, "IX_DosageUnitStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DosageUnitStringMapId" }, "IX_DosageUnitStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId");

                    b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "SupplyMethodStringMapId" }, "IX_SupplyMethodStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SupplyMethodStringMapId" }, "IX_SupplyMethodStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.ToTable("TherapeuticHistory", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TherapeuticHistoryAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TherapeuticHistoryAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TherapeuticType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TherapeuticType");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("TherapeuticType", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TherapeuticTypeAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TherapeuticTypeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Tmp", b =>
                {
                    b.Property<Guid?>("Healthprogramid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HEALTHPROGRAMID");

                    b.Property<string>("Voucher")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("nvarchar(52)");

                    b.ToTable("tmp", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpAccount", b =>
                {
                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("tmp_account", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpAccountAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_accountAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpAccountSeetingByProgram", b =>
                {
                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("tmp_accountSeetingByProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpAccountSeetingByProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_accountSeetingByProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpAmpola", b =>
                {
                    b.Property<decimal?>("Ampouleamount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ampouleamount");

                    b.Property<decimal?>("Ampouleamountcorrigido")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ampouleamountcorrigido");

                    b.Property<decimal?>("Ampouleamountexpected")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ampouleamountexpected");

                    b.Property<Guid>("Infusionid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Treatmentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("weight");

                    b.Property<decimal?>("WeightAnterior")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("TMP_AMPOLAS", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpAmpolasaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TMP_AMPOLASAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpApoioDiagnostico", b =>
                {
                    b.Property<Guid?>("Doctorid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DOCTORID");

                    b.Property<int?>("Qtde")
                        .HasColumnType("int")
                        .HasColumnName("QTDE");

                    b.ToTable("TMP_APOIO_DIAGNOSTICO", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpApoioDiagnosticoaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TMP_APOIO_DIAGNOSTICOAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmpAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDataDeAdesao", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DataDaAdesao")
                        .HasColumnType("date");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Programa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("TmpDataDeAdesao", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDataDeAdesaoAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TmpDataDeAdesaoAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDataUltimaRetiradaAmostra", b =>
                {
                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Doctorid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DOCTORID");

                    b.ToTable("TMP_DATA_ULTIMA_RETIRADA_AMOSTRA", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDataUltimaRetiradaAmostraaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TMP_DATA_ULTIMA_RETIRADA_AMOSTRAAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDeletar", b =>
                {
                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("AmountCanceled")
                        .HasColumnType("int");

                    b.Property<int?>("AmountUsed")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CNPJ");

                    b.Property<bool?>("ConfirmWithdrawal")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpfdoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPFDoctor")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Cte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateForCollecting")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateForReceiving")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeliveryLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamId1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Exam_Id");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("IncidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IntegrationStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsLegacy")
                        .HasColumnType("bit")
                        .HasColumnName("isLegacy");

                    b.Property<Guid?>("KitTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LegacyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalDeliveryWithdrawStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocalTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogisticsPartnerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("LogisticsPartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLocalDeliveryWithdraw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestDoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponsibleForCollecting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleForReceiving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleTelephoneWithdrawal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScheduleStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduledStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SendRequestKit")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WithdrawalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("tmp_deletar", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDeletar10Dup", b =>
                {
                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime")
                        .HasColumnName("data");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("tmp_deletar_10_dup", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDeletar10DupAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_deletar_10_dupAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDeletarAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_deletarAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDropoutsaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_DROPOUTSAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDuplicidadeVoucher", b =>
                {
                    b.Property<Guid?>("BenefitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CriacaoVoucher")
                        .HasColumnType("datetime");

                    b.Property<int>("Deletavel")
                        .HasColumnType("int");

                    b.Property<Guid?>("DiagnosticExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Exame")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogisticsScheduleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("OrdemDeletaveis")
                        .HasColumnType("bigint");

                    b.Property<int?>("QtdeVouchers")
                        .HasColumnType("int");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Voucher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("tmp_duplicidade_vouchers", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpDuplicidadeVouchersAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_duplicidade_vouchersAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpEnrolled", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QtdAmpolas")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<int>("QtdAmpolasIdeais")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS_INFUSAO");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_ENROLLED", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpEnrolledaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_ENROLLEDAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpEntradaLocal", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QtdAmpolas")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<int>("QtdAmpolasIdeais")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS_INFUSAO");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_ENTRADA_LOCAL", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpEntradaLocalaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_ENTRADA_LOCALAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpEntradaPausa", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QtdAmpolas")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<int>("QtdAmpolasIdeais")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS_INFUSAO");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_ENTRADA_PAUSA", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpEntradaPausaaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_ENTRADA_PAUSAAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpFinalPacientesEmFrente", b =>
                {
                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaixaEtaria")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Faixa Etaria");

                    b.Property<string>("GrauDeHemofília")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Grau de Hemofília")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Hemcasa")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<decimal?>("Idade")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("Infusoes")
                        .HasColumnType("int")
                        .HasColumnName("infusoes");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Modalidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("TratamentoPrograma")
                        .HasColumnType("datetime")
                        .HasColumnName("Tratamento Programa");

                    b.Property<int?>("Visita")
                        .HasColumnType("int")
                        .HasColumnName("visita");

                    b.ToTable("tmp_final_pacientes_em_frente", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpFinalPacientesEmFrenteAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_final_pacientes_em_frenteAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusionTeste", b =>
                {
                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("optionName")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("PreviewDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("tmp_infusion_teste", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusionTesteAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_infusion_testeAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusionTesteInserir", b =>
                {
                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("optionName")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("PreviewDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("tmp_infusion_teste_inserir", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusionTesteInserirAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_infusion_teste_inserirAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfuso", b =>
                {
                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmpouleAmountExpected")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Código")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CódigoDoTratamento")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código do Tratamento");

                    b.Property<Guid>("CódigoPaciente")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código Paciente");

                    b.Property<string>("DataAgendada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Agendada");

                    b.Property<string>("DataInativação")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Inativação");

                    b.Property<string>("DataInícioDoTratamento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Início do Tratamento");

                    b.Property<string>("DataPrimeiraInfusão")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Primeira Infusão");

                    b.Property<string>("DataPrimeiroAtendimento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Primeiro Atendimento");

                    b.Property<string>("DataRealizada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Realizada");

                    b.Property<string>("DataReferência")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Data Referência");

                    b.Property<DateTime?>("DataReferência2")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Referência2");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName(" Doença")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Estado do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("FlagRealizado")
                        .HasColumnType("int")
                        .HasColumnName("Flag Realizado");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("InfusionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LocalDaInfusão")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Local da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoDoAfastamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Motivo do Afastamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDaInfusão")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Tipo de Acesso");

                    b.ToTable("TMP_INFUSOES", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusoesCompleto", b =>
                {
                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmpouleAmountExpected")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Código")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CódigoDoTratamento")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código do Tratamento");

                    b.Property<Guid>("CódigoPaciente")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código Paciente");

                    b.Property<string>("DataAgendada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Agendada");

                    b.Property<DateTime?>("DataCriacaoTratamento")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Criacao Tratamento");

                    b.Property<DateTime?>("DataInativação")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Inativação");

                    b.Property<DateTime?>("DataInfusao1")
                        .HasColumnType("datetime")
                        .HasColumnName("Data_Infusao_1");

                    b.Property<string>("DataInícioDoTratamento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Início do Tratamento");

                    b.Property<DateTime?>("DataPrimeiraInfusão")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Primeira Infusão");

                    b.Property<string>("DataPrimeiroAtendimento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Primeiro Atendimento");

                    b.Property<string>("DataRealizada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Realizada");

                    b.Property<string>("DataReferência")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Data Referência");

                    b.Property<DateTime?>("DataReferência2")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Referência2");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName(" Doença")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Estado do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("FlagRealizado")
                        .HasColumnType("int")
                        .HasColumnName("Flag Realizado");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("InfusionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LocalDaInfusão")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Local da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoDoAfastamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Motivo do Afastamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeGerente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Nome Gerente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeRepresentante")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Nome Representante")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDaInfusão")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tipo de Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("TMP_INFUSOES_COMPLETO", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusoesCompletoAdd", b =>
                {
                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmpouleAmountExpected")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Código")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CódigoDoTratamento")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código do Tratamento");

                    b.Property<Guid>("CódigoPaciente")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código Paciente");

                    b.Property<string>("DataAgendada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Agendada");

                    b.Property<DateTime?>("DataCriacaoTratamento")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Criacao Tratamento");

                    b.Property<DateTime?>("DataInativação")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Inativação");

                    b.Property<DateTime?>("DataInfusao1")
                        .HasColumnType("datetime")
                        .HasColumnName("Data_Infusao_1");

                    b.Property<string>("DataInícioDoTratamento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Início do Tratamento");

                    b.Property<DateTime?>("DataPrimeiraInfusão")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Primeira Infusão");

                    b.Property<string>("DataPrimeiroAtendimento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Primeiro Atendimento");

                    b.Property<string>("DataRealizada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Realizada");

                    b.Property<string>("DataReferência")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Data Referência");

                    b.Property<DateTime?>("DataReferência2")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Referência2");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName(" Doença")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Estado do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("FlagRealizado")
                        .HasColumnType("int")
                        .HasColumnName("Flag Realizado");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("InfusionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LocalDaInfusão")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Local da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoDoAfastamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Motivo do Afastamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeGerente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Nome Gerente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeRepresentante")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Nome Representante")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDaInfusão")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Tipo de Acesso");

                    b.ToTable("TMP_INFUSOES_COMPLETO_ADD", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusoesCompletoAddaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_INFUSOES_COMPLETO_ADDAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusoesCompletoaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_INFUSOES_COMPLETOAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusoesRoll", b =>
                {
                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmpouleAmountExpected")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CidadeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cidade do paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPF")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Código")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CódigoDoTratamento")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código do Tratamento");

                    b.Property<Guid>("CódigoPaciente")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Código Paciente");

                    b.Property<string>("DataAgendada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Agendada");

                    b.Property<string>("DataInativação")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Inativação");

                    b.Property<string>("DataInícioDoTratamento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Início do Tratamento");

                    b.Property<string>("DataPrimeiraInfusão")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Primeira Infusão");

                    b.Property<string>("DataPrimeiroAtendimento")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Primeiro Atendimento");

                    b.Property<string>("DataRealizada")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Data Realizada");

                    b.Property<string>("DataReferência")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Data Referência");

                    b.Property<DateTime?>("DataReferência2")
                        .HasColumnType("datetime")
                        .HasColumnName("Data Referência2");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName(" Doença")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EstadoDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Estado do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("FlagRealizado")
                        .HasColumnType("int")
                        .HasColumnName("Flag Realizado");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("InfusionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LocalDaInfusão")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Local da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MotivoDoAfastamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Motivo do Afastamento")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Paciente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Situação")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusDaInfusão")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status da Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Tipo de Acesso");

                    b.ToTable("TMP_INFUSOES_Roll", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusoesRollAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_INFUSOES_RollAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpInfusoesaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_INFUSOESAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpKpiInfuso", b =>
                {
                    b.Property<string>("InfusionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NewTratamentoname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("new_tratamentoname")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("QtdAmpolas")
                        .HasColumnType("numeric(23, 10)")
                        .HasColumnName("qtd_ampolas");

                    b.Property<decimal?>("QtdAmpolasIdeais")
                        .HasColumnType("numeric(23, 10)")
                        .HasColumnName("qtd_ampolas_ideais");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("tmp_kpi_infusoes", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpKpiInfusoesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_kpi_infusoesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpLogisticSchedule", b =>
                {
                    b.Property<string>("CodigoNoMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Codigo no material");

                    b.Property<string>("DocumentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Document Status");

                    b.Property<string>("IdMedicamentoCare")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Id Medicamento CARE");

                    b.Property<string>("IdProgramaCare")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Id Programa CARE");

                    b.Property<string>("NomeDoMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nome do Material");

                    b.Property<string>("NomeDoPrograma")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nome do Programa");

                    b.Property<string>("ProgramaNoCare")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Programa NO CARE");

                    b.ToTable("TMP_LogisticSchedule", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpLogisticScheduleAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_LogisticScheduleAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpMarcarComoIsDeletedNoCare", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("tmp_marcar_como_is_deleted_no_care", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpMarcarComoIsDeletedNoCareAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_marcar_como_is_deleted_no_careAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpMarcarDeleted", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.ToTable("tmp_marcar_deleted", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpMarcarDeleted2", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.ToTable("tmp_marcar_deleted2", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpMarcarDeleted2Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_marcar_deleted2Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpMarcarDeletedAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_marcar_deletedAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpMedico", b =>
                {
                    b.Property<string>("ClienteIdentificacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CLIENTE_IDENTIFICACAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ClienteNome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CLIENTE_NOME")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Doctorid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DOCTORID");

                    b.Property<string>("Licensenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LICENSENUMBER")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Licensestate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LICENSESTATE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("TMP_MEDICOS", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpMedicosaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TMP_MEDICOSAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpNaoEncontrado", b =>
                {
                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DataPrimeiraInfusao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_primeira_infusao");

                    b.Property<string>("DataReferência")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("Data Referência")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName(" Doença")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InfusionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("NewDatadeinativao")
                        .HasColumnType("date")
                        .HasColumnName("new_datadeinativao");

                    b.Property<string>("NewSituacaoname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("new_situacaoname");

                    b.Property<string>("NewStatusdotratamentoname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("new_statusdotratamentoname");

                    b.Property<string>("NewTratamentoname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("new_tratamentoname")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("QtdAmpolas")
                        .HasColumnType("numeric(23, 10)")
                        .HasColumnName("qtd_ampolas");

                    b.Property<decimal?>("QtdAmpolasIdeais")
                        .HasColumnType("numeric(23, 10)")
                        .HasColumnName("qtd_ampolas_ideais");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Tipo de Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("tmp_nao_encontrado", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpNaoEncontradoAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_nao_encontradoAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpNovo", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QtdAmpolas")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<int>("QtdAmpolasIdeais")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS_INFUSAO");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_NOVOS", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpNovosaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_NOVOSAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacienteEnrolled", b =>
                {
                    b.Property<Guid?>("Doctorid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DOCTORID");

                    b.Property<int?>("Qtde")
                        .HasColumnType("int")
                        .HasColumnName("QTDE");

                    b.ToTable("TMP_PACIENTE_ENROLLED", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacienteEnrolledaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TMP_PACIENTE_ENROLLEDAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesAtivosEmFrente", b =>
                {
                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaixaEtaria")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Faixa Etaria");

                    b.Property<string>("GrauDeHemofília")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Grau de Hemofília")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Hemcasa")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<decimal?>("Idade")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Modalidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("TratamentoPrograma")
                        .HasColumnType("datetime")
                        .HasColumnName("Tratamento Programa");

                    b.ToTable("tmp_pacientes_ativos_em_frente", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesAtivosEmFrenteAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_pacientes_ativos_em_frenteAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesAtivosEmFrenteDado", b =>
                {
                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FaixaEtaria")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Faixa Etaria");

                    b.Property<string>("GrauDeHemofília")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Grau de Hemofília")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Hemcasa")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<decimal?>("Idade")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("Infusoes")
                        .HasColumnType("int")
                        .HasColumnName("infusoes");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Modalidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Médico")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NomeDoPaciente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nome do Paciente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("TratamentoPrograma")
                        .HasColumnType("datetime")
                        .HasColumnName("Tratamento Programa");

                    b.ToTable("tmp_pacientes_ativos_em_frente_dados", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesAtivosEmFrenteDadosAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_pacientes_ativos_em_frente_dadosAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesAtivosEmFrenteInfuso", b =>
                {
                    b.Property<DateTime?>("DataDaInfusão")
                        .HasColumnType("datetime")
                        .HasColumnName("Data da Infusão");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Infusões")
                        .HasColumnType("int");

                    b.ToTable("tmp_pacientes_ativos_em_frente_Infusoes", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesAtivosEmFrenteInfusoesAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_pacientes_ativos_em_frente_InfusoesAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesAtivosEmFrenteVisitaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_pacientes_ativos_em_frente_visitaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesAtivosEmFrenteVisitum", b =>
                {
                    b.Property<DateTime?>("DataDaVisita")
                        .HasColumnType("datetime")
                        .HasColumnName("Data da Visita");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("QuantidadeDeVisitas")
                        .HasColumnType("int")
                        .HasColumnName("Quantidade de Visitas");

                    b.ToTable("tmp_pacientes_ativos_em_frente_visita", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesBase", b =>
                {
                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("TMP_PACIENTES_BASE", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpPacientesBaseaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_PACIENTES_BASEAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpRetention", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QtdAmpolas")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<int>("QtdAmpolasIdeais")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_RETENTION", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpRetentionaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_RETENTIONAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpRetorno", b =>
                {
                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Phaseid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("phaseid");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSituationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Treatmentstatusdetailid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("treatmentstatusdetailid");

                    b.Property<Guid?>("Treatmentstatusid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("treatmentstatusid");

                    b.ToTable("tmp_retorno", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpRetorno2", b =>
                {
                    b.Property<Guid?>("Phaseid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("phaseid");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSituationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Treatmentstatusdetailid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("treatmentstatusdetailid");

                    b.Property<Guid?>("Treatmentstatusid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("treatmentstatusid");

                    b.ToTable("tmp_retorno2", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpRetorno2Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_retorno2Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpRetornoAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_retornoAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpSaidaLocal", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QtdAmpolas")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<int>("QtdAmpolasIdeais")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS_INFUSAO");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_SAIDA_LOCAL", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpSaidaLocalaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_SAIDA_LOCALAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpSaidaPausa", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QtdAmpolas")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<int>("QtdAmpolasIdeais")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("STATUS_INFUSAO");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_SAIDA_PAUSA", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpSaidaPausaaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_SAIDA_PAUSAAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpScheduleHierarquiaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_Schedule_HierarquiaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpScheduleHierarquium", b =>
                {
                    b.Property<string>("ConsultorGerente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Consultor_Gerente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ConsultorSchedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Consultor_Schedule");

                    b.Property<Guid?>("DoctorsRepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MedicoConsultor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Medico_Consultor")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MedicoGerente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Medico_Gerente")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("MedicoSchedule")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Medico_Schedule")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestDoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("tmp_Schedule_Hierarquia", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpSemana", b =>
                {
                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DataInfusao")
                        .HasColumnType("date");

                    b.Property<string>("EstaNoKpi")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Esta no KPI");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InfusionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mes")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("Qtde")
                        .HasColumnType("int")
                        .HasColumnName("QTDE");

                    b.Property<string>("RazaoNaoRealizacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Semana")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusTratamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeInfusão")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tipo de Infusão")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable("tmp_semana", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpSemanaAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_semanaAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpTotalInfusion", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int>("QtdAmpolas")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<int>("QtdAmpolasIdeais")
                        .HasColumnType("int")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STATUS_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_TOTAL_INFUSIONS", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpTotalInfusionsaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_TOTAL_INFUSIONSAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpUltimaEntradaaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("TMP_ULTIMA_ENTRADAAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpUltimaEntradum", b =>
                {
                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Doctorid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DOCTORID");

                    b.ToTable("TMP_ULTIMA_ENTRADA", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpValidar", b =>
                {
                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DataPrimeiraInfusao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_primeira_infusao");

                    b.Property<string>("DataReferência")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("Data Referência")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Doença")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName(" Doença")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InfusionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Medico")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("NewDatadeinativao")
                        .HasColumnType("date")
                        .HasColumnName("new_datadeinativao");

                    b.Property<string>("NewSituacaoname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("new_situacaoname");

                    b.Property<string>("NewStatusdotratamentoname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("new_statusdotratamentoname");

                    b.Property<string>("NewTratamentoname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("new_tratamentoname")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("QtdAmpolas")
                        .HasColumnType("numeric(23, 10)")
                        .HasColumnName("qtd_ampolas");

                    b.Property<decimal?>("QtdAmpolasIdeais")
                        .HasColumnType("numeric(23, 10)")
                        .HasColumnName("qtd_ampolas_ideais");

                    b.Property<string>("Representante")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeAcesso")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Tipo de Acesso")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("tmp_validar", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpValidarAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("tmp_validarAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpVial", b =>
                {
                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CODIGO_PACIENTE")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DataReferencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("DATA_REFERENCIA");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("Infusionid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("INFUSIONID");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LOCAL")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<decimal?>("QtdAmpolas")
                        .HasColumnType("money")
                        .HasColumnName("QTD_AMPOLAS");

                    b.Property<decimal?>("QtdAmpolasIdeais")
                        .HasColumnType("money")
                        .HasColumnName("QTD_AMPOLAS_IDEAIS");

                    b.Property<string>("StatusInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STATUS_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoRegistro")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("TIPO_REGISTRO");

                    b.ToTable("TMP_VIALS", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpVialsaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_VIALSAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpVoucher", b =>
                {
                    b.Property<string>("AnoMês")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ANO_MÊS");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CODIGO");

                    b.Property<string>("PacientesQueReceberamOBeneficioDeIt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Pacientes que receberam o BENEFICIO de IT");

                    b.ToTable("TMP_VOUCHER", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TmpVoucheraudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TMP_VOUCHERAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Tracking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdRegardingObject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ObjectNewValue")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ObjectOldValue")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Tracking", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TrackingAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TrackingAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TrainingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecycleTrainingDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TrainingDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TrainingRecordTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TrainingRecord");

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TrainingRecordTypeStringMapId" }, "IX_TrainingRecordTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TrainingRecordTypeStringMapId" }, "IX_TrainingRecordTypeStringMapId"), 90);

                    b.ToTable("TrainingRecord", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TrainingRecordAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TrainingRecordAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbbreviationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AccessTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BirthdateCaregiver")
                        .HasColumnType("datetime")
                        .HasColumnName("Birthdate_Caregiver");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CaregiverId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CID");

                    b.Property<Guid?>("CivilStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ConsentDataShare")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentLgpd")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentLGPD");

                    b.Property<DateTime?>("ConsentLgpddate")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentLGPDDate");

                    b.Property<bool?>("ConsentToReceiveDiagnosticEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveDiagnosticPhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveLogistics")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<bool?>("ConsentToReceiveVisit")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToSendDataToDoctor")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ContractTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CPF");

                    b.Property<string>("CpfCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Custom1StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Custom2StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CustomBoolean")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean1")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean_1");

                    b.Property<bool?>("CustomBoolean11")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean1");

                    b.Property<bool?>("CustomBoolean2")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean_2");

                    b.Property<bool?>("CustomBoolean21")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean2");

                    b.Property<bool?>("CustomBoolean3")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean_3");

                    b.Property<bool?>("CustomBoolean4")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean_4");

                    b.Property<DateTime?>("CustomDateTime1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CustomDateTime2")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomString1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DiagnosticEmailConsentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiagnosticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiagnosticPhonecallConsentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Disease2Id")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiseaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DoctorConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DoctorPhonecallsConsentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DoctorPrescriberId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Dosage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("DosageUnitStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailAddress1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("GenderStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("GotAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GotAccessDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("HasOps")
                        .HasColumnType("bit")
                        .HasColumnName("HasOPS");

                    b.Property<bool?>("Haspatientusedmedicationbefore")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthCareProviderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HealthInsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("InfusionInterval")
                        .HasColumnType("int");

                    b.Property<Guid?>("InfusionPlaceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("KinshipStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LastNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("MainContactStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentCompetitorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mobilephone1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModalityStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OccupationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OnlyCareMigration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PatientDiagnosed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PatientDiagnosedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientSourceStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhaseStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pncode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PNCode");

                    b.Property<Guid?>("PosologeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreferredTimeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PrescriptionDueDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PrescriptionHasDateMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasDivergentDosage")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasDivergentInterval")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasLackOfDosage")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasLackOfInterval")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasMissingMedicationName")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasStampSignatureMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionIsValid")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrescriptionReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PrescriptionStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrescriptionValidatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("PrescriptionValidationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProgramParticipationConsentDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ProgramParticipationDiagnosticConsent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProgramParticipationDiagnosticConsentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ProgramTime")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ReasonInactivationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Rne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RNE");

                    b.Property<string>("SampleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectorOfTheRequester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUserCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SkypeUser_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SourceConsentStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StageOfDiseaseStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Stature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StrengthMedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupportField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SystemAccessStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemLastContactDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemLastSuccessfullContactDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemRegistrationEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemTreatmentInativationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemTreatmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Telephone1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TherapeuticTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentCustomDataId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSituationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TreatmentStatusDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusDetailStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentStopDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TreatmentTime")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitRefusalReasonStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("WillDoctorMakeNewPrescription")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Treatment");

                    b.HasIndex(new[] { "AccessTypeStringMapId" }, "IX_AccessTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessTypeStringMapId" }, "IX_AccessTypeStringMapId"), 90);

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "CaregiverId" }, "IX_CaregiverId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaregiverId" }, "IX_CaregiverId"), 90);

                    b.HasIndex(new[] { "CivilStatusStringMapId" }, "IX_CivilStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CivilStatusStringMapId" }, "IX_CivilStatusStringMapId"), 90);

                    b.HasIndex(new[] { "ContractTypeStringMapId" }, "IX_ContractTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ContractTypeStringMapId" }, "IX_ContractTypeStringMapId"), 90);

                    b.HasIndex(new[] { "CreatedOn" }, "IX_CreatedOn");

                    b.HasIndex(new[] { "Custom1StringMapId" }, "IX_Custom1StringMapId");

                    b.HasIndex(new[] { "Custom2StringMapId" }, "IX_Custom2StringMapId");

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId"), 90);

                    b.HasIndex(new[] { "Disease2Id" }, "IX_Disease2Id");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "DoctorPrescriberId" }, "IX_DoctorPrescriberId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorPrescriberId" }, "IX_DoctorPrescriberId"), 90);

                    b.HasIndex(new[] { "DosageUnitStringMapId" }, "IX_DosageUnitStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DosageUnitStringMapId" }, "IX_DosageUnitStringMapId"), 90);

                    b.HasIndex(new[] { "EducationStringMapId" }, "IX_EducationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EducationStringMapId" }, "IX_EducationStringMapId"), 90);

                    b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GenderStringMapId" }, "IX_GenderStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HEALTHPROGRAMID_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HEALTHPROGRAMID_2"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "StateCode" }, "IX_HEALTHPROGRAMID_ISDELETED_STATECODE");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "StateCode" }, "IX_HEALTHPROGRAMID_ISDELETED_STATECODE"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "StateCode" }, "IX_HEALTHPROGRAMID_ISDELETED_STATECODE_V2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "StateCode" }, "IX_HEALTHPROGRAMID_ISDELETED_STATECODE_V2"), 90);

                    b.HasIndex(new[] { "HealthCareProviderId" }, "IX_HealthCareProviderId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthCareProviderId" }, "IX_HealthCareProviderId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "InfusionPlaceId" }, "IX_InfusionPlaceId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionPlaceId" }, "IX_InfusionPlaceId"), 90);

                    b.HasIndex(new[] { "KinshipStringMapId" }, "IX_KinshipStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "KinshipStringMapId" }, "IX_KinshipStringMapId"), 90);

                    b.HasIndex(new[] { "MainContactStringMapId" }, "IX_MainContactStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MainContactStringMapId" }, "IX_MainContactStringMapId"), 90);

                    b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "ModalityStringMapId" }, "IX_ModalityStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ModalityStringMapId" }, "IX_ModalityStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "ModifiedOn" }, "IX_NC_TREATMENT_0");

                    b.HasIndex(new[] { "IsDeleted", "HealthProgramId", "PhaseId" }, "IX_NC_TREATMENT_1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted", "HealthProgramId", "PhaseId" }, "IX_NC_TREATMENT_1"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_TREATMENT_12");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_TREATMENT_13");

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_TREATMENT_14");

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "ModifiedOn" }, "IX_NC_TREATMENT_15");

                    b.HasIndex(new[] { "TreatmentSituationId", "IsDeleted", "HealthProgramId", "PhaseId" }, "IX_NC_TREATMENT_4");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentSituationId", "IsDeleted", "HealthProgramId", "PhaseId" }, "IX_NC_TREATMENT_4"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_TREATMENT_5");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_TREATMENT_5"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_TREATMENT_8");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_TREATMENT_8"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "FriendlyCode" }, "IX_NC_Treatment");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "FriendlyCode" }, "IX_NC_Treatment"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_Treatment_10");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsDeleted" }, "IX_NC_Treatment_10"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "StateCode" }, "IX_NC_Treatment_11");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "StateCode" }, "IX_NC_Treatment_11"), 90);

                    b.HasIndex(new[] { "FriendlyCode" }, "IX_NC_Treatment_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FriendlyCode" }, "IX_NC_Treatment_2"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_NC_Treatment_3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_NC_Treatment_3"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_Treatment_6");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_Treatment_6"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_Treatment_7");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "IX_NC_Treatment_7"), 90);

                    b.HasIndex(new[] { "OccupationId" }, "IX_OccupationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OccupationId" }, "IX_OccupationId"), 90);

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "PatientSourceStringMapId" }, "IX_PatientSourceStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientSourceStringMapId" }, "IX_PatientSourceStringMapId"), 90);

                    b.HasIndex(new[] { "PhaseId" }, "IX_PhaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhaseId" }, "IX_PhaseId"), 90);

                    b.HasIndex(new[] { "PhaseStringMapId" }, "IX_PhaseStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhaseStringMapId" }, "IX_PhaseStringMapId"), 90);

                    b.HasIndex(new[] { "PosologeId" }, "IX_PosologeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PosologeId" }, "IX_PosologeId"), 90);

                    b.HasIndex(new[] { "PreferredTimeStringMapId" }, "IX_PreferredTimeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PreferredTimeStringMapId" }, "IX_PreferredTimeStringMapId"), 90);

                    b.HasIndex(new[] { "PrescriptionStatusStringMapId" }, "IX_PrescriptionStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PrescriptionStatusStringMapId" }, "IX_PrescriptionStatusStringMapId"), 90);

                    b.HasIndex(new[] { "ReasonInactivationStringMapId" }, "IX_ReasonInactivationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ReasonInactivationStringMapId" }, "IX_ReasonInactivationStringMapId"), 90);

                    b.HasIndex(new[] { "SourceConsentStringMapId" }, "IX_SourceConsentStringMapId");

                    b.HasIndex(new[] { "StageOfDiseaseStringMapId" }, "IX_StageOfDiseaseStringMapId");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId"), 90);

                    b.HasIndex(new[] { "TherapeuticTypeId" }, "IX_TherapeuticTypeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TherapeuticTypeId" }, "IX_TherapeuticTypeId"), 90);

                    b.HasIndex(new[] { "TreatmentCustomDataId" }, "IX_TreatmentCustomDataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentCustomDataId" }, "IX_TreatmentCustomDataId"), 90);

                    b.HasIndex(new[] { "TreatmentSituationId" }, "IX_TreatmentSituationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentSituationId" }, "IX_TreatmentSituationId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusDetailStringMapId" }, "IX_TreatmentStatusDetailStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusDetailStringMapId" }, "IX_TreatmentStatusDetailStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusId" }, "IX_TreatmentStatusId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusId" }, "IX_TreatmentStatusId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusStringMapId" }, "IX_TreatmentStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusStringMapId" }, "IX_TreatmentStatusStringMapId"), 90);

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.HasIndex(new[] { "VisitRefusalReasonStringMapId" }, "IX_VisitRefusalReasonStringMapId");

                    b.HasIndex(new[] { "CreatedOn" }, "ix_Treatment_CreatedOn_desc")
                        .IsDescending();

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "ix_nc_Treatment_9");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted" }, "ix_nc_Treatment_9"), 90);

                    b.ToTable("Treatment", null, t =>
                        {
                            t.HasTrigger("TR_UpdateFriendlycode");
                        });
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("AddressTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoverageAreaId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CustomerAddressId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool?>("IsintheAreaofCoverage")
                        .HasColumnType("bit");

                    b.Property<bool?>("MainAddress")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ReceiveMail")
                        .HasColumnType("bit");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VisitAddress")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentAddress");

                    b.HasIndex(new[] { "AddressTypeStringMapId" }, "IX_AddressTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AddressTypeStringMapId" }, "IX_AddressTypeStringMapId"), 90);

                    b.HasIndex(new[] { "CoverageAreaId" }, "IX_CoverageAreaId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CoverageAreaId" }, "IX_CoverageAreaId"), 90);

                    b.HasIndex(new[] { "CustomerAddressId" }, "IX_CustomerAddressId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CustomerAddressId" }, "IX_CustomerAddressId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "MainAddress" }, "IX_NC_TreatmentAddress");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MainAddress" }, "IX_NC_TreatmentAddress"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.ToTable("TreatmentAddress", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAddressAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentAddressAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAndDiagnosticAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActionCategoryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActionConfigurationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActionReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActionRuleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiagnosticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("FailAttempt")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("IncidentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("PeriodSubject")
                        .HasColumnType("int");

                    b.Property<Guid?>("PhoneCallId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Receiver")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SourceEntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SourceEntityObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceEntityTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SuccessAttempt")
                        .HasColumnType("int");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentAndDiagnosticAction");

                    b.HasIndex(new[] { "ActionCategoryId" }, "IX_ActionCategoryId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActionCategoryId" }, "IX_ActionCategoryId"), 90);

                    b.HasIndex(new[] { "ActionConfigurationId" }, "IX_ActionConfigurationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActionConfigurationId" }, "IX_ActionConfigurationId"), 90);

                    b.HasIndex(new[] { "ActionRuleId" }, "IX_ActionRuleId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActionRuleId" }, "IX_ActionRuleId"), 90);

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId"), 90);

                    b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IncidentId" }, "IX_IncidentId"), 90);

                    b.HasIndex(new[] { "ActionConfigurationId", "IsDeleted" }, "IX_NC_TreatmentAndDiagnosticAction_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActionConfigurationId", "IsDeleted" }, "IX_NC_TreatmentAndDiagnosticAction_2"), 90);

                    b.HasIndex(new[] { "PhoneCallId" }, "IX_PhoneCallId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhoneCallId" }, "IX_PhoneCallId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "ActionStatus" }, "ix_nc_TreatmentAndDiagnosticAction");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ActionStatus" }, "ix_nc_TreatmentAndDiagnosticAction"), 90);

                    b.ToTable("TreatmentAndDiagnosticAction", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAndDiagnosticActionAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentAndDiagnosticActionAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("LastInfusionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("NextInfusionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentAttendance");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.ToTable("TreatmentAttendance", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAttendanceAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentAttendanceAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.HasIndex(new[] { "RegardingObjectId" }, "ix_nc_TreatmentAudit");

                    b.ToTable("TreatmentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentBillingAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentBillingAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentBkp05112021", b =>
                {
                    b.Property<string>("AbbreviationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AccessTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<decimal?>("AmpouleAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BirthdateCaregiver")
                        .HasColumnType("datetime")
                        .HasColumnName("Birthdate_Caregiver");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CaregiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CID");

                    b.Property<Guid?>("CivilStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ConsentDataShare")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentLgpd")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentLGPD");

                    b.Property<DateTime?>("ConsentLgpddate")
                        .HasColumnType("datetime")
                        .HasColumnName("ConsentLGPDDate");

                    b.Property<bool?>("ConsentToReceiveDiagnosticEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveDiagnosticPhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveLogistics")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToReceiveSms")
                        .HasColumnType("bit")
                        .HasColumnName("ConsentToReceiveSMS");

                    b.Property<bool?>("ConsentToReceiveVisit")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentToSendDataToDoctor")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ContractTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CPF");

                    b.Property<string>("CpfCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPF_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Custom1StringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Custom2StringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CustomBoolean")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean1")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean_1");

                    b.Property<bool?>("CustomBoolean11")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean1");

                    b.Property<bool?>("CustomBoolean2")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean_2");

                    b.Property<bool?>("CustomBoolean21")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean2");

                    b.Property<bool?>("CustomBoolean3")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean_3");

                    b.Property<bool?>("CustomBoolean4")
                        .HasColumnType("bit")
                        .HasColumnName("CustomBoolean_4");

                    b.Property<DateTime?>("CustomDateTime1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CustomDateTime2")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomString1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DiagnosticEmailConsentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiagnosticId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiagnosticPhonecallConsentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Disease2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DoctorConsentToReceivePhonecalls")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DoctorPhonecallsConsentDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DoctorPrescriberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Dosage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("DosageUnitStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducationStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailAddress1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EmailAddress2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FirstNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("GenderStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("GotAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("GotAccessDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("HasOps")
                        .HasColumnType("bit")
                        .HasColumnName("HasOPS");

                    b.Property<bool?>("Haspatientusedmedicationbefore")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthCareProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HealthInsuranceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("InfusionInterval")
                        .HasColumnType("int");

                    b.Property<Guid?>("InfusionPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("KinshipStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("LastNameCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("MainContactStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentCompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mobilephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mobilephone1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone1Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone2Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobilephone3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Mobilephone3Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModalityStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OccupationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OnlyCareMigration")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PatientDiagnosed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PatientDiagnosedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientSourceStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhaseStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pncode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PNCode");

                    b.Property<Guid?>("PosologeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreferredTimeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PrescriptionDueDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PrescriptionHasDateMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasDivergentDosage")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasDivergentInterval")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasLackOfDosage")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasLackOfInterval")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasMissingMedicationName")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionHasStampSignatureMissing")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionIsValid")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrescriptionReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrescriptionReceivedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PrescriptionStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrescriptionValidatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("PrescriptionValidationDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ProgramParticipationConsent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProgramParticipationConsentDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ProgramParticipationDiagnosticConsent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProgramParticipationDiagnosticConsentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ProgramTime")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ReasonInactivationStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RG")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Rne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RNE");

                    b.Property<string>("SampleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectorOfTheRequester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkypeUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("SkypeUserCaregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SkypeUser_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SourceConsentStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StageOfDiseaseStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Stature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StrengthMedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupportField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SystemAccessStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemLastContactDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemLastSuccessfullContactDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemRegistrationEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemTreatmentInativationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SystemTreatmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Telephone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1Caregiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Telephone1_Caregiver")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone1Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone2Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Telephone3Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TherapeuticTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentCustomDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSituationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentStartDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TreatmentStatusDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusDetailStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TreatmentStopDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TreatmentTime")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitRefusalReasonStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("WillDoctorMakeNewPrescription")
                        .HasColumnType("bit");

                    b.ToTable("Treatment_bkp_05_11_2021", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentBkp05112021audit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("Treatment_bkp_05_11_2021Audit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentCustomDataAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentCustomDataAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentCustomData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AcceptOnlineContacts")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptPartnershipDrugstores")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptReceiveMaintenanceKit")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptVoucher")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptsDailySmsdelivery")
                        .HasColumnType("bit")
                        .HasColumnName("AcceptsDailySMSDelivery");

                    b.Property<bool?>("AcceptsFutureLabContacts")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptsIbetaplusRegistration")
                        .HasColumnType("bit")
                        .HasColumnName("AcceptsIBetaplusRegistration");

                    b.Property<bool?>("AcceptsMedicalContactAdverseReactions")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AccessDetailStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessWayId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AmountOfCyclesPrescribed")
                        .HasColumnType("int");

                    b.Property<int?>("AmpoulesUsed")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationHours")
                        .HasColumnType("int");

                    b.Property<string>("ApplicatorLot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicatorTypeCustom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApplicatorTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Betaferonisthefirsttreatmentdrug")
                        .HasColumnType("bit")
                        .HasColumnName("BETAFERONisthefirsttreatmentdrug");

                    b.Property<bool?>("ChecklistReceived")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChecklistRequired")
                        .HasColumnType("bit");

                    b.Property<bool?>("CoagulationFactorReplacement")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConsentReceiveSpecificStuff")
                        .HasColumnType("bit");

                    b.Property<bool?>("ContractHasCoparticipation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ContractHasCoparticipationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("CurrentAccess")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Custom1StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Custom2StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CustomBoolean1")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean2")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean3")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean4")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CustomDateTime1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CustomDateTime2")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomString1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CyclePeriod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateLeftTheBenefit")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfLastMedicalAppointment")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfLastSuswithdrawal")
                        .HasColumnType("datetime")
                        .HasColumnName("DateOfLastSUSWithdrawal");

                    b.Property<DateTime?>("DateOfNextInfusion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReceivementTerm")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateoflastMri")
                        .HasColumnType("datetime")
                        .HasColumnName("DateoflastMRI");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosticDisease")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DiseaseDiagnosticDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DiseaseDiagnosticDate2")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DoctorAuthorizesDosageTitrationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DoctorAutorizeStartTreatment")
                        .HasColumnType("bit");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactorReplacementMedicament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FirstcontactwithBayer")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FormofAccessStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("HasOps")
                        .HasColumnType("bit")
                        .HasColumnName("HasOPS");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HemCasaPatient")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HemophiliaDegreeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IfxitcodeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IFXITCodeId");

                    b.Property<Guid?>("IfxitstatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IFXITStatusStringMapId");

                    b.Property<Guid?>("IfxotcodeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IFXOTCodeId");

                    b.Property<Guid?>("IfxotstatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IFXOTStatusStringMapId");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("InInductionStage")
                        .HasColumnType("bit");

                    b.Property<Guid?>("InfusionSiteId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InfusionTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("IsWorkingStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IsWorkingStringMapStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IsWorkingStringMap_StringMapId");

                    b.Property<bool?>("ItbenefitApproved")
                        .HasColumnType("bit")
                        .HasColumnName("ITBenefitApproved");

                    b.Property<bool?>("ItbenefitException")
                        .HasColumnType("bit")
                        .HasColumnName("ITBenefitException");

                    b.Property<string>("ItbenefitRefusalReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ITBenefitRefusalReason");

                    b.Property<int?>("ItbilledInfusions")
                        .HasColumnType("int")
                        .HasColumnName("ITBilledInfusions");

                    b.Property<int?>("ItperformedInfusions")
                        .HasColumnType("int")
                        .HasColumnName("ITPerformedInfusions");

                    b.Property<Guid?>("JanssenitstatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JANSSENITStatusStringMapId");

                    b.Property<Guid?>("JanssenotstatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JANSSENOTStatusStringMapId");

                    b.Property<bool?>("LeftTheBenefit")
                        .HasColumnType("bit");

                    b.Property<string>("LocationsInfusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MedicalIndicationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalInstructionAccessWayStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("MedicalReturnDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MultipleMedicamentCompetitor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MyPkfiTpatient")
                        .HasColumnType("bit")
                        .HasColumnName("myPKFiTPatient");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("OldDatabasePatient")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OptimizationSubTypeStringMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OptimizationTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("OtbenefitApproved")
                        .HasColumnType("bit")
                        .HasColumnName("OTBenefitApproved");

                    b.Property<string>("OtbenefitRefusalReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OTBenefitRefusalReason");

                    b.Property<int?>("OtperformedInfusions")
                        .HasColumnType("int")
                        .HasColumnName("OTPerformedInfusions");

                    b.Property<bool?>("OtprescriptionSent")
                        .HasColumnType("bit")
                        .HasColumnName("OTPrescriptionSent");

                    b.Property<bool?>("OtprescriptionValidated")
                        .HasColumnType("bit")
                        .HasColumnName("OTPrescriptionValidated");

                    b.Property<string>("OtprescriptionValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OTPrescriptionValidatedBy");

                    b.Property<DateTime?>("OtprescriptionValidatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("OTPrescriptionValidatedOn");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PatientCode")
                        .HasColumnType("int");

                    b.Property<bool?>("PatientHasInternetAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PatientTypeDateChanged")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PatientTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("PatientUsedAnotherMedication")
                        .HasColumnType("bit");

                    b.Property<bool?>("PatientWillBeginItbenefit")
                        .HasColumnType("bit")
                        .HasColumnName("PatientWillBeginITBenefit");

                    b.Property<bool?>("PatientWillBeginOtbenefit")
                        .HasColumnType("bit")
                        .HasColumnName("PatientWillBeginOTBenefit");

                    b.Property<bool?>("PatientWillGetLocationCode")
                        .HasColumnType("bit");

                    b.Property<bool?>("PatientsentauthorizationtoBetamens")
                        .HasColumnType("bit");

                    b.Property<bool?>("PerformInfusionEvery8Weeks")
                        .HasColumnType("bit");

                    b.Property<int?>("PerformedInfusions")
                        .HasColumnType("int");

                    b.Property<bool?>("PharmacovigilanceReported")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlanCoverageStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreviousMedicamentCompetitorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreviousMedicamentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreviousMedicamentSt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreviousTreatmentAmount")
                        .HasColumnType("int");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("ReasonForNotAcceptingSmsstringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReasonForNotAcceptingSMSStringMapId");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RiskRatingStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StageOfDiseaseStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StorageLocationStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplyMethodStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("SupportFieldBool")
                        .HasColumnType("bit");

                    b.Property<int?>("SupportFieldInt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SupportFieldInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SupportFieldInt3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SusprotocolNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SUSProtocolNumber");

                    b.Property<bool?>("TermConsentReceived")
                        .HasColumnType("bit");

                    b.Property<bool?>("TermPrivacy")
                        .HasColumnType("bit");

                    b.Property<bool?>("TermValidated")
                        .HasColumnType("bit");

                    b.Property<string>("TermValidatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransplantedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("TransplantedPatient")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TreatmentCyclesStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentIntervalStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateRiskRatingDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("VisitRefusalReasonStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("WillStartTreatmentFactorReplacement")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WithdrawnMedicamentQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentCustomData");

                    b.HasIndex(new[] { "AccessDetailStringMapId" }, "IX_AccessDetailStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessDetailStringMapId" }, "IX_AccessDetailStringMapId"), 90);

                    b.HasIndex(new[] { "AccessWayId" }, "IX_AccessWayId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccessWayId" }, "IX_AccessWayId"), 90);

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "ApplicatorTypeStringMapId" }, "IX_ApplicatorTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ApplicatorTypeStringMapId" }, "IX_ApplicatorTypeStringMapId"), 90);

                    b.HasIndex(new[] { "ContractHasCoparticipationStringMapId" }, "IX_ContractHasCoparticipationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ContractHasCoparticipationStringMapId" }, "IX_ContractHasCoparticipationStringMapId"), 90);

                    b.HasIndex(new[] { "ContractTypeStringMapId" }, "IX_ContractTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ContractTypeStringMapId" }, "IX_ContractTypeStringMapId"), 90);

                    b.HasIndex(new[] { "Custom1StringMapId" }, "IX_Custom1StringMapId");

                    b.HasIndex(new[] { "Custom2StringMapId" }, "IX_Custom2StringMapId");

                    b.HasIndex(new[] { "DoctorAuthorizesDosageTitrationStringMapId" }, "IX_DoctorAuthorizesDosageTitrationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorAuthorizesDosageTitrationStringMapId" }, "IX_DoctorAuthorizesDosageTitrationStringMapId"), 90);

                    b.HasIndex(new[] { "FormofAccessStringMapId" }, "IX_FormofAccessStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FormofAccessStringMapId" }, "IX_FormofAccessStringMapId"), 90);

                    b.HasIndex(new[] { "HemophiliaDegreeStringMapId" }, "IX_HemophiliaDegreeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HemophiliaDegreeStringMapId" }, "IX_HemophiliaDegreeStringMapId"), 90);

                    b.HasIndex(new[] { "IfxitcodeId" }, "IX_IFXITCodeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IfxitcodeId" }, "IX_IFXITCodeId"), 90);

                    b.HasIndex(new[] { "IfxitstatusStringMapId" }, "IX_IFXITStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IfxitstatusStringMapId" }, "IX_IFXITStatusStringMapId"), 90);

                    b.HasIndex(new[] { "IfxotcodeId" }, "IX_IFXOTCodeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IfxotcodeId" }, "IX_IFXOTCodeId"), 90);

                    b.HasIndex(new[] { "IfxotstatusStringMapId" }, "IX_IFXOTStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IfxotstatusStringMapId" }, "IX_IFXOTStatusStringMapId"), 90);

                    b.HasIndex(new[] { "InfusionSiteId" }, "IX_InfusionSiteId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionSiteId" }, "IX_InfusionSiteId"), 90);

                    b.HasIndex(new[] { "InfusionTypeStringMapId" }, "IX_InfusionTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionTypeStringMapId" }, "IX_InfusionTypeStringMapId"), 90);

                    b.HasIndex(new[] { "IsWorkingStringMapStringMapId" }, "IX_IsWorkingStringMap_StringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsWorkingStringMapStringMapId" }, "IX_IsWorkingStringMap_StringMapId"), 90);

                    b.HasIndex(new[] { "JanssenitstatusStringMapId" }, "IX_JANSSENITStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "JanssenitstatusStringMapId" }, "IX_JANSSENITStatusStringMapId"), 90);

                    b.HasIndex(new[] { "JanssenotstatusStringMapId" }, "IX_JANSSENOTStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "JanssenotstatusStringMapId" }, "IX_JANSSENOTStatusStringMapId"), 90);

                    b.HasIndex(new[] { "MedicalIndicationStringMapId" }, "IX_MedicalIndicationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicalIndicationStringMapId" }, "IX_MedicalIndicationStringMapId"), 90);

                    b.HasIndex(new[] { "MedicalInstructionAccessWayStringMapId" }, "IX_MedicalInstructionAccessWayStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicalInstructionAccessWayStringMapId" }, "IX_MedicalInstructionAccessWayStringMapId"), 90);

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_TreatmentCustomData");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_TreatmentCustomData_2");

                    b.HasIndex(new[] { "OptimizationSubTypeStringMapId" }, "IX_OptimizationSubTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OptimizationSubTypeStringMapId" }, "IX_OptimizationSubTypeStringMapId"), 90);

                    b.HasIndex(new[] { "OptimizationTypeStringMapId" }, "IX_OptimizationTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "OptimizationTypeStringMapId" }, "IX_OptimizationTypeStringMapId"), 90);

                    b.HasIndex(new[] { "PatientTypeStringMapId" }, "IX_PatientTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientTypeStringMapId" }, "IX_PatientTypeStringMapId"), 90);

                    b.HasIndex(new[] { "PlanCoverageStringMapId" }, "IX_PlanCoverageStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PlanCoverageStringMapId" }, "IX_PlanCoverageStringMapId"), 90);

                    b.HasIndex(new[] { "PreviousMedicamentCompetitorId" }, "IX_PreviousMedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PreviousMedicamentCompetitorId" }, "IX_PreviousMedicamentCompetitorId"), 90);

                    b.HasIndex(new[] { "PreviousMedicamentId" }, "IX_PreviousMedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PreviousMedicamentId" }, "IX_PreviousMedicamentId"), 90);

                    b.HasIndex(new[] { "ReasonForNotAcceptingSmsstringMapId" }, "IX_ReasonForNotAcceptingSMSStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ReasonForNotAcceptingSmsstringMapId" }, "IX_ReasonForNotAcceptingSMSStringMapId"), 90);

                    b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId"), 90);

                    b.HasIndex(new[] { "RiskRatingStringMapId" }, "IX_RiskRatingStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RiskRatingStringMapId" }, "IX_RiskRatingStringMapId"), 90);

                    b.HasIndex(new[] { "StageOfDiseaseStringMapId" }, "IX_StageOfDiseaseStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StageOfDiseaseStringMapId" }, "IX_StageOfDiseaseStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "StorageLocationStringMapId" }, "IX_StorageLocationStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StorageLocationStringMapId" }, "IX_StorageLocationStringMapId"), 90);

                    b.HasIndex(new[] { "SupplyMethodStringMapId" }, "IX_SupplyMethodStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SupplyMethodStringMapId" }, "IX_SupplyMethodStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentCyclesStringMapId" }, "IX_TreatmentCyclesStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentCyclesStringMapId" }, "IX_TreatmentCyclesStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentIntervalStringMapId" }, "IX_TreatmentIntervalStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentIntervalStringMapId" }, "IX_TreatmentIntervalStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentTypeStringMapId" }, "IX_TreatmentTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentTypeStringMapId" }, "IX_TreatmentTypeStringMapId"), 90);

                    b.HasIndex(new[] { "VisitRefusalReasonStringMapId" }, "IX_VisitRefusalReasonStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VisitRefusalReasonStringMapId" }, "IX_VisitRefusalReasonStringMapId"), 90);

                    b.ToTable("TreatmentCustomData");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DetailModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HistoryDoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HistoryModalityStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HistoryPhaseStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HistoryStatusDetailStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HistoryStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PhaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSituationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentHistory");

                    b.HasIndex(new[] { "HistoryDoctorId" }, "IX_HistoryDoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HistoryDoctorId" }, "IX_HistoryDoctorId"), 90);

                    b.HasIndex(new[] { "HistoryModalityStringMapId" }, "IX_HistoryModalityStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HistoryModalityStringMapId" }, "IX_HistoryModalityStringMapId"), 90);

                    b.HasIndex(new[] { "HistoryPhaseStringMapId" }, "IX_HistoryPhaseStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HistoryPhaseStringMapId" }, "IX_HistoryPhaseStringMapId"), 90);

                    b.HasIndex(new[] { "HistoryStatusDetailStringMapId" }, "IX_HistoryStatusDetailStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HistoryStatusDetailStringMapId" }, "IX_HistoryStatusDetailStringMapId"), 90);

                    b.HasIndex(new[] { "HistoryStatusStringMapId" }, "IX_HistoryStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HistoryStatusStringMapId" }, "IX_HistoryStatusStringMapId"), 90);

                    b.HasIndex(new[] { "PhaseId", "IsDeleted" }, "IX_NC_TreatmentHistory_0");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_NC_TreatmentHistory_1");

                    b.HasIndex(new[] { "PhaseId" }, "IX_PhaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhaseId" }, "IX_PhaseId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "TreatmentSituationId" }, "IX_TreatmentSituationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentSituationId" }, "IX_TreatmentSituationId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusId" }, "IX_TreatmentStatusId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusId" }, "IX_TreatmentStatusId"), 90);

                    b.HasIndex(new[] { "PhaseId" }, "ix_nc_TreatmentHistory");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhaseId" }, "ix_nc_TreatmentHistory"), 90);

                    b.ToTable("TreatmentHistory", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentHistoryAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentHistoryAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedVisitkm")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("ExamId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ForwardReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("InfusionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PatientId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PerformedVisitkm")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentPaymentStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValueVisit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ValueVisitCalculated")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ValueVisitPay")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ValueVisitPerKm")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ValueVisitPerKM");

                    b.Property<Guid?>("VisitId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentPayment");

                    b.HasIndex(new[] { "ExamId" }, "IX_ExamId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamId" }, "IX_ExamId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "InfusionId" }, "IX_InfusionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "InfusionId" }, "IX_InfusionId"), 90);

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PatientId" }, "IX_PatientId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "TreatmentPaymentStatusStringMapId" }, "IX_TreatmentPaymentStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentPaymentStatusStringMapId" }, "IX_TreatmentPaymentStatusStringMapId"), 90);

                    b.HasIndex(new[] { "VisitId" }, "IX_VisitId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VisitId" }, "IX_VisitId"), 90);

                    b.ToTable("TreatmentPayment", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentPaymentAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentPaymentAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentReceitadevidaFind", b =>
                {
                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CPF");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasIndex(new[] { "Cpf" }, "IX_CPF");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Cpf" }, "IX_CPF"), 90);

                    b.ToTable("Treatment_RECEITADEVIDA_FIND", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentReceitadevidaFindaudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("Treatment_RECEITADEVIDA_FINDAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PhaseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentSituationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentStatusId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentSettings");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "PhaseId" }, "IX_PhaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PhaseId" }, "IX_PhaseId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentSituationId" }, "IX_TreatmentSituationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentSituationId" }, "IX_TreatmentSituationId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusId" }, "IX_TreatmentStatusId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusId" }, "IX_TreatmentStatusId"), 90);

                    b.ToTable("TreatmentSettings");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentSettingsAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentSettingsAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentSituation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentSituation");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("TreatmentSituation", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentSituationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentSituationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentStatus");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("TreatmentStatus", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatusAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentStatusAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatusDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.TreatmentStatusDetail");

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("TreatmentStatusDetail", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatusDetailAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentStatusDetailAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatusDetailHealthProgramAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("TreatmentStatusDetailHealthProgramAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AccessTry")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateAccessTry")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastAccess")
                        .HasColumnType("datetime");

                    b.Property<string>("Mobilephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProfileId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Profile_Id");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("Id")
                        .HasName("PK_dbo.User");

                    b.HasIndex(new[] { "ProfileId" }, "IX_Profile_Id");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ProfileId" }, "IX_Profile_Id"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.UserAccessProfileHealthProgram", b =>
                {
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("UserAccessProfile_HealthProgram", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.UserAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("UserAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.UserSystemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActionOrder")
                        .HasColumnType("int");

                    b.Property<string>("ActionValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.UserSystemLog");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("UserSystemLog", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.UserSystemLogAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("UserSystemLogAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.VLogisticsScheduleAudit", b =>
                {
                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("XMLOldValues");

                    b.ToTable((string)null);

                    b.ToView("v_LogisticsScheduleAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.VMonitoramentoEnzimai", b =>
                {
                    b.Property<string>("AnoMes")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("ClassificacaoInfusoes")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("CLASSIFICACAO_INFUSOES");

                    b.Property<string>("Clinica")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("DeclaracaoClinica")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DescricaoDeclaracaoClinica")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Doenca")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid>("IdInfusaoCare")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdInfusaoClinica")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("IdSiteAprovacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("LoteClinica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("LoteSiteAprovacao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusAprovacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("STATUS_APROVACAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("StatusInfusaoCare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoAcesso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_ACESSO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("TipoDeInfusao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TIPO_DE_INFUSAO")
                        .UseCollation("Latin1_General_CI_AI");

                    b.ToTable((string)null);

                    b.ToView("v_monitoramento_enzimais", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ValidationResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsValidSpecific")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.ValidationResult");

                    b.ToTable("ValidationResult", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ValidationResultAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("ValidationResultAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ViewsEntityMetadatum", b =>
                {
                    b.Property<Guid>("ViewsEntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCollection")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLookup")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SourceAttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceAttributeMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("SourceEntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceEntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("TargetAttributeMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetAttributeMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("TargetEntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetEntityMetadataIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.HasKey("ViewsEntityMetadataId")
                        .HasName("PK_dbo.ViewsEntityMetadata");

                    b.HasIndex(new[] { "SourceEntityMetadataId", "SourceAttributeMetadataId", "ProgramId", "IsVisible" }, "idx_MetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SourceEntityMetadataId", "SourceAttributeMetadataId", "ProgramId", "IsVisible" }, "idx_MetadataId"), 90);

                    b.ToTable("ViewsEntityMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ConclusionDateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ConclusionDateStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Custom1StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Custom2StringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CustomBoolean1")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean2")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean3")
                        .HasColumnType("bit");

                    b.Property<bool?>("CustomBoolean4")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CustomDateTime1")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CustomDateTime2")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomString1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomString6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("DiagnosticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("DistanceBetweenPatientHealthProfessional")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProfessionalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid?>("LocalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("NumberEstablishedVisits")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("PreSchedulingStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduleDateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduleDateStart")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ServiceTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentAddressId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VisitFormForwarded")
                        .HasColumnType("bit");

                    b.Property<Guid?>("VoucherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Visit");

                    b.HasIndex(new[] { "CampaignId" }, "IX_CampaignId");

                    b.HasIndex(new[] { "Custom1StringMapId" }, "IX_Custom1StringMapId");

                    b.HasIndex(new[] { "Custom2StringMapId" }, "IX_Custom2StringMapId");

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "LocalId" }, "IX_LocalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LocalId" }, "IX_LocalId"), 90);

                    b.HasIndex(new[] { "PreSchedulingStatusStringMapId" }, "IX_PreSchedulingStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PreSchedulingStatusStringMapId" }, "IX_PreSchedulingStatusStringMapId"), 90);

                    b.HasIndex(new[] { "ServiceTypeId" }, "IX_ServiceTypeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ServiceTypeId" }, "IX_ServiceTypeId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "StatusStringMapId" }, "IX_StatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusStringMapId" }, "IX_StatusStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentAddressId" }, "IX_TreatmentAddressId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentAddressId" }, "IX_TreatmentAddressId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "VoucherId" }, "IX_VoucherId");

                    b.HasIndex(new[] { "IsDeleted" }, "ix_nc_Visit");

                    b.ToTable("Visit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.VisitAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("VisitAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DiagnosticId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("ExamDefinitionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExplainNotUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("IssuanceDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ManagerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("NotSendViaSms")
                        .HasColumnType("bit")
                        .HasColumnName("NotSendViaSMS");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SourceStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TreatmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UseDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("VoucherConfigurationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherStatusStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Voucher");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiagnosticId" }, "IX_DiagnosticId"), 90);

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "ManagerId" }, "IX_ManagerId");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_NC_VOUCHER");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_NC_VOUCHER_2");

                    b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RepresentativeId" }, "IX_RepresentativeId"), 90);

                    b.HasIndex(new[] { "SourceStringMapId" }, "IX_SourceStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SourceStringMapId" }, "IX_SourceStringMapId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentId" }, "IX_TreatmentId"), 90);

                    b.HasIndex(new[] { "VoucherConfigurationId" }, "IX_VoucherConfigurationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherConfigurationId" }, "IX_VoucherConfigurationId"), 90);

                    b.HasIndex(new[] { "VoucherStatusStringMapId" }, "IX_VoucherStatusStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherStatusStringMapId" }, "IX_VoucherStatusStringMapId"), 90);

                    b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "UseDate" }, "idx_voucher_healthprogramid");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId", "IsDeleted", "UseDate" }, "idx_voucher_healthprogramid"), 90);

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.VoucherAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("VoucherAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.VoucherConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeadlineInDays")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeletedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EntityOriginalValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("ExpirationFromScheduling")
                        .HasColumnType("bit");

                    b.Property<string>("FriendlyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool?>("HasSequencialCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthProgramId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("InternalControl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("MessageMinimumQuantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MinimumQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerIdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("PeriodicityInMonths")
                        .HasColumnType("int");

                    b.Property<string>("ReasonDeleted")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("ReasonStateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StateCode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StatusCodeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherConfigTypeStringMapId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo.VoucherConfiguration");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusCodeStringMapId" }, "IX_StatusCodeStringMapId"), 90);

                    b.HasIndex(new[] { "VoucherConfigTypeStringMapId" }, "IX_VoucherConfigTypeStringMapId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherConfigTypeStringMapId" }, "IX_VoucherConfigTypeStringMapId"), 90);

                    b.ToTable("VoucherConfiguration", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.VoucherConfigurationAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId"), 90);

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage"), 90);

                    b.ToTable("VoucherConfigurationAudit", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.Zzmig", b =>
                {
                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("descricao");

                    b.ToTable("zzmig", (string)null);
                });

            modelBuilder.Entity("Care.Api.Models.ZzmigAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RegardingObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("XmlnewValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLNewValues");

                    b.Property<string>("XmloldValues")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("XMLOldValues");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RegardingObjectId" }, "IX_RegardingObjectId");

                    b.HasIndex(new[] { "Message", "RegardingObjectId", "UserId" }, "IX_RegardingObjectIdMessage");

                    b.ToTable("zzmigAudit", (string)null);
                });

            modelBuilder.Entity("CommunicationTypeByProgramHealthProgram", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunicationTypeByProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "CommunicationTypeByProgramId")
                        .HasName("PK_dbo.CommunicationTypeByProgramHealthProgram");

                    b.HasIndex(new[] { "CommunicationTypeByProgramId" }, "IX_CommunicationTypeByProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CommunicationTypeByProgramId" }, "IX_CommunicationTypeByProgramId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.ToTable("CommunicationTypeByProgramHealthProgram", (string)null);
                });

            modelBuilder.Entity("DoctorByProgramAccount", b =>
                {
                    b.Property<Guid>("DoctorByProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorByProgramId", "AccountId")
                        .HasName("PK_dbo.DoctorByProgramAccount");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "DoctorByProgramId" }, "IX_DoctorByProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorByProgramId" }, "IX_DoctorByProgramId"), 90);

                    b.ToTable("DoctorByProgramAccount", (string)null);
                });

            modelBuilder.Entity("DoctorMedicalSpecialty", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalSpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorId", "MedicalSpecialtyId")
                        .HasName("PK_dbo.DoctorMedicalSpecialty");

                    b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DoctorId" }, "IX_DoctorId"), 90);

                    b.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId"), 90);

                    b.ToTable("DoctorMedicalSpecialty", (string)null);
                });

            modelBuilder.Entity("ExamDefinitionAccountExamTypeByProgram", b =>
                {
                    b.Property<Guid>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountExamTypeByProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamDefinitionId", "AccountExamTypeByProgramId")
                        .HasName("PK_dbo.ExamDefinitionAccountExamTypeByProgram");

                    b.HasIndex(new[] { "AccountExamTypeByProgramId" }, "IX_AccountExamTypeByProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountExamTypeByProgramId" }, "IX_AccountExamTypeByProgramId"), 90);

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.ToTable("ExamDefinitionAccountExamTypeByProgram", (string)null);
                });

            modelBuilder.Entity("ExamDefinitionExam", b =>
                {
                    b.Property<Guid>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamDefinitionId", "ExamId")
                        .HasName("PK_dbo.ExamDefinitionExam");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "ExamId" }, "IX_ExamId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamId" }, "IX_ExamId"), 90);

                    b.ToTable("ExamDefinitionExam", (string)null);
                });

            modelBuilder.Entity("ExamDefinitionHealthProgram", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "ExamDefinitionId")
                        .HasName("PK_dbo.ExamDefinitionHealthProgram");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.ToTable("ExamDefinitionHealthProgram", null, t =>
                        {
                            t.HasTrigger("INTEGRA_PROGRAMA_EXAME_GE");
                        });
                });

            modelBuilder.Entity("ExamDefinitionVoucherConfiguration", b =>
                {
                    b.Property<Guid>("ExamDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamDefinitionId", "VoucherConfigurationId")
                        .HasName("PK_dbo.ExamDefinitionVoucherConfiguration");

                    b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId"), 90);

                    b.HasIndex(new[] { "VoucherConfigurationId" }, "IX_VoucherConfigurationId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "VoucherConfigurationId" }, "IX_VoucherConfigurationId"), 90);

                    b.ToTable("ExamDefinitionVoucherConfiguration", (string)null);
                });

            modelBuilder.Entity("HealthProfessionalHealthProgram", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "HealthProfessionalId")
                        .HasName("PK_dbo.HealthProfessionalHealthProgram");

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.ToTable("HealthProfessionalHealthProgram", (string)null);
                });

            modelBuilder.Entity("HealthProfessionalMedicalSpecialty", b =>
                {
                    b.Property<Guid>("HealthProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalSpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProfessionalId", "MedicalSpecialtyId")
                        .HasName("PK_dbo.HealthProfessionalMedicalSpecialty");

                    b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId"), 90);

                    b.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId"), 90);

                    b.ToTable("HealthProfessionalMedicalSpecialty", (string)null);
                });

            modelBuilder.Entity("HealthProgramAccount", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "AccountId")
                        .HasName("PK_dbo.HealthProgramAccount");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountId" }, "IX_AccountId"), 90);

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.ToTable("HealthProgramAccount", (string)null);
                });

            modelBuilder.Entity("HealthProgramMedicament", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "MedicamentId")
                        .HasName("PK_dbo.HealthProgramMedicament");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.ToTable("HealthProgramMedicament", null, t =>
                        {
                            t.HasTrigger("INTEGRA_PROGRAMA_MEDICAMENTO__GE");
                        });
                });

            modelBuilder.Entity("HealthProgramServiceType", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "ServiceTypeId")
                        .HasName("PK_dbo.HealthProgramServiceType");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "ServiceTypeId" }, "IX_ServiceTypeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ServiceTypeId" }, "IX_ServiceTypeId"), 90);

                    b.ToTable("HealthProgramServiceType", (string)null);
                });

            modelBuilder.Entity("LogisticsStuffKit", b =>
                {
                    b.Property<Guid>("KitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LogisticsStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KitsId", "LogisticsStuffId")
                        .HasName("PK_dbo.LogisticsStuffKits");

                    b.HasIndex(new[] { "KitsId" }, "IX_KitsId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "KitsId" }, "IX_KitsId"), 90);

                    b.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId"), 90);

                    b.ToTable("LogisticsStuffKits", (string)null);
                });

            modelBuilder.Entity("MedicamentCompetitorDisease", b =>
                {
                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicamentCompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiseaseId", "MedicamentCompetitorId")
                        .HasName("PK_dbo.MedicamentCompetitorDisease");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId"), 90);

                    b.ToTable("MedicamentCompetitorDisease", (string)null);
                });

            modelBuilder.Entity("MedicamentCompetitorHealthProgram", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicamentCompetitorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "MedicamentCompetitorId")
                        .HasName("PK_dbo.MedicamentCompetitorHealthProgram");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId"), 90);

                    b.ToTable("MedicamentCompetitorHealthProgram", (string)null);
                });

            modelBuilder.Entity("MedicamentDisease", b =>
                {
                    b.Property<Guid>("MedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MedicamentId", "DiseaseId")
                        .HasName("PK_dbo.MedicamentDisease");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId"), 90);

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.ToTable("MedicamentDisease", (string)null);
                });

            modelBuilder.Entity("MedicamentStrengthMedicament", b =>
                {
                    b.Property<Guid>("MedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrengthMedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MedicamentId", "StrengthMedicamentId")
                        .HasName("PK_dbo.MedicamentStrengthMedicament");

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId"), 90);

                    b.ToTable("MedicamentStrengthMedicament", (string)null);
                });

            modelBuilder.Entity("MedicationNonadherenceReasonHealthProgram", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicationNonadherenceReasonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "MedicationNonadherenceReasonId")
                        .HasName("PK_dbo.MedicationNonadherenceReasonHealthProgram");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "MedicationNonadherenceReasonId" }, "IX_MedicationNonadherenceReasonId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicationNonadherenceReasonId" }, "IX_MedicationNonadherenceReasonId"), 90);

                    b.ToTable("MedicationNonadherenceReasonHealthProgram", (string)null);
                });

            modelBuilder.Entity("MenuMetadataEntityMetadatum", b =>
                {
                    b.Property<Guid>("EntityMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EntityMetadataId", "MenuMetadataId")
                        .HasName("PK_dbo.MenuMetadataEntityMetadata");

                    b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId"), 90);

                    b.HasIndex(new[] { "MenuMetadataId" }, "IX_MenuMetadataId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MenuMetadataId" }, "IX_MenuMetadataId"), 90);

                    b.ToTable("MenuMetadataEntityMetadata", (string)null);
                });

            modelBuilder.Entity("PosologeMedicament", b =>
                {
                    b.Property<Guid>("MedicamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PosologeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MedicamentId", "PosologeId")
                        .HasName("PK_dbo.PosologeMedicament");

                    b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId"), 90);

                    b.HasIndex(new[] { "PosologeId" }, "IX_PosologeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PosologeId" }, "IX_PosologeId"), 90);

                    b.ToTable("PosologeMedicament", (string)null);
                });

            modelBuilder.Entity("TreatmentStatusDetailHealthProgram", b =>
                {
                    b.Property<Guid>("HealthProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentStatusDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthProgramId", "TreatmentStatusDetailId")
                        .HasName("PK_dbo.TreatmentStatusDetailHealthProgram");

                    b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId"), 90);

                    b.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId"), 90);

                    b.ToTable("TreatmentStatusDetailHealthProgram", (string)null);
                });

            modelBuilder.Entity("AccessProcedureByProgramAccount", b =>
                {
                    b.HasOne("Care.Api.Models.AccessProcedureByProgram", null)
                        .WithMany()
                        .HasForeignKey("AccessProcedureByProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProcedureByProgramAccount_dbo.AccessProcedureByProgram_AccessProcedureByProgramId");

                    b.HasOne("Care.Api.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProcedureByProgramAccount_dbo.Account_AccountId");
                });

            modelBuilder.Entity("AccessProfileUser", b =>
                {
                    b.HasOne("Care.Api.Models.AccessProfile", null)
                        .WithMany()
                        .HasForeignKey("AccessProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProfileUser_dbo.AccessProfile_AccessProfileId");

                    b.HasOne("Care.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProfileUser_dbo.User_UserId");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Care.Api.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                    b.HasOne("Care.Api.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
                });

            modelBuilder.Entity("CampaignHealthProfessional", b =>
                {
                    b.HasOne("Care.Api.Models.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CampaignHealthProfessional_dbo.Campaign_CampaignId");

                    b.HasOne("Care.Api.Models.HealthProfessional", null)
                        .WithMany()
                        .HasForeignKey("HealthProfessionalId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CampaignHealthProfessional_dbo.HealthProfessional_HealthProfessionalId");
                });

            modelBuilder.Entity("Care.Api.Models.AccessHistoryAttendance", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "DetailDifficultyWithAccessStringMap")
                        .WithMany("AccessHistoryAttendanceDetailDifficultyWithAccessStringMaps")
                        .HasForeignKey("DetailDifficultyWithAccessStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailDifficultyWithAccessStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "DetailDifficultyWithDocumentsStringMap")
                        .WithMany("AccessHistoryAttendanceDetailDifficultyWithDocumentsStringMaps")
                        .HasForeignKey("DetailDifficultyWithDocumentsStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailDifficultyWithDocumentsStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "DetailNoDifficultyWithAccessStringMap")
                        .WithMany("AccessHistoryAttendanceDetailNoDifficultyWithAccessStringMaps")
                        .HasForeignKey("DetailNoDifficultyWithAccessStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailNoDifficultyWithAccessStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("AccessHistoryAttendances")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.MedicamentAccess", "MedicamentAccess")
                        .WithMany("AccessHistoryAttendances")
                        .HasForeignKey("MedicamentAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.MedicamentAccess_MedicamentAccessId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccessHistoryAttendanceStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("AccessHistoryAttendances")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.TreatmentSetting", "TreatmentSettings")
                        .WithMany("AccessHistoryAttendances")
                        .HasForeignKey("TreatmentSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.TreatmentSettings_TreatmentSettingsId");

                    b.HasOne("Care.Api.Models.StringMap", "WaiverDetailStringMap")
                        .WithMany("AccessHistoryAttendanceWaiverDetailStringMaps")
                        .HasForeignKey("WaiverDetailStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_WaiverDetailStringMapId");

                    b.Navigation("DetailDifficultyWithAccessStringMap");

                    b.Navigation("DetailDifficultyWithDocumentsStringMap");

                    b.Navigation("DetailNoDifficultyWithAccessStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("MedicamentAccess");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("TreatmentSettings");

                    b.Navigation("WaiverDetailStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccessManner", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccessManners")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessManner_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccessMannerByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("AccessMannerByPrograms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessMannerByProgram_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("AccessMannerByPrograms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessMannerByProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("AccessMannerByPrograms")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessMannerByProgram_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccessMannerByPrograms")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessMannerByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Disease");

                    b.Navigation("HealthProgram");

                    b.Navigation("Medicament");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccessOrderByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.AccessMannerByProgram", "AccessMannerByProgram")
                        .WithMany("AccessOrderByPrograms")
                        .HasForeignKey("AccessMannerByProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.AccessMannerByProgram_AccessMannerByProgramId");

                    b.HasOne("Care.Api.Models.AccessManner", "AccessManner")
                        .WithMany("AccessOrderByPrograms")
                        .HasForeignKey("AccessMannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.AccessManner_AccessMannerId");

                    b.HasOne("Care.Api.Models.AccessWay", "AccessWay")
                        .WithMany("AccessOrderByPrograms")
                        .HasForeignKey("AccessWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.AccessWay_AccessWayId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("AccessOrderByPrograms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccessOrderByPrograms")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("AccessManner");

                    b.Navigation("AccessMannerByProgram");

                    b.Navigation("AccessWay");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccessProcedureByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("AccessProcedureByPrograms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProcedureByProgram_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("AccessProcedureByPrograms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProcedureByProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("AccessProcedureByPrograms")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProcedureByProgram_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccessProcedureByPrograms")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProcedureByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Disease");

                    b.Navigation("HealthProgram");

                    b.Navigation("Medicament");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccessProfile", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AccessProfileTypeStringMap")
                        .WithMany("AccessProfileAccessProfileTypeStringMaps")
                        .HasForeignKey("AccessProfileTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProfile_dbo.StringMap_AccessProfileTypeStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("AccessProfiles")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProfile_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccessProfileStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessProfile_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("AccessProfileTypeStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccessRightEntity", b =>
                {
                    b.HasOne("Care.Api.Models.AccessProfile", "AccessProfile")
                        .WithMany("AccessRightEntities")
                        .HasForeignKey("AccessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessRightEntity_dbo.AccessProfile_AccessProfileId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccessRightEntities")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessRightEntity_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("AccessProfile");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccessWay", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccessWays")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccessWay_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Account", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AccessCoverageAreaStringMap")
                        .WithMany("AccountAccessCoverageAreaStringMaps")
                        .HasForeignKey("AccessCoverageAreaStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.StringMap_AccessCoverageAreaStringMapId");

                    b.HasOne("Care.Api.Models.AccessManner", "AccessManner")
                        .WithMany("Accounts")
                        .HasForeignKey("AccessMannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.AccessManner_AccessMannerId");

                    b.HasOne("Care.Api.Models.AccessWay", "AccessWay")
                        .WithMany("Accounts")
                        .HasForeignKey("AccessWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.AccessWay_AccessWayId");

                    b.HasOne("Care.Api.Models.StringMap", "AccountTypeStringMap")
                        .WithMany("AccountAccountTypeStringMaps")
                        .HasForeignKey("AccountTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.StringMap_AccountTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ClinicPublicOrPrivateStringMap")
                        .WithMany("AccountClinicPublicOrPrivateStringMaps")
                        .HasForeignKey("ClinicPublicOrPrivateStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.StringMap_ClinicPublicOrPrivateStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ClinicTypeStringMap")
                        .WithMany("AccountClinicTypeStringMaps")
                        .HasForeignKey("ClinicTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.StringMap_ClinicTypeStringMapId");

                    b.HasOne("Care.Api.Models.Doctor", "DoctorResponsable")
                        .WithMany("Accounts")
                        .HasForeignKey("DoctorResponsableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.Doctor_DoctorResponsableId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("Accounts")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.HealthProfessional_HealthProfessional_Id");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("Accounts")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccountStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Account_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("AccessCoverageAreaStringMap");

                    b.Navigation("AccessManner");

                    b.Navigation("AccessWay");

                    b.Navigation("AccountTypeStringMap");

                    b.Navigation("ClinicPublicOrPrivateStringMap");

                    b.Navigation("ClinicTypeStringMap");

                    b.Navigation("DoctorResponsable");

                    b.Navigation("HealthProfessional");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccountCoverageArea", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("AccountCoverageAreas")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountCoverageArea_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccountCoverageAreas")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountCoverageArea_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Account");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccountExamTypeByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("AccountExamTypeByPrograms")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountExamTypeByProgram_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("AccountExamTypeByPrograms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountExamTypeByProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccountExamTypeByPrograms")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountExamTypeByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Account");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AccountInternalDemand", b =>
                {
                    b.HasOne("Care.Api.Models.AccountSettingsByProgram", "AccountSettingsByProgram")
                        .WithMany("AccountInternalDemands")
                        .HasForeignKey("AccountSettingsByProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountInternalDemand_dbo.AccountSettingsByProgram_AccountSettingsByProgram_Id");

                    b.HasOne("Care.Api.Models.ValidationResult", "ValidationResult")
                        .WithMany("AccountInternalDemands")
                        .HasForeignKey("ValidationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountInternalDemand_dbo.ValidationResult_ValidationResult_Id");

                    b.Navigation("AccountSettingsByProgram");

                    b.Navigation("ValidationResult");
                });

            modelBuilder.Entity("Care.Api.Models.AccountSettingsByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("AccountSettingsByPrograms")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.StringMap", "AccountStatusStringMap")
                        .WithMany("AccountSettingsByProgramAccountStatusStringMaps")
                        .HasForeignKey("AccountStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_AccountStatusStringMapId");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("AccountSettingsByPrograms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.DoctorByProgram", "DoctorByProgram")
                        .WithMany("AccountSettingsByPrograms")
                        .HasForeignKey("DoctorByProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.DoctorByProgram_DoctorByProgramId");

                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("AccountSettingsByPrograms")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.StringMap", "ExamTypeStringMap")
                        .WithMany("AccountSettingsByProgramExamTypeStringMaps")
                        .HasForeignKey("ExamTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_ExamTypeStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("AccountSettingsByPrograms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("AccountSettingsByPrograms")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "PatientTypeStringMap")
                        .WithMany("AccountSettingsByProgramPatientTypeStringMaps")
                        .HasForeignKey("PatientTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_PatientTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AccountSettingsByProgramStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.User", "SystemUser")
                        .WithMany("AccountSettingsByPrograms")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.User_SystemUserId");

                    b.Navigation("Account");

                    b.Navigation("AccountStatusStringMap");

                    b.Navigation("Disease");

                    b.Navigation("DoctorByProgram");

                    b.Navigation("ExamDefinition");

                    b.Navigation("ExamTypeStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("Medicament");

                    b.Navigation("PatientTypeStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Care.Api.Models.ActionCategory", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("ActionCategories")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionCategory_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ActionCategories")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionCategory_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.ActionConfiguration", b =>
                {
                    b.HasOne("Care.Api.Models.ActionCategory", "ActionCategory")
                        .WithMany("ActionConfigurations")
                        .HasForeignKey("ActionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionConfiguration_dbo.ActionCategory_ActionCategoryId");

                    b.HasOne("Care.Api.Models.StringMap", "ActionOwnerStringMap")
                        .WithMany("ActionConfigurationActionOwnerStringMaps")
                        .HasForeignKey("ActionOwnerStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionConfiguration_dbo.StringMap_ActionOwnerStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "Program")
                        .WithMany("ActionConfigurations")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionConfiguration_dbo.HealthProgram_ProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ActionConfigurationStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionConfiguration_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("ActionCategory");

                    b.Navigation("ActionOwnerStringMap");

                    b.Navigation("Program");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.ActionRule", b =>
                {
                    b.HasOne("Care.Api.Models.ActionConfiguration", "ActionConfiguration")
                        .WithMany("ActionRules")
                        .HasForeignKey("ActionConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionRule_dbo.ActionConfiguration_ActionConfigurationId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("ActionRules")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionRule_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ActionRules")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ActionRule_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("ActionConfiguration");

                    b.Navigation("Medicament");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AdhesionAttendance", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("AdhesionAttendances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.StringMap", "DetailDifficultyWithAccessStringMap")
                        .WithMany("AdhesionAttendanceDetailDifficultyWithAccessStringMaps")
                        .HasForeignKey("DetailDifficultyWithAccessStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_DetailDifficultyWithAccessStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "FrequencyStringMap")
                        .WithMany("AdhesionAttendanceFrequencyStringMaps")
                        .HasForeignKey("FrequencyStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_DosageStringMapId");

                    b.HasOne("Care.Api.Models.MedicamentCompetitor", "MedicamentCompetitor")
                        .WithMany("AdhesionAttendances")
                        .HasForeignKey("MedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.MedicamentCompetitor_MedicamentCompetitorId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("AdhesionAttendances")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.MedicationNonadherenceReason", "MedicationNonadherenceReason")
                        .WithMany("AdhesionAttendances")
                        .HasForeignKey("MedicationNonadherenceReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.MedicationNonadherenceReason_MedicationNonadherenceReasonId");

                    b.HasOne("Care.Api.Models.StringMap", "OriginStringMap")
                        .WithMany("AdhesionAttendanceOriginStringMaps")
                        .HasForeignKey("OriginStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_OriginStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AdhesionAttendanceStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("AdhesionAttendances")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentIntervalStringMap")
                        .WithMany("AdhesionAttendanceTreatmentIntervalStringMaps")
                        .HasForeignKey("TreatmentIntervalStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_TreatmentIntervalStringMapId");

                    b.HasOne("Care.Api.Models.TreatmentSetting", "TreatmentSettings")
                        .WithMany("AdhesionAttendances")
                        .HasForeignKey("TreatmentSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.TreatmentSettings_TreatmentSettingsId");

                    b.Navigation("Account");

                    b.Navigation("DetailDifficultyWithAccessStringMap");

                    b.Navigation("FrequencyStringMap");

                    b.Navigation("Medicament");

                    b.Navigation("MedicamentCompetitor");

                    b.Navigation("MedicationNonadherenceReason");

                    b.Navigation("OriginStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("TreatmentIntervalStringMap");

                    b.Navigation("TreatmentSettings");
                });

            modelBuilder.Entity("Care.Api.Models.AkkaPublishEvent", b =>
                {
                    b.HasOne("Care.Api.Models.AkkaActor", "AkkaActors")
                        .WithMany("AkkaPublishEvents")
                        .HasForeignKey("AkkaActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AkkaPublishEvents_dbo.AkkaActors_AkkaActorsId");

                    b.Navigation("AkkaActors");
                });

            modelBuilder.Entity("Care.Api.Models.AkkaSubscribeEvent", b =>
                {
                    b.HasOne("Care.Api.Models.AkkaActor", "AkkaActors")
                        .WithMany("AkkaSubscribeEvents")
                        .HasForeignKey("AkkaActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AkkaSubscribeEvents_dbo.AkkaActors_AkkaActorsId");

                    b.Navigation("AkkaActors");
                });

            modelBuilder.Entity("Care.Api.Models.Annotation", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AnnotationTypeStringMap")
                        .WithMany("AnnotationAnnotationTypeStringMaps")
                        .HasForeignKey("AnnotationTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Annotation_dbo.StringMap_AnnotationTypeStringMapId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("Annotations")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Annotation_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AnnotationStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Annotation_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("AnnotationTypeStringMap");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Care.Api.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Care.Api.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care.Api.Models.Attachment", b =>
                {
                    b.HasOne("Care.Api.Models.Annotation", "Annotation")
                        .WithMany("Attachments")
                        .HasForeignKey("AnnotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Attachment_dbo.Annotation_AnnotationId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("Attachments")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Attachment_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Attachments")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Attachment_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Annotation");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.AttemptCallLog", b =>
                {
                    b.HasOne("Care.Api.Models.Diagnostic", "Diagnostic")
                        .WithMany("AttemptCallLogs")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AttemptCallLog_dbo.Diagnostic_DiagnosticId");

                    b.HasOne("Care.Api.Models.PhoneCall", "PhoneCall")
                        .WithMany("AttemptCallLogs")
                        .HasForeignKey("PhoneCallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AttemptCallLog_dbo.PhoneCall_PhoneCallId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("AttemptCallLogs")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AttemptCallLog_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.TreatmentAndDiagnosticAction", "TreatmentAndDiagnosticAction")
                        .WithMany("AttemptCallLogs")
                        .HasForeignKey("TreatmentAndDiagnosticActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AttemptCallLog_dbo.TreatmentAndDiagnosticAction_TreatmentAndDiagnosticActionId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("AttemptCallLogs")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AttemptCallLog_dbo.Treatment_TreatmentId");

                    b.Navigation("Diagnostic");

                    b.Navigation("PhoneCall");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("TreatmentAndDiagnosticAction");
                });

            modelBuilder.Entity("Care.Api.Models.AttributeMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.EntityMetadatum", "EntityMetadata")
                        .WithMany("AttributeMetadata")
                        .HasForeignKey("EntityMetadataId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AttributeMetadata_dbo.EntityMetadata_EntityMetadataId");

                    b.Navigation("EntityMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Bank", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Banks")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Bank_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Benefit", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "BenefitStatusStringMap")
                        .WithMany("BenefitBenefitStatusStringMaps")
                        .HasForeignKey("BenefitStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_BenefitStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "BenefitTypeStringMap")
                        .WithMany("BenefitBenefitTypeStringMaps")
                        .HasForeignKey("BenefitTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_BenefitTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom1StringMap")
                        .WithMany("BenefitCustom1StringMaps")
                        .HasForeignKey("Custom1StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_Custom1StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom2StringMap")
                        .WithMany("BenefitCustom2StringMaps")
                        .HasForeignKey("Custom2StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_Custom2StringMapId");

                    b.HasOne("Care.Api.Models.Diagnostic", "Diagnostic")
                        .WithMany("Benefits")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.Diagnostic_DiagnosticId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Benefits")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Account", "Local")
                        .WithMany("Benefits")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.Account_LocalId");

                    b.HasOne("Care.Api.Models.StringMap", "SourceStringMap")
                        .WithMany("BenefitSourceStringMaps")
                        .HasForeignKey("SourceStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_SourceStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("BenefitStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Benefits")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.Voucher", "Voucher")
                        .WithMany("Benefits")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Benefit_dbo.Voucher_VoucherId");

                    b.Navigation("BenefitStatusStringMap");

                    b.Navigation("BenefitTypeStringMap");

                    b.Navigation("Custom1StringMap");

                    b.Navigation("Custom2StringMap");

                    b.Navigation("Diagnostic");

                    b.Navigation("HealthProgram");

                    b.Navigation("Local");

                    b.Navigation("SourceStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Care.Api.Models.CalendarScheduled", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("CalendarScheduleds")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CalendarScheduled_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.StringMap", "ScheduleTypeStringMapStringMap")
                        .WithMany("CalendarScheduledScheduleTypeStringMapStringMaps")
                        .HasForeignKey("ScheduleTypeStringMapStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CalendarScheduled_dbo.StringMap_ScheduleTypeStringMap_StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("CalendarScheduledStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CalendarScheduled_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Visit", "Visit")
                        .WithMany("CalendarScheduleds")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CalendarScheduled_dbo.Visit_VisitId");

                    b.Navigation("HealthProfessional");

                    b.Navigation("ScheduleTypeStringMapStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Care.Api.Models.Campaign", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("Campaigns")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Campaign_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Campaigns")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Campaign_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("CampaignStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Campaign_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusStringMap")
                        .WithMany("CampaignStatusStringMaps")
                        .HasForeignKey("StatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Campaign_dbo.StringMap_StatusStringMapId");

                    b.Navigation("Account");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("StatusStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Caregiver", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "CivilStatusStringMap")
                        .WithMany("CaregiverCivilStatusStringMaps")
                        .HasForeignKey("CivilStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_CivilStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "EducationStringMap")
                        .WithMany("CaregiverEducationStringMaps")
                        .HasForeignKey("EducationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_EducationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "GenderStringMap")
                        .WithMany("CaregiverGenderStringMaps")
                        .HasForeignKey("GenderStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_GenderStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Caregivers")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Caregiver_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "KinshipStringMap")
                        .WithMany("CaregiverKinshipStringMaps")
                        .HasForeignKey("KinshipStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_KinshipStringMapId");

                    b.HasOne("Care.Api.Models.Occupation", "Occupation")
                        .WithMany("Caregivers")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Caregiver_dbo.Occupation_OccupationId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("CaregiverStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("CivilStatusStringMap");

                    b.Navigation("EducationStringMap");

                    b.Navigation("GenderStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("KinshipStringMap");

                    b.Navigation("Occupation");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Chat", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "ChatTypeStringMap")
                        .WithMany("ChatChatTypeStringMaps")
                        .HasForeignKey("ChatTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Chat_dbo.StringMap_ChatTypeStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Chats")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Chat_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.User", "Operator")
                        .WithMany("Chats")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Chat_dbo.User_OperatorId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "OriginRegardingEntity")
                        .WithMany("ChatOriginRegardingEntities")
                        .HasForeignKey("OriginRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Chat_dbo.RegardingEntity_OriginRegardingEntityId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("ChatRegardingEntities")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Chat_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ChatStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Chat_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("ChatTypeStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("Operator");

                    b.Navigation("OriginRegardingEntity");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.ChatDialog", b =>
                {
                    b.HasOne("Care.Api.Models.Chat", "Chat")
                        .WithMany("ChatDialogs")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ChatDialogs_dbo.Chat_ChatId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("ChatDialogs")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ChatDialogs_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ChatDialogs")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ChatDialogs_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Chat");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Communication", b =>
                {
                    b.HasOne("Care.Api.Models.CommunicationTypeByProgram", "CommunicationTypeByProgram")
                        .WithMany("Communications")
                        .HasForeignKey("CommunicationTypeByProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Communication_dbo.CommunicationTypeByProgram_CommunicationTypeByProgramId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "From")
                        .WithMany("CommunicationFroms")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Communication_dbo.RegardingEntity_FromId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("Communications")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Communication_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Communications")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Communication_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "OriginRegardingEntity")
                        .WithMany("CommunicationOriginRegardingEntities")
                        .HasForeignKey("OriginRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Communication_dbo.RegardingEntity_OriginRegardingEntityId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("CommunicationRegardingEntities")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Communication_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Communications")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Communication_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "To")
                        .WithMany("CommunicationTos")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Communication_dbo.RegardingEntity_ToId");

                    b.Navigation("CommunicationTypeByProgram");

                    b.Navigation("From");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("OriginRegardingEntity");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Care.Api.Models.CommunicationTypeByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("CommunicationTypeByPrograms")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CommunicationTypeByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Contact", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Contact_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Contacts")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Contact_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Contact_dbo.User_UserId");

                    b.Navigation("Account");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care.Api.Models.CoverageArea", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("CoverageAreas")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CoverageArea_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("CoverageAreas")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CoverageArea_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.PostalCodeCity", "PostalCodeCity")
                        .WithMany("CoverageAreas")
                        .HasForeignKey("PostalCodeCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CoverageArea_dbo.PostalCodeCity_PostalCodeCityId");

                    b.HasOne("Care.Api.Models.PostalCodeState", "PostalCodeState")
                        .WithMany("CoverageAreas")
                        .HasForeignKey("PostalCodeStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CoverageArea_dbo.PostalCodeState_PostalCodeStateId");

                    b.HasOne("Care.Api.Models.PostalCode", "PostalcodeEnd")
                        .WithMany("CoverageAreaPostalcodeEnds")
                        .HasForeignKey("PostalcodeEndId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CoverageArea_dbo.PostalCodes_PostalcodeEndId");

                    b.HasOne("Care.Api.Models.PostalCode", "PostalcodeStart")
                        .WithMany("CoverageAreaPostalcodeStarts")
                        .HasForeignKey("PostalcodeStartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CoverageArea_dbo.PostalCodes_PostalcodeStartId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("CoverageAreas")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CoverageArea_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("PostalCodeCity");

                    b.Navigation("PostalCodeState");

                    b.Navigation("PostalcodeEnd");

                    b.Navigation("PostalcodeStart");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.CustomerAddress", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AddressTypeStringMap")
                        .WithMany("CustomerAddressAddressTypeStringMaps")
                        .HasForeignKey("AddressTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CustomerAddress_dbo.StringMap_AddressTypeStringMapId");

                    b.HasOne("Care.Api.Models.Caregiver", "Caregiver")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CustomerAddress_dbo.Caregiver_CaregiverId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CustomerAddress_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("CustomerAddressStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CustomerAddress_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("AddressTypeStringMap");

                    b.Navigation("Caregiver");

                    b.Navigation("Patient");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Diagnostic", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("DiagnosticAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.AccountSettingsByProgram", "AccountSettingsByProgram")
                        .WithMany("Diagnostics")
                        .HasForeignKey("AccountSettingsByProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.AccountSettingsByProgram_AccountSettingsByProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "AddressTypeStringMap")
                        .WithMany("DiagnosticAddressTypeStringMaps")
                        .HasForeignKey("AddressTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_AddressTypeStringMapId");

                    b.HasOne("Care.Api.Models.Caregiver", "Caregiver")
                        .WithMany("Diagnostics")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.Caregiver_CaregiverId");

                    b.HasOne("Care.Api.Models.StringMap", "CategoryOfExamsStringMap")
                        .WithMany("DiagnosticCategoryOfExamsStringMaps")
                        .HasForeignKey("CategoryOfExamsStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_CategoryOfExamsStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "DiagnosticStatusDetailStringMap")
                        .WithMany("DiagnosticDiagnosticStatusDetailStringMaps")
                        .HasForeignKey("DiagnosticStatusDetailStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_DiagnosticStatusDetailStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "DiagnosticStatusStringMap")
                        .WithMany("DiagnosticDiagnosticStatusStringMaps")
                        .HasForeignKey("DiagnosticStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_DiagnosticStatusStringMapId");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("Diagnostics")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("DiagnosticDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.Doctor", "DoctorPrescriber")
                        .WithMany("DiagnosticDoctorPrescribers")
                        .HasForeignKey("DoctorPrescriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.Doctor_DoctorPrescriberId");

                    b.HasOne("Care.Api.Models.StringMap", "EthnicityStringMap")
                        .WithMany("DiagnosticEthnicityStringMaps")
                        .HasForeignKey("EthnicityStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_EthnicityStringMapId");

                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("Diagnostics")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.StringMap", "FridayStringMap")
                        .WithMany("DiagnosticFridayStringMaps")
                        .HasForeignKey("FridayStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_FridayStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "GenderStringMap")
                        .WithMany("DiagnosticGenderStringMaps")
                        .HasForeignKey("GenderStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_GenderStringMapId");

                    b.HasOne("Care.Api.Models.Account", "HealthCareProvider")
                        .WithMany("DiagnosticHealthCareProviders")
                        .HasForeignKey("HealthCareProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.Account_HealthCareProviderId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("Diagnostics")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Diagnostics")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "KinshipStringMap")
                        .WithMany("DiagnosticKinshipStringMaps")
                        .HasForeignKey("KinshipStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_KinshipStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "MainContactStringMap")
                        .WithMany("DiagnosticMainContactStringMaps")
                        .HasForeignKey("MainContactStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_MainContactStringMapId");

                    b.HasOne("Care.Api.Models.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("Diagnostics")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.MedicalSpecialty_MedicalSpecialtyId");

                    b.HasOne("Care.Api.Models.MedicamentCompetitor", "MedicamentCompetitor")
                        .WithMany("DiagnosticMedicamentCompetitors")
                        .HasForeignKey("MedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.MedicamentCompetitor_MedicamentCompetitorId");

                    b.HasOne("Care.Api.Models.StringMap", "MondayStringMap")
                        .WithMany("DiagnosticMondayStringMaps")
                        .HasForeignKey("MondayStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_MondayStringMapId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("Diagnostics")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "PatientSourceStringMap")
                        .WithMany("DiagnosticPatientSourceStringMaps")
                        .HasForeignKey("PatientSourceStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_PatientSourceStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "PreferredTimeStringMap")
                        .WithMany("DiagnosticPreferredTimeStringMaps")
                        .HasForeignKey("PreferredTimeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_PreferredTimeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "PrescriptionStatusStringMap")
                        .WithMany("DiagnosticPrescriptionStatusStringMaps")
                        .HasForeignKey("PrescriptionStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_PrescriptionStatusStringMapId");

                    b.HasOne("Care.Api.Models.MedicamentCompetitor", "PreviousMedicamentCompetitor")
                        .WithMany("DiagnosticPreviousMedicamentCompetitors")
                        .HasForeignKey("PreviousMedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId");

                    b.HasOne("Care.Api.Models.StringMap", "SaturdayStringMap")
                        .WithMany("DiagnosticSaturdayStringMaps")
                        .HasForeignKey("SaturdayStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_SaturdayStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SourceConsentStringMap")
                        .WithMany("DiagnosticSourceConsentStringMaps")
                        .HasForeignKey("SourceConsentStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_SourceConsentStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StageOfDiseaseStringMap")
                        .WithMany("DiagnosticStageOfDiseaseStringMaps")
                        .HasForeignKey("StageOfDiseaseStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_StageOfDiseaseStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("DiagnosticStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ThursdayStringMap")
                        .WithMany("DiagnosticThursdayStringMaps")
                        .HasForeignKey("ThursdayStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_ThursdayStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentLine2StringMap")
                        .WithMany("DiagnosticTreatmentLine2StringMaps")
                        .HasForeignKey("TreatmentLine2StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_TreatmentLine2StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentLineStringMap")
                        .WithMany("DiagnosticTreatmentLineStringMaps")
                        .HasForeignKey("TreatmentLineStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_TreatmentLineStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TuesdayStringMap")
                        .WithMany("DiagnosticTuesdayStringMaps")
                        .HasForeignKey("TuesdayStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_TuesdayStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TypeOfAnalysisStringMap")
                        .WithMany("DiagnosticTypeOfAnalysisStringMaps")
                        .HasForeignKey("TypeOfAnalysisStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_TypeOfAnalysisStringMapId");

                    b.HasOne("Care.Api.Models.User", "User")
                        .WithMany("Diagnostics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.User_UserId");

                    b.HasOne("Care.Api.Models.Voucher", "Voucher")
                        .WithMany("Diagnostics")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.Voucher_VoucherId");

                    b.HasOne("Care.Api.Models.StringMap", "WednesdayStringMap")
                        .WithMany("DiagnosticWednesdayStringMaps")
                        .HasForeignKey("WednesdayStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_WednesdayStringMapId");

                    b.Navigation("Account");

                    b.Navigation("AccountSettingsByProgram");

                    b.Navigation("AddressTypeStringMap");

                    b.Navigation("Caregiver");

                    b.Navigation("CategoryOfExamsStringMap");

                    b.Navigation("DiagnosticStatusDetailStringMap");

                    b.Navigation("DiagnosticStatusStringMap");

                    b.Navigation("Disease");

                    b.Navigation("Doctor");

                    b.Navigation("DoctorPrescriber");

                    b.Navigation("EthnicityStringMap");

                    b.Navigation("ExamDefinition");

                    b.Navigation("FridayStringMap");

                    b.Navigation("GenderStringMap");

                    b.Navigation("HealthCareProvider");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("KinshipStringMap");

                    b.Navigation("MainContactStringMap");

                    b.Navigation("MedicalSpecialty");

                    b.Navigation("MedicamentCompetitor");

                    b.Navigation("MondayStringMap");

                    b.Navigation("Patient");

                    b.Navigation("PatientSourceStringMap");

                    b.Navigation("PreferredTimeStringMap");

                    b.Navigation("PrescriptionStatusStringMap");

                    b.Navigation("PreviousMedicamentCompetitor");

                    b.Navigation("SaturdayStringMap");

                    b.Navigation("SourceConsentStringMap");

                    b.Navigation("StageOfDiseaseStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("ThursdayStringMap");

                    b.Navigation("TreatmentLine2StringMap");

                    b.Navigation("TreatmentLineStringMap");

                    b.Navigation("TuesdayStringMap");

                    b.Navigation("TypeOfAnalysisStringMap");

                    b.Navigation("User");

                    b.Navigation("Voucher");

                    b.Navigation("WednesdayStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.DiagnosticExam", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "DiagnosticStatusStringMap")
                        .WithMany("DiagnosticExamDiagnosticStatusStringMaps")
                        .HasForeignKey("DiagnosticStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.StringMap_DiagnosticStatusStringMapId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("DiagnosticExams")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("DiagnosticExams")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.StringMap", "ExamTypeStringMap")
                        .WithMany("DiagnosticExamExamTypeStringMaps")
                        .HasForeignKey("ExamTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.StringMap_ExamTypeStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("DiagnosticExams")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Account", "Local")
                        .WithMany("DiagnosticExams")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.Account_LocalId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("DiagnosticExamStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("DiagnosticExams")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.Voucher", "Voucher")
                        .WithMany("DiagnosticExams")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DiagnosticExam_dbo.Voucher_VoucherId");

                    b.Navigation("DiagnosticStatusStringMap");

                    b.Navigation("Doctor");

                    b.Navigation("ExamDefinition");

                    b.Navigation("ExamTypeStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("Local");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Care.Api.Models.Disease", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Diseases")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Disease_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Doctor", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Doctor_dbo.Account_ClinicId");

                    b.HasOne("Care.Api.Models.StringMap", "GenderStringMap")
                        .WithMany("DoctorGenderStringMaps")
                        .HasForeignKey("GenderStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Doctor_dbo.StringMap_GenderStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "LicenseStatusStringMap")
                        .WithMany("DoctorLicenseStatusStringMaps")
                        .HasForeignKey("LicenseStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Doctor_dbo.StringMap_LicenseStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "LicenseTypeStringMap")
                        .WithMany("DoctorLicenseTypeStringMaps")
                        .HasForeignKey("LicenseTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Doctor_dbo.StringMap_LicenseTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("DoctorStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Doctor_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Clinic");

                    b.Navigation("GenderStringMap");

                    b.Navigation("LicenseStatusStringMap");

                    b.Navigation("LicenseTypeStringMap");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AuthorizeSmsstringMap")
                        .WithMany("DoctorByProgramAuthorizeSmsstringMaps")
                        .HasForeignKey("AuthorizeSmsstringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizeSMSStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "AuthorizeVisitStringMap")
                        .WithMany("DoctorByProgramAuthorizeVisitStringMaps")
                        .HasForeignKey("AuthorizeVisitStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizeVisitStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "AuthorizesTitrationofDosageStringMap")
                        .WithMany("DoctorByProgramAuthorizesTitrationofDosageStringMaps")
                        .HasForeignKey("AuthorizesTitrationofDosageStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizesTitrationofDosageStringMapId");

                    b.HasOne("Care.Api.Models.User", "Consultant")
                        .WithMany("DoctorByProgramConsultants")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.User_ConsultantId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("DoctorByPrograms")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.Doctor_Doctor_Id");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("DoctorByPrograms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "SourceConsentStringMap")
                        .WithMany("DoctorByProgramSourceConsentStringMaps")
                        .HasForeignKey("SourceConsentStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_SourceConsentStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("DoctorByProgramStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.User", "SystemUser")
                        .WithMany("DoctorByProgramSystemUsers")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgram_dbo.User_SystemUserId");

                    b.Navigation("AuthorizeSmsstringMap");

                    b.Navigation("AuthorizeVisitStringMap");

                    b.Navigation("AuthorizesTitrationofDosageStringMap");

                    b.Navigation("Consultant");

                    b.Navigation("Doctor");

                    b.Navigation("HealthProgram");

                    b.Navigation("SourceConsentStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Care.Api.Models.DoctorsRepresentative", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("DoctorsRepresentatives")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("DoctorsRepresentatives")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("DoctorsRepresentatives")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("DoctorsRepresentatives")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Representative", "Manager")
                        .WithMany("DoctorsRepresentativeManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Representative_ManagerId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("DoctorsRepresentatives")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.Representative", "Representative")
                        .WithMany("DoctorsRepresentativeRepresentatives")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Representative_RepresentativeId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("DoctorsRepresentatives")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Account");

                    b.Navigation("Disease");

                    b.Navigation("Doctor");

                    b.Navigation("HealthProgram");

                    b.Navigation("Manager");

                    b.Navigation("Medicament");

                    b.Navigation("Representative");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Email", b =>
                {
                    b.HasOne("Care.Api.Models.EmailBoxSetting", "EmailBoxSetting")
                        .WithMany("Emails")
                        .HasForeignKey("EmailBoxSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Email_dbo.EmailBoxSetting_EmailBoxSettingId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Emails")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Email_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "OriginRegardingEntity")
                        .WithMany("EmailOriginRegardingEntities")
                        .HasForeignKey("OriginRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Email_dbo.RegardingEntity_OriginRegardingEntityId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("EmailRegardingEntities")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Email_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Emails")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Email_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("EmailBoxSetting");

                    b.Navigation("HealthProgram");

                    b.Navigation("OriginRegardingEntity");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.EmailBoxSetting", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("EmailBoxSettings")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.EmailBoxSetting_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.EntityMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.EntityConfiguration", "EntityConfiguration")
                        .WithMany("EntityMetadata")
                        .HasForeignKey("EntityConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.EntityMetadata_dbo.EntityConfiguration_EntityConfiguration_Id");

                    b.Navigation("EntityConfiguration");
                });

            modelBuilder.Entity("Care.Api.Models.Exam", b =>
                {
                    b.HasOne("Care.Api.Models.Diagnostic", "Diagnostic")
                        .WithMany("Exams")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.Diagnostic_DiagnosticId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("Exams")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("Exams")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.StringMap", "ExamStatusStringMap")
                        .WithMany("ExamExamStatusStringMaps")
                        .HasForeignKey("ExamStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.StringMap_ExamStatusStringMapId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("Exams")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Exams")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Account", "Local")
                        .WithMany("Exams")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.Account_LocalId");

                    b.HasOne("Care.Api.Models.LogisticsSchedule", "LogisticsSchedule")
                        .WithMany("ExamLogisticsSchedules")
                        .HasForeignKey("LogisticsScheduleId")
                        .HasConstraintName("FK_dbo.Exam_dbo.LogisticsSchedule_LogisticsSchedule_Id");

                    b.HasOne("Care.Api.Models.LogisticsSchedule", "LogisticsScheduleId1Navigation")
                        .WithMany("ExamLogisticsScheduleId1Navigations")
                        .HasForeignKey("LogisticsScheduleId1")
                        .HasConstraintName("FK_dbo.Exam_dbo.LogisticsSchedule_LogisticsScheduleId");

                    b.HasOne("Care.Api.Models.LogisticsScheduleItem", "LogisticsScheduleItem")
                        .WithMany("Exams")
                        .HasForeignKey("LogisticsScheduleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.LogisticsScheduleItem_LogisticsScheduleItemId");

                    b.HasOne("Care.Api.Models.LogisticsStuff", "LogisticsStuff")
                        .WithMany("Exams")
                        .HasForeignKey("LogisticsStuffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.LogisticsStuff_LogisticsStuffId");

                    b.HasOne("Care.Api.Models.StringMap", "OwnershipLevelStringMap")
                        .WithMany("ExamOwnershipLevelStringMaps")
                        .HasForeignKey("OwnershipLevelStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.StringMap_OwnershipLevelStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ReschedulingReasonStringMap")
                        .WithMany("ExamReschedulingReasonStringMaps")
                        .HasForeignKey("ReschedulingReasonStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.StringMap_ReschedulingReasonStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ResultStringMap")
                        .WithMany("ExamResultStringMaps")
                        .HasForeignKey("ResultStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.StringMap_ResultStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ScheduleSourceStringMap")
                        .WithMany("ExamScheduleSourceStringMaps")
                        .HasForeignKey("ScheduleSourceStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.StringMap_ScheduleSourceStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ExamStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Exams")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.Voucher", "Voucher")
                        .WithMany("Exams")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.Voucher_VoucherId");

                    b.HasOne("Care.Api.Models.StringMap", "WithdrawalPreferenceStringMap")
                        .WithMany("ExamWithdrawalPreferenceStringMaps")
                        .HasForeignKey("WithdrawalPreferenceStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Exam_dbo.StringMap_WithdrawalPreferenceStringMapId");

                    b.Navigation("Diagnostic");

                    b.Navigation("Doctor");

                    b.Navigation("ExamDefinition");

                    b.Navigation("ExamStatusStringMap");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("Local");

                    b.Navigation("LogisticsSchedule");

                    b.Navigation("LogisticsScheduleId1Navigation");

                    b.Navigation("LogisticsScheduleItem");

                    b.Navigation("LogisticsStuff");

                    b.Navigation("OwnershipLevelStringMap");

                    b.Navigation("ReschedulingReasonStringMap");

                    b.Navigation("ResultStringMap");

                    b.Navigation("ScheduleSourceStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("Voucher");

                    b.Navigation("WithdrawalPreferenceStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinition", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "ExamTypeStringMap")
                        .WithMany("ExamDefinitionExamTypeStringMaps")
                        .HasForeignKey("ExamTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinition_dbo.StringMap_ExamTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ExamDefinitionStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinition_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("ExamTypeStringMap");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinitionSettingsByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("ExamDefinitionSettingsByPrograms")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionSettingsByProgram_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("ExamDefinitionSettingsByPrograms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionSettingsByProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ExamDefinitionSettingsByPrograms")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionSettingsByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("ExamDefinition");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessional", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "BankAccountTypeStringMap")
                        .WithMany("HealthProfessionalBankAccountTypeStringMaps")
                        .HasForeignKey("BankAccountTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_BankAccountTypeStringMapId");

                    b.HasOne("Care.Api.Models.Bank", "Bank")
                        .WithMany("HealthProfessionals")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessional_dbo.Bank_BankId");

                    b.HasOne("Care.Api.Models.StringMap", "GenderStringMap")
                        .WithMany("HealthProfessionalGenderStringMaps")
                        .HasForeignKey("GenderStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_GenderStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "HiringTypeStringMap")
                        .WithMany("HealthProfessionalHiringTypeStringMaps")
                        .HasForeignKey("HiringTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_HiringTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "NurseProfessionalTypeStringMap")
                        .WithMany("HealthProfessionalNurseProfessionalTypeStringMaps")
                        .HasForeignKey("NurseProfessionalTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_NurseProfessionalTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ProfessionalLicenseTypeStringMap")
                        .WithMany("HealthProfessionalProfessionalLicenseTypeStringMaps")
                        .HasForeignKey("ProfessionalLicenseTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_ProfessionalLicenseTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("HealthProfessionalStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.User", "User")
                        .WithMany("HealthProfessionals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessional_dbo.User_UserId");

                    b.Navigation("Bank");

                    b.Navigation("BankAccountTypeStringMap");

                    b.Navigation("GenderStringMap");

                    b.Navigation("HiringTypeStringMap");

                    b.Navigation("NurseProfessionalTypeStringMap");

                    b.Navigation("ProfessionalLicenseTypeStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessionalByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.User", "Consultant")
                        .WithMany("HealthProfessionalByPrograms")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.User_ConsultantId");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("HealthProfessionalByPrograms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("HealthProfessionalByPrograms")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.Account", "Local")
                        .WithMany("HealthProfessionalByPrograms")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.Account_LocalId");

                    b.HasOne("Care.Api.Models.StringMap", "NurceStatusStringMap")
                        .WithMany("HealthProfessionalByProgramNurceStatusStringMaps")
                        .HasForeignKey("NurceStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.StringMap_NurceStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("HealthProfessionalByProgramStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Consultant");

                    b.Navigation("Disease");

                    b.Navigation("HealthProfessional");

                    b.Navigation("Local");

                    b.Navigation("NurceStatusStringMap");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgram", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("HealthProgramAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgram_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.AkkaActor", "AkkaActors")
                        .WithMany("HealthPrograms")
                        .HasForeignKey("AkkaActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgram_dbo.AkkaActors_AkkaActorsId");

                    b.HasOne("Care.Api.Models.Account", "LogisticPartner")
                        .WithMany("HealthProgramLogisticPartners")
                        .HasForeignKey("LogisticPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgram_dbo.Account_LogisticPartnerId");

                    b.HasOne("Care.Api.Models.StringMap", "LogisticsTypeStringMap")
                        .WithMany("HealthProgramLogisticsTypeStringMaps")
                        .HasForeignKey("LogisticsTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgram_dbo.StringMap_LogisticsTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("HealthProgramStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Account");

                    b.Navigation("AkkaActors");

                    b.Navigation("LogisticPartner");

                    b.Navigation("LogisticsTypeStringMap");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramDisease", b =>
                {
                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("HealthProgramDiseaseDiseases")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramDisease_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("HealthProgramDiseases")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramDisease_dbo.HealthProgram_HealthProgram_Id");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("HealthProgramDiseases")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramDisease_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Disease", "SuspectDisease")
                        .WithMany("HealthProgramDiseaseSuspectDiseases")
                        .HasForeignKey("SuspectDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramDisease_dbo.Disease_SuspectDiseaseId");

                    b.Navigation("Disease");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("SuspectDisease");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramDiseaseExam", b =>
                {
                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("HealthProgramDiseaseExams")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramDiseaseExam_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.StringMap", "ExamTypeStringMap")
                        .WithMany("HealthProgramDiseaseExamExamTypeStringMaps")
                        .HasForeignKey("ExamTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramDiseaseExam_dbo.StringMap_ExamTypeStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgramDisease", "HealthProgramDisease")
                        .WithMany("HealthProgramDiseaseExams")
                        .HasForeignKey("HealthProgramDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramDiseaseExam_dbo.HealthProgramDisease_HealthProgramDisease_Id");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("HealthProgramDiseaseExamStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramDiseaseExam_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("ExamDefinition");

                    b.Navigation("ExamTypeStringMap");

                    b.Navigation("HealthProgramDisease");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramExamByEntity", b =>
                {
                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("HealthProgramExamByEntities")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramExamByEntity_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("HealthProgramExamByEntities")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramExamByEntity_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("HealthProgramExamByEntities")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramExamByEntity_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("ExamDefinition");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramTemplateSetting", b =>
                {
                    b.HasOne("Care.Api.Models.EmailBoxSetting", "EmailBoxSetting")
                        .WithMany("HealthProgramTemplateSettings")
                        .HasForeignKey("EmailBoxSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.EmailBoxSetting_EmailBoxSettingId");

                    b.HasOne("Care.Api.Models.EntityMetadatum", "EntityMetadata")
                        .WithMany("HealthProgramTemplateSettings")
                        .HasForeignKey("EntityMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.EntityMetadata_EntityMetadataId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("HealthProgramTemplateSettings")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("HealthProgramTemplateSettingStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Template", "Template")
                        .WithMany("HealthProgramTemplateSettings")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.Template_TemplateId");

                    b.HasOne("Care.Api.Models.StringMap", "TemplateTypeStringMapStringMap")
                        .WithMany("HealthProgramTemplateSettingTemplateTypeStringMapStringMaps")
                        .HasForeignKey("TemplateTypeStringMapStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.StringMap_TemplateTypeStringMap_StringMapId");

                    b.Navigation("EmailBoxSetting");

                    b.Navigation("EntityMetadata");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Template");

                    b.Navigation("TemplateTypeStringMapStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Incident", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("IncidentAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.StringMap", "AccountTypeStringMap")
                        .WithMany("IncidentAccountTypeStringMaps")
                        .HasForeignKey("AccountTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_AccountTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ContactTypeStringMap")
                        .WithMany("IncidentContactTypeStringMaps")
                        .HasForeignKey("ContactTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_ContactTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom1StringMap")
                        .WithMany("IncidentCustom1StringMaps")
                        .HasForeignKey("Custom1StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_Custom1StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom2StringMap")
                        .WithMany("IncidentCustom2StringMaps")
                        .HasForeignKey("Custom2StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_Custom2StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "CustomerTypeStringMap")
                        .WithMany("IncidentCustomerTypeStringMaps")
                        .HasForeignKey("CustomerTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_CustomerTypeStringMapId");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("Incidents")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.Account", "DistributorLogistic")
                        .WithMany("IncidentDistributorLogistics")
                        .HasForeignKey("DistributorLogisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.Account_DistributorLogisticId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("Incidents")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Incidents")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.IncidentProduct", "IncidentProduct")
                        .WithMany("Incidents")
                        .HasForeignKey("IncidentProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.IncidentProduct_IncidentProductId");

                    b.HasOne("Care.Api.Models.IncidentSubject", "IncidentSubject")
                        .WithMany("Incidents")
                        .HasForeignKey("IncidentSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.IncidentSubject_IncidentSubjectId");

                    b.HasOne("Care.Api.Models.IncidentTypeDetail", "IncidentTypeDetail")
                        .WithMany("Incidents")
                        .HasForeignKey("IncidentTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.IncidentTypeDetail_IncidentTypeDetailId");

                    b.HasOne("Care.Api.Models.IncidentType", "IncidentType")
                        .WithMany("Incidents")
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.IncidentType_IncidentTypeId");

                    b.HasOne("Care.Api.Models.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("Incidents")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.MedicalSpecialty_MedicalSpecialtyId");

                    b.HasOne("Care.Api.Models.StringMap", "OriginStringMap")
                        .WithMany("IncidentOriginStringMaps")
                        .HasForeignKey("OriginStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_OriginStringMapId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("Incidents")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "PrescriptionStatusStringMap")
                        .WithMany("IncidentPrescriptionStatusStringMaps")
                        .HasForeignKey("PrescriptionStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_PrescriptionStatusStringMapId");

                    b.HasOne("Care.Api.Models.MedicamentCompetitor", "PreviousMedicamentCompetitor")
                        .WithMany("Incidents")
                        .HasForeignKey("PreviousMedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("Incidents")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.Representative", "Representative")
                        .WithMany("Incidents")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.Representative_RepresentativeId");

                    b.HasOne("Care.Api.Models.StringMap", "RequestStatusStringMap")
                        .WithMany("IncidentRequestStatusStringMaps")
                        .HasForeignKey("RequestStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_RequestStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("IncidentStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusStringMap")
                        .WithMany("IncidentStatusStringMaps")
                        .HasForeignKey("StatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_StatusStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Incidents")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentLineStringMap")
                        .WithMany("IncidentTreatmentLineStringMaps")
                        .HasForeignKey("TreatmentLineStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Incident_dbo.StringMap_TreatmentLineStringMapId");

                    b.Navigation("Account");

                    b.Navigation("AccountTypeStringMap");

                    b.Navigation("ContactTypeStringMap");

                    b.Navigation("Custom1StringMap");

                    b.Navigation("Custom2StringMap");

                    b.Navigation("CustomerTypeStringMap");

                    b.Navigation("Disease");

                    b.Navigation("DistributorLogistic");

                    b.Navigation("Doctor");

                    b.Navigation("HealthProgram");

                    b.Navigation("IncidentProduct");

                    b.Navigation("IncidentSubject");

                    b.Navigation("IncidentType");

                    b.Navigation("IncidentTypeDetail");

                    b.Navigation("MedicalSpecialty");

                    b.Navigation("OriginStringMap");

                    b.Navigation("Patient");

                    b.Navigation("PrescriptionStatusStringMap");

                    b.Navigation("PreviousMedicamentCompetitor");

                    b.Navigation("RegardingEntity");

                    b.Navigation("Representative");

                    b.Navigation("RequestStatusStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("StatusStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("TreatmentLineStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentItem", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("IncidentItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentItem_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("IncidentItems")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentItem_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("IncidentItems")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentItem_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.StringMap", "GenderStringMap")
                        .WithMany("IncidentItemGenderStringMaps")
                        .HasForeignKey("GenderStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentItem_dbo.StringMap_GenderStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("IncidentItems")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentItem_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Incident", "Incident")
                        .WithMany("IncidentItems")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentItem_dbo.Incident_IncidentId");

                    b.HasOne("Care.Api.Models.LogisticsSchedule", "LogisticsSchedule")
                        .WithMany("IncidentItems")
                        .HasForeignKey("LogisticsScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentItem_dbo.LogisticsSchedule_LogisticsScheduleId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("IncidentItemStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentItem_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Account");

                    b.Navigation("Disease");

                    b.Navigation("Doctor");

                    b.Navigation("GenderStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("Incident");

                    b.Navigation("LogisticsSchedule");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentProduct", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("IncidentProducts")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentProduct_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("IncidentProducts")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentProduct_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentSubject", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("IncidentSubjects")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentSubject_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("IncidentSubjects")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentSubject_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentType", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("IncidentTypes")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentType_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentTypeDetail", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("IncidentTypeDetails")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentTypeDetail_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentTypeDetailProgram", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("IncidentTypeDetailPrograms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.IncidentProduct", "IncidentProduct")
                        .WithMany("IncidentTypeDetailPrograms")
                        .HasForeignKey("IncidentProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.IncidentProduct_IncidentProductId");

                    b.HasOne("Care.Api.Models.IncidentSubject", "IncidentSubject")
                        .WithMany("IncidentTypeDetailPrograms")
                        .HasForeignKey("IncidentSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.IncidentSubject_IncidentSubjectId");

                    b.HasOne("Care.Api.Models.IncidentTypeDetail", "IncidentTypeDetail")
                        .WithMany("IncidentTypeDetailPrograms")
                        .HasForeignKey("IncidentTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.IncidentTypeDetail_IncidentTypeDetailId");

                    b.HasOne("Care.Api.Models.IncidentType", "IncidentType")
                        .WithMany("IncidentTypeDetailPrograms")
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.IncidentType_IncidentTypeId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("IncidentTypeDetailPrograms")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("IncidentProduct");

                    b.Navigation("IncidentSubject");

                    b.Navigation("IncidentType");

                    b.Navigation("IncidentTypeDetail");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.IndexViewsEntityMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.EntityMetadatum", "EntityMetadata")
                        .WithMany("IndexViewsEntityMetadata")
                        .HasForeignKey("EntityMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.IndexViewsEntityMetadata_dbo.EntityMetadata_EntityMetadataId");

                    b.Navigation("EntityMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.InformationCollect", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "CollectionDiagnosisStringMap")
                        .WithMany("InformationCollectCollectionDiagnosisStringMaps")
                        .HasForeignKey("CollectionDiagnosisStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationCollect_dbo.StringMap_CollectionDiagnosisStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("InformationCollects")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationCollect_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "PlaceOfCollectionStringMap")
                        .WithMany("InformationCollectPlaceOfCollectionStringMaps")
                        .HasForeignKey("PlaceOfCollectionStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationCollect_dbo.StringMap_PlaceOfCollectionStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("InformationCollectStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationCollect_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Visit", "Visit")
                        .WithMany("InformationCollects")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationCollect_dbo.Visit_VisitId");

                    b.Navigation("CollectionDiagnosisStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("PlaceOfCollectionStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Care.Api.Models.InformationVisit", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AbsenceJustificationStringMap")
                        .WithMany("InformationVisitAbsenceJustificationStringMaps")
                        .HasForeignKey("AbsenceJustificationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationVisit_dbo.StringMap_AbsenceJustificationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("InformationVisitStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationVisit_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Visit", "Visit")
                        .WithMany("InformationVisits")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationVisit_dbo.Visit_VisitId");

                    b.HasOne("Care.Api.Models.StringMap", "VisitStatusStringMap")
                        .WithMany("InformationVisitVisitStatusStringMaps")
                        .HasForeignKey("VisitStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.InformationVisit_dbo.StringMap_VisitStatusStringMapId");

                    b.Navigation("AbsenceJustificationStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Visit");

                    b.Navigation("VisitStatusStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Infusion", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProfessional", "AccountableHealthProfessional")
                        .WithMany("InfusionAccountableHealthProfessionals")
                        .HasForeignKey("AccountableHealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.HealthProfessional_AccountableHealthProfessionalId");

                    b.HasOne("Care.Api.Models.StringMap", "ApplicationTypeStringMap")
                        .WithMany("InfusionApplicationTypeStringMaps")
                        .HasForeignKey("ApplicationTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_ApplicationTypeStringMapId");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("Infusions")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("Infusions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Infusions")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "InfusionDispatchNumberStringMap")
                        .WithMany("InfusionInfusionDispatchNumberStringMaps")
                        .HasForeignKey("InfusionDispatchNumberStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionDispatchNumberStringMapId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "InfusionPlaceProfessional")
                        .WithMany("InfusionInfusionPlaceProfessionals")
                        .HasForeignKey("InfusionPlaceProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.HealthProfessional_InfusionPlaceProfessionalId");

                    b.HasOne("Care.Api.Models.StringMap", "InfusionPlaceTypeStringMap")
                        .WithMany("InfusionInfusionPlaceTypeStringMaps")
                        .HasForeignKey("InfusionPlaceTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionPlaceTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "InfusionStatusStringMap")
                        .WithMany("InfusionInfusionStatusStringMaps")
                        .HasForeignKey("InfusionStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "InfusionTypeStringMap")
                        .WithMany("InfusionInfusionTypeStringMaps")
                        .HasForeignKey("InfusionTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "InfusionWeekStringMap")
                        .WithMany("InfusionInfusionWeekStringMaps")
                        .HasForeignKey("InfusionWeekStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionWeekStringMapId");

                    b.HasOne("Care.Api.Models.Logistic", "Logistics")
                        .WithMany("Infusions")
                        .HasForeignKey("LogisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.Logistics_LogisticsId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("Infusions")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.PatientSalesOrder", "PatientSalesOrder")
                        .WithMany("Infusions")
                        .HasForeignKey("PatientSalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.PatientSalesOrder_PatientSalesOrderId");

                    b.HasOne("Care.Api.Models.Account", "Place")
                        .WithMany("Infusions")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.Account_PlaceId");

                    b.HasOne("Care.Api.Models.StringMap", "ReasonInfusionNotDoneStringMap")
                        .WithMany("InfusionReasonInfusionNotDoneStringMaps")
                        .HasForeignKey("ReasonInfusionNotDoneStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_ReasonInfusionNotDoneStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("InfusionStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SupportFieldStringMap")
                        .WithMany("InfusionSupportFieldStringMaps")
                        .HasForeignKey("SupportFieldStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_SupportFieldStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Infusions")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.Voucher", "Voucher")
                        .WithMany("Infusions")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Infusion_dbo.Voucher_VoucherId");

                    b.Navigation("AccountableHealthProfessional");

                    b.Navigation("ApplicationTypeStringMap");

                    b.Navigation("Disease");

                    b.Navigation("Doctor");

                    b.Navigation("HealthProgram");

                    b.Navigation("InfusionDispatchNumberStringMap");

                    b.Navigation("InfusionPlaceProfessional");

                    b.Navigation("InfusionPlaceTypeStringMap");

                    b.Navigation("InfusionStatusStringMap");

                    b.Navigation("InfusionTypeStringMap");

                    b.Navigation("InfusionWeekStringMap");

                    b.Navigation("Logistics");

                    b.Navigation("Medicament");

                    b.Navigation("PatientSalesOrder");

                    b.Navigation("Place");

                    b.Navigation("ReasonInfusionNotDoneStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("SupportFieldStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Care.Api.Models.JsRulesByEntity", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("JsRulesByEntities")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.JsRulesByEntity_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("JsRulesByEntities")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.JsRulesByEntity_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.LanguageMenuMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.MenuMetadatum", "MenuMetadata")
                        .WithMany("LanguageMenuMetadata")
                        .HasForeignKey("MenuMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LanguageMenuMetadata_dbo.MenuMetadata_MenuMetadataId");

                    b.Navigation("MenuMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.LanguageSectionMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.SectionMetadatum", "SectionMetadata")
                        .WithMany("LanguageSectionMetadata")
                        .HasForeignKey("SectionMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LanguageSectionMetadata_dbo.SectionMetadata_SectionMetadataId");

                    b.Navigation("SectionMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Logistic", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "Custom1StringMap")
                        .WithMany("LogisticCustom1StringMaps")
                        .HasForeignKey("Custom1StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_Custom1StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom2StringMap")
                        .WithMany("LogisticCustom2StringMaps")
                        .HasForeignKey("Custom2StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_Custom2StringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Logistics")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "IncidentStatusStringMap")
                        .WithMany("LogisticIncidentStatusStringMaps")
                        .HasForeignKey("IncidentStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_IncidentStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "IntegrationStatusStringMap")
                        .WithMany("LogisticIntegrationStatusStringMaps")
                        .HasForeignKey("IntegrationStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_IntegrationStatusStringMapId");

                    b.HasOne("Care.Api.Models.Account", "LogisticsPartner")
                        .WithMany("Logistics")
                        .HasForeignKey("LogisticsPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.Account_LogisticsPartnerId");

                    b.HasOne("Care.Api.Models.LogisticsStuff", "LogisticsStuff")
                        .WithMany("Logistics")
                        .HasForeignKey("LogisticsStuffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.LogisticsStuff_LogisticsStuffId");

                    b.HasOne("Care.Api.Models.StringMap", "LogisticsTypeStringMap")
                        .WithMany("LogisticLogisticsTypeStringMaps")
                        .HasForeignKey("LogisticsTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_LogisticsTypeStringMapId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("Logistics")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("Logistics")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "SendStatusStringMap")
                        .WithMany("LogisticSendStatusStringMaps")
                        .HasForeignKey("SendStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_SendStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SendSubStatusStringMap")
                        .WithMany("LogisticSendSubStatusStringMaps")
                        .HasForeignKey("SendSubStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_SendSubStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("LogisticStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Logistics")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.StringMap", "UcbKitSentReasonStringMap")
                        .WithMany("LogisticUcbKitSentReasonStringMaps")
                        .HasForeignKey("UcbKitSentReasonStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_UCB_KitSentReasonStringMapId");

                    b.Navigation("Custom1StringMap");

                    b.Navigation("Custom2StringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("IncidentStatusStringMap");

                    b.Navigation("IntegrationStatusStringMap");

                    b.Navigation("LogisticsPartner");

                    b.Navigation("LogisticsStuff");

                    b.Navigation("LogisticsTypeStringMap");

                    b.Navigation("Medicament");

                    b.Navigation("Patient");

                    b.Navigation("SendStatusStringMap");

                    b.Navigation("SendSubStatusStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("UcbKitSentReasonStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsSchedule", b =>
                {
                    b.HasOne("Care.Api.Models.AccountSettingsByProgram", "AccountSettingsByProgram")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("AccountSettingsByProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.AccountSettingsByProgram_AccountSettingsByProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "ChosenExamTypeStringMap")
                        .WithMany("LogisticsScheduleChosenExamTypeStringMaps")
                        .HasForeignKey("ChosenExamTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_ChosenExamTypeStringMapId");

                    b.HasOne("Care.Api.Models.Account", "Client")
                        .WithMany("LogisticsScheduleClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Account_ClientId");

                    b.HasOne("Care.Api.Models.User", "Consultant")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.User_ConsultantId");

                    b.HasOne("Care.Api.Models.Account", "DeliveryLaboratory")
                        .WithMany("LogisticsScheduleDeliveryLaboratories")
                        .HasForeignKey("DeliveryLaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Account_DeliveryLaboratoryId");

                    b.HasOne("Care.Api.Models.Diagnostic", "Diagnostic")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Diagnostic_DiagnosticId");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.Exam", "ExamId1Navigation")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("ExamId1")
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Exam_Exam_Id");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Incident", "Incident")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Incident_IncidentId");

                    b.HasOne("Care.Api.Models.StringMap", "IntegrationStatusStringMap")
                        .WithMany("LogisticsScheduleIntegrationStatusStringMaps")
                        .HasForeignKey("IntegrationStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_IntegrationStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "KitTypeStringMap")
                        .WithMany("LogisticsScheduleKitTypeStringMaps")
                        .HasForeignKey("KitTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_KitTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "LocalDeliveryWithdrawStringMap")
                        .WithMany("LogisticsScheduleLocalDeliveryWithdrawStringMaps")
                        .HasForeignKey("LocalDeliveryWithdrawStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_LocalDeliveryWithdrawStringMapId");

                    b.HasOne("Care.Api.Models.Account", "Local")
                        .WithMany("LogisticsScheduleLocals")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Account_LocalId");

                    b.HasOne("Care.Api.Models.StringMap", "LocalTypeStringMap")
                        .WithMany("LogisticsScheduleLocalTypeStringMaps")
                        .HasForeignKey("LocalTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_LocalTypeStringMapId");

                    b.HasOne("Care.Api.Models.Account", "LogisticsPartner")
                        .WithMany("LogisticsScheduleLogisticsPartners")
                        .HasForeignKey("LogisticsPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Account_LogisticsPartnerId");

                    b.HasOne("Care.Api.Models.StringMap", "LogisticsScheduleTypeStringMap")
                        .WithMany("LogisticsScheduleLogisticsScheduleTypeStringMaps")
                        .HasForeignKey("LogisticsScheduleTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_LogisticsScheduleTypeStringMapId");

                    b.HasOne("Care.Api.Models.LogisticsStuff", "LogisticsStuff")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("LogisticsStuffId")
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.LogisticsStuff_LogisticsStuffId");

                    b.HasOne("Care.Api.Models.StringMap", "PreferredTimeStringMap")
                        .WithMany("LogisticsSchedulePreferredTimeStringMaps")
                        .HasForeignKey("PreferredTimeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_PreferredTimeStringMapId");

                    b.HasOne("Care.Api.Models.Doctor", "RequestDoctor")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("RequestDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Doctor_RequestDoctorId");

                    b.HasOne("Care.Api.Models.StringMap", "ScheduleStatusStringMap")
                        .WithMany("LogisticsScheduleScheduleStatusStringMaps")
                        .HasForeignKey("ScheduleStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_ScheduleStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("LogisticsScheduleStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StorageTubeTypeStringMap")
                        .WithMany("LogisticsScheduleStorageTubeTypeStringMaps")
                        .HasForeignKey("StorageTubeTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_StorageTubeTypeStringMapId");

                    b.HasOne("Care.Api.Models.Voucher", "Voucher")
                        .WithMany("LogisticsSchedules")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Voucher_VoucherId");

                    b.Navigation("AccountSettingsByProgram");

                    b.Navigation("ChosenExamTypeStringMap");

                    b.Navigation("Client");

                    b.Navigation("Consultant");

                    b.Navigation("DeliveryLaboratory");

                    b.Navigation("Diagnostic");

                    b.Navigation("Disease");

                    b.Navigation("ExamDefinition");

                    b.Navigation("ExamId1Navigation");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("Incident");

                    b.Navigation("IntegrationStatusStringMap");

                    b.Navigation("KitTypeStringMap");

                    b.Navigation("Local");

                    b.Navigation("LocalDeliveryWithdrawStringMap");

                    b.Navigation("LocalTypeStringMap");

                    b.Navigation("LogisticsPartner");

                    b.Navigation("LogisticsScheduleTypeStringMap");

                    b.Navigation("LogisticsStuff");

                    b.Navigation("PreferredTimeStringMap");

                    b.Navigation("RequestDoctor");

                    b.Navigation("ScheduleStatusStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("StorageTubeTypeStringMap");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleItem", b =>
                {
                    b.HasOne("Care.Api.Models.LogisticsSchedule", "LogisticsSchedule")
                        .WithMany("LogisticsScheduleItems")
                        .HasForeignKey("LogisticsScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsScheduleItem_dbo.LogisticsSchedule_LogisticsScheduleId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("LogisticsScheduleItems")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsScheduleItem_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Voucher", "Voucher")
                        .WithMany("LogisticsScheduleItems")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsScheduleItem_dbo.Voucher_VoucherId");

                    b.Navigation("LogisticsSchedule");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsStuff", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("LogisticsStuffs")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.LogisticsStuff", "Kit")
                        .WithMany("InverseKit")
                        .HasForeignKey("KitId")
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.LogisticsStuff_KitId");

                    b.HasOne("Care.Api.Models.LogisticsSchedule", "LogisticsSchedule")
                        .WithMany("LogisticsStuffs")
                        .HasForeignKey("LogisticsScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.LogisticsSchedule_LogisticsSchedule_Id");

                    b.HasOne("Care.Api.Models.StringMap", "LogisticsStuffTypeStringMap")
                        .WithMany("LogisticsStuffLogisticsStuffTypeStringMaps")
                        .HasForeignKey("LogisticsStuffTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.StringMap_LogisticsStuffTypeStringMapId");

                    b.HasOne("Care.Api.Models.Account", "Manufacturer")
                        .WithMany("LogisticsStuffs")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.Account_ManufacturerId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("LogisticsStuffs")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("LogisticsStuffStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StrengthMedicament", "StrengthMedicament")
                        .WithMany("LogisticsStuffs")
                        .HasForeignKey("StrengthMedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.StrengthMedicament_StrengthMedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "StuffStatusStringMap")
                        .WithMany("LogisticsStuffStuffStatusStringMaps")
                        .HasForeignKey("StuffStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuff_dbo.StringMap_StuffStatusStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("Kit");

                    b.Navigation("LogisticsSchedule");

                    b.Navigation("LogisticsStuffTypeStringMap");

                    b.Navigation("Manufacturer");

                    b.Navigation("Medicament");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("StrengthMedicament");

                    b.Navigation("StuffStatusStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.MedicalSpecialty", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("MedicalSpecialties")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicalSpecialty_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Medicament", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Medicaments")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Medicament_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentAccess", b =>
                {
                    b.HasOne("Care.Api.Models.AccessManner", "AccessManner")
                        .WithMany("MedicamentAccesses")
                        .HasForeignKey("AccessMannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.AccessManner_AccessMannerId");

                    b.HasOne("Care.Api.Models.StringMap", "AccessStatusStringMap")
                        .WithMany("MedicamentAccessAccessStatusStringMaps")
                        .HasForeignKey("AccessStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_AccessStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "AccessSubStatusStringMap")
                        .WithMany("MedicamentAccessAccessSubStatusStringMaps")
                        .HasForeignKey("AccessSubStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_AccessSubStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "AccessTypeStringMap")
                        .WithMany("MedicamentAccessAccessTypeStringMaps")
                        .HasForeignKey("AccessTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_AccessTypeStringMapId");

                    b.HasOne("Care.Api.Models.AccessWay", "AccessWay")
                        .WithMany("MedicamentAccesses")
                        .HasForeignKey("AccessWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.AccessWay_AccessWayId");

                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("MedicamentAccesses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.User", "AttemptAccessModifiedBy")
                        .WithMany("MedicamentAccesses")
                        .HasForeignKey("AttemptAccessModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.User_AttemptAccessModifiedById");

                    b.HasOne("Care.Api.Models.StringMap", "DetailDifficultyWithAccessStringMap")
                        .WithMany("MedicamentAccessDetailDifficultyWithAccessStringMaps")
                        .HasForeignKey("DetailDifficultyWithAccessStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_DetailDifficultyWithAccessStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "DetailDifficultyWithDocumentsStringMap")
                        .WithMany("MedicamentAccessDetailDifficultyWithDocumentsStringMaps")
                        .HasForeignKey("DetailDifficultyWithDocumentsStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_DetailDifficultyWithDocumentsStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "DetailNoDifficultyWithAccessStringMap")
                        .WithMany("MedicamentAccessDetailNoDifficultyWithAccessStringMaps")
                        .HasForeignKey("DetailNoDifficultyWithAccessStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_DetailNoDifficultyWithAccessStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("MedicamentAccesses")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("MedicamentAccesses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("MedicamentAccessStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("MedicamentAccesses")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentAccess_dbo.Treatment_TreatmentId");

                    b.Navigation("AccessManner");

                    b.Navigation("AccessStatusStringMap");

                    b.Navigation("AccessSubStatusStringMap");

                    b.Navigation("AccessTypeStringMap");

                    b.Navigation("AccessWay");

                    b.Navigation("Account");

                    b.Navigation("AttemptAccessModifiedBy");

                    b.Navigation("DetailDifficultyWithAccessStringMap");

                    b.Navigation("DetailDifficultyWithDocumentsStringMap");

                    b.Navigation("DetailNoDifficultyWithAccessStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("Patient");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentCompetitor", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("MedicamentCompetitors")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentCompetitor_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentConcomitant", b =>
                {
                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("MedicamentConcomitants")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentConcomitant_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("MedicamentConcomitants")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentConcomitant_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("MedicamentConcomitants")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentConcomitant_dbo.Treatment_TreatmentId");

                    b.Navigation("Disease");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Care.Api.Models.MedicationNonadherenceReason", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("MedicationNonadherenceReasons")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicationNonadherenceReason_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.MenuMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.MenuMetadatum", "ParentMenuMetadata")
                        .WithMany("InverseParentMenuMetadata")
                        .HasForeignKey("ParentMenuMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MenuMetadata_dbo.MenuMetadata_ParentMenuMetadataId_Id");

                    b.Navigation("ParentMenuMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Occupation", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Occupations")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Occupation_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Patient", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "CivilStatusStringMap")
                        .WithMany("PatientCivilStatusStringMaps")
                        .HasForeignKey("CivilStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Patient_dbo.StringMap_CivilStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "EducationStringMap")
                        .WithMany("PatientEducationStringMaps")
                        .HasForeignKey("EducationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Patient_dbo.StringMap_EducationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "GenderStringMap")
                        .WithMany("PatientGenderStringMaps")
                        .HasForeignKey("GenderStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Patient_dbo.StringMap_GenderStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Patients")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Patient_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Occupation", "Occupation")
                        .WithMany("Patients")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Patient_dbo.Occupation_OccupationId");

                    b.HasOne("Care.Api.Models.StringMap", "PatientTypeStringMap")
                        .WithMany("PatientPatientTypeStringMaps")
                        .HasForeignKey("PatientTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Patient_dbo.StringMap_PatientTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("PatientStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Patient_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.User", "SystemUser")
                        .WithMany("Patients")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Patient_dbo.User_SystemUserId");

                    b.Navigation("CivilStatusStringMap");

                    b.Navigation("EducationStringMap");

                    b.Navigation("GenderStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("Occupation");

                    b.Navigation("PatientTypeStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("Care.Api.Models.PatientSalesOrder", b =>
                {
                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("PatientSalesOrders")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("PatientSalesOrders")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Account", "HealthcareProvider")
                        .WithMany("PatientSalesOrders")
                        .HasForeignKey("HealthcareProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.Account_HealthcareProviderId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("PatientSalesOrders")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("PatientSalesOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "PatientSourceStringMap")
                        .WithMany("PatientSalesOrderPatientSourceStringMaps")
                        .HasForeignKey("PatientSourceStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.StringMap_PatientSourceStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SolicitorStringMap")
                        .WithMany("PatientSalesOrderSolicitorStringMaps")
                        .HasForeignKey("SolicitorStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.StringMap_SolicitorStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("PatientSalesOrderStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StrengthMedicament", "StrengthMedicament")
                        .WithMany("PatientSalesOrders")
                        .HasForeignKey("StrengthMedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.StrengthMedicament_StrengthMedicamentId");

                    b.Navigation("Doctor");

                    b.Navigation("HealthProgram");

                    b.Navigation("HealthcareProvider");

                    b.Navigation("Medicament");

                    b.Navigation("Patient");

                    b.Navigation("PatientSourceStringMap");

                    b.Navigation("SolicitorStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("StrengthMedicament");
                });

            modelBuilder.Entity("Care.Api.Models.Pharmacovigilance", b =>
                {
                    b.HasOne("Care.Api.Models.Incident", "Incident")
                        .WithMany("Pharmacovigilances")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Pharmacovigilance_dbo.Incident_IncidentId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Pharmacovigilances")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Pharmacovigilance_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Pharmacovigilances")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Pharmacovigilance_dbo.Treatment_TreatmentId");

                    b.Navigation("Incident");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Care.Api.Models.Phase", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Phases")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Phase_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.PhaseRulesMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.RulesAttributeMetadatum", "RulesAttributeMetadata")
                        .WithMany("PhaseRulesMetadata")
                        .HasForeignKey("RulesAttributeMetadataId")
                        .HasConstraintName("FK_dbo.PhaseRulesMetadata_dbo.RulesAttributeMetadata_RulesAttributeMetadataId");

                    b.Navigation("RulesAttributeMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.PhoneCall", b =>
                {
                    b.HasOne("Care.Api.Models.RegardingEntity", "CallForRegardingEntity")
                        .WithMany("PhoneCallCallForRegardingEntities")
                        .HasForeignKey("CallForRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.RegardingEntity_CallForRegardingEntityId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "CallFromRegardingEntity")
                        .WithMany("PhoneCallCallFromRegardingEntities")
                        .HasForeignKey("CallFromRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.RegardingEntity_CallFromRegardingEntityId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("PhoneCalls")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "OriginRegardingEntity")
                        .WithMany("PhoneCallOriginRegardingEntities")
                        .HasForeignKey("OriginRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.RegardingEntity_OriginRegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "PhoneCallStatusStringMap")
                        .WithMany("PhoneCallPhoneCallStatusStringMaps")
                        .HasForeignKey("PhoneCallStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.StringMap_PhoneCallStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "PhoneCallTypeStringMap")
                        .WithMany("PhoneCallPhoneCallTypeStringMaps")
                        .HasForeignKey("PhoneCallTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.StringMap_PhoneCallTypeStringMapId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("PhoneCallRegardingEntities")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("PhoneCallStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "UnSuccessfulReasonStringMap")
                        .WithMany("PhoneCallUnSuccessfulReasonStringMaps")
                        .HasForeignKey("UnSuccessfulReasonStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PhoneCall_dbo.StringMap_UnSuccessfulReasonStringMapId");

                    b.Navigation("CallForRegardingEntity");

                    b.Navigation("CallFromRegardingEntity");

                    b.Navigation("HealthProgram");

                    b.Navigation("OriginRegardingEntity");

                    b.Navigation("PhoneCallStatusStringMap");

                    b.Navigation("PhoneCallTypeStringMap");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("UnSuccessfulReasonStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Posologe", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Posologes")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Posologe_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.PostalCode", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AddressTypeStringMap")
                        .WithMany("PostalCodeAddressTypeStringMaps")
                        .HasForeignKey("AddressTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PostalCodes_dbo.StringMap_AddressTypeStringMapId");

                    b.HasOne("Care.Api.Models.PostalCodeCity", "PostalCodeCity")
                        .WithMany("PostalCodes")
                        .HasForeignKey("PostalCodeCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PostalCodes_dbo.PostalCodeCity_PostalCodeCityId");

                    b.HasOne("Care.Api.Models.PostalCodeState", "PostalCodeState")
                        .WithMany("PostalCodes")
                        .HasForeignKey("PostalCodeStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PostalCodes_dbo.PostalCodeState_PostalCodeStateId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("PostalCodeStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PostalCodes_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("AddressTypeStringMap");

                    b.Navigation("PostalCodeCity");

                    b.Navigation("PostalCodeState");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodeCity", b =>
                {
                    b.HasOne("Care.Api.Models.PostalCodeState", "PostalCodeState")
                        .WithMany("PostalCodeCities")
                        .HasForeignKey("PostalCodeStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PostalCodeCity_dbo.PostalCodeState_PostalCodeStateId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("PostalCodeCities")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PostalCodeCity_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("PostalCodeState");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodeState", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("PostalCodeStates")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PostalCodeState_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Purchase", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("Purchases")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Purchase_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.StringMap", "FrequencyStringMap")
                        .WithMany("PurchaseFrequencyStringMaps")
                        .HasForeignKey("FrequencyStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Purchase_dbo.StringMap_FrequencyStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Purchases")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Purchase_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("Purchases")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Purchase_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("Purchases")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Purchase_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "PrescriptionTypeStringMap")
                        .WithMany("PurchasePrescriptionTypeStringMaps")
                        .HasForeignKey("PrescriptionTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Purchase_dbo.StringMap_PrescriptionTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("PurchaseStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Purchase_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Purchases")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Purchase_dbo.Treatment_TreatmentId");

                    b.Navigation("Account");

                    b.Navigation("FrequencyStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("Medicament");

                    b.Navigation("Patient");

                    b.Navigation("PrescriptionTypeStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Care.Api.Models.Question", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Questions")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Question_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.QuestionOption", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.QuestionOptions_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.RegardingEntity", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("RegardingEntities")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RegardingEntity_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.RegionalManager", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("RegionalManagers")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RegionalManager_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.PostalCodeCity", "PostalCodeCity")
                        .WithMany("RegionalManagers")
                        .HasForeignKey("PostalCodeCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RegionalManager_dbo.PostalCodeCity_PostalCodeCityId");

                    b.HasOne("Care.Api.Models.PostalCodeState", "PostalCodeState")
                        .WithMany("RegionalManagers")
                        .HasForeignKey("PostalCodeStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RegionalManager_dbo.PostalCodeState_PostalCodeStateId");

                    b.HasOne("Care.Api.Models.Representative", "Representative")
                        .WithMany("RegionalManagerRepresentatives")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RegionalManager_dbo.Representative_RepresentativeId");

                    b.HasOne("Care.Api.Models.Representative", "RepresentativeSupervisor")
                        .WithMany("RegionalManagerRepresentativeSupervisors")
                        .HasForeignKey("RepresentativeSupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RegionalManager_dbo.Representative_RepresentativeSupervisorId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("RegionalManagers")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RegionalManager_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("PostalCodeCity");

                    b.Navigation("PostalCodeState");

                    b.Navigation("Representative");

                    b.Navigation("RepresentativeSupervisor");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Representative", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("Representatives")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Representative_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Representatives")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Representative_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.User", "User")
                        .WithMany("Representatives")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Representative_dbo.User_UserId");

                    b.Navigation("Account");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care.Api.Models.RepresentativeRegion", b =>
                {
                    b.HasOne("Care.Api.Models.Representative", "Representative")
                        .WithMany("RepresentativeRegions")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RepresentativeRegion_dbo.Representative_Representative_Id");

                    b.HasOne("Care.Api.Models.ValidationResult", "ValidationResult")
                        .WithMany("RepresentativeRegions")
                        .HasForeignKey("ValidationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RepresentativeRegion_dbo.ValidationResult_ValidationResult_Id");

                    b.Navigation("Representative");

                    b.Navigation("ValidationResult");
                });

            modelBuilder.Entity("Care.Api.Models.ResourceWorkSetting", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "CalendarTypeStringMapStringMap")
                        .WithMany("ResourceWorkSettingCalendarTypeStringMapStringMaps")
                        .HasForeignKey("CalendarTypeStringMapStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ResourceWorkSettings_dbo.StringMap_CalendarTypeStringMap_StringMapId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("ResourceWorkSettings")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ResourceWorkSettings_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.ServiceType", "ServiceType")
                        .WithMany("ResourceWorkSettings")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ResourceWorkSettings_dbo.ServiceType_ServiceTypeId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ResourceWorkSettingStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ResourceWorkSettings_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("CalendarTypeStringMapStringMap");

                    b.Navigation("HealthProfessional");

                    b.Navigation("ServiceType");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.RulesAttributeMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.AttributeMetadatum", "AttributeMetadata")
                        .WithMany("RulesAttributeMetadata")
                        .HasForeignKey("AttributeMetadataId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.RulesAttributeMetadata_dbo.AttributeMetadata_AttributeMetadataId");

                    b.Navigation("AttributeMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.SchedulingHistory", b =>
                {
                    b.HasOne("Care.Api.Models.Campaign", "Campaign")
                        .WithMany("SchedulingHistories")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SchedulingHistory_dbo.Campaign_CampaignId");

                    b.HasOne("Care.Api.Models.Exam", "Exam")
                        .WithMany("SchedulingHistories")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SchedulingHistory_dbo.Exam_ExamId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("SchedulingHistories")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SchedulingHistory_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("SchedulingHistories")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SchedulingHistory_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.LogisticsSchedule", "LogisticsSchedule")
                        .WithMany("SchedulingHistories")
                        .HasForeignKey("LogisticsScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SchedulingHistory_dbo.LogisticsSchedule_LogisticsScheduleId");

                    b.HasOne("Care.Api.Models.StringMap", "ReschedulingReasonStringMap")
                        .WithMany("SchedulingHistoryReschedulingReasonStringMaps")
                        .HasForeignKey("ReschedulingReasonStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SchedulingHistory_dbo.StringMap_ReschedulingReasonStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("SchedulingHistoryStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SchedulingHistory_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Visit", "Visit")
                        .WithMany("SchedulingHistories")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SchedulingHistory_dbo.Visit_VisitId");

                    b.Navigation("Campaign");

                    b.Navigation("Exam");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("LogisticsSchedule");

                    b.Navigation("ReschedulingReasonStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Care.Api.Models.SectionExcludedByPhase", b =>
                {
                    b.HasOne("Care.Api.Models.EntityMetadatum", "EntityMetadata")
                        .WithMany("SectionExcludedByPhases")
                        .HasForeignKey("EntityMetadataId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SectionExcludedByPhase_dbo.EntityMetadata_EntityMetadataId");

                    b.Navigation("EntityMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.SectionMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.EntityMetadatum", "EntityMetadata")
                        .WithMany("SectionMetadata")
                        .HasForeignKey("EntityMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SectionMetadata_dbo.EntityMetadata_EntityMetadataId");

                    b.Navigation("EntityMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.ServiceType", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ServiceType_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Sm", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Sms")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "OriginRegardingEntity")
                        .WithMany("SmOriginRegardingEntities")
                        .HasForeignKey("OriginRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.RegardingEntity_OriginRegardingEntityId");

                    b.HasOne("Care.Api.Models.Sm", "ParentSms")
                        .WithMany("InverseParentSms")
                        .HasForeignKey("ParentSmsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.SMS_ParentSMSId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("SmRegardingEntities")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "SmsStatusStringMap")
                        .WithMany("SmSmsStatusStringMaps")
                        .HasForeignKey("SmsStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.StringMap_SmsStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SmsTypeStringMap")
                        .WithMany("SmSmsTypeStringMaps")
                        .HasForeignKey("SmsTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.StringMap_SmsTypeStringMapId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "SmsfromRegardingEntity")
                        .WithMany("SmSmsfromRegardingEntities")
                        .HasForeignKey("SmsfromRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.RegardingEntity_SMSFromRegardingEntityId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "SmstoRegardingEntity")
                        .WithMany("SmSmstoRegardingEntities")
                        .HasForeignKey("SmstoRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.RegardingEntity_SMSToRegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("SmStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SubjectTypeStringMap")
                        .WithMany("SmSubjectTypeStringMaps")
                        .HasForeignKey("SubjectTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SMS_dbo.StringMap_SubjectTypeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("OriginRegardingEntity");

                    b.Navigation("ParentSms");

                    b.Navigation("RegardingEntity");

                    b.Navigation("SmsStatusStringMap");

                    b.Navigation("SmsTypeStringMap");

                    b.Navigation("SmsfromRegardingEntity");

                    b.Navigation("SmstoRegardingEntity");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("SubjectTypeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.StepLog", b =>
                {
                    b.HasOne("Care.Api.Models.ProcessLog", "ProcessLog")
                        .WithMany("StepLogs")
                        .HasForeignKey("ProcessLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.StepLogs_dbo.ProcessLog_ProcessLogId");

                    b.Navigation("ProcessLog");
                });

            modelBuilder.Entity("Care.Api.Models.StrengthMedicament", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("StrengthMedicaments")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.StrengthMedicament_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.StringMap", b =>
                {
                    b.HasOne("Care.Api.Models.AttributeMetadatum", "AttributeMetadata")
                        .WithMany("StringMaps")
                        .HasForeignKey("AttributeMetadataId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.StringMap_dbo.AttributeMetadata_AttributeMetadataId");

                    b.Navigation("AttributeMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Subject", b =>
                {
                    b.HasOne("Care.Api.Models.Subject", "ParentSubject")
                        .WithMany("InverseParentSubject")
                        .HasForeignKey("ParentSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Subject_dbo.Subject_ParentSubjectId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Subjects")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Subject_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("ParentSubject");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Survey", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Surveys")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Survey_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("SurveyStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Survey_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SurveyTypeStringMap")
                        .WithMany("SurveySurveyTypeStringMaps")
                        .HasForeignKey("SurveyTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Survey_dbo.StringMap_SurveyTypeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("SurveyTypeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.SurveyQuestionList", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("SurveyQuestionLists")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SurveyQuestionList_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.SurveyResponse", b =>
                {
                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SurveyResponse_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SurveyResponse_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.SurveyResponseLine", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("SurveyResponseLines")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.SurveyResponseLine_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Task", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Tasks")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Task_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "OriginRegardingEntity")
                        .WithMany("TaskOriginRegardingEntities")
                        .HasForeignKey("OriginRegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Task_dbo.RegardingEntity_OriginRegardingEntityId");

                    b.HasOne("Care.Api.Models.RegardingEntity", "RegardingEntity")
                        .WithMany("TaskRegardingEntities")
                        .HasForeignKey("RegardingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Task_dbo.RegardingEntity_RegardingEntityId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Task_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("OriginRegardingEntity");

                    b.Navigation("RegardingEntity");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Template", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Templates")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Template_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "SmsTypeStringMap")
                        .WithMany("TemplateSmsTypeStringMaps")
                        .HasForeignKey("SmsTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Template_dbo.StringMap_SmsTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TemplateStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Template_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TemplateTypeStringMap")
                        .WithMany("TemplateTemplateTypeStringMaps")
                        .HasForeignKey("TemplateTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Template_dbo.StringMap_TemplateTypeStringMapId");

                    b.HasOne("Care.Api.Models.ValidationResult", "ValidationResult")
                        .WithMany("Templates")
                        .HasForeignKey("ValidationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Template_dbo.ValidationResult_ValidationResult_Id");

                    b.Navigation("HealthProgram");

                    b.Navigation("SmsTypeStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("TemplateTypeStringMap");

                    b.Navigation("ValidationResult");
                });

            modelBuilder.Entity("Care.Api.Models.TherapeuticHistory", b =>
                {
                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("TherapeuticHistories")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.StringMap", "DosageUnitStringMap")
                        .WithMany("TherapeuticHistoryDosageUnitStringMaps")
                        .HasForeignKey("DosageUnitStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.StringMap_DosageUnitStringMapId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("TherapeuticHistories")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Incident", "Incident")
                        .WithMany("TherapeuticHistories")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.Incident_IncidentId");

                    b.HasOne("Care.Api.Models.MedicamentCompetitor", "MedicamentCompetitor")
                        .WithMany("TherapeuticHistories")
                        .HasForeignKey("MedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.MedicamentCompetitor_MedicamentCompetitorId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("TherapeuticHistories")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TherapeuticHistoryStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SupplyMethodStringMap")
                        .WithMany("TherapeuticHistorySupplyMethodStringMaps")
                        .HasForeignKey("SupplyMethodStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.StringMap_SupplyMethodStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("TherapeuticHistories")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.Treatment_TreatmentId");

                    b.Navigation("Doctor");

                    b.Navigation("DosageUnitStringMap");

                    b.Navigation("HealthProgram");

                    b.Navigation("Incident");

                    b.Navigation("Medicament");

                    b.Navigation("MedicamentCompetitor");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("SupplyMethodStringMap");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Care.Api.Models.TherapeuticType", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TherapeuticTypes")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TherapeuticType_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.TrainingRecord", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("TrainingRecords")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TrainingRecord_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("TrainingRecords")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TrainingRecord_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TrainingRecordStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TrainingRecord_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TrainingRecordTypeStringMap")
                        .WithMany("TrainingRecordTrainingRecordTypeStringMaps")
                        .HasForeignKey("TrainingRecordTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TrainingRecord_dbo.StringMap_TrainingRecordTypeStringMapId");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("TrainingRecordTypeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.Treatment", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AccessTypeStringMap")
                        .WithMany("TreatmentAccessTypeStringMaps")
                        .HasForeignKey("AccessTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_AccessTypeStringMapId");

                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("TreatmentAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.Caregiver", "Caregiver")
                        .WithMany("Treatments")
                        .HasForeignKey("CaregiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Caregiver_CaregiverId");

                    b.HasOne("Care.Api.Models.StringMap", "CivilStatusStringMap")
                        .WithMany("TreatmentCivilStatusStringMaps")
                        .HasForeignKey("CivilStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_CivilStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ContractTypeStringMap")
                        .WithMany("TreatmentContractTypeStringMaps")
                        .HasForeignKey("ContractTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_ContractTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom1StringMap")
                        .WithMany("TreatmentCustom1StringMaps")
                        .HasForeignKey("Custom1StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_Custom1StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom2StringMap")
                        .WithMany("TreatmentCustom2StringMaps")
                        .HasForeignKey("Custom2StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_Custom2StringMapId");

                    b.HasOne("Care.Api.Models.Diagnostic", "Diagnostic")
                        .WithMany("Treatments")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Diagnostic_DiagnosticId");

                    b.HasOne("Care.Api.Models.Disease", "Disease2")
                        .WithMany("TreatmentDisease2s")
                        .HasForeignKey("Disease2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Disease_Disease2Id");

                    b.HasOne("Care.Api.Models.Disease", "Disease")
                        .WithMany("TreatmentDiseases")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("TreatmentDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.Doctor", "DoctorPrescriber")
                        .WithMany("TreatmentDoctorPrescribers")
                        .HasForeignKey("DoctorPrescriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Doctor_DoctorPrescriberId");

                    b.HasOne("Care.Api.Models.StringMap", "DosageUnitStringMap")
                        .WithMany("TreatmentDosageUnitStringMaps")
                        .HasForeignKey("DosageUnitStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_DosageUnitStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "EducationStringMap")
                        .WithMany("TreatmentEducationStringMaps")
                        .HasForeignKey("EducationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_EducationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "GenderStringMap")
                        .WithMany("TreatmentGenderStringMaps")
                        .HasForeignKey("GenderStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_GenderStringMapId");

                    b.HasOne("Care.Api.Models.Account", "HealthCareProvider")
                        .WithMany("TreatmentHealthCareProviders")
                        .HasForeignKey("HealthCareProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Account_HealthCareProviderId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Treatments")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Account", "InfusionPlace")
                        .WithMany("TreatmentInfusionPlaces")
                        .HasForeignKey("InfusionPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Account_InfusionPlaceId");

                    b.HasOne("Care.Api.Models.StringMap", "KinshipStringMap")
                        .WithMany("TreatmentKinshipStringMaps")
                        .HasForeignKey("KinshipStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_KinshipStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "MainContactStringMap")
                        .WithMany("TreatmentMainContactStringMaps")
                        .HasForeignKey("MainContactStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_MainContactStringMapId");

                    b.HasOne("Care.Api.Models.MedicamentCompetitor", "MedicamentCompetitor")
                        .WithMany("Treatments")
                        .HasForeignKey("MedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.MedicamentCompetitor_MedicamentCompetitorId");

                    b.HasOne("Care.Api.Models.Medicament", "Medicament")
                        .WithMany("Treatments")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "ModalityStringMap")
                        .WithMany("TreatmentModalityStringMaps")
                        .HasForeignKey("ModalityStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_ModalityStringMapId");

                    b.HasOne("Care.Api.Models.Occupation", "Occupation")
                        .WithMany("Treatments")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Occupation_OccupationId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("Treatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "PatientSourceStringMap")
                        .WithMany("TreatmentPatientSourceStringMaps")
                        .HasForeignKey("PatientSourceStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_PatientSourceStringMapId");

                    b.HasOne("Care.Api.Models.Phase", "Phase")
                        .WithMany("Treatments")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Phase_PhaseId");

                    b.HasOne("Care.Api.Models.StringMap", "PhaseStringMap")
                        .WithMany("TreatmentPhaseStringMaps")
                        .HasForeignKey("PhaseStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_PhaseStringMapId");

                    b.HasOne("Care.Api.Models.Posologe", "Posologe")
                        .WithMany("Treatments")
                        .HasForeignKey("PosologeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.Posologe_PosologeId");

                    b.HasOne("Care.Api.Models.StringMap", "PreferredTimeStringMap")
                        .WithMany("TreatmentPreferredTimeStringMaps")
                        .HasForeignKey("PreferredTimeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_PreferredTimeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "PrescriptionStatusStringMap")
                        .WithMany("TreatmentPrescriptionStatusStringMaps")
                        .HasForeignKey("PrescriptionStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_PrescriptionStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ReasonInactivationStringMap")
                        .WithMany("TreatmentReasonInactivationStringMaps")
                        .HasForeignKey("ReasonInactivationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_ReasonInactivationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SourceConsentStringMap")
                        .WithMany("TreatmentSourceConsentStringMaps")
                        .HasForeignKey("SourceConsentStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_SourceConsentStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StageOfDiseaseStringMap")
                        .WithMany("TreatmentStageOfDiseaseStringMaps")
                        .HasForeignKey("StageOfDiseaseStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_StageOfDiseaseStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StrengthMedicament", "StrengthMedicament")
                        .WithMany("Treatments")
                        .HasForeignKey("StrengthMedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StrengthMedicament_StrengthMedicamentId");

                    b.HasOne("Care.Api.Models.TherapeuticType", "TherapeuticType")
                        .WithMany("Treatments")
                        .HasForeignKey("TherapeuticTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.TherapeuticType_TherapeuticTypeId");

                    b.HasOne("Care.Api.Models.TreatmentCustomData", "TreatmentCustomData")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatmentCustomDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.TreatmentCustomData_TreatmentCustomDataId");

                    b.HasOne("Care.Api.Models.TreatmentSituation", "TreatmentSituation")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatmentSituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.TreatmentSituation_TreatmentSituationId");

                    b.HasOne("Care.Api.Models.TreatmentStatusDetail", "TreatmentStatusDetail")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatmentStatusDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.TreatmentStatusDetail_TreatmentStatusDetailId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentStatusDetailStringMap")
                        .WithMany("TreatmentTreatmentStatusDetailStringMaps")
                        .HasForeignKey("TreatmentStatusDetailStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_TreatmentStatusDetailStringMapId");

                    b.HasOne("Care.Api.Models.TreatmentStatus", "TreatmentStatus")
                        .WithMany("Treatments")
                        .HasForeignKey("TreatmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.TreatmentStatus_TreatmentStatusId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentStatusStringMap")
                        .WithMany("TreatmentTreatmentStatusStringMaps")
                        .HasForeignKey("TreatmentStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_TreatmentStatusStringMapId");

                    b.HasOne("Care.Api.Models.User", "User")
                        .WithMany("Treatments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.User_UserId");

                    b.HasOne("Care.Api.Models.StringMap", "VisitRefusalReasonStringMap")
                        .WithMany("TreatmentVisitRefusalReasonStringMaps")
                        .HasForeignKey("VisitRefusalReasonStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_VisitRefusalReasonStringMapId");

                    b.Navigation("AccessTypeStringMap");

                    b.Navigation("Account");

                    b.Navigation("Caregiver");

                    b.Navigation("CivilStatusStringMap");

                    b.Navigation("ContractTypeStringMap");

                    b.Navigation("Custom1StringMap");

                    b.Navigation("Custom2StringMap");

                    b.Navigation("Diagnostic");

                    b.Navigation("Disease");

                    b.Navigation("Disease2");

                    b.Navigation("Doctor");

                    b.Navigation("DoctorPrescriber");

                    b.Navigation("DosageUnitStringMap");

                    b.Navigation("EducationStringMap");

                    b.Navigation("GenderStringMap");

                    b.Navigation("HealthCareProvider");

                    b.Navigation("HealthProgram");

                    b.Navigation("InfusionPlace");

                    b.Navigation("KinshipStringMap");

                    b.Navigation("MainContactStringMap");

                    b.Navigation("Medicament");

                    b.Navigation("MedicamentCompetitor");

                    b.Navigation("ModalityStringMap");

                    b.Navigation("Occupation");

                    b.Navigation("Patient");

                    b.Navigation("PatientSourceStringMap");

                    b.Navigation("Phase");

                    b.Navigation("PhaseStringMap");

                    b.Navigation("Posologe");

                    b.Navigation("PreferredTimeStringMap");

                    b.Navigation("PrescriptionStatusStringMap");

                    b.Navigation("ReasonInactivationStringMap");

                    b.Navigation("SourceConsentStringMap");

                    b.Navigation("StageOfDiseaseStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("StrengthMedicament");

                    b.Navigation("TherapeuticType");

                    b.Navigation("TreatmentCustomData");

                    b.Navigation("TreatmentSituation");

                    b.Navigation("TreatmentStatus");

                    b.Navigation("TreatmentStatusDetail");

                    b.Navigation("TreatmentStatusDetailStringMap");

                    b.Navigation("TreatmentStatusStringMap");

                    b.Navigation("User");

                    b.Navigation("VisitRefusalReasonStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAddress", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AddressTypeStringMap")
                        .WithMany("TreatmentAddressAddressTypeStringMaps")
                        .HasForeignKey("AddressTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAddress_dbo.StringMap_AddressTypeStringMapId");

                    b.HasOne("Care.Api.Models.CoverageArea", "CoverageArea")
                        .WithMany("TreatmentAddresses")
                        .HasForeignKey("CoverageAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAddress_dbo.CoverageArea_CoverageAreaId");

                    b.HasOne("Care.Api.Models.CustomerAddress", "CustomerAddress")
                        .WithMany("TreatmentAddresses")
                        .HasForeignKey("CustomerAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAddress_dbo.CustomerAddress_CustomerAddressId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("TreatmentAddresses")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAddress_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentAddressStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAddress_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("TreatmentAddresses")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAddress_dbo.Treatment_TreatmentId");

                    b.Navigation("AddressTypeStringMap");

                    b.Navigation("CoverageArea");

                    b.Navigation("CustomerAddress");

                    b.Navigation("HealthProfessional");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAndDiagnosticAction", b =>
                {
                    b.HasOne("Care.Api.Models.ActionCategory", "ActionCategory")
                        .WithMany("TreatmentAndDiagnosticActions")
                        .HasForeignKey("ActionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionCategory_ActionCategoryId");

                    b.HasOne("Care.Api.Models.ActionConfiguration", "ActionConfiguration")
                        .WithMany("TreatmentAndDiagnosticActions")
                        .HasForeignKey("ActionConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionConfiguration_ActionConfigurationId");

                    b.HasOne("Care.Api.Models.ActionRule", "ActionRule")
                        .WithMany("TreatmentAndDiagnosticActions")
                        .HasForeignKey("ActionRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionRule_ActionRuleId");

                    b.HasOne("Care.Api.Models.Diagnostic", "Diagnostic")
                        .WithMany("TreatmentAndDiagnosticActions")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.Diagnostic_DiagnosticId");

                    b.HasOne("Care.Api.Models.Incident", "Incident")
                        .WithMany("TreatmentAndDiagnosticActions")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.Incident_IncidentId");

                    b.HasOne("Care.Api.Models.PhoneCall", "PhoneCall")
                        .WithMany("TreatmentAndDiagnosticActions")
                        .HasForeignKey("PhoneCallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.PhoneCall_PhoneCallId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentAndDiagnosticActions")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("TreatmentAndDiagnosticActions")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.Treatment_TreatmentId");

                    b.Navigation("ActionCategory");

                    b.Navigation("ActionConfiguration");

                    b.Navigation("ActionRule");

                    b.Navigation("Diagnostic");

                    b.Navigation("Incident");

                    b.Navigation("PhoneCall");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAttendance", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentAttendances")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAttendance_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("TreatmentAttendances")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentAttendance_dbo.Treatment_TreatmentId");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentCustomData", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "AccessDetailStringMap")
                        .WithMany("TreatmentCustomDataAccessDetailStringMaps")
                        .HasForeignKey("AccessDetailStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_AccessDetailStringMapId");

                    b.HasOne("Care.Api.Models.AccessWay", "AccessWay")
                        .WithMany("TreatmentCustomData")
                        .HasForeignKey("AccessWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.AccessWay_AccessWayId");

                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("TreatmentCustomDataAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.StringMap", "ApplicatorTypeStringMap")
                        .WithMany("TreatmentCustomDataApplicatorTypeStringMaps")
                        .HasForeignKey("ApplicatorTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_ApplicatorTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ContractHasCoparticipationStringMap")
                        .WithMany("TreatmentCustomDataContractHasCoparticipationStringMaps")
                        .HasForeignKey("ContractHasCoparticipationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_ContractHasCoparticipationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "ContractTypeStringMap")
                        .WithMany("TreatmentCustomDataContractTypeStringMaps")
                        .HasForeignKey("ContractTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_ContractTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom1StringMap")
                        .WithMany("TreatmentCustomDataCustom1StringMaps")
                        .HasForeignKey("Custom1StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_Custom1StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom2StringMap")
                        .WithMany("TreatmentCustomDataCustom2StringMaps")
                        .HasForeignKey("Custom2StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_Custom2StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "DoctorAuthorizesDosageTitrationStringMap")
                        .WithMany("TreatmentCustomDataDoctorAuthorizesDosageTitrationStringMaps")
                        .HasForeignKey("DoctorAuthorizesDosageTitrationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_DoctorAuthorizesDosageTitrationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "FormofAccessStringMap")
                        .WithMany("TreatmentCustomDataFormofAccessStringMaps")
                        .HasForeignKey("FormofAccessStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_FormofAccessStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "HemophiliaDegreeStringMap")
                        .WithMany("TreatmentCustomDataHemophiliaDegreeStringMaps")
                        .HasForeignKey("HemophiliaDegreeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_HemophiliaDegreeStringMapId");

                    b.HasOne("Care.Api.Models.Voucher", "Ifxitcode")
                        .WithMany("TreatmentCustomDataIfxitcodes")
                        .HasForeignKey("IfxitcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Voucher_IFXITCodeId");

                    b.HasOne("Care.Api.Models.StringMap", "IfxitstatusStringMap")
                        .WithMany("TreatmentCustomDataIfxitstatusStringMaps")
                        .HasForeignKey("IfxitstatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_IFXITStatusStringMapId");

                    b.HasOne("Care.Api.Models.Voucher", "Ifxotcode")
                        .WithMany("TreatmentCustomDataIfxotcodes")
                        .HasForeignKey("IfxotcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Voucher_IFXOTCodeId");

                    b.HasOne("Care.Api.Models.StringMap", "IfxotstatusStringMap")
                        .WithMany("TreatmentCustomDataIfxotstatusStringMaps")
                        .HasForeignKey("IfxotstatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_IFXOTStatusStringMapId");

                    b.HasOne("Care.Api.Models.Account", "InfusionSite")
                        .WithMany("TreatmentCustomDataInfusionSites")
                        .HasForeignKey("InfusionSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Account_InfusionSiteId");

                    b.HasOne("Care.Api.Models.StringMap", "InfusionTypeStringMap")
                        .WithMany("TreatmentCustomDataInfusionTypeStringMaps")
                        .HasForeignKey("InfusionTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_InfusionTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "IsWorkingStringMapStringMap")
                        .WithMany("TreatmentCustomDataIsWorkingStringMapStringMaps")
                        .HasForeignKey("IsWorkingStringMapStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_IsWorkingStringMap_StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "JanssenitstatusStringMap")
                        .WithMany("TreatmentCustomDataJanssenitstatusStringMaps")
                        .HasForeignKey("JanssenitstatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_JANSSENITStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "JanssenotstatusStringMap")
                        .WithMany("TreatmentCustomDataJanssenotstatusStringMaps")
                        .HasForeignKey("JanssenotstatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_JANSSENOTStatusStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "MedicalIndicationStringMap")
                        .WithMany("TreatmentCustomDataMedicalIndicationStringMaps")
                        .HasForeignKey("MedicalIndicationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_MedicalIndicationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "MedicalInstructionAccessWayStringMap")
                        .WithMany("TreatmentCustomDataMedicalInstructionAccessWayStringMaps")
                        .HasForeignKey("MedicalInstructionAccessWayStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_MedicalInstructionAccessWayStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "OptimizationTypeStringMap")
                        .WithMany("TreatmentCustomDataOptimizationTypeStringMaps")
                        .HasForeignKey("OptimizationTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_OptimizationTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "PatientTypeStringMap")
                        .WithMany("TreatmentCustomDataPatientTypeStringMaps")
                        .HasForeignKey("PatientTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_PatientTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "PlanCoverageStringMap")
                        .WithMany("TreatmentCustomDataPlanCoverageStringMaps")
                        .HasForeignKey("PlanCoverageStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_PlanCoverageStringMapId");

                    b.HasOne("Care.Api.Models.MedicamentCompetitor", "PreviousMedicamentCompetitor")
                        .WithMany("TreatmentCustomData")
                        .HasForeignKey("PreviousMedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId");

                    b.HasOne("Care.Api.Models.Medicament", "PreviousMedicament")
                        .WithMany("TreatmentCustomData")
                        .HasForeignKey("PreviousMedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Medicament_PreviousMedicamentId");

                    b.HasOne("Care.Api.Models.StringMap", "ReasonForNotAcceptingSmsstringMap")
                        .WithMany("TreatmentCustomDataReasonForNotAcceptingSmsstringMaps")
                        .HasForeignKey("ReasonForNotAcceptingSmsstringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_ReasonForNotAcceptingSMSStringMapId");

                    b.HasOne("Care.Api.Models.Representative", "Representative")
                        .WithMany("TreatmentCustomData")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Representative_RepresentativeId");

                    b.HasOne("Care.Api.Models.StringMap", "RiskRatingStringMap")
                        .WithMany("TreatmentCustomDataRiskRatingStringMaps")
                        .HasForeignKey("RiskRatingStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_RiskRatingStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StageOfDiseaseStringMap")
                        .WithMany("TreatmentCustomDataStageOfDiseaseStringMaps")
                        .HasForeignKey("StageOfDiseaseStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_StageOfDiseaseStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentCustomDataStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StorageLocationStringMap")
                        .WithMany("TreatmentCustomDataStorageLocationStringMaps")
                        .HasForeignKey("StorageLocationStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_StorageLocationStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "SupplyMethodStringMap")
                        .WithMany("TreatmentCustomDataSupplyMethodStringMaps")
                        .HasForeignKey("SupplyMethodStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_SupplyMethodStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentCyclesStringMap")
                        .WithMany("TreatmentCustomDataTreatmentCyclesStringMaps")
                        .HasForeignKey("TreatmentCyclesStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentCyclesStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentIntervalStringMap")
                        .WithMany("TreatmentCustomDataTreatmentIntervalStringMaps")
                        .HasForeignKey("TreatmentIntervalStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentIntervalStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentTypeStringMap")
                        .WithMany("TreatmentCustomDataTreatmentTypeStringMaps")
                        .HasForeignKey("TreatmentTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentTypeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "VisitRefusalReasonStringMap")
                        .WithMany("TreatmentCustomDataVisitRefusalReasonStringMaps")
                        .HasForeignKey("VisitRefusalReasonStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_VisitRefusalReasonStringMapId");

                    b.Navigation("AccessDetailStringMap");

                    b.Navigation("AccessWay");

                    b.Navigation("Account");

                    b.Navigation("ApplicatorTypeStringMap");

                    b.Navigation("ContractHasCoparticipationStringMap");

                    b.Navigation("ContractTypeStringMap");

                    b.Navigation("Custom1StringMap");

                    b.Navigation("Custom2StringMap");

                    b.Navigation("DoctorAuthorizesDosageTitrationStringMap");

                    b.Navigation("FormofAccessStringMap");

                    b.Navigation("HemophiliaDegreeStringMap");

                    b.Navigation("Ifxitcode");

                    b.Navigation("IfxitstatusStringMap");

                    b.Navigation("Ifxotcode");

                    b.Navigation("IfxotstatusStringMap");

                    b.Navigation("InfusionSite");

                    b.Navigation("InfusionTypeStringMap");

                    b.Navigation("IsWorkingStringMapStringMap");

                    b.Navigation("JanssenitstatusStringMap");

                    b.Navigation("JanssenotstatusStringMap");

                    b.Navigation("MedicalIndicationStringMap");

                    b.Navigation("MedicalInstructionAccessWayStringMap");

                    b.Navigation("OptimizationTypeStringMap");

                    b.Navigation("PatientTypeStringMap");

                    b.Navigation("PlanCoverageStringMap");

                    b.Navigation("PreviousMedicament");

                    b.Navigation("PreviousMedicamentCompetitor");

                    b.Navigation("ReasonForNotAcceptingSmsstringMap");

                    b.Navigation("Representative");

                    b.Navigation("RiskRatingStringMap");

                    b.Navigation("StageOfDiseaseStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("StorageLocationStringMap");

                    b.Navigation("SupplyMethodStringMap");

                    b.Navigation("TreatmentCyclesStringMap");

                    b.Navigation("TreatmentIntervalStringMap");

                    b.Navigation("TreatmentTypeStringMap");

                    b.Navigation("VisitRefusalReasonStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentHistory", b =>
                {
                    b.HasOne("Care.Api.Models.Doctor", "HistoryDoctor")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("HistoryDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.Doctor_HistoryDoctorId");

                    b.HasOne("Care.Api.Models.StringMap", "HistoryModalityStringMap")
                        .WithMany("TreatmentHistoryHistoryModalityStringMaps")
                        .HasForeignKey("HistoryModalityStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_HistoryModalityStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "HistoryPhaseStringMap")
                        .WithMany("TreatmentHistoryHistoryPhaseStringMaps")
                        .HasForeignKey("HistoryPhaseStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_HistoryPhaseStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "HistoryStatusDetailStringMap")
                        .WithMany("TreatmentHistoryHistoryStatusDetailStringMaps")
                        .HasForeignKey("HistoryStatusDetailStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_HistoryStatusDetailStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "HistoryStatusStringMap")
                        .WithMany("TreatmentHistoryHistoryStatusStringMaps")
                        .HasForeignKey("HistoryStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_HistoryStatusStringMapId");

                    b.HasOne("Care.Api.Models.Phase", "Phase")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.Phase_PhaseId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentHistoryStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.TreatmentSituation", "TreatmentSituation")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("TreatmentSituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.TreatmentSituation_TreatmentSituationId");

                    b.HasOne("Care.Api.Models.TreatmentStatusDetail", "TreatmentStatusDetail")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("TreatmentStatusDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.TreatmentStatusDetail_TreatmentStatusDetailId");

                    b.HasOne("Care.Api.Models.TreatmentStatus", "TreatmentStatus")
                        .WithMany("TreatmentHistories")
                        .HasForeignKey("TreatmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentHistory_dbo.TreatmentStatus_TreatmentStatusId");

                    b.Navigation("HistoryDoctor");

                    b.Navigation("HistoryModalityStringMap");

                    b.Navigation("HistoryPhaseStringMap");

                    b.Navigation("HistoryStatusDetailStringMap");

                    b.Navigation("HistoryStatusStringMap");

                    b.Navigation("Phase");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("TreatmentSituation");

                    b.Navigation("TreatmentStatus");

                    b.Navigation("TreatmentStatusDetail");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentPayment", b =>
                {
                    b.HasOne("Care.Api.Models.Exam", "Exam")
                        .WithMany("TreatmentPayments")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentBilling_dbo.Exam_ExamId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("TreatmentPayments")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentPayment_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("TreatmentPayments")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentPayment_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Infusion", "Infusion")
                        .WithMany("TreatmentPayments")
                        .HasForeignKey("InfusionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentBilling_dbo.Infusion_InfusionId");

                    b.HasOne("Care.Api.Models.Patient", "Patient")
                        .WithMany("TreatmentPayments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentPayment_dbo.Patient_PatientId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentPaymentStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentBilling_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("TreatmentPayments")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentPayment_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.StringMap", "TreatmentPaymentStatusStringMap")
                        .WithMany("TreatmentPaymentTreatmentPaymentStatusStringMaps")
                        .HasForeignKey("TreatmentPaymentStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentBilling_dbo.StringMap_TreatmentBillingStatusStringMapId");

                    b.HasOne("Care.Api.Models.Visit", "Visit")
                        .WithMany("TreatmentPayments")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentBilling_dbo.Visit_VisitId");

                    b.Navigation("Exam");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("Infusion");

                    b.Navigation("Patient");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("TreatmentPaymentStatusStringMap");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentSetting", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("TreatmentSettings")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentSettings_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Phase", "Phase")
                        .WithMany("TreatmentSettings")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentSettings_dbo.Phase_PhaseId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentSettings")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentSettings_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.TreatmentSituation", "TreatmentSituation")
                        .WithMany("TreatmentSettings")
                        .HasForeignKey("TreatmentSituationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentSettings_dbo.TreatmentSituation_TreatmentSituationId");

                    b.HasOne("Care.Api.Models.TreatmentStatusDetail", "TreatmentStatusDetail")
                        .WithMany("TreatmentSettings")
                        .HasForeignKey("TreatmentStatusDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentSettings_dbo.TreatmentStatusDetail_TreatmentStatusDetailId");

                    b.HasOne("Care.Api.Models.TreatmentStatus", "TreatmentStatus")
                        .WithMany("TreatmentSettings")
                        .HasForeignKey("TreatmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentSettings_dbo.TreatmentStatus_TreatmentStatusId");

                    b.Navigation("HealthProgram");

                    b.Navigation("Phase");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("TreatmentSituation");

                    b.Navigation("TreatmentStatus");

                    b.Navigation("TreatmentStatusDetail");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentSituation", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentSituations")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentSituation_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatus", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentStatuses")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentStatus_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatusDetail", b =>
                {
                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("TreatmentStatusDetails")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentStatusDetail_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.User", b =>
                {
                    b.HasOne("Care.Api.Models.Profile", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.User_dbo.Profile_Profile_Id");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("Users")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.User_dbo.StringMap_StatusCodeStringMapId");

                    b.Navigation("Profile");

                    b.Navigation("StatusCodeStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.UserSystemLog", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("UserSystemLogs")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserSystemLog_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.User", "User")
                        .WithMany("UserSystemLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserSystemLog_dbo.User_UserId");

                    b.Navigation("HealthProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Care.Api.Models.Visit", b =>
                {
                    b.HasOne("Care.Api.Models.Campaign", "Campaign")
                        .WithMany("Visits")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.Campaign_CampaignId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom1StringMap")
                        .WithMany("VisitCustom1StringMaps")
                        .HasForeignKey("Custom1StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.StringMap_Custom1StringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "Custom2StringMap")
                        .WithMany("VisitCustom2StringMaps")
                        .HasForeignKey("Custom2StringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.StringMap_Custom2StringMapId");

                    b.HasOne("Care.Api.Models.Diagnostic", "Diagnostic")
                        .WithMany("Visits")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.Diagnostic_DiagnosticId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("Visits")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.HealthProfessional", "HealthProfessional")
                        .WithMany("Visits")
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Visits")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Account", "Local")
                        .WithMany("Visits")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.Account_LocalId");

                    b.HasOne("Care.Api.Models.StringMap", "PreSchedulingStatusStringMap")
                        .WithMany("VisitPreSchedulingStatusStringMaps")
                        .HasForeignKey("PreSchedulingStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.StringMap_PreSchedulingStatusStringMapId");

                    b.HasOne("Care.Api.Models.ServiceType", "ServiceType")
                        .WithMany("Visits")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.ServiceType_ServiceTypeId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("VisitStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusStringMap")
                        .WithMany("VisitStatusStringMaps")
                        .HasForeignKey("StatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.StringMap_StatusStringMapId");

                    b.HasOne("Care.Api.Models.TreatmentAddress", "TreatmentAddress")
                        .WithMany("Visits")
                        .HasForeignKey("TreatmentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.TreatmentAddress_TreatmentAddressId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Visits")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.Voucher", "Voucher")
                        .WithMany("Visits")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Visit_dbo.Voucher_VoucherId");

                    b.Navigation("Campaign");

                    b.Navigation("Custom1StringMap");

                    b.Navigation("Custom2StringMap");

                    b.Navigation("Diagnostic");

                    b.Navigation("Doctor");

                    b.Navigation("HealthProfessional");

                    b.Navigation("HealthProgram");

                    b.Navigation("Local");

                    b.Navigation("PreSchedulingStatusStringMap");

                    b.Navigation("ServiceType");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("StatusStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("TreatmentAddress");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Care.Api.Models.Voucher", b =>
                {
                    b.HasOne("Care.Api.Models.Account", "Account")
                        .WithMany("Vouchers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.Diagnostic", "Diagnostic")
                        .WithMany("Vouchers")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.Diagnostic_DiagnosticId");

                    b.HasOne("Care.Api.Models.Doctor", "Doctor")
                        .WithMany("Vouchers")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.ExamDefinition", "ExamDefinition")
                        .WithMany("Vouchers")
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("Vouchers")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Representative", "Manager")
                        .WithMany("VoucherManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.Representative_ManagerId");

                    b.HasOne("Care.Api.Models.Representative", "Representative")
                        .WithMany("VoucherRepresentatives")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.Representative_RepresentativeId");

                    b.HasOne("Care.Api.Models.StringMap", "SourceStringMap")
                        .WithMany("VoucherSourceStringMaps")
                        .HasForeignKey("SourceStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_SourceStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("VoucherStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.Treatment", "Treatment")
                        .WithMany("Vouchers")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.Treatment_TreatmentId");

                    b.HasOne("Care.Api.Models.VoucherConfiguration", "VoucherConfiguration")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.VoucherConfiguration_VoucherConfigurationId");

                    b.HasOne("Care.Api.Models.StringMap", "VoucherStatusStringMap")
                        .WithMany("VoucherVoucherStatusStringMaps")
                        .HasForeignKey("VoucherStatusStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_VoucherStatusStringMapId");

                    b.Navigation("Account");

                    b.Navigation("Diagnostic");

                    b.Navigation("Doctor");

                    b.Navigation("ExamDefinition");

                    b.Navigation("HealthProgram");

                    b.Navigation("Manager");

                    b.Navigation("Representative");

                    b.Navigation("SourceStringMap");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("Treatment");

                    b.Navigation("VoucherConfiguration");

                    b.Navigation("VoucherStatusStringMap");
                });

            modelBuilder.Entity("Care.Api.Models.VoucherConfiguration", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", "HealthProgram")
                        .WithMany("VoucherConfigurations")
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.VoucherConfiguration_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.StringMap", "StatusCodeStringMap")
                        .WithMany("VoucherConfigurationStatusCodeStringMaps")
                        .HasForeignKey("StatusCodeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.VoucherConfiguration_dbo.StringMap_StatusCodeStringMapId");

                    b.HasOne("Care.Api.Models.StringMap", "VoucherConfigTypeStringMap")
                        .WithMany("VoucherConfigurationVoucherConfigTypeStringMaps")
                        .HasForeignKey("VoucherConfigTypeStringMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.VoucherConfiguration_dbo.StringMap_VoucherConfigTypeStringMapId");

                    b.Navigation("HealthProgram");

                    b.Navigation("StatusCodeStringMap");

                    b.Navigation("VoucherConfigTypeStringMap");
                });

            modelBuilder.Entity("CommunicationTypeByProgramHealthProgram", b =>
                {
                    b.HasOne("Care.Api.Models.CommunicationTypeByProgram", null)
                        .WithMany()
                        .HasForeignKey("CommunicationTypeByProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CommunicationTypeByProgramHealthProgram_dbo.CommunicationTypeByProgram_CommunicationTypeByProgramId");

                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CommunicationTypeByProgramHealthProgram_dbo.HealthProgram_HealthProgramId");
                });

            modelBuilder.Entity("DoctorByProgramAccount", b =>
                {
                    b.HasOne("Care.Api.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgramAccount_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.DoctorByProgram", null)
                        .WithMany()
                        .HasForeignKey("DoctorByProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorByProgramAccount_dbo.DoctorByProgram_DoctorByProgramId");
                });

            modelBuilder.Entity("DoctorMedicalSpecialty", b =>
                {
                    b.HasOne("Care.Api.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorMedicalSpecialty_dbo.Doctor_DoctorId");

                    b.HasOne("Care.Api.Models.MedicalSpecialty", null)
                        .WithMany()
                        .HasForeignKey("MedicalSpecialtyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.DoctorMedicalSpecialty_dbo.MedicalSpecialty_MedicalSpecialtyId");
                });

            modelBuilder.Entity("ExamDefinitionAccountExamTypeByProgram", b =>
                {
                    b.HasOne("Care.Api.Models.AccountExamTypeByProgram", null)
                        .WithMany()
                        .HasForeignKey("AccountExamTypeByProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionAccountExamTypeByProgram_dbo.AccountExamTypeByProgram_AccountExamTypeByProgramId");

                    b.HasOne("Care.Api.Models.ExamDefinition", null)
                        .WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionAccountExamTypeByProgram_dbo.ExamDefinition_ExamDefinitionId");
                });

            modelBuilder.Entity("ExamDefinitionExam", b =>
                {
                    b.HasOne("Care.Api.Models.ExamDefinition", null)
                        .WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionExam_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionExam_dbo.Exam_ExamId");
                });

            modelBuilder.Entity("ExamDefinitionHealthProgram", b =>
                {
                    b.HasOne("Care.Api.Models.ExamDefinition", null)
                        .WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionHealthProgram_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionHealthProgram_dbo.HealthProgram_HealthProgramId");
                });

            modelBuilder.Entity("ExamDefinitionVoucherConfiguration", b =>
                {
                    b.HasOne("Care.Api.Models.ExamDefinition", null)
                        .WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionVoucherConfiguration_dbo.ExamDefinition_ExamDefinitionId");

                    b.HasOne("Care.Api.Models.VoucherConfiguration", null)
                        .WithMany()
                        .HasForeignKey("VoucherConfigurationId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.ExamDefinitionVoucherConfiguration_dbo.VoucherConfiguration_VoucherConfigurationId");
                });

            modelBuilder.Entity("HealthProfessionalHealthProgram", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProfessional", null)
                        .WithMany()
                        .HasForeignKey("HealthProfessionalId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalHealthProgram_dbo.HealthProfessional_HealthProfessionalId");

                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalHealthProgram_dbo.HealthProgram_HealthProgramId");
                });

            modelBuilder.Entity("HealthProfessionalMedicalSpecialty", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProfessional", null)
                        .WithMany()
                        .HasForeignKey("HealthProfessionalId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalMedicalSpecialty_dbo.HealthProfessional_MedicalSpecialtyId");

                    b.HasOne("Care.Api.Models.MedicalSpecialty", null)
                        .WithMany()
                        .HasForeignKey("MedicalSpecialtyId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProfessionalMedicalSpecialty_dbo.MedicalSpecialty_HealthProfessionalId");
                });

            modelBuilder.Entity("HealthProgramAccount", b =>
                {
                    b.HasOne("Care.Api.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramAccount_dbo.Account_AccountId");

                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramAccount_dbo.HealthProgram_HealthProgramId");
                });

            modelBuilder.Entity("HealthProgramMedicament", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramMedicament_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.Medicament", null)
                        .WithMany()
                        .HasForeignKey("MedicamentId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramMedicament_dbo.Medicament_MedicamentId");
                });

            modelBuilder.Entity("HealthProgramServiceType", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramServiceType_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.ServiceType", null)
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HealthProgramServiceType_dbo.ServiceType_ServiceTypeId");
                });

            modelBuilder.Entity("LogisticsStuffKit", b =>
                {
                    b.HasOne("Care.Api.Models.LogisticsStuff", null)
                        .WithMany()
                        .HasForeignKey("KitsId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuffKits_dbo.LogisticsStuff_KitsId");

                    b.HasOne("Care.Api.Models.LogisticsStuff", null)
                        .WithMany()
                        .HasForeignKey("LogisticsStuffId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.LogisticsStuffKits_dbo.LogisticsStuff_LogisticsStuffId");
                });

            modelBuilder.Entity("MedicamentCompetitorDisease", b =>
                {
                    b.HasOne("Care.Api.Models.MedicamentCompetitor", null)
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentCompetitorDisease_dbo.MedicamentCompetitor_DiseaseId");

                    b.HasOne("Care.Api.Models.Disease", null)
                        .WithMany()
                        .HasForeignKey("MedicamentCompetitorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentCompetitorDisease_dbo.Disease_MedicamentCompetitorId");
                });

            modelBuilder.Entity("MedicamentCompetitorHealthProgram", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentCompetitorHealthProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.MedicamentCompetitor", null)
                        .WithMany()
                        .HasForeignKey("MedicamentCompetitorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentCompetitorHealthProgram_dbo.MedicamentCompetitor_MedicamentCompetitorId");
                });

            modelBuilder.Entity("MedicamentDisease", b =>
                {
                    b.HasOne("Care.Api.Models.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentDisease_dbo.Disease_DiseaseId");

                    b.HasOne("Care.Api.Models.Medicament", null)
                        .WithMany()
                        .HasForeignKey("MedicamentId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentDisease_dbo.Medicament_MedicamentId");
                });

            modelBuilder.Entity("MedicamentStrengthMedicament", b =>
                {
                    b.HasOne("Care.Api.Models.Medicament", null)
                        .WithMany()
                        .HasForeignKey("MedicamentId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentStrengthMedicament_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.StrengthMedicament", null)
                        .WithMany()
                        .HasForeignKey("StrengthMedicamentId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicamentStrengthMedicament_dbo.StrengthMedicament_StrengthMedicamentId");
                });

            modelBuilder.Entity("MedicationNonadherenceReasonHealthProgram", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicationNonadherenceReasonHealthProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.MedicationNonadherenceReason", null)
                        .WithMany()
                        .HasForeignKey("MedicationNonadherenceReasonId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MedicationNonadherenceReasonHealthProgram_dbo.MedicationNonadherenceReason_MedicationNonadherenceReasonId");
                });

            modelBuilder.Entity("MenuMetadataEntityMetadatum", b =>
                {
                    b.HasOne("Care.Api.Models.EntityMetadatum", null)
                        .WithMany()
                        .HasForeignKey("EntityMetadataId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MenuMetadataEntityMetadata_dbo.EntityMetadata_EntityMetadataId");

                    b.HasOne("Care.Api.Models.MenuMetadatum", null)
                        .WithMany()
                        .HasForeignKey("MenuMetadataId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.MenuMetadataEntityMetadata_dbo.MenuMetadata_MenuMetadataId");
                });

            modelBuilder.Entity("PosologeMedicament", b =>
                {
                    b.HasOne("Care.Api.Models.Medicament", null)
                        .WithMany()
                        .HasForeignKey("MedicamentId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PosologeMedicament_dbo.Medicament_MedicamentId");

                    b.HasOne("Care.Api.Models.Posologe", null)
                        .WithMany()
                        .HasForeignKey("PosologeId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PosologeMedicament_dbo.Posologe_PosologeId");
                });

            modelBuilder.Entity("TreatmentStatusDetailHealthProgram", b =>
                {
                    b.HasOne("Care.Api.Models.HealthProgram", null)
                        .WithMany()
                        .HasForeignKey("HealthProgramId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentStatusDetailHealthProgram_dbo.HealthProgram_HealthProgramId");

                    b.HasOne("Care.Api.Models.TreatmentStatusDetail", null)
                        .WithMany()
                        .HasForeignKey("TreatmentStatusDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TreatmentStatusDetailHealthProgram_dbo.TreatmentStatusDetail_TreatmentStatusDetailId");
                });

            modelBuilder.Entity("Care.Api.Models.AccessManner", b =>
                {
                    b.Navigation("AccessOrderByPrograms");

                    b.Navigation("Accounts");

                    b.Navigation("MedicamentAccesses");
                });

            modelBuilder.Entity("Care.Api.Models.AccessMannerByProgram", b =>
                {
                    b.Navigation("AccessOrderByPrograms");
                });

            modelBuilder.Entity("Care.Api.Models.AccessProfile", b =>
                {
                    b.Navigation("AccessRightEntities");
                });

            modelBuilder.Entity("Care.Api.Models.AccessWay", b =>
                {
                    b.Navigation("AccessOrderByPrograms");

                    b.Navigation("Accounts");

                    b.Navigation("MedicamentAccesses");

                    b.Navigation("TreatmentCustomData");
                });

            modelBuilder.Entity("Care.Api.Models.Account", b =>
                {
                    b.Navigation("AccountCoverageAreas");

                    b.Navigation("AccountExamTypeByPrograms");

                    b.Navigation("AccountSettingsByPrograms");

                    b.Navigation("AdhesionAttendances");

                    b.Navigation("Benefits");

                    b.Navigation("Campaigns");

                    b.Navigation("Contacts");

                    b.Navigation("DiagnosticAccounts");

                    b.Navigation("DiagnosticExams");

                    b.Navigation("DiagnosticHealthCareProviders");

                    b.Navigation("Doctors");

                    b.Navigation("DoctorsRepresentatives");

                    b.Navigation("Exams");

                    b.Navigation("HealthProfessionalByPrograms");

                    b.Navigation("HealthProgramAccounts");

                    b.Navigation("HealthProgramLogisticPartners");

                    b.Navigation("IncidentAccounts");

                    b.Navigation("IncidentDistributorLogistics");

                    b.Navigation("IncidentItems");

                    b.Navigation("Infusions");

                    b.Navigation("Logistics");

                    b.Navigation("LogisticsScheduleClients");

                    b.Navigation("LogisticsScheduleDeliveryLaboratories");

                    b.Navigation("LogisticsScheduleLocals");

                    b.Navigation("LogisticsScheduleLogisticsPartners");

                    b.Navigation("LogisticsStuffs");

                    b.Navigation("MedicamentAccesses");

                    b.Navigation("PatientSalesOrders");

                    b.Navigation("Purchases");

                    b.Navigation("Representatives");

                    b.Navigation("TreatmentAccounts");

                    b.Navigation("TreatmentCustomDataAccounts");

                    b.Navigation("TreatmentCustomDataInfusionSites");

                    b.Navigation("TreatmentHealthCareProviders");

                    b.Navigation("TreatmentInfusionPlaces");

                    b.Navigation("Visits");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Care.Api.Models.AccountSettingsByProgram", b =>
                {
                    b.Navigation("AccountInternalDemands");

                    b.Navigation("Diagnostics");

                    b.Navigation("LogisticsSchedules");
                });

            modelBuilder.Entity("Care.Api.Models.ActionCategory", b =>
                {
                    b.Navigation("ActionConfigurations");

                    b.Navigation("TreatmentAndDiagnosticActions");
                });

            modelBuilder.Entity("Care.Api.Models.ActionConfiguration", b =>
                {
                    b.Navigation("ActionRules");

                    b.Navigation("TreatmentAndDiagnosticActions");
                });

            modelBuilder.Entity("Care.Api.Models.ActionRule", b =>
                {
                    b.Navigation("TreatmentAndDiagnosticActions");
                });

            modelBuilder.Entity("Care.Api.Models.AkkaActor", b =>
                {
                    b.Navigation("AkkaPublishEvents");

                    b.Navigation("AkkaSubscribeEvents");

                    b.Navigation("HealthPrograms");
                });

            modelBuilder.Entity("Care.Api.Models.Annotation", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Care.Api.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");
                });

            modelBuilder.Entity("Care.Api.Models.AttributeMetadatum", b =>
                {
                    b.Navigation("RulesAttributeMetadata");

                    b.Navigation("StringMaps");
                });

            modelBuilder.Entity("Care.Api.Models.Bank", b =>
                {
                    b.Navigation("HealthProfessionals");
                });

            modelBuilder.Entity("Care.Api.Models.Campaign", b =>
                {
                    b.Navigation("SchedulingHistories");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Care.Api.Models.Caregiver", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("Diagnostics");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.Chat", b =>
                {
                    b.Navigation("ChatDialogs");
                });

            modelBuilder.Entity("Care.Api.Models.CommunicationTypeByProgram", b =>
                {
                    b.Navigation("Communications");
                });

            modelBuilder.Entity("Care.Api.Models.CoverageArea", b =>
                {
                    b.Navigation("TreatmentAddresses");
                });

            modelBuilder.Entity("Care.Api.Models.CustomerAddress", b =>
                {
                    b.Navigation("TreatmentAddresses");
                });

            modelBuilder.Entity("Care.Api.Models.Diagnostic", b =>
                {
                    b.Navigation("AttemptCallLogs");

                    b.Navigation("Benefits");

                    b.Navigation("Exams");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("TreatmentAndDiagnosticActions");

                    b.Navigation("Treatments");

                    b.Navigation("Visits");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Care.Api.Models.Disease", b =>
                {
                    b.Navigation("AccessMannerByPrograms");

                    b.Navigation("AccessProcedureByPrograms");

                    b.Navigation("AccountSettingsByPrograms");

                    b.Navigation("Diagnostics");

                    b.Navigation("DoctorsRepresentatives");

                    b.Navigation("HealthProfessionalByPrograms");

                    b.Navigation("HealthProgramDiseaseDiseases");

                    b.Navigation("HealthProgramDiseaseSuspectDiseases");

                    b.Navigation("IncidentItems");

                    b.Navigation("Incidents");

                    b.Navigation("Infusions");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("MedicamentConcomitants");

                    b.Navigation("TreatmentDisease2s");

                    b.Navigation("TreatmentDiseases");
                });

            modelBuilder.Entity("Care.Api.Models.Doctor", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("DiagnosticDoctorPrescribers");

                    b.Navigation("DiagnosticDoctors");

                    b.Navigation("DiagnosticExams");

                    b.Navigation("DoctorByPrograms");

                    b.Navigation("DoctorsRepresentatives");

                    b.Navigation("Exams");

                    b.Navigation("IncidentItems");

                    b.Navigation("Incidents");

                    b.Navigation("Infusions");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("PatientSalesOrders");

                    b.Navigation("TherapeuticHistories");

                    b.Navigation("TreatmentDoctorPrescribers");

                    b.Navigation("TreatmentDoctors");

                    b.Navigation("TreatmentHistories");

                    b.Navigation("Visits");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Care.Api.Models.DoctorByProgram", b =>
                {
                    b.Navigation("AccountSettingsByPrograms");
                });

            modelBuilder.Entity("Care.Api.Models.EmailBoxSetting", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("HealthProgramTemplateSettings");
                });

            modelBuilder.Entity("Care.Api.Models.EntityConfiguration", b =>
                {
                    b.Navigation("EntityMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.EntityMetadatum", b =>
                {
                    b.Navigation("AttributeMetadata");

                    b.Navigation("HealthProgramTemplateSettings");

                    b.Navigation("IndexViewsEntityMetadata");

                    b.Navigation("SectionExcludedByPhases");

                    b.Navigation("SectionMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Exam", b =>
                {
                    b.Navigation("LogisticsSchedules");

                    b.Navigation("SchedulingHistories");

                    b.Navigation("TreatmentPayments");
                });

            modelBuilder.Entity("Care.Api.Models.ExamDefinition", b =>
                {
                    b.Navigation("AccountSettingsByPrograms");

                    b.Navigation("DiagnosticExams");

                    b.Navigation("Diagnostics");

                    b.Navigation("ExamDefinitionSettingsByPrograms");

                    b.Navigation("Exams");

                    b.Navigation("HealthProgramDiseaseExams");

                    b.Navigation("HealthProgramExamByEntities");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProfessional", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("CalendarScheduleds");

                    b.Navigation("Communications");

                    b.Navigation("CoverageAreas");

                    b.Navigation("Diagnostics");

                    b.Navigation("Exams");

                    b.Navigation("HealthProfessionalByPrograms");

                    b.Navigation("InfusionAccountableHealthProfessionals");

                    b.Navigation("InfusionInfusionPlaceProfessionals");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("ResourceWorkSettings");

                    b.Navigation("SchedulingHistories");

                    b.Navigation("TrainingRecords");

                    b.Navigation("TreatmentAddresses");

                    b.Navigation("TreatmentPayments");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgram", b =>
                {
                    b.Navigation("AccessHistoryAttendances");

                    b.Navigation("AccessMannerByPrograms");

                    b.Navigation("AccessOrderByPrograms");

                    b.Navigation("AccessProcedureByPrograms");

                    b.Navigation("AccessProfiles");

                    b.Navigation("AccountExamTypeByPrograms");

                    b.Navigation("AccountSettingsByPrograms");

                    b.Navigation("ActionCategories");

                    b.Navigation("ActionConfigurations");

                    b.Navigation("Benefits");

                    b.Navigation("Campaigns");

                    b.Navigation("Caregivers");

                    b.Navigation("ChatDialogs");

                    b.Navigation("Chats");

                    b.Navigation("Communications");

                    b.Navigation("CoverageAreas");

                    b.Navigation("DiagnosticExams");

                    b.Navigation("Diagnostics");

                    b.Navigation("DoctorByPrograms");

                    b.Navigation("DoctorsRepresentatives");

                    b.Navigation("Emails");

                    b.Navigation("ExamDefinitionSettingsByPrograms");

                    b.Navigation("Exams");

                    b.Navigation("HealthProgramDiseases");

                    b.Navigation("HealthProgramExamByEntities");

                    b.Navigation("HealthProgramTemplateSettings");

                    b.Navigation("IncidentItems");

                    b.Navigation("IncidentProducts");

                    b.Navigation("IncidentSubjects");

                    b.Navigation("IncidentTypeDetailPrograms");

                    b.Navigation("Incidents");

                    b.Navigation("InformationCollects");

                    b.Navigation("Infusions");

                    b.Navigation("JsRulesByEntities");

                    b.Navigation("Logistics");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("LogisticsStuffs");

                    b.Navigation("MedicamentAccesses");

                    b.Navigation("PatientSalesOrders");

                    b.Navigation("Patients");

                    b.Navigation("PhoneCalls");

                    b.Navigation("Purchases");

                    b.Navigation("RegionalManagers");

                    b.Navigation("SchedulingHistories");

                    b.Navigation("Sms");

                    b.Navigation("Surveys");

                    b.Navigation("Tasks");

                    b.Navigation("Templates");

                    b.Navigation("TherapeuticHistories");

                    b.Navigation("TrainingRecords");

                    b.Navigation("TreatmentPayments");

                    b.Navigation("TreatmentSettings");

                    b.Navigation("Treatments");

                    b.Navigation("UserSystemLogs");

                    b.Navigation("Visits");

                    b.Navigation("VoucherConfigurations");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Care.Api.Models.HealthProgramDisease", b =>
                {
                    b.Navigation("HealthProgramDiseaseExams");
                });

            modelBuilder.Entity("Care.Api.Models.Incident", b =>
                {
                    b.Navigation("IncidentItems");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("Pharmacovigilances");

                    b.Navigation("TherapeuticHistories");

                    b.Navigation("TreatmentAndDiagnosticActions");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentProduct", b =>
                {
                    b.Navigation("IncidentTypeDetailPrograms");

                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentSubject", b =>
                {
                    b.Navigation("IncidentTypeDetailPrograms");

                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentType", b =>
                {
                    b.Navigation("IncidentTypeDetailPrograms");

                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("Care.Api.Models.IncidentTypeDetail", b =>
                {
                    b.Navigation("IncidentTypeDetailPrograms");

                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("Care.Api.Models.Infusion", b =>
                {
                    b.Navigation("TreatmentPayments");
                });

            modelBuilder.Entity("Care.Api.Models.Logistic", b =>
                {
                    b.Navigation("Infusions");
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsSchedule", b =>
                {
                    b.Navigation("ExamLogisticsScheduleId1Navigations");

                    b.Navigation("ExamLogisticsSchedules");

                    b.Navigation("IncidentItems");

                    b.Navigation("LogisticsScheduleItems");

                    b.Navigation("LogisticsStuffs");

                    b.Navigation("SchedulingHistories");
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsScheduleItem", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Care.Api.Models.LogisticsStuff", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("InverseKit");

                    b.Navigation("Logistics");

                    b.Navigation("LogisticsSchedules");
                });

            modelBuilder.Entity("Care.Api.Models.MedicalSpecialty", b =>
                {
                    b.Navigation("Diagnostics");

                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("Care.Api.Models.Medicament", b =>
                {
                    b.Navigation("AccessMannerByPrograms");

                    b.Navigation("AccessProcedureByPrograms");

                    b.Navigation("AccountSettingsByPrograms");

                    b.Navigation("ActionRules");

                    b.Navigation("AdhesionAttendances");

                    b.Navigation("DoctorsRepresentatives");

                    b.Navigation("Infusions");

                    b.Navigation("Logistics");

                    b.Navigation("LogisticsStuffs");

                    b.Navigation("PatientSalesOrders");

                    b.Navigation("Purchases");

                    b.Navigation("TherapeuticHistories");

                    b.Navigation("TreatmentCustomData");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentAccess", b =>
                {
                    b.Navigation("AccessHistoryAttendances");
                });

            modelBuilder.Entity("Care.Api.Models.MedicamentCompetitor", b =>
                {
                    b.Navigation("AdhesionAttendances");

                    b.Navigation("DiagnosticMedicamentCompetitors");

                    b.Navigation("DiagnosticPreviousMedicamentCompetitors");

                    b.Navigation("Incidents");

                    b.Navigation("TherapeuticHistories");

                    b.Navigation("TreatmentCustomData");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.MedicationNonadherenceReason", b =>
                {
                    b.Navigation("AdhesionAttendances");
                });

            modelBuilder.Entity("Care.Api.Models.MenuMetadatum", b =>
                {
                    b.Navigation("InverseParentMenuMetadata");

                    b.Navigation("LanguageMenuMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.Occupation", b =>
                {
                    b.Navigation("Caregivers");

                    b.Navigation("Patients");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.Patient", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("Diagnostics");

                    b.Navigation("Incidents");

                    b.Navigation("Logistics");

                    b.Navigation("MedicamentAccesses");

                    b.Navigation("PatientSalesOrders");

                    b.Navigation("Purchases");

                    b.Navigation("TreatmentPayments");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.PatientSalesOrder", b =>
                {
                    b.Navigation("Infusions");
                });

            modelBuilder.Entity("Care.Api.Models.Phase", b =>
                {
                    b.Navigation("TreatmentHistories");

                    b.Navigation("TreatmentSettings");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.PhoneCall", b =>
                {
                    b.Navigation("AttemptCallLogs");

                    b.Navigation("TreatmentAndDiagnosticActions");
                });

            modelBuilder.Entity("Care.Api.Models.Posologe", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.PostalCode", b =>
                {
                    b.Navigation("CoverageAreaPostalcodeEnds");

                    b.Navigation("CoverageAreaPostalcodeStarts");
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodeCity", b =>
                {
                    b.Navigation("CoverageAreas");

                    b.Navigation("PostalCodes");

                    b.Navigation("RegionalManagers");
                });

            modelBuilder.Entity("Care.Api.Models.PostalCodeState", b =>
                {
                    b.Navigation("CoverageAreas");

                    b.Navigation("PostalCodeCities");

                    b.Navigation("PostalCodes");

                    b.Navigation("RegionalManagers");
                });

            modelBuilder.Entity("Care.Api.Models.ProcessLog", b =>
                {
                    b.Navigation("StepLogs");
                });

            modelBuilder.Entity("Care.Api.Models.Profile", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Care.Api.Models.RegardingEntity", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Annotations");

                    b.Navigation("Attachments");

                    b.Navigation("ChatOriginRegardingEntities");

                    b.Navigation("ChatRegardingEntities");

                    b.Navigation("CommunicationFroms");

                    b.Navigation("CommunicationOriginRegardingEntities");

                    b.Navigation("CommunicationRegardingEntities");

                    b.Navigation("CommunicationTos");

                    b.Navigation("EmailOriginRegardingEntities");

                    b.Navigation("EmailRegardingEntities");

                    b.Navigation("Incidents");

                    b.Navigation("PhoneCallCallForRegardingEntities");

                    b.Navigation("PhoneCallCallFromRegardingEntities");

                    b.Navigation("PhoneCallOriginRegardingEntities");

                    b.Navigation("PhoneCallRegardingEntities");

                    b.Navigation("SmOriginRegardingEntities");

                    b.Navigation("SmRegardingEntities");

                    b.Navigation("SmSmsfromRegardingEntities");

                    b.Navigation("SmSmstoRegardingEntities");

                    b.Navigation("SurveyResponses");

                    b.Navigation("TaskOriginRegardingEntities");

                    b.Navigation("TaskRegardingEntities");
                });

            modelBuilder.Entity("Care.Api.Models.Representative", b =>
                {
                    b.Navigation("DoctorsRepresentativeManagers");

                    b.Navigation("DoctorsRepresentativeRepresentatives");

                    b.Navigation("Incidents");

                    b.Navigation("RegionalManagerRepresentativeSupervisors");

                    b.Navigation("RegionalManagerRepresentatives");

                    b.Navigation("RepresentativeRegions");

                    b.Navigation("TreatmentCustomData");

                    b.Navigation("VoucherManagers");

                    b.Navigation("VoucherRepresentatives");
                });

            modelBuilder.Entity("Care.Api.Models.RulesAttributeMetadatum", b =>
                {
                    b.Navigation("PhaseRulesMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.SectionMetadatum", b =>
                {
                    b.Navigation("LanguageSectionMetadata");
                });

            modelBuilder.Entity("Care.Api.Models.ServiceType", b =>
                {
                    b.Navigation("ResourceWorkSettings");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Care.Api.Models.Sm", b =>
                {
                    b.Navigation("InverseParentSms");
                });

            modelBuilder.Entity("Care.Api.Models.StrengthMedicament", b =>
                {
                    b.Navigation("LogisticsStuffs");

                    b.Navigation("PatientSalesOrders");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.StringMap", b =>
                {
                    b.Navigation("AccessHistoryAttendanceDetailDifficultyWithAccessStringMaps");

                    b.Navigation("AccessHistoryAttendanceDetailDifficultyWithDocumentsStringMaps");

                    b.Navigation("AccessHistoryAttendanceDetailNoDifficultyWithAccessStringMaps");

                    b.Navigation("AccessHistoryAttendanceStatusCodeStringMaps");

                    b.Navigation("AccessHistoryAttendanceWaiverDetailStringMaps");

                    b.Navigation("AccessMannerByPrograms");

                    b.Navigation("AccessManners");

                    b.Navigation("AccessOrderByPrograms");

                    b.Navigation("AccessProcedureByPrograms");

                    b.Navigation("AccessProfileAccessProfileTypeStringMaps");

                    b.Navigation("AccessProfileStatusCodeStringMaps");

                    b.Navigation("AccessRightEntities");

                    b.Navigation("AccessWays");

                    b.Navigation("AccountAccessCoverageAreaStringMaps");

                    b.Navigation("AccountAccountTypeStringMaps");

                    b.Navigation("AccountClinicPublicOrPrivateStringMaps");

                    b.Navigation("AccountClinicTypeStringMaps");

                    b.Navigation("AccountCoverageAreas");

                    b.Navigation("AccountExamTypeByPrograms");

                    b.Navigation("AccountSettingsByProgramAccountStatusStringMaps");

                    b.Navigation("AccountSettingsByProgramExamTypeStringMaps");

                    b.Navigation("AccountSettingsByProgramPatientTypeStringMaps");

                    b.Navigation("AccountSettingsByProgramStatusCodeStringMaps");

                    b.Navigation("AccountStatusCodeStringMaps");

                    b.Navigation("ActionCategories");

                    b.Navigation("ActionConfigurationActionOwnerStringMaps");

                    b.Navigation("ActionConfigurationStatusCodeStringMaps");

                    b.Navigation("ActionRules");

                    b.Navigation("AdhesionAttendanceDetailDifficultyWithAccessStringMaps");

                    b.Navigation("AdhesionAttendanceFrequencyStringMaps");

                    b.Navigation("AdhesionAttendanceOriginStringMaps");

                    b.Navigation("AdhesionAttendanceStatusCodeStringMaps");

                    b.Navigation("AdhesionAttendanceTreatmentIntervalStringMaps");

                    b.Navigation("AnnotationAnnotationTypeStringMaps");

                    b.Navigation("AnnotationStatusCodeStringMaps");

                    b.Navigation("Attachments");

                    b.Navigation("AttemptCallLogs");

                    b.Navigation("Banks");

                    b.Navigation("BenefitBenefitStatusStringMaps");

                    b.Navigation("BenefitBenefitTypeStringMaps");

                    b.Navigation("BenefitCustom1StringMaps");

                    b.Navigation("BenefitCustom2StringMaps");

                    b.Navigation("BenefitSourceStringMaps");

                    b.Navigation("BenefitStatusCodeStringMaps");

                    b.Navigation("CalendarScheduledScheduleTypeStringMapStringMaps");

                    b.Navigation("CalendarScheduledStatusCodeStringMaps");

                    b.Navigation("CampaignStatusCodeStringMaps");

                    b.Navigation("CampaignStatusStringMaps");

                    b.Navigation("CaregiverCivilStatusStringMaps");

                    b.Navigation("CaregiverEducationStringMaps");

                    b.Navigation("CaregiverGenderStringMaps");

                    b.Navigation("CaregiverKinshipStringMaps");

                    b.Navigation("CaregiverStatusCodeStringMaps");

                    b.Navigation("ChatChatTypeStringMaps");

                    b.Navigation("ChatDialogs");

                    b.Navigation("ChatStatusCodeStringMaps");

                    b.Navigation("CommunicationTypeByPrograms");

                    b.Navigation("Communications");

                    b.Navigation("Contacts");

                    b.Navigation("CoverageAreas");

                    b.Navigation("CustomerAddressAddressTypeStringMaps");

                    b.Navigation("CustomerAddressStatusCodeStringMaps");

                    b.Navigation("DiagnosticAddressTypeStringMaps");

                    b.Navigation("DiagnosticCategoryOfExamsStringMaps");

                    b.Navigation("DiagnosticDiagnosticStatusDetailStringMaps");

                    b.Navigation("DiagnosticDiagnosticStatusStringMaps");

                    b.Navigation("DiagnosticEthnicityStringMaps");

                    b.Navigation("DiagnosticExamDiagnosticStatusStringMaps");

                    b.Navigation("DiagnosticExamExamTypeStringMaps");

                    b.Navigation("DiagnosticExamStatusCodeStringMaps");

                    b.Navigation("DiagnosticFridayStringMaps");

                    b.Navigation("DiagnosticGenderStringMaps");

                    b.Navigation("DiagnosticKinshipStringMaps");

                    b.Navigation("DiagnosticMainContactStringMaps");

                    b.Navigation("DiagnosticMondayStringMaps");

                    b.Navigation("DiagnosticPatientSourceStringMaps");

                    b.Navigation("DiagnosticPreferredTimeStringMaps");

                    b.Navigation("DiagnosticPrescriptionStatusStringMaps");

                    b.Navigation("DiagnosticSaturdayStringMaps");

                    b.Navigation("DiagnosticSourceConsentStringMaps");

                    b.Navigation("DiagnosticStageOfDiseaseStringMaps");

                    b.Navigation("DiagnosticStatusCodeStringMaps");

                    b.Navigation("DiagnosticThursdayStringMaps");

                    b.Navigation("DiagnosticTreatmentLine2StringMaps");

                    b.Navigation("DiagnosticTreatmentLineStringMaps");

                    b.Navigation("DiagnosticTuesdayStringMaps");

                    b.Navigation("DiagnosticTypeOfAnalysisStringMaps");

                    b.Navigation("DiagnosticWednesdayStringMaps");

                    b.Navigation("Diseases");

                    b.Navigation("DoctorByProgramAuthorizeSmsstringMaps");

                    b.Navigation("DoctorByProgramAuthorizeVisitStringMaps");

                    b.Navigation("DoctorByProgramAuthorizesTitrationofDosageStringMaps");

                    b.Navigation("DoctorByProgramSourceConsentStringMaps");

                    b.Navigation("DoctorByProgramStatusCodeStringMaps");

                    b.Navigation("DoctorGenderStringMaps");

                    b.Navigation("DoctorLicenseStatusStringMaps");

                    b.Navigation("DoctorLicenseTypeStringMaps");

                    b.Navigation("DoctorStatusCodeStringMaps");

                    b.Navigation("DoctorsRepresentatives");

                    b.Navigation("EmailBoxSettings");

                    b.Navigation("Emails");

                    b.Navigation("ExamDefinitionExamTypeStringMaps");

                    b.Navigation("ExamDefinitionSettingsByPrograms");

                    b.Navigation("ExamDefinitionStatusCodeStringMaps");

                    b.Navigation("ExamExamStatusStringMaps");

                    b.Navigation("ExamOwnershipLevelStringMaps");

                    b.Navigation("ExamReschedulingReasonStringMaps");

                    b.Navigation("ExamResultStringMaps");

                    b.Navigation("ExamScheduleSourceStringMaps");

                    b.Navigation("ExamStatusCodeStringMaps");

                    b.Navigation("ExamWithdrawalPreferenceStringMaps");

                    b.Navigation("HealthProfessionalBankAccountTypeStringMaps");

                    b.Navigation("HealthProfessionalByProgramNurceStatusStringMaps");

                    b.Navigation("HealthProfessionalByProgramStatusCodeStringMaps");

                    b.Navigation("HealthProfessionalGenderStringMaps");

                    b.Navigation("HealthProfessionalHiringTypeStringMaps");

                    b.Navigation("HealthProfessionalNurseProfessionalTypeStringMaps");

                    b.Navigation("HealthProfessionalProfessionalLicenseTypeStringMaps");

                    b.Navigation("HealthProfessionalStatusCodeStringMaps");

                    b.Navigation("HealthProgramDiseaseExamExamTypeStringMaps");

                    b.Navigation("HealthProgramDiseaseExamStatusCodeStringMaps");

                    b.Navigation("HealthProgramDiseases");

                    b.Navigation("HealthProgramExamByEntities");

                    b.Navigation("HealthProgramLogisticsTypeStringMaps");

                    b.Navigation("HealthProgramStatusCodeStringMaps");

                    b.Navigation("HealthProgramTemplateSettingStatusCodeStringMaps");

                    b.Navigation("HealthProgramTemplateSettingTemplateTypeStringMapStringMaps");

                    b.Navigation("IncidentAccountTypeStringMaps");

                    b.Navigation("IncidentContactTypeStringMaps");

                    b.Navigation("IncidentCustom1StringMaps");

                    b.Navigation("IncidentCustom2StringMaps");

                    b.Navigation("IncidentCustomerTypeStringMaps");

                    b.Navigation("IncidentItemGenderStringMaps");

                    b.Navigation("IncidentItemStatusCodeStringMaps");

                    b.Navigation("IncidentOriginStringMaps");

                    b.Navigation("IncidentPrescriptionStatusStringMaps");

                    b.Navigation("IncidentProducts");

                    b.Navigation("IncidentRequestStatusStringMaps");

                    b.Navigation("IncidentStatusCodeStringMaps");

                    b.Navigation("IncidentStatusStringMaps");

                    b.Navigation("IncidentSubjects");

                    b.Navigation("IncidentTreatmentLineStringMaps");

                    b.Navigation("IncidentTypeDetailPrograms");

                    b.Navigation("IncidentTypeDetails");

                    b.Navigation("IncidentTypes");

                    b.Navigation("InformationCollectCollectionDiagnosisStringMaps");

                    b.Navigation("InformationCollectPlaceOfCollectionStringMaps");

                    b.Navigation("InformationCollectStatusCodeStringMaps");

                    b.Navigation("InformationVisitAbsenceJustificationStringMaps");

                    b.Navigation("InformationVisitStatusCodeStringMaps");

                    b.Navigation("InformationVisitVisitStatusStringMaps");

                    b.Navigation("InfusionApplicationTypeStringMaps");

                    b.Navigation("InfusionInfusionDispatchNumberStringMaps");

                    b.Navigation("InfusionInfusionPlaceTypeStringMaps");

                    b.Navigation("InfusionInfusionStatusStringMaps");

                    b.Navigation("InfusionInfusionTypeStringMaps");

                    b.Navigation("InfusionInfusionWeekStringMaps");

                    b.Navigation("InfusionReasonInfusionNotDoneStringMaps");

                    b.Navigation("InfusionStatusCodeStringMaps");

                    b.Navigation("InfusionSupportFieldStringMaps");

                    b.Navigation("JsRulesByEntities");

                    b.Navigation("LogisticCustom1StringMaps");

                    b.Navigation("LogisticCustom2StringMaps");

                    b.Navigation("LogisticIncidentStatusStringMaps");

                    b.Navigation("LogisticIntegrationStatusStringMaps");

                    b.Navigation("LogisticLogisticsTypeStringMaps");

                    b.Navigation("LogisticSendStatusStringMaps");

                    b.Navigation("LogisticSendSubStatusStringMaps");

                    b.Navigation("LogisticStatusCodeStringMaps");

                    b.Navigation("LogisticUcbKitSentReasonStringMaps");

                    b.Navigation("LogisticsScheduleChosenExamTypeStringMaps");

                    b.Navigation("LogisticsScheduleIntegrationStatusStringMaps");

                    b.Navigation("LogisticsScheduleItems");

                    b.Navigation("LogisticsScheduleKitTypeStringMaps");

                    b.Navigation("LogisticsScheduleLocalDeliveryWithdrawStringMaps");

                    b.Navigation("LogisticsScheduleLocalTypeStringMaps");

                    b.Navigation("LogisticsScheduleLogisticsScheduleTypeStringMaps");

                    b.Navigation("LogisticsSchedulePreferredTimeStringMaps");

                    b.Navigation("LogisticsScheduleScheduleStatusStringMaps");

                    b.Navigation("LogisticsScheduleStatusCodeStringMaps");

                    b.Navigation("LogisticsScheduleStorageTubeTypeStringMaps");

                    b.Navigation("LogisticsStuffLogisticsStuffTypeStringMaps");

                    b.Navigation("LogisticsStuffStatusCodeStringMaps");

                    b.Navigation("LogisticsStuffStuffStatusStringMaps");

                    b.Navigation("MedicalSpecialties");

                    b.Navigation("MedicamentAccessAccessStatusStringMaps");

                    b.Navigation("MedicamentAccessAccessSubStatusStringMaps");

                    b.Navigation("MedicamentAccessAccessTypeStringMaps");

                    b.Navigation("MedicamentAccessDetailDifficultyWithAccessStringMaps");

                    b.Navigation("MedicamentAccessDetailDifficultyWithDocumentsStringMaps");

                    b.Navigation("MedicamentAccessDetailNoDifficultyWithAccessStringMaps");

                    b.Navigation("MedicamentAccessStatusCodeStringMaps");

                    b.Navigation("MedicamentCompetitors");

                    b.Navigation("MedicamentConcomitants");

                    b.Navigation("Medicaments");

                    b.Navigation("MedicationNonadherenceReasons");

                    b.Navigation("Occupations");

                    b.Navigation("PatientCivilStatusStringMaps");

                    b.Navigation("PatientEducationStringMaps");

                    b.Navigation("PatientGenderStringMaps");

                    b.Navigation("PatientPatientTypeStringMaps");

                    b.Navigation("PatientSalesOrderPatientSourceStringMaps");

                    b.Navigation("PatientSalesOrderSolicitorStringMaps");

                    b.Navigation("PatientSalesOrderStatusCodeStringMaps");

                    b.Navigation("PatientStatusCodeStringMaps");

                    b.Navigation("Pharmacovigilances");

                    b.Navigation("Phases");

                    b.Navigation("PhoneCallPhoneCallStatusStringMaps");

                    b.Navigation("PhoneCallPhoneCallTypeStringMaps");

                    b.Navigation("PhoneCallStatusCodeStringMaps");

                    b.Navigation("PhoneCallUnSuccessfulReasonStringMaps");

                    b.Navigation("Posologes");

                    b.Navigation("PostalCodeAddressTypeStringMaps");

                    b.Navigation("PostalCodeCities");

                    b.Navigation("PostalCodeStates");

                    b.Navigation("PostalCodeStatusCodeStringMaps");

                    b.Navigation("PurchaseFrequencyStringMaps");

                    b.Navigation("PurchasePrescriptionTypeStringMaps");

                    b.Navigation("PurchaseStatusCodeStringMaps");

                    b.Navigation("QuestionOptions");

                    b.Navigation("Questions");

                    b.Navigation("RegardingEntities");

                    b.Navigation("RegionalManagers");

                    b.Navigation("Representatives");

                    b.Navigation("ResourceWorkSettingCalendarTypeStringMapStringMaps");

                    b.Navigation("ResourceWorkSettingStatusCodeStringMaps");

                    b.Navigation("SchedulingHistoryReschedulingReasonStringMaps");

                    b.Navigation("SchedulingHistoryStatusCodeStringMaps");

                    b.Navigation("ServiceTypes");

                    b.Navigation("SmSmsStatusStringMaps");

                    b.Navigation("SmSmsTypeStringMaps");

                    b.Navigation("SmStatusCodeStringMaps");

                    b.Navigation("SmSubjectTypeStringMaps");

                    b.Navigation("StrengthMedicaments");

                    b.Navigation("Subjects");

                    b.Navigation("SurveyQuestionLists");

                    b.Navigation("SurveyResponseLines");

                    b.Navigation("SurveyResponses");

                    b.Navigation("SurveyStatusCodeStringMaps");

                    b.Navigation("SurveySurveyTypeStringMaps");

                    b.Navigation("Tasks");

                    b.Navigation("TemplateSmsTypeStringMaps");

                    b.Navigation("TemplateStatusCodeStringMaps");

                    b.Navigation("TemplateTemplateTypeStringMaps");

                    b.Navigation("TherapeuticHistoryDosageUnitStringMaps");

                    b.Navigation("TherapeuticHistoryStatusCodeStringMaps");

                    b.Navigation("TherapeuticHistorySupplyMethodStringMaps");

                    b.Navigation("TherapeuticTypes");

                    b.Navigation("TrainingRecordStatusCodeStringMaps");

                    b.Navigation("TrainingRecordTrainingRecordTypeStringMaps");

                    b.Navigation("TreatmentAccessTypeStringMaps");

                    b.Navigation("TreatmentAddressAddressTypeStringMaps");

                    b.Navigation("TreatmentAddressStatusCodeStringMaps");

                    b.Navigation("TreatmentAndDiagnosticActions");

                    b.Navigation("TreatmentAttendances");

                    b.Navigation("TreatmentCivilStatusStringMaps");

                    b.Navigation("TreatmentContractTypeStringMaps");

                    b.Navigation("TreatmentCustom1StringMaps");

                    b.Navigation("TreatmentCustom2StringMaps");

                    b.Navigation("TreatmentCustomDataAccessDetailStringMaps");

                    b.Navigation("TreatmentCustomDataApplicatorTypeStringMaps");

                    b.Navigation("TreatmentCustomDataContractHasCoparticipationStringMaps");

                    b.Navigation("TreatmentCustomDataContractTypeStringMaps");

                    b.Navigation("TreatmentCustomDataCustom1StringMaps");

                    b.Navigation("TreatmentCustomDataCustom2StringMaps");

                    b.Navigation("TreatmentCustomDataDoctorAuthorizesDosageTitrationStringMaps");

                    b.Navigation("TreatmentCustomDataFormofAccessStringMaps");

                    b.Navigation("TreatmentCustomDataHemophiliaDegreeStringMaps");

                    b.Navigation("TreatmentCustomDataIfxitstatusStringMaps");

                    b.Navigation("TreatmentCustomDataIfxotstatusStringMaps");

                    b.Navigation("TreatmentCustomDataInfusionTypeStringMaps");

                    b.Navigation("TreatmentCustomDataIsWorkingStringMapStringMaps");

                    b.Navigation("TreatmentCustomDataJanssenitstatusStringMaps");

                    b.Navigation("TreatmentCustomDataJanssenotstatusStringMaps");

                    b.Navigation("TreatmentCustomDataMedicalIndicationStringMaps");

                    b.Navigation("TreatmentCustomDataMedicalInstructionAccessWayStringMaps");

                    b.Navigation("TreatmentCustomDataOptimizationTypeStringMaps");

                    b.Navigation("TreatmentCustomDataPatientTypeStringMaps");

                    b.Navigation("TreatmentCustomDataPlanCoverageStringMaps");

                    b.Navigation("TreatmentCustomDataReasonForNotAcceptingSmsstringMaps");

                    b.Navigation("TreatmentCustomDataRiskRatingStringMaps");

                    b.Navigation("TreatmentCustomDataStageOfDiseaseStringMaps");

                    b.Navigation("TreatmentCustomDataStatusCodeStringMaps");

                    b.Navigation("TreatmentCustomDataStorageLocationStringMaps");

                    b.Navigation("TreatmentCustomDataSupplyMethodStringMaps");

                    b.Navigation("TreatmentCustomDataTreatmentCyclesStringMaps");

                    b.Navigation("TreatmentCustomDataTreatmentIntervalStringMaps");

                    b.Navigation("TreatmentCustomDataTreatmentTypeStringMaps");

                    b.Navigation("TreatmentCustomDataVisitRefusalReasonStringMaps");

                    b.Navigation("TreatmentDosageUnitStringMaps");

                    b.Navigation("TreatmentEducationStringMaps");

                    b.Navigation("TreatmentGenderStringMaps");

                    b.Navigation("TreatmentHistoryHistoryModalityStringMaps");

                    b.Navigation("TreatmentHistoryHistoryPhaseStringMaps");

                    b.Navigation("TreatmentHistoryHistoryStatusDetailStringMaps");

                    b.Navigation("TreatmentHistoryHistoryStatusStringMaps");

                    b.Navigation("TreatmentHistoryStatusCodeStringMaps");

                    b.Navigation("TreatmentKinshipStringMaps");

                    b.Navigation("TreatmentMainContactStringMaps");

                    b.Navigation("TreatmentModalityStringMaps");

                    b.Navigation("TreatmentPatientSourceStringMaps");

                    b.Navigation("TreatmentPaymentStatusCodeStringMaps");

                    b.Navigation("TreatmentPaymentTreatmentPaymentStatusStringMaps");

                    b.Navigation("TreatmentPhaseStringMaps");

                    b.Navigation("TreatmentPreferredTimeStringMaps");

                    b.Navigation("TreatmentPrescriptionStatusStringMaps");

                    b.Navigation("TreatmentReasonInactivationStringMaps");

                    b.Navigation("TreatmentSettings");

                    b.Navigation("TreatmentSituations");

                    b.Navigation("TreatmentSourceConsentStringMaps");

                    b.Navigation("TreatmentStageOfDiseaseStringMaps");

                    b.Navigation("TreatmentStatusCodeStringMaps");

                    b.Navigation("TreatmentStatusDetails");

                    b.Navigation("TreatmentStatuses");

                    b.Navigation("TreatmentTreatmentStatusDetailStringMaps");

                    b.Navigation("TreatmentTreatmentStatusStringMaps");

                    b.Navigation("TreatmentVisitRefusalReasonStringMaps");

                    b.Navigation("Users");

                    b.Navigation("VisitCustom1StringMaps");

                    b.Navigation("VisitCustom2StringMaps");

                    b.Navigation("VisitPreSchedulingStatusStringMaps");

                    b.Navigation("VisitStatusCodeStringMaps");

                    b.Navigation("VisitStatusStringMaps");

                    b.Navigation("VoucherConfigurationStatusCodeStringMaps");

                    b.Navigation("VoucherConfigurationVoucherConfigTypeStringMaps");

                    b.Navigation("VoucherSourceStringMaps");

                    b.Navigation("VoucherStatusCodeStringMaps");

                    b.Navigation("VoucherVoucherStatusStringMaps");
                });

            modelBuilder.Entity("Care.Api.Models.Subject", b =>
                {
                    b.Navigation("InverseParentSubject");
                });

            modelBuilder.Entity("Care.Api.Models.Template", b =>
                {
                    b.Navigation("HealthProgramTemplateSettings");
                });

            modelBuilder.Entity("Care.Api.Models.TherapeuticType", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.Treatment", b =>
                {
                    b.Navigation("AccessHistoryAttendances");

                    b.Navigation("AdhesionAttendances");

                    b.Navigation("AttemptCallLogs");

                    b.Navigation("Benefits");

                    b.Navigation("DiagnosticExams");

                    b.Navigation("Exams");

                    b.Navigation("Incidents");

                    b.Navigation("Infusions");

                    b.Navigation("Logistics");

                    b.Navigation("MedicamentAccesses");

                    b.Navigation("MedicamentConcomitants");

                    b.Navigation("Pharmacovigilances");

                    b.Navigation("Purchases");

                    b.Navigation("TherapeuticHistories");

                    b.Navigation("TreatmentAddresses");

                    b.Navigation("TreatmentAndDiagnosticActions");

                    b.Navigation("TreatmentAttendances");

                    b.Navigation("TreatmentHistories");

                    b.Navigation("TreatmentPayments");

                    b.Navigation("Visits");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAddress", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentAndDiagnosticAction", b =>
                {
                    b.Navigation("AttemptCallLogs");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentCustomData", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentSetting", b =>
                {
                    b.Navigation("AccessHistoryAttendances");

                    b.Navigation("AdhesionAttendances");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentSituation", b =>
                {
                    b.Navigation("TreatmentHistories");

                    b.Navigation("TreatmentSettings");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatus", b =>
                {
                    b.Navigation("TreatmentHistories");

                    b.Navigation("TreatmentSettings");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.TreatmentStatusDetail", b =>
                {
                    b.Navigation("TreatmentHistories");

                    b.Navigation("TreatmentSettings");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("Care.Api.Models.User", b =>
                {
                    b.Navigation("AccountSettingsByPrograms");

                    b.Navigation("Chats");

                    b.Navigation("Contacts");

                    b.Navigation("Diagnostics");

                    b.Navigation("DoctorByProgramConsultants");

                    b.Navigation("DoctorByProgramSystemUsers");

                    b.Navigation("HealthProfessionalByPrograms");

                    b.Navigation("HealthProfessionals");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("MedicamentAccesses");

                    b.Navigation("Patients");

                    b.Navigation("Representatives");

                    b.Navigation("Treatments");

                    b.Navigation("UserSystemLogs");
                });

            modelBuilder.Entity("Care.Api.Models.ValidationResult", b =>
                {
                    b.Navigation("AccountInternalDemands");

                    b.Navigation("RepresentativeRegions");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Care.Api.Models.Visit", b =>
                {
                    b.Navigation("CalendarScheduleds");

                    b.Navigation("InformationCollects");

                    b.Navigation("InformationVisits");

                    b.Navigation("SchedulingHistories");

                    b.Navigation("TreatmentPayments");
                });

            modelBuilder.Entity("Care.Api.Models.Voucher", b =>
                {
                    b.Navigation("Benefits");

                    b.Navigation("DiagnosticExams");

                    b.Navigation("Diagnostics");

                    b.Navigation("Exams");

                    b.Navigation("Infusions");

                    b.Navigation("LogisticsScheduleItems");

                    b.Navigation("LogisticsSchedules");

                    b.Navigation("TreatmentCustomDataIfxitcodes");

                    b.Navigation("TreatmentCustomDataIfxotcodes");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Care.Api.Models.VoucherConfiguration", b =>
                {
                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
