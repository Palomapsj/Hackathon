using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Care.Api.Migrations
{
    /// <inheritdoc />
    public partial class Inicial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "__MigrationHistory",
                columns: table => new
                {
                    MigrationId = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    ContextKey = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    Model = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    ProductVersion = table.Column<string>(type: "nvarchar(32)", maxLength: 32, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.__MigrationHistory", x => new { x.MigrationId, x.ContextKey });
                });

            migrationBuilder.CreateTable(
                name: "AccessHistoryAttendanceAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessHistoryAttendanceAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessMannerAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessMannerAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessMannerByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessMannerByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessOrderByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessOrderByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessProcedureByProgramAccountAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessProcedureByProgramAccountAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessProcedureByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessProcedureByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessProfileAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessProfileAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessProfileUserAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessProfileUserAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessRightEntityAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessRightEntityAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccessWayAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccessWayAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Account_BKP_19_04",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TelephoneFax = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MobilePhone = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Site = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressReference = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Latitude = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Longitude = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StateRegistration = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CompanyName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccessWayId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccessMannerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccessCoverageAreaStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccessMakesStatement = table.Column<bool>(type: "bit", nullable: true),
                    AccessMakesInformation = table.Column<bool>(type: "bit", nullable: true),
                    AccessObservation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ClinicTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ClinicPublicOrPrivateStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorResponsableId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProfessional_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MainContact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OfficeHours = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ANSNumber = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Account_BKP_19_04Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Account_BKP_19_04Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountCoverageAreaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountCoverageAreaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountExamTypeByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountExamTypeByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountInternalDemandAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountInternalDemandAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountSettingsByProgram_BKP_19_04_22",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HomeCare = table.Column<bool>(type: "bit", nullable: true),
                    PatientTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MakesInfusion = table.Column<bool>(type: "bit", nullable: true),
                    MakesIT = table.Column<bool>(type: "bit", nullable: true),
                    MakesOT = table.Column<bool>(type: "bit", nullable: true),
                    MakesInfusionSubsidy = table.Column<bool>(type: "bit", nullable: true),
                    SpecialtyDerm = table.Column<bool>(type: "bit", nullable: true),
                    SpecialtyGastro = table.Column<bool>(type: "bit", nullable: true),
                    SpecialtyRheumato = table.Column<bool>(type: "bit", nullable: true),
                    CodeClinicIntegra = table.Column<int>(type: "int", nullable: false),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccountStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ExamTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OtherExam = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ApprovalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Price = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    MainContact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Area = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RequestId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NickName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MounthlyVouchers = table.Column<int>(type: "int", nullable: true),
                    AnnualVouchers = table.Column<int>(type: "int", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    SystemUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EmailAddress = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AnalysisTime = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HomeCollect = table.Column<bool>(type: "bit", nullable: true),
                    UntilKM = table.Column<int>(type: "int", nullable: true),
                    UntilKMValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BetweenKM = table.Column<int>(type: "int", nullable: true),
                    AndKM = table.Column<int>(type: "int", nullable: true),
                    BetweenKMValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OutsideCoverageAreaAboveKM = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "AccountSettingsByProgram_BKP_19_04_22Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountSettingsByProgram_BKP_19_04_22Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountSettingsByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountSettingsByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActionCategoryAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActionCategoryAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActionConfigurationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActionConfigurationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActionRuleAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActionRuleAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AdhesionAttendanceAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AdhesionAttendanceAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AkkaActors",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Path = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    IsHealthProgramActor = table.Column<bool>(type: "bit", nullable: true),
                    IsBroadCastActor = table.Column<bool>(type: "bit", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AkkaActors", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AkkaActorsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AkkaActorsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AkkaMessages",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AkkaActorsId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AkkaActorsIdName = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AkkaActorsProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AkkaActorsProgramIdName = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    SourceEntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    SourceEntityMetadataIdName = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AkkaMessages", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AkkaMessagesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AkkaMessagesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AkkaPublishEventsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AkkaPublishEventsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AkkaSubscribeEventsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AkkaSubscribeEventsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AnnotationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AnnotationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRolesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRolesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaimsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaimsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLoginsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLoginsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRolesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRolesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEndDateUtc = table.Column<DateTime>(type: "datetime", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsersAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsersAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AttachmentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttachmentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AttemptCallLogAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttemptCallLogAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BankAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BASE_TREATMENT",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Medicamentid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    diseaseid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StrengthMedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PosologeId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Dosage = table.Column<int>(type: "int", nullable: true),
                    DosageUnitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    doctorid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthCareProviderId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthInsuranceType = table.Column<int>(type: "int", nullable: true),
                    TreatmentSituationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramParticipationConsentDate = table.Column<int>(type: "int", nullable: true),
                    TreatmentStartDate = table.Column<int>(type: "int", nullable: true),
                    SystemTreatmentStartDate = table.Column<int>(type: "int", nullable: true),
                    SystemAccessStartDate = table.Column<int>(type: "int", nullable: true),
                    TreatmentStopDate = table.Column<int>(type: "int", nullable: true),
                    SystemTreatmentInativationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemLastContactDate = table.Column<int>(type: "int", nullable: true),
                    SystemLastSuccessfullContactDate = table.Column<int>(type: "int", nullable: true),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MainContactStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CaregiverId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    CPF = table.Column<int>(type: "int", nullable: true),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Age = table.Column<int>(type: "int", nullable: true),
                    Telephone1 = table.Column<int>(type: "int", nullable: true),
                    Telephone2 = table.Column<int>(type: "int", nullable: true),
                    Telephone3 = table.Column<int>(type: "int", nullable: true),
                    Mobilephone1 = table.Column<int>(type: "int", nullable: true),
                    Mobilephone2 = table.Column<int>(type: "int", nullable: true),
                    Mobilephone3 = table.Column<int>(type: "int", nullable: true),
                    EmailAddress1 = table.Column<int>(type: "int", nullable: true),
                    EmailAddress2 = table.Column<int>(type: "int", nullable: true),
                    SkypeUser = table.Column<int>(type: "int", nullable: true),
                    Stature = table.Column<int>(type: "int", nullable: true),
                    Weight = table.Column<int>(type: "int", nullable: true),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CivilStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EducationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RG = table.Column<int>(type: "int", nullable: true),
                    OccupationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FirstName_Caregiver = table.Column<int>(type: "int", nullable: true),
                    LastName_Caregiver = table.Column<int>(type: "int", nullable: true),
                    FullName_Caregiver = table.Column<int>(type: "int", nullable: true),
                    EmailAddress1_Caregiver = table.Column<int>(type: "int", nullable: true),
                    Telephone1_Caregiver = table.Column<int>(type: "int", nullable: true),
                    Mobilephone1_Caregiver = table.Column<int>(type: "int", nullable: true),
                    Birthdate_Caregiver = table.Column<int>(type: "int", nullable: true),
                    CPF_Caregiver = table.Column<int>(type: "int", nullable: true),
                    SkypeUser_Caregiver = table.Column<int>(type: "int", nullable: true),
                    KinshipStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AmpouleAmount = table.Column<int>(type: "int", nullable: true),
                    InfusionPlaceId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramParticipationConsent = table.Column<int>(type: "int", nullable: true),
                    ConsentToReceivePhonecalls = table.Column<int>(type: "int", nullable: true),
                    ConsentToReceiveSMS = table.Column<int>(type: "int", nullable: true),
                    ConsentToReceiveEmail = table.Column<int>(type: "int", nullable: true),
                    ConsentToReceiveVisit = table.Column<int>(type: "int", nullable: true),
                    ConsentToReceiveLogistics = table.Column<int>(type: "int", nullable: true),
                    ConsentToSendDataToDoctor = table.Column<int>(type: "int", nullable: true),
                    ConsentDataShare = table.Column<int>(type: "int", nullable: true),
                    PrescriptionReceived = table.Column<int>(type: "int", nullable: true),
                    PrescriptionReceivedDate = table.Column<int>(type: "int", nullable: true),
                    PrescriptionIsValid = table.Column<int>(type: "int", nullable: true),
                    PrescriptionValidationDate = table.Column<int>(type: "int", nullable: true),
                    PrescriptionValidatedByName = table.Column<int>(type: "int", nullable: true),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<int>(type: "int", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<int>(type: "int", nullable: true),
                    isDeleted = table.Column<string>(type: "varchar(5)", unicode: false, maxLength: 5, nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    statecode = table.Column<int>(type: "int", nullable: false),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<int>(type: "int", nullable: true),
                    ReasonDeleted = table.Column<int>(type: "int", nullable: true),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Importcode = table.Column<double>(type: "float", nullable: true),
                    InternalControl = table.Column<int>(type: "int", nullable: true),
                    EntityOriginalValues = table.Column<int>(type: "int", nullable: true),
                    PatientSourceStringMapId = table.Column<int>(type: "int", nullable: true),
                    PatientDiagnosedDate = table.Column<int>(type: "int", nullable: true),
                    SystemRegistrationEndDate = table.Column<int>(type: "int", nullable: true),
                    Telephone1Observation = table.Column<int>(type: "int", nullable: true),
                    Telephone2Observation = table.Column<int>(type: "int", nullable: true),
                    Telephone3Observation = table.Column<int>(type: "int", nullable: true),
                    Mobilephone1Observation = table.Column<int>(type: "int", nullable: true),
                    Mobilephone2Observation = table.Column<int>(type: "int", nullable: true),
                    Mobilephone3Observation = table.Column<int>(type: "int", nullable: true),
                    RNE = table.Column<int>(type: "int", nullable: true),
                    TreatmentCustomDataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AbbreviationName = table.Column<int>(type: "int", nullable: true),
                    PrescriptionDueDate = table.Column<int>(type: "int", nullable: true),
                    ProgramTime = table.Column<int>(type: "int", nullable: true),
                    TreatmentTime = table.Column<int>(type: "int", nullable: true),
                    SupportField = table.Column<int>(type: "int", nullable: true),
                    Password = table.Column<int>(type: "int", nullable: true),
                    CID = table.Column<int>(type: "int", nullable: true),
                    PNCode = table.Column<int>(type: "int", nullable: true),
                    PreferredTimeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ContractTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    GotAccessDate = table.Column<int>(type: "int", nullable: true),
                    PrescriptionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PrescriptionHasDivergentDosage = table.Column<int>(type: "int", nullable: true),
                    PrescriptionHasLackOfDosage = table.Column<int>(type: "int", nullable: true),
                    PrescriptionHasDivergentInterval = table.Column<int>(type: "int", nullable: true),
                    PrescriptionHasLackOfInterval = table.Column<int>(type: "int", nullable: true),
                    PrescriptionHasDateMissing = table.Column<int>(type: "int", nullable: true),
                    PrescriptionHasStampSignatureMissing = table.Column<int>(type: "int", nullable: true),
                    PrescriptionHasMissingMedicationName = table.Column<int>(type: "int", nullable: true),
                    WillDoctorMakeNewPrescription = table.Column<int>(type: "int", nullable: true),
                    MedicamentCompetitorId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BASE_TREATMENTAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BASE_TREATMENTAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BaseDoctorRepresentative",
                columns: table => new
                {
                    Doctor = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    LIcenseNumber = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    LIcenseState = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Doenca = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Representante = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false),
                    Gerente = table.Column<string>(type: "varchar(500)", unicode: false, maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BaseDoctorRepresentativeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseDoctorRepresentativeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BEMESTAR_VOUCHER_PENDENTE_LAUDO",
                columns: table => new
                {
                    Código_do_Paciente = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Nome = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Status_atualizado = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Número_Voucher_Azimute = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Data_Procedimento = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Local_Procedimento = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Tipo_de_Análise = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BEMESTAR_VOUCHER_PENDENTE_LAUDOAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BEMESTAR_VOUCHER_PENDENTE_LAUDOAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BenefitAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenefitAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BKP_ENTRENOS_REATIVADO_20200624",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StrengthMedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PosologeId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Dosage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    DosageUnitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthCareProviderId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthInsuranceType = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentSituationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramParticipationConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemTreatmentStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemAccessStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentStopDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemTreatmentInativationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemLastContactDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemLastSuccessfullContactDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MainContactStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CaregiverId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Age = table.Column<int>(type: "int", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Stature = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CivilStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EducationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RG = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OccupationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FirstName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate_Caregiver = table.Column<DateTime>(type: "datetime", nullable: true),
                    CPF_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    KinshipStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    InfusionPlaceId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveVisit = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveLogistics = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToSendDataToDoctor = table.Column<bool>(type: "bit", nullable: true),
                    ConsentDataShare = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceived = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionIsValid = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionValidationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionValidatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PatientSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PatientDiagnosedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemRegistrationEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone2Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone3Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone1Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone2Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone3Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RNE = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TreatmentCustomDataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AbbreviationName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrescriptionDueDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramTime = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TreatmentTime = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    SupportField = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CID = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PNCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreferredTimeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ContractTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    GotAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PrescriptionHasDivergentDosage = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasLackOfDosage = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasDivergentInterval = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasLackOfInterval = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasDateMissing = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasStampSignatureMissing = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasMissingMedicationName = table.Column<bool>(type: "bit", nullable: true),
                    WillDoctorMakeNewPrescription = table.Column<bool>(type: "bit", nullable: true),
                    MedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OnlyCareMigration = table.Column<bool>(type: "bit", nullable: true),
                    DoctorPrescriberId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Haspatientusedmedicationbefore = table.Column<bool>(type: "bit", nullable: true),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    GotAccess = table.Column<bool>(type: "bit", nullable: true),
                    PatientDiagnosed = table.Column<bool>(type: "bit", nullable: true),
                    SampleCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhaseStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusDetailStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonInactivationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramParticipationDiagnosticConsent = table.Column<bool>(type: "bit", nullable: true),
                    ProgramParticipationDiagnosticConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentToReceiveDiagnosticPhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticPhonecallConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentToReceiveDiagnosticEmail = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticEmailConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModalityStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccessTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "BKP_ENTRENOS_REATIVADO_20200624Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BKP_ENTRENOS_REATIVADO_20200624Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CadastrosTakeda",
                columns: table => new
                {
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CódigodoPaciente = table.Column<string>(name: "Código do Paciente", type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    NomePaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Programa = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DatadeNascimento = table.Column<DateTime>(name: "Data de Nascimento", type: "date", nullable: true),
                    Idade = table.Column<int>(type: "int", nullable: true),
                    FaixaEtária = table.Column<string>(name: "Faixa Etária", type: "varchar(21)", unicode: false, maxLength: 21, nullable: false),
                    Genero = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    CidadedoPaciente = table.Column<string>(name: "Cidade do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UFPaciente = table.Column<string>(name: "UF Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estadodopaciente = table.Column<string>(name: "Estado do paciente", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    RegiaoDoPaciente = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Email1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Email2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Patologia = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DatadeCadastro = table.Column<DateTime>(name: "Data de Cadastro", type: "date", nullable: true),
                    Situação = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FaseAtual = table.Column<string>(name: "Fase Atual", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Status = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Detalhedostatus = table.Column<string>(name: "Detalhe do status", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    MotivodaInativação = table.Column<string>(name: "Motivo da Inativação", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DatadaInativação = table.Column<DateTime>(name: "Data da Inativação", type: "date", nullable: true),
                    Modalidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    NomedoMédico = table.Column<string>(name: "Nome do Médico", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CRM = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UFCRM = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailMedico1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmailMedico2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Consultor = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    Gerente = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    Nomedomedicamento = table.Column<string>(name: "Nome do medicamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AceitaParticipardoPrograma = table.Column<string>(name: "Aceita Participar do Programa?", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    Dataaceiteparticipardoprograma = table.Column<DateTime>(name: "Data aceite participar do programa", type: "datetime", nullable: true),
                    Aceitareceberligações = table.Column<string>(name: "Aceita receber ligações?", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    dataaceitereceberligações = table.Column<DateTime>(name: "data aceite receber ligações", type: "smalldatetime", nullable: true),
                    AceitareceberEmail = table.Column<string>(name: "Aceita receber E-mail?", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    dataaceitareceberEmail = table.Column<DateTime>(name: "data aceita receber E-mail", type: "smalldatetime", nullable: true),
                    Aceitarecebermateriais = table.Column<string>(name: "Aceita receber materiais?", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    dataaceitarecebermateriais = table.Column<DateTime>(name: "data aceita receber materiais", type: "smalldatetime", nullable: true),
                    ConsentimentoLGPD = table.Column<string>(name: "Consentimento LGPD", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    DatadoConsentimentoLGPD = table.Column<DateTime>(name: "Data do Consentimento LGPD", type: "datetime", nullable: true),
                    OrigemConsentimento = table.Column<string>(name: "Origem Consentimento", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    OrigemPaciente = table.Column<string>(name: "Origem Paciente", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ConsentimentoLGPDMedico = table.Column<string>(name: "Consentimento LGPD Medico", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    DatadoConsentimentoLGPDMedico = table.Column<DateTime>(name: "Data do Consentimento LGPD Medico", type: "date", nullable: true),
                    OrigemConsentimentoMedico = table.Column<string>(name: "Origem Consentimento Medico", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    AceiteWhatsApp = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    GrauDeHemofilia = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SePossuiPrescricao = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    DataPrescricao = table.Column<DateTime>(type: "date", nullable: true),
                    SePossuiPrescricaoAnexada = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "CadastrosTakedaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CadastrosTakedaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CalendarScheduledAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CalendarScheduledAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CampaignAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CampaignAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CampaignHealthProfessionalAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CampaignHealthProfessionalAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CaregiverAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CaregiverAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CargaMedicoConsultor",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CRMMEDICO = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    MEDICO = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    CONSULTOR = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    CITY = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    DATA = table.Column<DateTime>(type: "datetime", nullable: false),
                    USUARIO = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    LicenseNumber = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    CRMSTATE = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__CargaMed__3214EC2751949C76", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "CargaMedicoConsultorAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CargaMedicoConsultorAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ChatAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChatAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ChatDialogsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChatDialogsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Clinicas_Import",
                columns: table => new
                {
                    Tipo = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CNPJ = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DOENCA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PROCEDIMENTO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ColunaIdentity = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Clinicas_Import2",
                columns: table => new
                {
                    TIPO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CNPJ = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DOENCA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PROCEDIMENTO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Clinicas_Import2Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clinicas_Import2Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Clinicas_ImportAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clinicas_ImportAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Clinicas_Infusao_Import",
                columns: table => new
                {
                    TIPO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    CNPJ = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DOENCA = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Clinicas_Infusao_ImportAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clinicas_Infusao_ImportAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CommunicationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommunicationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CommunicationTypeByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommunicationTypeByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CommunicationTypeByProgramHealthProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommunicationTypeByProgramHealthProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Configuration",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Type = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Configuration", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ConfigurationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConfigurationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ContactAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CoverageAreaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CoverageAreaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CustomerAddressAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomerAddressAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DASHBOARD_ASTELLAS",
                columns: table => new
                {
                    TableId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CodigoDoPaciente = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Fase = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    OperadoraDeSaude = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataLigacao = table.Column<DateTime>(type: "datetime", nullable: true),
                    LigacaoAtiva = table.Column<int>(type: "int", nullable: true),
                    LigacaoReceptiva = table.Column<int>(type: "int", nullable: true),
                    FormaDeAcesso = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TipoDeAcesso = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AccessStatus = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LocalDeAcesso = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TempoEmAcessoEmDias = table.Column<int>(type: "int", nullable: true),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UFMedico = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PerfilPaciente = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    Glosas = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DASHBOARD_ASTELLASAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DASHBOARD_ASTELLASAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DiagnosticAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiagnosticAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DiagnosticExamAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiagnosticExamAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DiseaseAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiseaseAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DoctorAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgram_bkp_05_11_2021",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticConsent = table.Column<bool>(type: "bit", nullable: true),
                    ConfirmPersonalInformation = table.Column<bool>(type: "bit", nullable: true),
                    ProgramParticipationConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramParticipationConsentComments = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DiagnosticConsentComments = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramRequestDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsProgramParticipationApproved = table.Column<bool>(type: "bit", nullable: true),
                    IsDiagnosticConsentApproved = table.Column<bool>(type: "bit", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizeVisitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizeSMSStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizesTitrationofDosageStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    RequestDiagnosticConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramParticipationConsent2 = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticConsent2 = table.Column<bool>(type: "bit", nullable: true),
                    SystemUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LicenseNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LicenseState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProgramParticipationConsent3 = table.Column<bool>(type: "bit", nullable: true),
                    Specialty = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Latitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPD = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPDDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SourceConsentStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgram_bkp_05_11_2021Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorByProgram_bkp_05_11_2021Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgram_bkp02122021",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticConsent = table.Column<bool>(type: "bit", nullable: true),
                    ConfirmPersonalInformation = table.Column<bool>(type: "bit", nullable: true),
                    ProgramParticipationConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramParticipationConsentComments = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DiagnosticConsentComments = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramRequestDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsProgramParticipationApproved = table.Column<bool>(type: "bit", nullable: true),
                    IsDiagnosticConsentApproved = table.Column<bool>(type: "bit", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizeVisitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizeSMSStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizesTitrationofDosageStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    RequestDiagnosticConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramParticipationConsent2 = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticConsent2 = table.Column<bool>(type: "bit", nullable: true),
                    SystemUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LicenseNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LicenseState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProgramParticipationConsent3 = table.Column<bool>(type: "bit", nullable: true),
                    Specialty = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Latitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPD = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPDDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SourceConsentStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgram_bkp02122021Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorByProgram_bkp02122021Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgram_Bkp231121",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticConsent = table.Column<bool>(type: "bit", nullable: true),
                    ConfirmPersonalInformation = table.Column<bool>(type: "bit", nullable: true),
                    ProgramParticipationConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramParticipationConsentComments = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DiagnosticConsentComments = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramRequestDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsProgramParticipationApproved = table.Column<bool>(type: "bit", nullable: true),
                    IsDiagnosticConsentApproved = table.Column<bool>(type: "bit", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizeVisitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizeSMSStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AuthorizesTitrationofDosageStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    RequestDiagnosticConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramParticipationConsent2 = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticConsent2 = table.Column<bool>(type: "bit", nullable: true),
                    SystemUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LicenseNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LicenseState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProgramParticipationConsent3 = table.Column<bool>(type: "bit", nullable: true),
                    Specialty = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Latitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPD = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPDDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SourceConsentStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgram_Bkp231121Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorByProgram_Bkp231121Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgramAccountAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorByProgramAccountAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DoctorMedicalSpecialtyAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorMedicalSpecialtyAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DoctorsRepresentativeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DoctorsRepresentativeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ELMAH_Error",
                columns: table => new
                {
                    ErrorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, defaultValueSql: "(newid())"),
                    Application = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    Host = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Type = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    Source = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false, collation: "Latin1_General_CI_AI"),
                    User = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusCode = table.Column<int>(type: "int", nullable: false),
                    TimeUtc = table.Column<DateTime>(type: "datetime", nullable: false),
                    Sequence = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AllXml = table.Column<string>(type: "ntext", nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ELMAH_Error", x => x.ErrorId)
                        .Annotation("SqlServer:Clustered", false);
                });

            migrationBuilder.CreateTable(
                name: "ELMAH_ErrorAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ELMAH_ErrorAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmailAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmailAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmailBoxSettingAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmailBoxSettingAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EntityConfiguration",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HasSurvey = table.Column<bool>(type: "bit", nullable: false),
                    HasMap = table.Column<int>(type: "int", nullable: true),
                    HasCalendar = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.EntityConfiguration", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EntityConfigurationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EntityConfigurationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Especialidade",
                columns: table => new
                {
                    doctorid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    healthprogramid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Especialidade = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "EspecialidadeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EspecialidadeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Exam_BKP_19_04_22",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RealizationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    NeedCaptation = table.Column<bool>(type: "bit", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    VoucherByEmail = table.Column<bool>(type: "bit", nullable: true),
                    ReportSent = table.Column<bool>(type: "bit", nullable: true),
                    ExpectedDateToSend = table.Column<DateTime>(type: "datetime", nullable: true),
                    ETicket = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DueETicket = table.Column<DateTime>(type: "datetime", nullable: true),
                    WithdrawalPreferenceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorHasFilterPaper = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermReceived = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermValidated = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentTermValidatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentTermValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HaveDateReturnDoctor = table.Column<bool>(type: "bit", nullable: true),
                    DateReturnDoctor = table.Column<DateTime>(type: "datetime", nullable: true),
                    NumberofTubes = table.Column<int>(type: "int", nullable: false),
                    DateIssueReport = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateOfApproval = table.Column<DateTime>(type: "datetime", nullable: true),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsSchedule_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    WithdrawalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReschedulingReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherReceived = table.Column<bool>(type: "bit", nullable: true),
                    VoucherValidated = table.Column<bool>(type: "bit", nullable: true),
                    VoucherValidatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    VoucherValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsScheduleItemId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HasDiagnosis = table.Column<bool>(type: "bit", nullable: true),
                    Distance = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    MedicationUseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentEligibilityCriteria = table.Column<bool>(type: "bit", nullable: true),
                    ConsentResponsibility = table.Column<bool>(type: "bit", nullable: true),
                    ConsentSample = table.Column<bool>(type: "bit", nullable: true),
                    ConsentCloseDiagnostic = table.Column<bool>(type: "bit", nullable: true),
                    ConsentUseImatinibNilotinib = table.Column<bool>(type: "bit", nullable: true),
                    ResultStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnershipLevelStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Exam_BKP_19_04_22Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Exam_BKP_19_04_22Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "exam_BKP_updt_nivel_serico",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RealizationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    NeedCaptation = table.Column<bool>(type: "bit", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    VoucherByEmail = table.Column<bool>(type: "bit", nullable: true),
                    ReportSent = table.Column<bool>(type: "bit", nullable: true),
                    ExpectedDateToSend = table.Column<DateTime>(type: "datetime", nullable: true),
                    ETicket = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DueETicket = table.Column<DateTime>(type: "datetime", nullable: true),
                    WithdrawalPreferenceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorHasFilterPaper = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermReceived = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermValidated = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentTermValidatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentTermValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HaveDateReturnDoctor = table.Column<bool>(type: "bit", nullable: true),
                    DateReturnDoctor = table.Column<DateTime>(type: "datetime", nullable: true),
                    NumberofTubes = table.Column<int>(type: "int", nullable: false),
                    DateIssueReport = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateOfApproval = table.Column<DateTime>(type: "datetime", nullable: true),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsSchedule_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    WithdrawalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReschedulingReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherReceived = table.Column<bool>(type: "bit", nullable: true),
                    VoucherValidated = table.Column<bool>(type: "bit", nullable: true),
                    VoucherValidatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    VoucherValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsScheduleItemId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HasDiagnosis = table.Column<bool>(type: "bit", nullable: true),
                    Distance = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    MedicationUseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentEligibilityCriteria = table.Column<bool>(type: "bit", nullable: true),
                    ConsentResponsibility = table.Column<bool>(type: "bit", nullable: true),
                    ConsentSample = table.Column<bool>(type: "bit", nullable: true),
                    ConsentCloseDiagnostic = table.Column<bool>(type: "bit", nullable: true),
                    ConsentUseImatinibNilotinib = table.Column<bool>(type: "bit", nullable: true),
                    ResultStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnershipLevelStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "exam_BKP_updt_nivel_sericoAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_exam_BKP_updt_nivel_sericoAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Exam_BKP3011",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RealizationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    NeedCaptation = table.Column<bool>(type: "bit", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    VoucherByEmail = table.Column<bool>(type: "bit", nullable: true),
                    ReportSent = table.Column<bool>(type: "bit", nullable: true),
                    ExpectedDateToSend = table.Column<DateTime>(type: "datetime", nullable: true),
                    ETicket = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DueETicket = table.Column<DateTime>(type: "datetime", nullable: true),
                    WithdrawalPreferenceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorHasFilterPaper = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermReceived = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermValidated = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentTermValidatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentTermValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HaveDateReturnDoctor = table.Column<bool>(type: "bit", nullable: true),
                    DateReturnDoctor = table.Column<DateTime>(type: "datetime", nullable: true),
                    NumberofTubes = table.Column<int>(type: "int", nullable: false),
                    DateIssueReport = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateOfApproval = table.Column<DateTime>(type: "datetime", nullable: true),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsSchedule_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    WithdrawalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReschedulingReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherReceived = table.Column<bool>(type: "bit", nullable: true),
                    VoucherValidated = table.Column<bool>(type: "bit", nullable: true),
                    VoucherValidatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    VoucherValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsScheduleItemId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HasDiagnosis = table.Column<bool>(type: "bit", nullable: true),
                    Distance = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    MedicationUseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentEligibilityCriteria = table.Column<bool>(type: "bit", nullable: true),
                    ConsentResponsibility = table.Column<bool>(type: "bit", nullable: true),
                    ConsentSample = table.Column<bool>(type: "bit", nullable: true),
                    ConsentCloseDiagnostic = table.Column<bool>(type: "bit", nullable: true),
                    ConsentUseImatinibNilotinib = table.Column<bool>(type: "bit", nullable: true),
                    ResultStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnershipLevelStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Exam_BKP3011Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Exam_BKP3011Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionAccountExamTypeByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamDefinitionAccountExamTypeByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamDefinitionAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionExamAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamDefinitionExamAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionHealthProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamDefinitionHealthProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionSettingsByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamDefinitionSettingsByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionVoucherConfigurationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamDefinitionVoucherConfigurationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamStatusHistory",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Examid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OldExamStatusId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    NewExamStatusId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ChangeDate = table.Column<DateTime>(type: "datetime", nullable: false, defaultValueSql: "(getdate())"),
                    Command = table.Column<string>(type: "nchar(6)", fixedLength: true, maxLength: 6, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK__ExamStat__3214EC0794EBDA8A", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamStatusHistoryAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamStatusHistoryAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Feriado",
                columns: table => new
                {
                    Nr_Ano = table.Column<short>(type: "smallint", nullable: false),
                    Nr_Mes = table.Column<short>(type: "smallint", nullable: false),
                    Nr_Dia = table.Column<short>(type: "smallint", nullable: false),
                    Sg_UF = table.Column<string>(type: "char(2)", unicode: false, fixedLength: true, maxLength: 2, nullable: false),
                    Tp_Feriado = table.Column<string>(type: "char(1)", unicode: false, fixedLength: true, maxLength: 1, nullable: false),
                    Ds_Feriado = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("Pk_Feriado", x => new { x.Nr_Ano, x.Nr_Mes, x.Nr_Dia, x.Sg_UF });
                });

            migrationBuilder.CreateTable(
                name: "FeriadoAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FeriadoAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalAccount",
                columns: table => new
                {
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProfessionalAccount", x => new { x.AccountId, x.HealthProfessionalId });
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalAccountAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProfessionalAccountAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProfessionalAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProfessionalByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalHealthProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProfessionalHealthProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalMedicalSpecialtyAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProfessionalMedicalSpecialtyAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramAccount_BKP_19_04_22",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramAccount_BKP_19_04_22Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramAccount_BKP_19_04_22Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramAccountAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramAccountAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramDiseaseAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramDiseaseAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramDiseaseExamAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramDiseaseExamAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramExamByEntityAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramExamByEntityAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramMedicamentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramMedicamentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramServiceTypeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramServiceTypeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramTemplateSettingAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HealthProgramTemplateSettingAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IdentityCode",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Prefix = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SequentialValue = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Sufix = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IdentityCode", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IdentityCodeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IdentityCodeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IncidentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncidentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IncidentItemAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncidentItemAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IncidentProductAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncidentProductAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IncidentSubjectAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncidentSubjectAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IncidentTypeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncidentTypeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IncidentTypeDetailAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncidentTypeDetailAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IncidentTypeDetailProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncidentTypeDetailProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "InformationCollectAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InformationCollectAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "InformationVisitAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InformationVisitAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Infusion_BKP_19_04_22",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    InfusionPlaceTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PlaceId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    InfusionPlaceProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduledDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    InfusionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Observations = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ActualDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Dosage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ApplicationTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccountableHealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    InfusionWeekStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ApprovalRequired = table.Column<bool>(type: "bit", nullable: true),
                    InfusionApproved = table.Column<bool>(type: "bit", nullable: true),
                    ExceptionReason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreviousInfusionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RemipackKitQuantity = table.Column<int>(type: "int", nullable: true),
                    Lot = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentSubmissionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionSent = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionValidated = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionValidationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreviewDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleAmountStored = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleAmountExpected = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonInfusionNotDoneStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    InfusionDispatchNumberStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    UseNumber = table.Column<int>(type: "int", nullable: true),
                    Days = table.Column<int>(type: "int", nullable: true),
                    Month = table.Column<int>(type: "int", nullable: true),
                    LogisticsId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PatientSalesOrderId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Week = table.Column<int>(type: "int", nullable: true),
                    SupportFieldStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Infusion_BKP_19_04_22Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Infusion_BKP_19_04_22Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "InfusionAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InfusionAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "infusoes",
                columns: table => new
                {
                    ORDEM = table.Column<long>(type: "bigint", nullable: true),
                    ORDEM_SEQUENCIAL = table.Column<long>(type: "bigint", nullable: true),
                    TIPO_INFUSAO_ANTERIOR = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL_ANTERIOR = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TREATMENTID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TIPO_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    QTD_AMPOLAS = table.Column<decimal>(type: "money", nullable: true),
                    QTD_AMPOLAS_IDEAIS = table.Column<decimal>(type: "money", nullable: true),
                    TIPO_ACESSO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSAO_ID_APROVADA_CLINICAS = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    STATUS_INFUSAO_CLINICAS = table.Column<int>(type: "int", nullable: true),
                    STATUS_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DATAREFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    DATA_REALIZADA = table.Column<DateTime>(type: "datetime", nullable: true),
                    DATA = table.Column<DateTime>(type: "datetime", nullable: true),
                    DATA_INATIVACAO = table.Column<string>(type: "varchar(19)", unicode: false, maxLength: 19, nullable: false),
                    DOENCA = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "infusoesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_infusoesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IntegrationLog",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Send = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Return = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Attempt = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IntegrationLog", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IntegrationLogAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IntegrationLogAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "JsRulesByEntity_BKP_20201015",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Rules = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "JsRulesByEntity_BKP_20201015Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JsRulesByEntity_BKP_20201015Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "JsRulesByEntityAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JsRulesByEntityAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LanguageAttribute",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LangId = table.Column<int>(type: "int", nullable: false),
                    Translate = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Label = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ToolTip = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ErrorMessageForRequeried = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ErrorMessageForMask = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ErrorMessageForCustomValidation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ErrorMessageForRegexValidation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ErrorMessageDefault = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LanguageAttribute", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LanguageAttributeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LanguageAttributeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LanguageDefault",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SequencialId = table.Column<int>(type: "int", nullable: false),
                    Portuguese = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    English = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LanguageDefault", x => new { x.Id, x.SequencialId });
                });

            migrationBuilder.CreateTable(
                name: "LanguageDefaultAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LanguageDefaultAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LanguageEntities",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LangId = table.Column<int>(type: "int", nullable: false),
                    Translate = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LanguageEntities", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LanguageEntitiesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LanguageEntitiesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ListaDeTabelas",
                columns: table => new
                {
                    Linha = table.Column<long>(type: "bigint", nullable: true),
                    Tabela = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    Coluna = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "ListaDeTabelasAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ListaDeTabelasAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "log_atualizacao_nono_digito",
                columns: table => new
                {
                    entidade = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    codigo = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    campo = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    valoranterior = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    valornovo = table.Column<string>(type: "varchar(60)", unicode: false, maxLength: 60, nullable: false),
                    data = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "log_atualizacao_nono_digitoAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_log_atualizacao_nono_digitoAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogisticsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsSchedule_BKP_01072022",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    LogisticsScheduleTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduledStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ScheduledEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogisticsPartnerCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPFDoctor = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CTE = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SendRequestKit = table.Column<bool>(type: "bit", nullable: true),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RequestDoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LogisticsPartnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ClientId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Action = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ConfirmWithdrawal = table.Column<bool>(type: "bit", nullable: true),
                    DeliveryLaboratoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ResponsibleForReceiving = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleForCollecting = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AmountUsed = table.Column<int>(type: "int", nullable: true),
                    AmountCanceled = table.Column<int>(type: "int", nullable: true),
                    CurrentBalance = table.Column<int>(type: "int", nullable: true),
                    DateForReceiving = table.Column<DateTime>(type: "datetime", nullable: true),
                    IncidentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DateForCollecting = table.Column<DateTime>(type: "datetime", nullable: true),
                    KitTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OtherPlace = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LocalDeliveryWithdrawStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OtherLocalDeliveryWithdraw = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ApprovedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RequestBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Orientation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DeliveryPeriod = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleTelephoneWithdrawal = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WithdrawalTime = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Section = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Exam_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Temperature = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IntegrationStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    isLegacy = table.Column<bool>(type: "bit", nullable: true),
                    LegacyId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReportDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConfirmWithdrawalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateReceivingBlock = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReportReleaseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RetesteReleased = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermRecivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StorageTubeTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ShortSampleSupplyForTwoExams = table.Column<bool>(type: "bit", nullable: true),
                    ChosenExamTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FGFRThroughNGS = table.Column<bool>(type: "bit", nullable: true),
                    AuthorizedByClient = table.Column<bool>(type: "bit", nullable: true),
                    EnoughSampleSupplyForOneExam = table.Column<bool>(type: "bit", nullable: true),
                    PendingCollectionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingCollection = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RecollectionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryConfirmationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryConfirmationPendingDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingDelivery = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CancelDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingAnalysis = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResultDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Result = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SchedulingPendencyDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsSchedulingPendency = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreferredTimeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccountSettingsByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ExpectedDeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PendingAnalysisDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReturnDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    MainContact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContactTelephoneExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RecollectDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "LogisticsSchedule_BKP_01072022_1106",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    LogisticsScheduleTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduledStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ScheduledEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogisticsPartnerCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPFDoctor = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CTE = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SendRequestKit = table.Column<bool>(type: "bit", nullable: true),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RequestDoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LogisticsPartnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ClientId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Action = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ConfirmWithdrawal = table.Column<bool>(type: "bit", nullable: true),
                    DeliveryLaboratoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ResponsibleForReceiving = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleForCollecting = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AmountUsed = table.Column<int>(type: "int", nullable: true),
                    AmountCanceled = table.Column<int>(type: "int", nullable: true),
                    CurrentBalance = table.Column<int>(type: "int", nullable: true),
                    DateForReceiving = table.Column<DateTime>(type: "datetime", nullable: true),
                    IncidentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DateForCollecting = table.Column<DateTime>(type: "datetime", nullable: true),
                    KitTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OtherPlace = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LocalDeliveryWithdrawStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OtherLocalDeliveryWithdraw = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ApprovedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RequestBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Orientation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DeliveryPeriod = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleTelephoneWithdrawal = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WithdrawalTime = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Section = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Exam_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Temperature = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IntegrationStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    isLegacy = table.Column<bool>(type: "bit", nullable: true),
                    LegacyId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReportDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConfirmWithdrawalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateReceivingBlock = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReportReleaseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RetesteReleased = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermRecivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StorageTubeTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ShortSampleSupplyForTwoExams = table.Column<bool>(type: "bit", nullable: true),
                    ChosenExamTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FGFRThroughNGS = table.Column<bool>(type: "bit", nullable: true),
                    AuthorizedByClient = table.Column<bool>(type: "bit", nullable: true),
                    EnoughSampleSupplyForOneExam = table.Column<bool>(type: "bit", nullable: true),
                    PendingCollectionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingCollection = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RecollectionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryConfirmationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryConfirmationPendingDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingDelivery = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CancelDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingAnalysis = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResultDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Result = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SchedulingPendencyDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsSchedulingPendency = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreferredTimeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccountSettingsByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ExpectedDeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PendingAnalysisDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReturnDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    MainContact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContactTelephoneExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RecollectDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "LogisticsSchedule_BKP_01072022_1106Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogisticsSchedule_BKP_01072022_1106Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsSchedule_BKP_01072022Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogisticsSchedule_BKP_01072022Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsScheduleAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogisticsScheduleAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsScheduleItemAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogisticsScheduleItemAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsStuffAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogisticsStuffAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsStuffKitsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LogisticsStuffKitsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicalSpecialtyAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicalSpecialtyAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentAccessAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicamentAccessAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicamentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentCompetitorAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicamentCompetitorAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentCompetitorDiseaseAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicamentCompetitorDiseaseAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentCompetitorHealthProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicamentCompetitorHealthProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentConcomitantAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicamentConcomitantAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentDiseaseAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicamentDiseaseAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentStrengthMedicamentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicamentStrengthMedicamentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicationNonadherenceReasonAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicationNonadherenceReasonAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MedicationNonadherenceReasonHealthProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MedicationNonadherenceReasonHealthProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MenuMetadata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Menu = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    IconMenu = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MenuDisplayOrder = table.Column<int>(type: "int", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ParentMenuMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MenuMetadata", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.MenuMetadata_dbo.MenuMetadata_ParentMenuMetadataId_Id",
                        column: x => x.ParentMenuMetadataId,
                        principalTable: "MenuMetadata",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OccupationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OccupationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Pacientes",
                columns: table => new
                {
                    Programa = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    PacienteId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CodigoPaciente = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPFPaciente = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NomePaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Fase = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Patologia = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FaseDaPatologia = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TipoAnalise = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DataAniversario = table.Column<DateTime>(type: "date", nullable: true),
                    Genero = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    NecessitaDevolucao = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    InstituicaoPacienteId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    healthprogramid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TelefonePaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailPaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CidadedoPaciente = table.Column<string>(name: "Cidade do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UFdoPaciente = table.Column<string>(name: "UF do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AlteraçãoManual = table.Column<bool>(name: "Alteração Manual", type: "bit", nullable: true),
                    PrecisadeLogística = table.Column<string>(name: "Precisa de Logística", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    TipoAnaliseMédico = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Criadoem = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PacientesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PacientesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PacientesPesquisa",
                columns: table => new
                {
                    Programa = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    OrigemPaciente = table.Column<string>(type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CodigoPaciente = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PacientesPesquisaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PacientesPesquisaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Painel MedicoMelanoma",
                columns: table => new
                {
                    Business_Line = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Business_Unit = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Estrutura = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Gestor = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Território = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Território_Sugerido = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Nome_Completo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ID_da_conta = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ID = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                    Tipo_de_registro_da_conta = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Tipo_de_conta = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CRM = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Nome_da_conta = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Razão_social = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Conselho = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Segmentação = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Objetivo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Especialidade_Principal = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Especialidade_promocional = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Categoria_Especial = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Endereço = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Complemento = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Cidade = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CEP = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telefone_primário = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Outro_Telefone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Celular = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Aceite_RTE_Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Produto_RTE_Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Aceite_MKT_Email = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Email_secundário = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Aceite_RTE_Email_Secundário = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Produto_RTE_Email_Secundário = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Aceite_MKT_Email_Secundario = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Consentimento_de_Amostra = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Ciclo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Matrícula = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LOGIN = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Email_Colaborador = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    TSF_ID_ONCORE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Consentimento_Perfil = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    column45 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Painel MedicoMelanomaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Painel MedicoMelanomaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Painel MedicoTASIGNA",
                columns: table => new
                {
                    Time = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    E_mail = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telefone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Cidade = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    GR = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CT = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Região = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    GER_E_mail = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    GER_Telefone = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    GER_Cidade = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    GER_UF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Painel MedicoTASIGNAAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Painel MedicoTASIGNAAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PainelMedicoEntyvio$",
                columns: table => new
                {
                    GERENTE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    SETOR = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    REPRESENTANTE = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    CRM = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    MEDICO = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    STATUS = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "PainelMedicoEntyvio$Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PainelMedicoEntyvio$Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PatientAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PatientSalesOrderAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientSalesOrderAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PharmacovigilanceAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PharmacovigilanceAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PhaseAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhaseAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PhoneCallAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhoneCallAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PosologeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosologeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PosologeMedicamentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosologeMedicamentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PostalCodeCityAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PostalCodeCityAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PostalCodesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PostalCodesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PostalCodeStateAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PostalCodeStateAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProcessLog",
                columns: table => new
                {
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityCode = table.Column<int>(type: "int", nullable: false),
                    EntityName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    isScreenLocker = table.Column<bool>(type: "bit", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndProcessOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ErrorMessage = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false, collation: "Latin1_General_CI_AI"),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ProcessLog", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "ProcessLogAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcessLogAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "profarmaacesso",
                columns: table => new
                {
                    Source = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    FORMULARIOID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TipodeAcesso = table.Column<string>(name: "Tipo de Acesso", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MotivodaDificuldadedeAcesso = table.Column<string>(name: "Motivo da Dificuldade de Acesso", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MotivoNãoAcesso = table.Column<string>(name: "Motivo Não Acesso", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    VIA = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TypeofCoverage = table.Column<string>(name: "Type of Coverage", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FormadeAcesso = table.Column<string>(name: "Forma de Acesso", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    idLocaldeAcesso = table.Column<string>(name: "id - Local de Acesso", type: "varchar(40)", unicode: false, maxLength: 40, nullable: false),
                    LocaldeAcesso = table.Column<string>(name: "Local de Acesso", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusdoAcesso = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SubStatus = table.Column<string>(name: "Sub Status", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DatadatentativadoAcessoSistema = table.Column<string>(name: "Data da tentativa do Acesso Sistema", type: "varchar(23)", unicode: false, maxLength: 23, nullable: false),
                    DatadeAcesso = table.Column<string>(name: "Data de Acesso", type: "varchar(23)", unicode: false, maxLength: 23, nullable: false),
                    DiasAcesso = table.Column<int>(name: "Dias Acesso", type: "int", nullable: true),
                    Programa = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Cep = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Codpaciente = table.Column<string>(name: "Cod paciente", type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    FasedoPaciente = table.Column<string>(name: "Fase do Paciente", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Situação = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Acesso = table.Column<string>(type: "varchar(31)", unicode: false, maxLength: 31, nullable: false),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "profarmaacessoAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_profarmaacessoAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Profile",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Profile", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProfileAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProfileAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QuestionAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuestionAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QuestionOptionsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuestionOptionsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RegardingEntityAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RegardingEntityAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RegionalManagerAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RegionalManagerAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "relatorio_pacientes_ativos_em_frente",
                columns: table => new
                {
                    Codigo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    NomedoPaciente = table.Column<string>(name: "Nome do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Peso = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    FaixaEtaria = table.Column<string>(name: "Faixa Etaria", type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Idade = table.Column<decimal>(type: "numeric(18,0)", nullable: true),
                    TratamentoPrograma = table.Column<DateTime>(name: "Tratamento Programa", type: "datetime", nullable: true),
                    Modalidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Hemcasa = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Local = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    GraudeHemofília = table.Column<string>(name: "Grau de Hemofília", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    infusoes = table.Column<int>(type: "int", nullable: true),
                    visita = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "relatorio_pacientes_ativos_em_frente_Total_infusoes",
                columns: table => new
                {
                    Referencia = table.Column<DateTime>(type: "datetime", nullable: true),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    TotaldeInfusões = table.Column<int>(name: "Total de Infusões", type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "relatorio_pacientes_ativos_em_frente_Total_infusoesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_relatorio_pacientes_ativos_em_frente_Total_infusoesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "relatorio_pacientes_ativos_em_frente_Total_Visitas",
                columns: table => new
                {
                    Referencia = table.Column<DateTime>(type: "datetime", nullable: true),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    TotaldeVisita = table.Column<int>(name: "Total de Visita", type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "relatorio_pacientes_ativos_em_frente_Total_VisitasAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_relatorio_pacientes_ativos_em_frente_Total_VisitasAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "relatorio_pacientes_ativos_em_frenteAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_relatorio_pacientes_ativos_em_frenteAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Representative_bkp15072021",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Representative_bkp15072021Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Representative_bkp15072021Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RepresentativeAccount",
                columns: table => new
                {
                    RepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.RepresentativeAccount", x => new { x.RepresentativeId, x.AccountId });
                });

            migrationBuilder.CreateTable(
                name: "RepresentativeAccountAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepresentativeAccountAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RepresentativeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepresentativeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RepresentativeRegionAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepresentativeRegionAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ResourceWorkSettingsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ResourceWorkSettingsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RulesAttributeMetadata_bkp_30092021",
                columns: table => new
                {
                    RulesAttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AttributeType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    IsReadOnly = table.Column<bool>(type: "bit", nullable: true),
                    IsOnlyNumber = table.Column<bool>(type: "bit", nullable: true),
                    IsOnlyNumberDecimal = table.Column<bool>(type: "bit", nullable: true),
                    IsOnlyString = table.Column<bool>(type: "bit", nullable: true),
                    IsRequired = table.Column<bool>(type: "bit", nullable: false),
                    IsVisible = table.Column<bool>(type: "bit", nullable: false),
                    IsAllowNull = table.Column<bool>(type: "bit", nullable: false),
                    MaskValidation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mask = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isPickList = table.Column<bool>(type: "bit", nullable: true),
                    HidePickListOptions = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomValidation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Regex = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false, collation: "Latin1_General_CI_AI"),
                    SectionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SectionOrder = table.Column<int>(type: "int", nullable: true),
                    DefaultCssClass = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExtensionCssClassExtension = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ScreenAttribuiteSize = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    SectionMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsVisibleInFormAdd = table.Column<bool>(type: "bit", nullable: true),
                    IsVisibleInFormEdit = table.Column<bool>(type: "bit", nullable: true),
                    PremiseFilter = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ScreenFilter = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IsDisabledByHealthProgram = table.Column<bool>(type: "bit", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "RulesAttributeMetadata_bkp_30092021Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RulesAttributeMetadata_bkp_30092021Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SchedulingDates",
                columns: table => new
                {
                    Ordem = table.Column<long>(type: "bigint", nullable: true),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Data = table.Column<DateTime>(type: "date", nullable: true),
                    StatusBefore = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StatusAfter = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "SchedulingDatesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SchedulingDatesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SchedulingHistoryAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SchedulingHistoryAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SectionExcludedByPhaseAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SectionExcludedByPhaseAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SectionMetadata_bkp_24092021",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    IsAdvanced = table.Column<bool>(type: "bit", nullable: true),
                    IsSystemSection = table.Column<bool>(type: "bit", nullable: true),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SectionIdHtm = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Tooltip = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Help = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsVisibleInFormAdd = table.Column<bool>(type: "bit", nullable: true),
                    IsVisibleInFormEdit = table.Column<bool>(type: "bit", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HasSurvey = table.Column<bool>(type: "bit", nullable: false),
                    HasMap = table.Column<int>(type: "int", nullable: true),
                    HasCalendar = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "SectionMetadata_bkp_24092021Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SectionMetadata_bkp_24092021Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ServiceTypeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ServiceTypeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SMSAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SMSAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "StepLogsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StepLogsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "StrengthMedicamentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StrengthMedicamentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "StringMapAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StringMapAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SubjectAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SubjectAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SurveyAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SurveyQuestionListAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyQuestionListAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SurveyResponseAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyResponseAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SurveyResponseLineAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SurveyResponseLineAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "T_LOG_COLLATE",
                columns: table => new
                {
                    TABELA = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    COLUNA = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    TIPO = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    TAMANHO = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    QUERY = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    STATUS = table.Column<bool>(type: "bit", nullable: true),
                    OBS = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "T_LOG_COLLATEAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_T_LOG_COLLATEAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TaskAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TB_RELATORIO_JANSSEN_SUSTENNA",
                columns: table => new
                {
                    Código = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    OrigemCadastro = table.Column<string>(name: "Origem Cadastro", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Patologia = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    MedicamentoAtual = table.Column<string>(name: "Medicamento Atual", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    MedicamentoAnterior = table.Column<string>(name: "Medicamento Anterior?", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    MedicamentoAnterior0 = table.Column<string>(name: "Medicamento Anterior", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    OrigemTratamento = table.Column<string>(name: "Origem Tratamento", type: "varchar(6)", unicode: false, maxLength: 6, nullable: false),
                    Informaçõesprimeirolaudo = table.Column<string>(name: "Informações primeiro laudo", type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    Novolaudoenviadoestácorreto = table.Column<string>(name: "Novo laudo enviado está correto?", type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    Statusdopaciente = table.Column<string>(name: "Status do paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Fase = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DtCadastro = table.Column<string>(name: "Dt. Cadastro", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    MêsCadastro = table.Column<string>(name: "Mês (Cadastro)", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    AnoCadastro = table.Column<string>(name: "Ano (Cadastro)", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    FormadeAquisição = table.Column<string>(name: "Forma de Aquisição", type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    Possuiplanodesaúde = table.Column<string>(name: "Possui plano de saúde", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    Planodesaúde = table.Column<string>(name: "Plano de saúde", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    PlanodeSaúdedetalhe = table.Column<string>(name: "Plano de Saúde detalhe", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Tipodeacesso = table.Column<string>(name: "Tipo de acesso", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusAcesso = table.Column<string>(name: "Status Acesso", type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    SubstatusAcesso = table.Column<string>(name: "Substatus Acesso", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DtInícioTentativa = table.Column<string>(name: "Dt. Início Tentativa", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DtFinalTentativa = table.Column<string>(name: "Dt. Final Tentativa", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Mesacesso = table.Column<string>(name: "Mes acesso", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Anoacesso = table.Column<string>(name: "Ano acesso", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    TempodeAcessoDias = table.Column<int>(name: "Tempo de Acesso (Dias)", type: "int", nullable: false),
                    TempodeacessodiasResumo = table.Column<string>(name: "Tempo de acesso (dias) - Resumo", type: "varchar(8)", unicode: false, maxLength: 8, nullable: false),
                    CidadePaciente = table.Column<string>(name: "Cidade - Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UFPaciente = table.Column<string>(name: "UF Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MédicoPrescritor = table.Column<string>(name: "Médico Prescritor", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CRMmédicoprescritor = table.Column<string>(name: "CRM médico prescritor", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CRMUFmédicoprescritor = table.Column<string>(name: "CRM UF médico prescritor", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MédicoAcompanhamento = table.Column<string>(name: "Médico Acompanhamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CRMmédicoacompanhamento = table.Column<string>(name: "CRM médico acompanhamento", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CRMUFmédicoacompanhamento = table.Column<string>(name: "CRM UF médico acompanhamento", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidademédicoacompanhamento = table.Column<string>(name: "Cidade médico acompanhamento", type: "nvarchar(max)", nullable: false),
                    DtInícioTratamento = table.Column<string>(name: "Dt. Início Tratamento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Tempodetratamentoemmesespersistência = table.Column<int>(name: "Tempo de tratamento em meses (persistência)", type: "int", nullable: false),
                    TempodetratamentoemmesespersistênciaResumo = table.Column<string>(name: "Tempo de tratamento em meses (persistência) - Resumo", type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    DtInativação = table.Column<string>(name: "Dt. Inativação", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    MotivodeInativação = table.Column<string>(name: "Motivo de Inativação", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mêsinativação = table.Column<string>(name: "Mês (inativação)", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Anoinativação = table.Column<int>(name: "Ano (inativação)", type: "int", nullable: false),
                    TempodeProgramaemmeses = table.Column<int>(name: "Tempo de Programa (em meses)", type: "int", nullable: true),
                    TempodeProgramaemmesesResumo = table.Column<string>(name: "Tempo de Programa (em meses) - Resumo", type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    PacientesquesolicitaramoBeneficiodeIT = table.Column<string>(name: "Pacientes que solicitaram o Beneficio de IT", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    PacientesquereceberamoBenefíciodeIT = table.Column<string>(name: "Pacientes que receberam o Benefício de IT", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DatadoúltimoenviodoBenefíciodeIT = table.Column<string>(name: "Data do último envio do Benefício de IT", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    QtddeenviosbenefíciodeIT = table.Column<int>(name: "Qtd de envios (benefício de  IT)", type: "int", nullable: false),
                    DiadoTratamentodoBenefíciodeIT = table.Column<int>(name: "Dia do Tratamento do Benefício de IT", type: "int", nullable: true),
                    DosedoBenefíciodeIT = table.Column<string>(name: "Dose do Benefício de IT", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    MigroudoBeneficiodeIT = table.Column<string>(name: "Migrou do Beneficio de IT ?", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    Dtdamigração = table.Column<string>(name: "Dt da migração", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    LocalquerecebeuoBenefíciodeIT = table.Column<string>(name: "Local que recebeu o Benefício de IT", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DtÚltimoContato = table.Column<string>(name: "Dt. Último Contato", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DtÚltimoContatoSucesso = table.Column<string>(name: "Dt. Último Contato Sucesso", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    QTDCONTATOSSEMSUCESSO = table.Column<int>(name: "QTD CONTATOS SEM SUCESSO", type: "int", nullable: true),
                    ExcedeuLimitedoBenefício = table.Column<string>(name: "Excedeu Limite do Benefício", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    MêsCadastronum = table.Column<int>(name: "Mês (Cadastro) num", type: "int", nullable: true),
                    MesacessoNum = table.Column<string>(name: "Mes acesso Num", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    MêsinativaçãoNum = table.Column<int>(name: "Mês (inativação) Num", type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TB_RELATORIO_JANSSEN_SUSTENNAAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TB_RELATORIO_JANSSEN_SUSTENNAAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_AcompanhamentoInfusao_Shire",
                columns: table => new
                {
                    Realizado = table.Column<int>(type: "int", nullable: false),
                    NaoRealizado = table.Column<int>(type: "int", nullable: false),
                    Aberto = table.Column<int>(type: "int", nullable: false),
                    Iniciais = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CódigodoTratamento = table.Column<Guid>(name: "Código do Tratamento", type: "uniqueidentifier", nullable: false),
                    importcode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Código = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DataRealizada = table.Column<string>(name: "Data Realizada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataAgendada = table.Column<string>(name: "Data Agendada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataPrevista = table.Column<DateTime>(name: "Data Prevista", type: "datetime", nullable: true),
                    DataReferencia = table.Column<DateTime>(name: "Data Referencia", type: "datetime", nullable: true),
                    Paciente = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CódigoPaciente = table.Column<Guid>(name: "Código Paciente", type: "uniqueidentifier", nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    OptionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(name: " Doença", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    MotivodaFalta = table.Column<string>(name: "Motivo da Falta", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TipodeAcesso = table.Column<string>(name: "Tipo de Acesso", type: "varchar(8)", unicode: false, maxLength: 8, nullable: false),
                    QtdeAmpolasReais = table.Column<decimal>(name: "Qtde Ampolas Reais", type: "decimal(18,2)", nullable: true),
                    QtdeAmpolasIdeais = table.Column<decimal>(name: "Qtde Ampolas Ideais", type: "decimal(18,2)", nullable: true),
                    Fasedotratamento = table.Column<string>(name: "Fase do tratamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Situação = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocaldaInfusão = table.Column<string>(name: "Local da Infusão", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StatusdaInfusão = table.Column<string>(name: "Status da Infusão", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Local = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataInativação = table.Column<string>(name: "Data Inativação", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    MotivodoAfastamento = table.Column<string>(name: "Motivo do Afastamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DatadeIníciodoTratamento = table.Column<string>(name: "Data de Início do Tratamento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataPrimeiroAtendimento = table.Column<string>(name: "Data Primeiro Atendimento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataReferência = table.Column<string>(name: "Data Referência", type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    Cidadedopaciente = table.Column<string>(name: "Cidade do paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EstadodoPaciente = table.Column<string>(name: "Estado do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataPrimeiraInfusão = table.Column<string>(name: "Data Primeira Infusão", type: "nvarchar(4000)", maxLength: 4000, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_AcompanhamentoInfusao_ShireAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_AcompanhamentoInfusao_ShireAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TBL_CARE",
                columns: table => new
                {
                    codigodopaciente = table.Column<string>(name: "codigo do paciente", type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF_CARE = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    voucher_care = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    dataagendadacare = table.Column<DateTime>(name: "data agendada care", type: "datetime", nullable: true),
                    data_realizado_care = table.Column<DateTime>(type: "datetime", nullable: true),
                    tipo_do_exame_care = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    statusdoexamecare = table.Column<string>(name: "status do exame care", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCALEXAMECARE = table.Column<string>(name: "LOCAL EXAME CARE", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    diagnosticid = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    exameid = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TBL_CAREAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TBL_CAREAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TBL_CLINICAS",
                columns: table => new
                {
                    NOME_PACIENTE = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    CPF_CLINICA = table.Column<string>(type: "varchar(8000)", unicode: false, maxLength: 8000, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    voucher_clinica = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    data_realizada_clinica = table.Column<DateTime>(type: "datetime", nullable: true),
                    statusvoucherclinica = table.Column<string>(name: "status voucher clinica", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS"),
                    LOCALEXAMECLINICA = table.Column<string>(name: "LOCAL EXAME CLINICA", type: "varchar(150)", unicode: false, maxLength: 150, nullable: false, collation: "SQL_Latin1_General_CP1_CI_AS")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TBL_CLINICASAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TBL_CLINICASAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_correcao_infusoes",
                columns: table => new
                {
                    Ordem = table.Column<long>(type: "bigint", nullable: true),
                    id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    PreviewDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActualDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    OptionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_correcao_infusoesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_correcao_infusoesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TBL_DDDS_NONO_DIGITO",
                columns: table => new
                {
                    DDD = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TBL_DDDS_NONO_DIGITOAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TBL_DDDS_NONO_DIGITOAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_deletar_infusao",
                columns: table => new
                {
                    Ordem = table.Column<long>(type: "bigint", nullable: true),
                    id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_deletar_infusaoAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_deletar_infusaoAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_feriados_nacionais",
                columns: table => new
                {
                    data = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    descricao = table.Column<string>(type: "varchar(80)", unicode: false, maxLength: 80, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_feriados_nacionaisAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_feriados_nacionaisAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_final",
                columns: table => new
                {
                    Data = table.Column<string>(type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    QtdeAtivos = table.Column<int>(type: "int", nullable: true),
                    QtdeInativos = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_finalAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_finalAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_infusoes",
                columns: table => new
                {
                    LinhaAtual = table.Column<int>(type: "int", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Iniciaisdopaciente = table.Column<string>(name: "Iniciais do paciente", type: "nvarchar(6)", maxLength: 6, nullable: false),
                    Códigodopaciente = table.Column<string>(name: "Código do paciente", type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Fasedotratamento = table.Column<string>(name: "Fase do tratamento", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Datadaprimeirainfusão = table.Column<string>(name: "Data da primeira infusão", type: "nvarchar(10)", maxLength: 10, nullable: false),
                    Datarealizada = table.Column<DateTime>(name: "Data realizada", type: "datetime", nullable: true),
                    Dataprevista = table.Column<DateTime>(name: "Data prevista", type: "datetime", nullable: true),
                    DataReferencia = table.Column<DateTime>(type: "datetime", nullable: true),
                    Situação = table.Column<string>(type: "nvarchar(7)", maxLength: 7, nullable: false),
                    Doença = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Modalidadedefornecimento = table.Column<string>(name: "Modalidade de fornecimento", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Modalidadedainfusão = table.Column<string>(name: "Modalidade da infusão", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Statusdainfusão = table.Column<string>(name: "Status da infusão", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Cidadedopaciente = table.Column<string>(name: "Cidade do paciente", type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Estadodopaciente = table.Column<string>(name: "Estado do paciente", type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Localdainfusão = table.Column<string>(name: "Local da infusão", type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Motivodafalta = table.Column<string>(name: "Motivo da falta", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Medico = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    CRM = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UFCRM = table.Column<string>(type: "nvarchar(5)", maxLength: 5, nullable: false),
                    EmailMedico = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Representante = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Gerente = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Qtdeampolas = table.Column<decimal>(name: "Qtde ampolas", type: "decimal(18,2)", nullable: true),
                    Qtdeampolasideais = table.Column<decimal>(name: "Qtde ampolas ideais", type: "decimal(18,2)", nullable: true),
                    Nomedopaciente = table.Column<string>(name: "Nome do paciente", type: "nvarchar(400)", maxLength: 400, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_infusoes_2",
                columns: table => new
                {
                    Linha = table.Column<int>(type: "int", nullable: true),
                    LinhaAtual = table.Column<int>(type: "int", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Iniciaisdopaciente = table.Column<string>(name: "Iniciais do paciente", type: "nvarchar(6)", maxLength: 6, nullable: false),
                    Códigodopaciente = table.Column<string>(name: "Código do paciente", type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Fasedotratamento = table.Column<string>(name: "Fase do tratamento", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Datadaprimeirainfusão = table.Column<string>(name: "Data da primeira infusão", type: "nvarchar(10)", maxLength: 10, nullable: false),
                    Datarealizada = table.Column<DateTime>(name: "Data realizada", type: "datetime", nullable: true),
                    Dataprevista = table.Column<DateTime>(name: "Data prevista", type: "datetime", nullable: true),
                    DataReferencia = table.Column<DateTime>(type: "datetime", nullable: true),
                    Situação = table.Column<string>(type: "nvarchar(7)", maxLength: 7, nullable: false),
                    Doença = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Modalidadedefornecimento = table.Column<string>(name: "Modalidade de fornecimento", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Modalidadedainfusão = table.Column<string>(name: "Modalidade da infusão", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Statusdainfusão = table.Column<string>(name: "Status da infusão", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Cidadedopaciente = table.Column<string>(name: "Cidade do paciente", type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Estadodopaciente = table.Column<string>(name: "Estado do paciente", type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Localdainfusão = table.Column<string>(name: "Local da infusão", type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Motivodafalta = table.Column<string>(name: "Motivo da falta", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Medico = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    CRM = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UFCRM = table.Column<string>(type: "nvarchar(5)", maxLength: 5, nullable: false),
                    EmailMedico = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Representante = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Gerente = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Qtdeampolas = table.Column<decimal>(name: "Qtde ampolas", type: "decimal(18,2)", nullable: true),
                    Qtdeampolasideais = table.Column<decimal>(name: "Qtde ampolas ideais", type: "decimal(18,2)", nullable: true),
                    Nomedopaciente = table.Column<string>(name: "Nome do paciente", type: "nvarchar(400)", maxLength: 400, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_infusoes_2Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_infusoes_2Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_infusoes_previstas",
                columns: table => new
                {
                    Linha = table.Column<long>(type: "bigint", nullable: true),
                    LinhaAtual = table.Column<int>(type: "int", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Iniciaisdopaciente = table.Column<string>(name: "Iniciais do paciente", type: "nvarchar(6)", maxLength: 6, nullable: false),
                    Códigodopaciente = table.Column<string>(name: "Código do paciente", type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Fasedotratamento = table.Column<string>(name: "Fase do tratamento", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Datadaprimeirainfusão = table.Column<string>(name: "Data da primeira infusão", type: "nvarchar(10)", maxLength: 10, nullable: false),
                    Datarealizada = table.Column<DateTime>(name: "Data realizada", type: "datetime", nullable: true),
                    Dataprevista = table.Column<string>(name: "Data prevista", type: "nvarchar(19)", maxLength: 19, nullable: false),
                    DataReferencia = table.Column<DateTime>(type: "datetime", nullable: true),
                    Situação = table.Column<string>(type: "nvarchar(7)", maxLength: 7, nullable: false),
                    Doença = table.Column<string>(type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Modalidadedefornecimento = table.Column<string>(name: "Modalidade de fornecimento", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Modalidadedainfusão = table.Column<string>(name: "Modalidade da infusão", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Statusdainfusão = table.Column<string>(name: "Status da infusão", type: "varchar(6)", unicode: false, maxLength: 6, nullable: false),
                    Cidadedopaciente = table.Column<string>(name: "Cidade do paciente", type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Estadodopaciente = table.Column<string>(name: "Estado do paciente", type: "nvarchar(15)", maxLength: 15, nullable: false),
                    Localdainfusão = table.Column<string>(name: "Local da infusão", type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Motivodafalta = table.Column<string>(name: "Motivo da falta", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Medico = table.Column<string>(type: "nvarchar(60)", maxLength: 60, nullable: false),
                    CRM = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UFCRM = table.Column<string>(type: "nvarchar(5)", maxLength: 5, nullable: false),
                    EmailMedico = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Representante = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Gerente = table.Column<string>(type: "nvarchar(30)", maxLength: 30, nullable: false),
                    Qtdeampolas = table.Column<decimal>(name: "Qtde ampolas", type: "decimal(18,2)", nullable: true),
                    Qtdeampolasideais = table.Column<decimal>(name: "Qtde ampolas ideais", type: "decimal(18,2)", nullable: true),
                    Nomedopaciente = table.Column<string>(name: "Nome do paciente", type: "nvarchar(400)", maxLength: 400, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_infusoes_previstasAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_infusoes_previstasAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_infusoesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_infusoesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TBL_NOVARTIS_GERAL",
                columns: table => new
                {
                    Programa = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    PacienteId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CodigoPaciente = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPFPaciente = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NomePaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Fase = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Patologia = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FaseDaPatologia = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TipoAnalise = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DataAniversario = table.Column<DateTime>(type: "date", nullable: true),
                    Genero = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    NecessitaDevolucao = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    InstituicaoPacienteId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    healthprogramid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TelefonePaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailPaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CidadedoPaciente = table.Column<string>(name: "Cidade do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UFdoPaciente = table.Column<string>(name: "UF do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AlteraçãoManual = table.Column<bool>(name: "Alteração Manual", type: "bit", nullable: true),
                    PrecisadeLogística = table.Column<string>(name: "Precisa de Logística", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    TipoAnaliseMédico = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Criadoem = table.Column<DateTime>(type: "datetime", nullable: true),
                    Medico = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    CRM = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusdoMédico = table.Column<bool>(name: "Status do Médico", type: "bit", nullable: true),
                    UFCRM = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    especialidade = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false),
                    CodigoDoExame = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataSolicitacaoExame = table.Column<DateTime>(type: "date", nullable: true),
                    ExameSolicitado = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusExame = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    ExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Voucherid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Voucher = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ProgramaVoucher = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    VoucherCriadoEm = table.Column<DateTime>(type: "date", nullable: true),
                    VoucherUsadoEm = table.Column<DateTime>(type: "date", nullable: true),
                    StatusVoucher = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: false),
                    ConsultorVoucher = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    GerenteVoucher = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    InstituicaoPaciente = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CNPJInstituicaoPaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    UFInstituicaoPaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EnderecoInstituicaoPaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    NumeroInstituicaoPaciente = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DataAgendamentoLogistica = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentosPendentesPFS = table.Column<DateTime>(type: "date", nullable: true),
                    DocumentosPendentes = table.Column<DateTime>(type: "date", nullable: true),
                    DataSolicitacaoProtocolo = table.Column<DateTime>(type: "datetime", nullable: true),
                    DataRecolhimento = table.Column<string>(type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataTransporte = table.Column<DateTime>(type: "date", nullable: true),
                    DataPendenciaRecebimentoColeta = table.Column<DateTime>(type: "date", nullable: true),
                    PendenciaRecebimentoColeta = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DataAgendadoPosPendenciaRecebimentoColeta = table.Column<DateTime>(type: "date", nullable: true),
                    DataColetaEmAnalise = table.Column<string>(type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataLaudoAnexado = table.Column<string>(type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataDevolucaoLogistica = table.Column<DateTime>(type: "date", nullable: true),
                    DataConclusao = table.Column<DateTime>(type: "date", nullable: true),
                    Visao = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ParceiroLogístico = table.Column<string>(name: "Parceiro Logístico", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Motivo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TipodeColeta = table.Column<string>(name: "Tipo de Coleta", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Resultado = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResultadoCompleto = table.Column<string>(name: "Resultado Completo", type: "nvarchar(max)", nullable: false),
                    Multirao = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    CodigoMultirao = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataMultirao = table.Column<DateTime>(type: "date", nullable: true),
                    Laboratorio = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    UFLaboratorio = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MotivoCancelamentoVoucher = table.Column<string>(name: "Motivo Cancelamento Voucher", type: "nvarchar(max)", nullable: false),
                    DataCancelamentoVoucher = table.Column<DateTime>(name: "Data Cancelamento Voucher", type: "datetime", nullable: true),
                    CanceladoPor = table.Column<string>(name: "Cancelado Por", type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TBL_NOVARTIS_GERALAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TBL_NOVARTIS_GERALAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_relatorio_comparativo_patientmap_enzimais",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Programa = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Medico = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    crm = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Doenca = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Gerente = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    Representante = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    SituacaoTratamento = table.Column<string>(name: "Situacao Tratamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Fase = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusdoTratamento = table.Column<string>(name: "Status do Tratamento", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DetalhedostatusdoTratamento = table.Column<string>(name: "Detalhe do status do Tratamento", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataEntrada = table.Column<string>(name: "Data Entrada", type: "nvarchar(19)", maxLength: 19, nullable: false),
                    PatientId = table.Column<string>(type: "varchar(36)", unicode: false, maxLength: 36, nullable: false),
                    Sexo = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AceitaVisita = table.Column<string>(name: "Aceita Visita", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    PossuiPlanodeSaude = table.Column<string>(name: "Possui Plano de Saude", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    NomeOperadoradeSaude = table.Column<string>(name: "Nome Operadora de Saude", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    UltimocontatoComSucesso = table.Column<string>(name: "Ultimo contato Com Sucesso", type: "nvarchar(19)", maxLength: 19, nullable: false),
                    UltimocontatoSemSucesso = table.Column<string>(name: "Ultimo contato Sem Sucesso", type: "nvarchar(19)", maxLength: 19, nullable: false),
                    DataConclusaoCadastro = table.Column<string>(name: "Data Conclusao Cadastro", type: "nvarchar(10)", maxLength: 10, nullable: false),
                    DataProximaAcao = table.Column<string>(name: "Data Proxima Acao", type: "nvarchar(10)", maxLength: 10, nullable: false),
                    OrigemdoCadastro = table.Column<string>(name: "Origem do Cadastro", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataInativacao = table.Column<string>(name: "Data Inativacao", type: "nvarchar(10)", maxLength: 10, nullable: false),
                    MotivoInativacao = table.Column<string>(name: "Motivo Inativacao", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Região = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataNascimento = table.Column<string>(name: "Data Nascimento", type: "nvarchar(10)", maxLength: 10, nullable: false),
                    FaixaEtaria = table.Column<string>(name: "Faixa Etaria", type: "varchar(10)", unicode: false, maxLength: 10, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_relatorio_comparativo_patientmap_enzimaisAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_relatorio_comparativo_patientmap_enzimaisAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tbl_relatorio_entrenos_entyvio_geral_2",
                columns: table => new
                {
                    CódPaciente = table.Column<string>(name: "Cód. Paciente", type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CódTratamento = table.Column<string>(name: "Cód. Tratamento", type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DataCriação = table.Column<DateTime>(name: "Data Criação", type: "date", nullable: true),
                    DataNascimento = table.Column<DateTime>(name: "Data Nascimento", type: "date", nullable: true),
                    FaixaEtaria = table.Column<string>(name: "Faixa Etaria", type: "varchar(11)", unicode: false, maxLength: 11, nullable: false),
                    Idade = table.Column<decimal>(type: "numeric(18,0)", nullable: true),
                    AgingIdade = table.Column<string>(type: "varchar(13)", unicode: false, maxLength: 13, nullable: false),
                    Sexo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PossuiPlano = table.Column<string>(name: "Possui Plano?", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    OperadoradeSaúde = table.Column<string>(name: "Operadora de Saúde", type: "nvarchar(150)", maxLength: 150, nullable: false),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Regiao = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Produto = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    Indicação = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    EtapaAtual = table.Column<string>(name: "Etapa Atual", type: "nvarchar(max)", nullable: false),
                    FaseAtual = table.Column<string>(name: "Fase Atual", type: "nvarchar(150)", maxLength: 150, nullable: false),
                    DataAdesão = table.Column<DateTime>(type: "date", nullable: true),
                    Situação = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    MotivoInativação = table.Column<string>(name: "Motivo Inativação", type: "nvarchar(max)", nullable: false),
                    InativadoEm = table.Column<DateTime>(name: "Inativado Em", type: "date", nullable: true),
                    Médico = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    NroCRM = table.Column<string>(name: "Nro. CRM", type: "nvarchar(max)", nullable: false),
                    UFCRM = table.Column<string>(name: "UF CRM", type: "nvarchar(max)", nullable: false),
                    UFNúmeroCRM = table.Column<string>(name: "UF/Número CRM", type: "nvarchar(max)", nullable: false),
                    LocalExame = table.Column<string>(name: "Local Exame", type: "nvarchar(150)", maxLength: 150, nullable: false),
                    DataResultado = table.Column<DateTime>(name: "Data Resultado", type: "date", nullable: true),
                    PossuiPrescrição = table.Column<string>(name: "Possui Prescrição?", type: "varchar(13)", unicode: false, maxLength: 13, nullable: false),
                    DataPrescrição = table.Column<DateTime>(name: "Data Prescrição", type: "date", nullable: true),
                    QuantidadePrescrição = table.Column<int>(name: "Quantidade Prescrição", type: "int", nullable: false),
                    RecebeuIT = table.Column<string>(name: "Recebeu IT?", type: "varchar(1)", unicode: false, maxLength: 1, nullable: false),
                    DataUtilizaçãoIT = table.Column<int>(name: "Data Utilização IT", type: "int", nullable: true),
                    FrequênciaManutençãoTrat = table.Column<string>(name: "Frequência Manutenção Trat.", type: "varchar(9)", unicode: false, maxLength: 9, nullable: false),
                    TratamentosAnteriores = table.Column<int>(name: "Tratamentos Anteriores", type: "int", nullable: true),
                    MedicamentosAnteriores = table.Column<string>(name: "Medicamentos Anteriores", type: "nvarchar(max)", nullable: false),
                    CanaldeAcesso = table.Column<string>(name: "Canal de Acesso", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    OperadoradeSaúdeAcesso = table.Column<string>(name: "Operadora de Saúde - Acesso", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ÓrgãoPúblico = table.Column<string>(name: "Órgão Público", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AcessoVigente = table.Column<string>(name: "Acesso Vigente?", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    FormaDeAcesso = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataqueForneceuOrientaçãoSobreAcesso = table.Column<DateTime>(name: "Data que Forneceu Orientação Sobre Acesso", type: "date", nullable: true),
                    DatadeSolicitaçãodeAcesso = table.Column<DateTime>(name: "Data de Solicitação de Acesso", type: "date", nullable: true),
                    AcessoAprovado = table.Column<string>(name: "Acesso Aprovado?", type: "varchar(9)", unicode: false, maxLength: 9, nullable: false),
                    DatadeRespostasobreAcesso = table.Column<DateTime>(name: "Data de Resposta sobre Acesso", type: "date", nullable: true),
                    DtÚltimaDoseInduçãodoTratamento = table.Column<DateTime>(name: "Dt. Última Dose Indução do Tratamento", type: "date", nullable: true),
                    DtPrimeiraDoseInduçãodoTratamento = table.Column<DateTime>(name: "Dt. Primeira Dose Indução do Tratamento", type: "date", nullable: true),
                    QtdDosesInduçãodoTratamento = table.Column<long>(name: "Qtd. Doses Indução do Tratamento", type: "bigint", nullable: true),
                    DtPrimeiraDoseManutençãodoTratamento = table.Column<DateTime>(name: "Dt. Primeira Dose Manutenção do Tratamento", type: "date", nullable: true),
                    DtÚltimaDoseManutençãodoTratamento = table.Column<DateTime>(name: "Dt. Última Dose Manutenção do Tratamento", type: "date", nullable: true),
                    QtdDosesManutençãodotratamento = table.Column<long>(name: "Qtd. Doses Manutenção do tratamento", type: "bigint", nullable: true),
                    DtRetornoaoMédico = table.Column<DateTime>(name: "Dt. Retorno ao Médico", type: "date", nullable: true),
                    DtÚltimoContato = table.Column<DateTime>(name: "Dt. Último Contato", type: "date", nullable: true),
                    DtÚltimoContatoEfetivo = table.Column<DateTime>(name: "Dt. Último Contato Efetivo", type: "date", nullable: true),
                    QtdeContatos = table.Column<int>(name: "Qtde Contatos", type: "int", nullable: true),
                    QtdeContatosEfetivos = table.Column<int>(name: "Qtde. Contatos Efetivos", type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tbl_relatorio_entrenos_entyvio_geral_2Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tbl_relatorio_entrenos_entyvio_geral_2Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TEMP_CUIDAR_MAIS_ACESSO",
                columns: table => new
                {
                    nome = table.Column<string>(type: "varchar(64)", unicode: false, maxLength: 64, nullable: false),
                    via = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    forma = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: false),
                    documento = table.Column<string>(type: "varchar(217)", unicode: false, maxLength: 217, nullable: false),
                    procedimento = table.Column<string>(type: "varchar(436)", unicode: false, maxLength: 436, nullable: false),
                    exame = table.Column<string>(type: "varchar(1026)", unicode: false, maxLength: 1026, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgram",
                columns: table => new
                {
                    codigo = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    via = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    forma = table.Column<string>(type: "varchar(14)", unicode: false, maxLength: 14, nullable: false),
                    documento = table.Column<string>(type: "varchar(183)", unicode: false, maxLength: 183, nullable: false),
                    procedimento = table.Column<string>(type: "varchar(775)", unicode: false, maxLength: 775, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TEMP_CUIDAR_MAIS_ACESSOAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TEMP_CUIDAR_MAIS_ACESSOAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TempContingencia",
                columns: table => new
                {
                    RegardingObjectIdTarget = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    QtdeAnexos = table.Column<int>(type: "int", nullable: true),
                    NoteText = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TempContingenciaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TempContingenciaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TempInfusionCare",
                columns: table => new
                {
                    Row = table.Column<long>(type: "bigint", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MostRecentAdministrationDate = table.Column<DateTime>(name: "Most Recent Administration Date", type: "datetime", nullable: true),
                    WhoAdministerTreatment = table.Column<string>(name: "Who Administer Treatment?", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TempInfusionCareAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TempInfusionCareAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TemplateAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TemplateAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TempPesquisa",
                columns: table => new
                {
                    DIAGNOSTICID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DataPesquisa = table.Column<DateTime>(type: "datetime", nullable: true),
                    PERGUNTA1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PERGUNTA2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TempPesquisaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TempPesquisaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "teste_somar_22112019",
                columns: table => new
                {
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Situacao = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Statusdotratamento = table.Column<string>(name: "Status do tratamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Statusdetalhedotratamento = table.Column<string>(name: "Status detalhe do tratamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AnoInativacao = table.Column<int>(type: "int", nullable: true),
                    MesInativacao = table.Column<string>(type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Medico = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "teste_somar_22112019Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_teste_somar_22112019Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TESTE_XML",
                columns: table => new
                {
                    XML = table.Column<string>(type: "varchar(max)", unicode: false, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TESTE_XMLAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TESTE_XMLAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TherapeuticHistoryAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TherapeuticHistoryAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TherapeuticTypeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TherapeuticTypeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp",
                columns: table => new
                {
                    Voucher = table.Column<string>(type: "nvarchar(52)", maxLength: 52, nullable: false),
                    HEALTHPROGRAMID = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_account",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Cnpj = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EmailAddress = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MainContact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_accountAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_accountAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_accountSeetingByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "varchar(150)", unicode: false, maxLength: 150, nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_accountSeetingByProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_accountSeetingByProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_AMPOLAS",
                columns: table => new
                {
                    Treatmentid = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Infusionid = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    WeightAnterior = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ampouleamountexpected = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ampouleamountcorrigido = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ampouleamount = table.Column<decimal>(type: "decimal(18,2)", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_AMPOLASAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_AMPOLASAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_APOIO_DIAGNOSTICO",
                columns: table => new
                {
                    DOCTORID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    QTDE = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_APOIO_DIAGNOSTICOAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_APOIO_DIAGNOSTICOAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_DATA_ULTIMA_RETIRADA_AMOSTRA",
                columns: table => new
                {
                    DOCTORID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Data = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_DATA_ULTIMA_RETIRADA_AMOSTRAAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_DATA_ULTIMA_RETIRADA_AMOSTRAAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_deletar",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    LogisticsScheduleTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduledStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ScheduledEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogisticsPartnerCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPFDoctor = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CTE = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SendRequestKit = table.Column<bool>(type: "bit", nullable: true),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RequestDoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LogisticsPartnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ClientId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Action = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ConfirmWithdrawal = table.Column<bool>(type: "bit", nullable: true),
                    DeliveryLaboratoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ResponsibleForReceiving = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleForCollecting = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AmountUsed = table.Column<int>(type: "int", nullable: true),
                    AmountCanceled = table.Column<int>(type: "int", nullable: true),
                    CurrentBalance = table.Column<int>(type: "int", nullable: true),
                    DateForReceiving = table.Column<DateTime>(type: "datetime", nullable: true),
                    IncidentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DateForCollecting = table.Column<DateTime>(type: "datetime", nullable: true),
                    KitTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocalTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OtherPlace = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LocalDeliveryWithdrawStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OtherLocalDeliveryWithdraw = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ApprovedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RequestBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Orientation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DeliveryPeriod = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleTelephoneWithdrawal = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WithdrawalTime = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Section = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Exam_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Temperature = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IntegrationStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    isLegacy = table.Column<bool>(type: "bit", nullable: true),
                    LegacyId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_deletar_10_dup",
                columns: table => new
                {
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    data = table.Column<DateTime>(type: "datetime", nullable: true),
                    OptionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_deletar_10_dupAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_deletar_10_dupAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_deletarAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_deletarAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_DROPOUTSAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_DROPOUTSAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_duplicidade_vouchers",
                columns: table => new
                {
                    Voucher = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    QtdeVouchers = table.Column<int>(type: "int", nullable: true),
                    OrdemDeletaveis = table.Column<long>(type: "bigint", nullable: true),
                    Deletavel = table.Column<int>(type: "int", nullable: false),
                    CriacaoVoucher = table.Column<DateTime>(type: "datetime", nullable: true),
                    Exame = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Codigo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ExameId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    InfusionId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    BenefitId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiagnosticExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LogisticsScheduleItemId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_duplicidade_vouchersAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_duplicidade_vouchersAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_ENROLLED",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(8)", unicode: false, maxLength: 8, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    QTD_AMPOLAS = table.Column<int>(type: "int", nullable: false),
                    QTD_AMPOLAS_IDEAIS = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_ENROLLEDAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_ENROLLEDAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_ENTRADA_LOCAL",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    QTD_AMPOLAS = table.Column<int>(type: "int", nullable: false),
                    QTD_AMPOLAS_IDEAIS = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_ENTRADA_LOCALAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_ENTRADA_LOCALAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_ENTRADA_PAUSA",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(17)", unicode: false, maxLength: 17, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    QTD_AMPOLAS = table.Column<int>(type: "int", nullable: false),
                    QTD_AMPOLAS_IDEAIS = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_ENTRADA_PAUSAAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_ENTRADA_PAUSAAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_final_pacientes_em_frente",
                columns: table => new
                {
                    Codigo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    NomedoPaciente = table.Column<string>(name: "Nome do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Peso = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    FaixaEtaria = table.Column<string>(name: "Faixa Etaria", type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Idade = table.Column<decimal>(type: "numeric(18,0)", nullable: true),
                    TratamentoPrograma = table.Column<DateTime>(name: "Tratamento Programa", type: "datetime", nullable: true),
                    Modalidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Hemcasa = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Local = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    GraudeHemofília = table.Column<string>(name: "Grau de Hemofília", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    infusoes = table.Column<int>(type: "int", nullable: true),
                    visita = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_final_pacientes_em_frenteAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_final_pacientes_em_frenteAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_infusion_teste",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    PreviewDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActualDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    optionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_infusion_teste_inserir",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    PreviewDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActualDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    optionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_infusion_teste_inserirAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_infusion_teste_inserirAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_infusion_testeAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_infusion_testeAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_INFUSOES",
                columns: table => new
                {
                    CódigodoTratamento = table.Column<Guid>(name: "Código do Tratamento", type: "uniqueidentifier", nullable: false),
                    Código = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataRealizada = table.Column<string>(name: "Data Realizada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataAgendada = table.Column<string>(name: "Data Agendada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Paciente = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CódigoPaciente = table.Column<Guid>(name: "Código Paciente", type: "uniqueidentifier", nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    OptionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(name: " Doença", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TipodeAcesso = table.Column<string>(name: "Tipo de Acesso", type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleAmountExpected = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Situação = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocaldaInfusão = table.Column<string>(name: "Local da Infusão", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StatusdaInfusão = table.Column<string>(name: "Status da Infusão", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Local = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataInativação = table.Column<string>(name: "Data Inativação", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    MotivodoAfastamento = table.Column<string>(name: "Motivo do Afastamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataIníciodoTratamento = table.Column<string>(name: "Data Início do Tratamento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataPrimeiroAtendimento = table.Column<string>(name: "Data Primeiro Atendimento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataReferência = table.Column<string>(name: "Data Referência", type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    DataReferência2 = table.Column<DateTime>(name: "Data Referência2", type: "datetime", nullable: true),
                    Cidadedopaciente = table.Column<string>(name: "Cidade do paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EstadodoPaciente = table.Column<string>(name: "Estado do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataPrimeiraInfusão = table.Column<string>(name: "Data Primeira Infusão", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    FlagRealizado = table.Column<int>(name: "Flag Realizado", type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_INFUSOES_COMPLETO",
                columns: table => new
                {
                    name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CódigodoTratamento = table.Column<Guid>(name: "Código do Tratamento", type: "uniqueidentifier", nullable: false),
                    Código = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataRealizada = table.Column<string>(name: "Data Realizada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataAgendada = table.Column<string>(name: "Data Agendada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Paciente = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CódigoPaciente = table.Column<Guid>(name: "Código Paciente", type: "uniqueidentifier", nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    OptionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(name: " Doença", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TipodeAcesso = table.Column<string>(name: "Tipo de Acesso", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleAmountExpected = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Situação = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocaldaInfusão = table.Column<string>(name: "Local da Infusão", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StatusdaInfusão = table.Column<string>(name: "Status da Infusão", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DataCriacaoTratamento = table.Column<DateTime>(name: "Data Criacao Tratamento", type: "datetime", nullable: true),
                    NomeRepresentante = table.Column<string>(name: "Nome Representante", type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    NomeGerente = table.Column<string>(name: "Nome Gerente", type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    Local = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataInativação = table.Column<DateTime>(name: "Data Inativação", type: "datetime", nullable: true),
                    MotivodoAfastamento = table.Column<string>(name: "Motivo do Afastamento", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataIníciodoTratamento = table.Column<string>(name: "Data Início do Tratamento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataPrimeiroAtendimento = table.Column<string>(name: "Data Primeiro Atendimento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataReferência = table.Column<string>(name: "Data Referência", type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    DataReferência2 = table.Column<DateTime>(name: "Data Referência2", type: "datetime", nullable: true),
                    Cidadedopaciente = table.Column<string>(name: "Cidade do paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EstadodoPaciente = table.Column<string>(name: "Estado do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataPrimeiraInfusão = table.Column<DateTime>(name: "Data Primeira Infusão", type: "datetime", nullable: true),
                    Data_Infusao_1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    FlagRealizado = table.Column<int>(name: "Flag Realizado", type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_INFUSOES_COMPLETO_ADD",
                columns: table => new
                {
                    name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CódigodoTratamento = table.Column<Guid>(name: "Código do Tratamento", type: "uniqueidentifier", nullable: false),
                    Código = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataRealizada = table.Column<string>(name: "Data Realizada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataAgendada = table.Column<string>(name: "Data Agendada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Paciente = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CódigoPaciente = table.Column<Guid>(name: "Código Paciente", type: "uniqueidentifier", nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    OptionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(name: " Doença", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TipodeAcesso = table.Column<string>(name: "Tipo de Acesso", type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleAmountExpected = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Situação = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocaldaInfusão = table.Column<string>(name: "Local da Infusão", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StatusdaInfusão = table.Column<string>(name: "Status da Infusão", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DataCriacaoTratamento = table.Column<DateTime>(name: "Data Criacao Tratamento", type: "datetime", nullable: true),
                    NomeRepresentante = table.Column<string>(name: "Nome Representante", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    NomeGerente = table.Column<string>(name: "Nome Gerente", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Local = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataInativação = table.Column<DateTime>(name: "Data Inativação", type: "datetime", nullable: true),
                    MotivodoAfastamento = table.Column<string>(name: "Motivo do Afastamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataIníciodoTratamento = table.Column<string>(name: "Data Início do Tratamento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataPrimeiroAtendimento = table.Column<string>(name: "Data Primeiro Atendimento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataReferência = table.Column<string>(name: "Data Referência", type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    DataReferência2 = table.Column<DateTime>(name: "Data Referência2", type: "datetime", nullable: true),
                    Cidadedopaciente = table.Column<string>(name: "Cidade do paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EstadodoPaciente = table.Column<string>(name: "Estado do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataPrimeiraInfusão = table.Column<DateTime>(name: "Data Primeira Infusão", type: "datetime", nullable: true),
                    Data_Infusao_1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    FlagRealizado = table.Column<int>(name: "Flag Realizado", type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_INFUSOES_COMPLETO_ADDAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_INFUSOES_COMPLETO_ADDAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_INFUSOES_COMPLETOAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_INFUSOES_COMPLETOAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_INFUSOES_Roll",
                columns: table => new
                {
                    CódigodoTratamento = table.Column<Guid>(name: "Código do Tratamento", type: "uniqueidentifier", nullable: false),
                    Código = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataRealizada = table.Column<string>(name: "Data Realizada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataAgendada = table.Column<string>(name: "Data Agendada", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    Paciente = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CódigoPaciente = table.Column<Guid>(name: "Código Paciente", type: "uniqueidentifier", nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    OptionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(name: " Doença", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TipodeAcesso = table.Column<string>(name: "Tipo de Acesso", type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleAmountExpected = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Situação = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LocaldaInfusão = table.Column<string>(name: "Local da Infusão", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StatusdaInfusão = table.Column<string>(name: "Status da Infusão", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Local = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataInativação = table.Column<string>(name: "Data Inativação", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    MotivodoAfastamento = table.Column<string>(name: "Motivo do Afastamento", type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataIníciodoTratamento = table.Column<string>(name: "Data Início do Tratamento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataPrimeiroAtendimento = table.Column<string>(name: "Data Primeiro Atendimento", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    DataReferência = table.Column<string>(name: "Data Referência", type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    DataReferência2 = table.Column<DateTime>(name: "Data Referência2", type: "datetime", nullable: true),
                    Cidadedopaciente = table.Column<string>(name: "Cidade do paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EstadodoPaciente = table.Column<string>(name: "Estado do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataPrimeiraInfusão = table.Column<string>(name: "Data Primeira Infusão", type: "nvarchar(4000)", maxLength: 4000, nullable: false),
                    FlagRealizado = table.Column<int>(name: "Flag Realizado", type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_INFUSOES_RollAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_INFUSOES_RollAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_INFUSOESAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_INFUSOESAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_kpi_infusoes",
                columns: table => new
                {
                    new_tratamentoname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    qtd_ampolas = table.Column<decimal>(type: "numeric(23,10)", nullable: true),
                    qtd_ampolas_ideais = table.Column<decimal>(type: "numeric(23,10)", nullable: true),
                    Local = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusInfusao = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_kpi_infusoesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_kpi_infusoesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_LogisticSchedule",
                columns: table => new
                {
                    NomedoPrograma = table.Column<string>(name: "Nome do Programa", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    NomedoMaterial = table.Column<string>(name: "Nome do Material", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    Codigonomaterial = table.Column<string>(name: "Codigo no material", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    DocumentStatus = table.Column<string>(name: "Document Status", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ProgramaNOCARE = table.Column<string>(name: "Programa NO CARE", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    IdProgramaCARE = table.Column<string>(name: "Id Programa CARE", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    IdMedicamentoCARE = table.Column<string>(name: "Id Medicamento CARE", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_LogisticScheduleAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_LogisticScheduleAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_marcar_como_is_deleted_no_care",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_marcar_como_is_deleted_no_careAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_marcar_como_is_deleted_no_careAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_marcar_deleted",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_marcar_deleted2",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_marcar_deleted2Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_marcar_deleted2Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_marcar_deletedAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_marcar_deletedAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_MEDICOS",
                columns: table => new
                {
                    DOCTORID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LICENSENUMBER = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LICENSESTATE = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CLIENTE_IDENTIFICACAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CLIENTE_NOME = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_MEDICOSAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_MEDICOSAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_nao_encontrado",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DataReferência = table.Column<string>(name: "Data Referência", type: "varchar(8000)", unicode: false, maxLength: 8000, nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(name: " Doença", type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    TipodeAcesso = table.Column<string>(name: "Tipo de Acesso", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    Local = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Medico = table.Column<string>(type: "nvarchar(320)", maxLength: 320, nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Representante = table.Column<string>(type: "nvarchar(320)", maxLength: 320, nullable: false, collation: "Latin1_General_CI_AI"),
                    Gerente = table.Column<string>(type: "nvarchar(320)", maxLength: 320, nullable: false, collation: "Latin1_General_CI_AI"),
                    new_tratamentoname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusInfusao = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    qtd_ampolas_ideais = table.Column<decimal>(type: "numeric(23,10)", nullable: true),
                    qtd_ampolas = table.Column<decimal>(type: "numeric(23,10)", nullable: true),
                    data_primeira_infusao = table.Column<DateTime>(type: "datetime", nullable: true),
                    new_datadeinativao = table.Column<DateTime>(type: "date", nullable: true),
                    new_statusdotratamentoname = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    new_situacaoname = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_nao_encontradoAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_nao_encontradoAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_NOVOS",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(12)", unicode: false, maxLength: 12, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    QTD_AMPOLAS = table.Column<int>(type: "int", nullable: false),
                    QTD_AMPOLAS_IDEAIS = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_NOVOSAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_NOVOSAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_PACIENTE_ENROLLED",
                columns: table => new
                {
                    DOCTORID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    QTDE = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_PACIENTE_ENROLLEDAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_PACIENTE_ENROLLEDAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_pacientes_ativos_em_frente",
                columns: table => new
                {
                    Codigo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    NomedoPaciente = table.Column<string>(name: "Nome do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Peso = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    FaixaEtaria = table.Column<string>(name: "Faixa Etaria", type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Idade = table.Column<decimal>(type: "numeric(18,0)", nullable: true),
                    TratamentoPrograma = table.Column<DateTime>(name: "Tratamento Programa", type: "datetime", nullable: true),
                    Modalidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Hemcasa = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Local = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    GraudeHemofília = table.Column<string>(name: "Grau de Hemofília", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_pacientes_ativos_em_frente_dados",
                columns: table => new
                {
                    Codigo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    NomedoPaciente = table.Column<string>(name: "Nome do Paciente", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Peso = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    FaixaEtaria = table.Column<string>(name: "Faixa Etaria", type: "varchar(10)", unicode: false, maxLength: 10, nullable: false),
                    Idade = table.Column<decimal>(type: "numeric(18,0)", nullable: true),
                    TratamentoPrograma = table.Column<DateTime>(name: "Tratamento Programa", type: "datetime", nullable: true),
                    Modalidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Hemcasa = table.Column<string>(type: "varchar(3)", unicode: false, maxLength: 3, nullable: false),
                    Medicamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Local = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Médico = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    GraudeHemofília = table.Column<string>(name: "Grau de Hemofília", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    infusoes = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_pacientes_ativos_em_frente_dadosAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_pacientes_ativos_em_frente_dadosAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_pacientes_ativos_em_frente_Infusoes",
                columns: table => new
                {
                    Infusões = table.Column<int>(type: "int", nullable: true),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DatadaInfusão = table.Column<DateTime>(name: "Data da Infusão", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_pacientes_ativos_em_frente_InfusoesAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_pacientes_ativos_em_frente_InfusoesAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_pacientes_ativos_em_frente_visita",
                columns: table => new
                {
                    QuantidadedeVisitas = table.Column<int>(name: "Quantidade de Visitas", type: "int", nullable: true),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DatadaVisita = table.Column<DateTime>(name: "Data da Visita", type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_pacientes_ativos_em_frente_visitaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_pacientes_ativos_em_frente_visitaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_pacientes_ativos_em_frenteAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_pacientes_ativos_em_frenteAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_PACIENTES_BASE",
                columns: table => new
                {
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_PACIENTES_BASEAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_PACIENTES_BASEAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_RETENTION",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(9)", unicode: false, maxLength: 9, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    QTD_AMPOLAS = table.Column<int>(type: "int", nullable: false),
                    QTD_AMPOLAS_IDEAIS = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_RETENTIONAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_RETENTIONAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_retorno",
                columns: table => new
                {
                    Data = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentSituationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    phaseid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    treatmentstatusid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    treatmentstatusdetailid = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_retorno2",
                columns: table => new
                {
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentSituationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    phaseid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    treatmentstatusid = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    treatmentstatusdetailid = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_retorno2Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_retorno2Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_retornoAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_retornoAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_SAIDA_LOCAL",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    QTD_AMPOLAS = table.Column<int>(type: "int", nullable: false),
                    QTD_AMPOLAS_IDEAIS = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_SAIDA_LOCALAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_SAIDA_LOCALAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_SAIDA_PAUSA",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    QTD_AMPOLAS = table.Column<int>(type: "int", nullable: false),
                    QTD_AMPOLAS_IDEAIS = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_SAIDA_PAUSAAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_SAIDA_PAUSAAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_Schedule_Hierarquia",
                columns: table => new
                {
                    Consultor_Schedule = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    RequestDoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Medico_Schedule = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Medico_Consultor = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    Medico_Gerente = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    RepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorsRepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Consultor_Gerente = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_Schedule_HierarquiaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_Schedule_HierarquiaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_semana",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Codigo = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusTratamento = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Nome = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mes = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    Semana = table.Column<string>(type: "varchar(2)", unicode: false, maxLength: 2, nullable: false),
                    QTDE = table.Column<int>(type: "int", nullable: true),
                    InfusionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StatusInfusao = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DataInfusao = table.Column<DateTime>(type: "date", nullable: true),
                    RazaoNaoRealizacao = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TipodeInfusão = table.Column<string>(name: "Tipo de Infusão", type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EstanoKPI = table.Column<string>(name: "Esta no KPI", type: "varchar(3)", unicode: false, maxLength: 3, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_semanaAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_semanaAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_TOTAL_INFUSIONS",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(15)", unicode: false, maxLength: 15, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    QTD_AMPOLAS = table.Column<int>(type: "int", nullable: false),
                    QTD_AMPOLAS_IDEAIS = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_TOTAL_INFUSIONSAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_TOTAL_INFUSIONSAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_ULTIMA_ENTRADA",
                columns: table => new
                {
                    DOCTORID = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Data = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_ULTIMA_ENTRADAAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_ULTIMA_ENTRADAAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmp_validar",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false),
                    DataReferência = table.Column<string>(name: "Data Referência", type: "varchar(8000)", unicode: false, maxLength: 8000, nullable: false, collation: "Latin1_General_CI_AI"),
                    Doença = table.Column<string>(name: " Doença", type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    TipodeAcesso = table.Column<string>(name: "Tipo de Acesso", type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    Local = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Medico = table.Column<string>(type: "nvarchar(320)", maxLength: 320, nullable: false, collation: "Latin1_General_CI_AI"),
                    Cidade = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Estado = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Representante = table.Column<string>(type: "nvarchar(320)", maxLength: 320, nullable: false, collation: "Latin1_General_CI_AI"),
                    Gerente = table.Column<string>(type: "nvarchar(320)", maxLength: 320, nullable: false, collation: "Latin1_General_CI_AI"),
                    new_tratamentoname = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionId = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusInfusao = table.Column<string>(type: "varchar(100)", unicode: false, maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    qtd_ampolas_ideais = table.Column<decimal>(type: "numeric(23,10)", nullable: true),
                    qtd_ampolas = table.Column<decimal>(type: "numeric(23,10)", nullable: true),
                    data_primeira_infusao = table.Column<DateTime>(type: "datetime", nullable: true),
                    new_datadeinativao = table.Column<DateTime>(type: "date", nullable: true),
                    new_statusdotratamentoname = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false),
                    new_situacaoname = table.Column<string>(type: "varchar(200)", unicode: false, maxLength: 200, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "tmp_validarAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmp_validarAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_VIALS",
                columns: table => new
                {
                    TIPO_REGISTRO = table.Column<string>(type: "varchar(4)", unicode: false, maxLength: 4, nullable: false),
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DATA_REFERENCIA = table.Column<string>(type: "varchar(7)", unicode: false, maxLength: 7, nullable: false),
                    CODIGO_PACIENTE = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    INFUSIONID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TIPO_DE_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LOCAL = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    STATUS_INFUSAO = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    QTD_AMPOLAS = table.Column<decimal>(type: "money", nullable: true),
                    QTD_AMPOLAS_IDEAIS = table.Column<decimal>(type: "money", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_VIALSAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_VIALSAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TMP_VOUCHER",
                columns: table => new
                {
                    CODIGO = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    PacientesquereceberamoBENEFICIOdeIT = table.Column<string>(name: "Pacientes que receberam o BENEFICIO de IT", type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    ANO_MÊS = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TMP_VOUCHERAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TMP_VOUCHERAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "tmpAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_tmpAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TmpDataDeAdesao",
                columns: table => new
                {
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CodigoPaciente = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Programa = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DataDaAdesao = table.Column<DateTime>(type: "date", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "TmpDataDeAdesaoAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TmpDataDeAdesaoAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Tracking",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IdRegardingObject = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ObjectNewValue = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ObjectOldValue = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Field = table.Column<string>(type: "varchar(50)", unicode: false, maxLength: 50, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tracking", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TrackingAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrackingAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TrainingRecordAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingRecordAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Treatment_bkp_05_11_2021",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    StrengthMedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PosologeId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Dosage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    DosageUnitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthCareProviderId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthInsuranceType = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentSituationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramParticipationConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemTreatmentStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemAccessStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentStopDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemTreatmentInativationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemLastContactDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemLastSuccessfullContactDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MainContactStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CaregiverId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Age = table.Column<int>(type: "int", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Stature = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CivilStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EducationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RG = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OccupationId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FirstName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate_Caregiver = table.Column<DateTime>(type: "datetime", nullable: true),
                    CPF_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    KinshipStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    InfusionPlaceId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveVisit = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveLogistics = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToSendDataToDoctor = table.Column<bool>(type: "bit", nullable: true),
                    ConsentDataShare = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceived = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionIsValid = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionValidationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionValidatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PatientSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PatientDiagnosedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemRegistrationEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone2Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone3Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone1Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone2Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone3Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RNE = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TreatmentCustomDataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AbbreviationName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrescriptionDueDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramTime = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TreatmentTime = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    SupportField = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CID = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PNCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreferredTimeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ContractTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    GotAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PrescriptionHasDivergentDosage = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasLackOfDosage = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasDivergentInterval = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasLackOfInterval = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasDateMissing = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasStampSignatureMissing = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasMissingMedicationName = table.Column<bool>(type: "bit", nullable: true),
                    WillDoctorMakeNewPrescription = table.Column<bool>(type: "bit", nullable: true),
                    MedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OnlyCareMigration = table.Column<bool>(type: "bit", nullable: true),
                    DoctorPrescriberId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Haspatientusedmedicationbefore = table.Column<bool>(type: "bit", nullable: true),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    GotAccess = table.Column<bool>(type: "bit", nullable: true),
                    PatientDiagnosed = table.Column<bool>(type: "bit", nullable: true),
                    SampleCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhaseStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TreatmentStatusDetailStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReasonInactivationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ProgramParticipationDiagnosticConsent = table.Column<bool>(type: "bit", nullable: true),
                    ProgramParticipationDiagnosticConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentToReceiveDiagnosticPhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticPhonecallConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentToReceiveDiagnosticEmail = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticEmailConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModalityStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AccessTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    InfusionInterval = table.Column<int>(type: "int", nullable: true),
                    TherapeuticTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RequestBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SectorOfTheRequester = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VisitRefusalReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConsentLGPD = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPDDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SourceConsentStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HasOPS = table.Column<bool>(type: "bit", nullable: true),
                    CardNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    DoctorPhonecallsConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StageOfDiseaseStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CustomBoolean = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean_1 = table.Column<bool>(type: "bit", nullable: true),
                    Disease2Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CustomBoolean_2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean_3 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean_4 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean1 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomString1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString4 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString5 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString6 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomDateTime1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    CustomDateTime2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    Custom1StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Custom2StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Treatment_bkp_05_11_2021Audit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Treatment_bkp_05_11_2021Audit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Treatment_RECEITADEVIDA_FIND",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "Treatment_RECEITADEVIDA_FINDAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Treatment_RECEITADEVIDA_FINDAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentAddressAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentAddressAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentAndDiagnosticActionAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentAndDiagnosticActionAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentAttendanceAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentAttendanceAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentBillingAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentBillingAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentCustomDataAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentCustomDataAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentHistoryAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentHistoryAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentPaymentAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentPaymentAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentSettingsAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentSettingsAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentSituationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentSituationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentStatusAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentStatusAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentStatusDetailAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentStatusDetailAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentStatusDetailHealthProgramAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TreatmentStatusDetailHealthProgramAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserSystemLogAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserSystemLogAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ValidationResult",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IsValidSpecific = table.Column<bool>(type: "bit", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ValidationResult", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ValidationResultAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValidationResultAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ViewsEntityMetadata",
                columns: table => new
                {
                    ViewsEntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SourceEntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    SourceAttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    SourceEntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SourceAttributeMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TargetEntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TargetAttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TargetAttributeMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TargetEntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    IsLookup = table.Column<bool>(type: "bit", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Type = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AttributeName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    IsVisible = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ViewsEntityMetadata", x => x.ViewsEntityMetadataId);
                });

            migrationBuilder.CreateTable(
                name: "VisitAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VisitAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VoucherAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VoucherAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VoucherConfigurationAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VoucherConfigurationAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "zzmig",
                columns: table => new
                {
                    descricao = table.Column<string>(type: "varchar(30)", unicode: false, maxLength: 30, nullable: false)
                },
                constraints: table =>
                {
                });

            migrationBuilder.CreateTable(
                name: "zzmigAudit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Fields = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    RegardingObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    XMLNewValues = table.Column<string>(type: "xml", nullable: false),
                    XMLOldValues = table.Column<string>(type: "xml", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_zzmigAudit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AkkaPublishEvents",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    AkkaActorsId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AkkaPublishEvents", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AkkaPublishEvents_dbo.AkkaActors_AkkaActorsId",
                        column: x => x.AkkaActorsId,
                        principalTable: "AkkaActors",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AkkaSubscribeEvents",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    AkkaActorsId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AkkaSubscribeEvents", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AkkaSubscribeEvents_dbo.AkkaActors_AkkaActorsId",
                        column: x => x.AkkaActorsId,
                        principalTable: "AkkaActors",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    UserId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey, x.UserId });
                    table.ForeignKey(
                        name: "FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EntityMetadata",
                columns: table => new
                {
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EntityTypeCode = table.Column<int>(type: "int", nullable: false),
                    EntityAbreviationCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IconMenu = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MenuDisplayOrder = table.Column<int>(type: "int", nullable: true),
                    IsActivityEntity = table.Column<bool>(type: "bit", nullable: true),
                    NoActivities = table.Column<bool>(type: "bit", nullable: true),
                    EntityConfigurationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.EntityMetadata", x => x.EntityMetadataId);
                    table.ForeignKey(
                        name: "FK_dbo.EntityMetadata_dbo.EntityConfiguration_EntityConfiguration_Id",
                        column: x => x.EntityConfigurationId,
                        principalTable: "EntityConfiguration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LanguageMenuMetadata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MenuMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LangId = table.Column<int>(type: "int", nullable: false),
                    Translate = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LanguageMenuMetadata", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.LanguageMenuMetadata_dbo.MenuMetadata_MenuMetadataId",
                        column: x => x.MenuMetadataId,
                        principalTable: "MenuMetadata",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StepLogs",
                columns: table => new
                {
                    ID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProcessLogId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false, collation: "Latin1_General_CI_AI"),
                    Status = table.Column<int>(type: "int", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndStepOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ErrorMessage = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false, collation: "Latin1_General_CI_AI"),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.StepLogs", x => x.ID);
                    table.ForeignKey(
                        name: "FK_dbo.StepLogs_dbo.ProcessLog_ProcessLogId",
                        column: x => x.ProcessLogId,
                        principalTable: "ProcessLog",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AttributeMetadata",
                columns: table => new
                {
                    AttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    AttributeType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsCollection = table.Column<bool>(type: "bit", nullable: true),
                    IsManyToMany = table.Column<bool>(type: "bit", nullable: true),
                    IsLookup = table.Column<bool>(type: "bit", nullable: true),
                    IsPickList = table.Column<bool>(type: "bit", nullable: true),
                    IsPrimaryKey = table.Column<bool>(type: "bit", nullable: true),
                    IsStateCode = table.Column<bool>(type: "bit", nullable: true),
                    IsStatusCode = table.Column<bool>(type: "bit", nullable: true),
                    IsSystemField = table.Column<bool>(type: "bit", nullable: true),
                    IsNotMapped = table.Column<bool>(type: "bit", nullable: true),
                    InnerTable = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    isTextArea = table.Column<bool>(type: "bit", nullable: true),
                    IsDateTimeWithHour = table.Column<bool>(type: "bit", nullable: true),
                    IsTimeLine = table.Column<bool>(type: "bit", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AttributeHashCode = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AttributeMetadata", x => x.AttributeMetadataId);
                    table.ForeignKey(
                        name: "FK_dbo.AttributeMetadata_dbo.EntityMetadata_EntityMetadataId",
                        column: x => x.EntityMetadataId,
                        principalTable: "EntityMetadata",
                        principalColumn: "EntityMetadataId");
                });

            migrationBuilder.CreateTable(
                name: "IndexViewsEntityMetadata",
                columns: table => new
                {
                    IndexViewsEntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AttributeMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IsDefault = table.Column<bool>(type: "bit", nullable: true),
                    IsSystemView = table.Column<bool>(type: "bit", nullable: true),
                    Criteria = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ViewCode = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IndexViewsEntityMetadata", x => x.IndexViewsEntityMetadataId);
                    table.ForeignKey(
                        name: "FK_dbo.IndexViewsEntityMetadata_dbo.EntityMetadata_EntityMetadataId",
                        column: x => x.EntityMetadataId,
                        principalTable: "EntityMetadata",
                        principalColumn: "EntityMetadataId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MenuMetadataEntityMetadata",
                columns: table => new
                {
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MenuMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MenuMetadataEntityMetadata", x => new { x.EntityMetadataId, x.MenuMetadataId });
                    table.ForeignKey(
                        name: "FK_dbo.MenuMetadataEntityMetadata_dbo.EntityMetadata_EntityMetadataId",
                        column: x => x.EntityMetadataId,
                        principalTable: "EntityMetadata",
                        principalColumn: "EntityMetadataId");
                    table.ForeignKey(
                        name: "FK_dbo.MenuMetadataEntityMetadata_dbo.MenuMetadata_MenuMetadataId",
                        column: x => x.MenuMetadataId,
                        principalTable: "MenuMetadata",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "SectionExcludedByPhase",
                columns: table => new
                {
                    SectionExcludedByPhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SectionMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.SectionExcludedByPhase", x => x.SectionExcludedByPhaseId);
                    table.ForeignKey(
                        name: "FK_dbo.SectionExcludedByPhase_dbo.EntityMetadata_EntityMetadataId",
                        column: x => x.EntityMetadataId,
                        principalTable: "EntityMetadata",
                        principalColumn: "EntityMetadataId");
                });

            migrationBuilder.CreateTable(
                name: "SectionMetadata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    IsAdvanced = table.Column<bool>(type: "bit", nullable: true),
                    IsSystemSection = table.Column<bool>(type: "bit", nullable: true),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SectionIdHtm = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Tooltip = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Help = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsVisibleInFormAdd = table.Column<bool>(type: "bit", nullable: true),
                    IsVisibleInFormEdit = table.Column<bool>(type: "bit", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HasSurvey = table.Column<bool>(type: "bit", nullable: false),
                    HasMap = table.Column<int>(type: "int", nullable: true),
                    HasCalendar = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.SectionMetadata", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.SectionMetadata_dbo.EntityMetadata_EntityMetadataId",
                        column: x => x.EntityMetadataId,
                        principalTable: "EntityMetadata",
                        principalColumn: "EntityMetadataId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RulesAttributeMetadata",
                columns: table => new
                {
                    RulesAttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AttributeType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    IsReadOnly = table.Column<bool>(type: "bit", nullable: true),
                    IsOnlyNumber = table.Column<bool>(type: "bit", nullable: true),
                    IsOnlyNumberDecimal = table.Column<bool>(type: "bit", nullable: true),
                    IsOnlyString = table.Column<bool>(type: "bit", nullable: true),
                    IsRequired = table.Column<bool>(type: "bit", nullable: false),
                    IsVisible = table.Column<bool>(type: "bit", nullable: false),
                    IsAllowNull = table.Column<bool>(type: "bit", nullable: false),
                    MaskValidation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mask = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isPickList = table.Column<bool>(type: "bit", nullable: true),
                    HidePickListOptions = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomValidation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Regex = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false, collation: "Latin1_General_CI_AI"),
                    SectionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SectionOrder = table.Column<int>(type: "int", nullable: true),
                    DefaultCssClass = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExtensionCssClassExtension = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ScreenAttribuiteSize = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    SectionMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsVisibleInFormAdd = table.Column<bool>(type: "bit", nullable: true),
                    IsVisibleInFormEdit = table.Column<bool>(type: "bit", nullable: true),
                    PremiseFilter = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ScreenFilter = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IsDisabledByHealthProgram = table.Column<bool>(type: "bit", nullable: true),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.RulesAttributeMetadata", x => x.RulesAttributeMetadataId);
                    table.ForeignKey(
                        name: "FK_dbo.RulesAttributeMetadata_dbo.AttributeMetadata_AttributeMetadataId",
                        column: x => x.AttributeMetadataId,
                        principalTable: "AttributeMetadata",
                        principalColumn: "AttributeMetadataId");
                });

            migrationBuilder.CreateTable(
                name: "StringMap",
                columns: table => new
                {
                    StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OptionValue = table.Column<int>(type: "int", nullable: true),
                    OptionName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    IsDisabled = table.Column<bool>(type: "bit", nullable: true),
                    OptionNameLangEN = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsSystemOption = table.Column<bool>(type: "bit", nullable: true),
                    Flag = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.StringMap", x => x.StringMapId);
                    table.ForeignKey(
                        name: "FK_dbo.StringMap_dbo.AttributeMetadata_AttributeMetadataId",
                        column: x => x.AttributeMetadataId,
                        principalTable: "AttributeMetadata",
                        principalColumn: "AttributeMetadataId");
                });

            migrationBuilder.CreateTable(
                name: "LanguageSectionMetadata",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SectionMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LangId = table.Column<int>(type: "int", nullable: false),
                    Translate = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LanguageSectionMetadata", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.LanguageSectionMetadata_dbo.SectionMetadata_SectionMetadataId",
                        column: x => x.SectionMetadataId,
                        principalTable: "SectionMetadata",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PhaseRulesMetadata",
                columns: table => new
                {
                    PhaseRulesMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RulesAttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeMetadataIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    AttributeType = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    IsVisible = table.Column<bool>(type: "bit", nullable: true),
                    IsRequired = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.PhaseRulesMetadata", x => x.PhaseRulesMetadataId);
                    table.ForeignKey(
                        name: "FK_dbo.PhaseRulesMetadata_dbo.RulesAttributeMetadata_RulesAttributeMetadataId",
                        column: x => x.RulesAttributeMetadataId,
                        principalTable: "RulesAttributeMetadata",
                        principalColumn: "RulesAttributeMetadataId");
                });

            migrationBuilder.CreateTable(
                name: "AccessManner",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessManner", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccessManner_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccessWay",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessWay", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccessWay_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Bank",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    BankCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Bank", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Bank_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CommunicationTypeByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.CommunicationTypeByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.CommunicationTypeByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Disease",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AccessExam = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Disease", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Disease_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmailBoxSetting",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Port = table.Column<int>(type: "int", nullable: false),
                    Host = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Smtp = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.EmailBoxSetting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.EmailBoxSetting_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinition",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HasLogisticsSchedule = table.Column<bool>(type: "bit", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Actions = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ExamDefinition", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinition_dbo.StringMap_ExamTypeStringMapId",
                        column: x => x.ExamTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinition_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "IncidentType",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IncidentType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentType_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "IncidentTypeDetail",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IncidentTypeDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentTypeDetail_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MedicalSpecialty",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicalSpecialty", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.MedicalSpecialty_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Medicament",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UseInterval = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Medicament", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Medicament_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentCompetitor",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Biologic = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicamentCompetitor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentCompetitor_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MedicationNonadherenceReason",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicationNonadherenceReason", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.MedicationNonadherenceReason_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Occupation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Family = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SubGroup = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MainSubGroup = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Group = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Occupation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Occupation_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Phase",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Phase", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Phase_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Posologe",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Posologe", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Posologe_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PostalCodeState",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.PostalCodeState", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.PostalCodeState_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Question",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    QuestionDescription = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExibitionOrder = table.Column<int>(type: "int", nullable: false),
                    QuestionType = table.Column<int>(type: "int", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Question", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Question_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "QuestionOptions",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ExibitionOrder = table.Column<int>(type: "int", nullable: false),
                    QuestionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OptionDescription = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    QuestionCondition = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.QuestionOptions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.QuestionOptions_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RegardingEntity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RegardingEntityTypeCodeTarget = table.Column<int>(type: "int", nullable: true),
                    RegardingEntityNameTarget = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    RegardingObjectIdTarget = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RegardingObjectIdNameTarget = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    RegardingEntityTypeCodeSource = table.Column<int>(type: "int", nullable: true),
                    RegardingEntityNameSource = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    RegardingObjectIdSource = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RegardingObjectIdNameSource = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.RegardingEntity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.RegardingEntity_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ServiceType",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ServiceCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ServiceType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.ServiceType_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StrengthMedicament",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.StrengthMedicament", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.StrengthMedicament_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Subject",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ParentSubjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Subject", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Subject_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Subject_dbo.Subject_ParentSubjectId",
                        column: x => x.ParentSubjectId,
                        principalTable: "Subject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SurveyQuestionList",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ExibitionOrder = table.Column<int>(type: "int", nullable: false),
                    SurveyId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    QuestionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    QuestionConditionYes = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    QuestionConditionNo = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    QuestionConditionMultiple = table.Column<bool>(type: "bit", nullable: true),
                    QuestionSequence = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    QuestionOrderRef = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.SurveyQuestionList", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.SurveyQuestionList_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SurveyResponseLine",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExibitionOrder = table.Column<int>(type: "int", nullable: true),
                    SurveyId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    QuestionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.SurveyResponseLine", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.SurveyResponseLine_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TherapeuticType",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TherapeuticType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticType_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentSituation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentSituation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentSituation_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentStatus",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentStatus", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentStatus_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentStatusDetail",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    GroupName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentStatusDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentStatusDetail_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "User",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    UserName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Language = table.Column<int>(type: "int", nullable: false),
                    LastAccess = table.Column<DateTime>(type: "datetime", nullable: true),
                    AccessTry = table.Column<int>(type: "int", nullable: true),
                    DateAccessTry = table.Column<DateTime>(type: "datetime", nullable: true),
                    Status = table.Column<int>(type: "int", nullable: true),
                    IsAdmin = table.Column<bool>(type: "bit", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Profile_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.User", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.User_dbo.Profile_Profile_Id",
                        column: x => x.Profile_Id,
                        principalTable: "Profile",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.User_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentDisease",
                columns: table => new
                {
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicamentDisease", x => new { x.MedicamentId, x.DiseaseId });
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentDisease_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentDisease_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "MedicamentCompetitorDisease",
                columns: table => new
                {
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicamentCompetitorDisease", x => new { x.DiseaseId, x.MedicamentCompetitorId });
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentCompetitorDisease_dbo.Disease_MedicamentCompetitorId",
                        column: x => x.MedicamentCompetitorId,
                        principalTable: "Disease",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentCompetitorDisease_dbo.MedicamentCompetitor_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "PosologeMedicament",
                columns: table => new
                {
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PosologeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.PosologeMedicament", x => new { x.MedicamentId, x.PosologeId });
                    table.ForeignKey(
                        name: "FK_dbo.PosologeMedicament_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.PosologeMedicament_dbo.Posologe_PosologeId",
                        column: x => x.PosologeId,
                        principalTable: "Posologe",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "PostalCodeCity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PostalCodeStateId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.PostalCodeCity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.PostalCodeCity_dbo.PostalCodeState_PostalCodeStateId",
                        column: x => x.PostalCodeStateId,
                        principalTable: "PostalCodeState",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PostalCodeCity_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Annotation",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasAttachment = table.Column<bool>(type: "bit", nullable: true),
                    NoteText = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Subject = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AnnotationTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Annotation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Annotation_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Annotation_dbo.StringMap_AnnotationTypeStringMapId",
                        column: x => x.AnnotationTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Annotation_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SurveyResponse",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ResponseDescription = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    QuestionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SurveyId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    QuestionType = table.Column<int>(type: "int", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SurveyGroupId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.SurveyResponse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.SurveyResponse_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SurveyResponse_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentStrengthMedicament",
                columns: table => new
                {
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrengthMedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicamentStrengthMedicament", x => new { x.MedicamentId, x.StrengthMedicamentId });
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentStrengthMedicament_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentStrengthMedicament_dbo.StrengthMedicament_StrengthMedicamentId",
                        column: x => x.StrengthMedicamentId,
                        principalTable: "StrengthMedicament",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessional",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PIS = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HiringTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    NurseProfessionalTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BankId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BankAgencyNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    BankAccountNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    BankAccountTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Latitude = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Longitude = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ProfessionalLicenseTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LicenseNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LicenseState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ContactHours = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProfessional", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessional_dbo.Bank_BankId",
                        column: x => x.BankId,
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessional_dbo.StringMap_BankAccountTypeStringMapId",
                        column: x => x.BankAccountTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessional_dbo.StringMap_GenderStringMapId",
                        column: x => x.GenderStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessional_dbo.StringMap_HiringTypeStringMapId",
                        column: x => x.HiringTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessional_dbo.StringMap_NurseProfessionalTypeStringMapId",
                        column: x => x.NurseProfessionalTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessional_dbo.StringMap_ProfessionalLicenseTypeStringMapId",
                        column: x => x.ProfessionalLicenseTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessional_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessional_dbo.User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PostalCodes",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    District = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PostalCodeCityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostalCodeStateId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Country = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.PostalCodes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.PostalCodes_dbo.PostalCodeCity_PostalCodeCityId",
                        column: x => x.PostalCodeCityId,
                        principalTable: "PostalCodeCity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PostalCodes_dbo.PostalCodeState_PostalCodeStateId",
                        column: x => x.PostalCodeStateId,
                        principalTable: "PostalCodeState",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PostalCodes_dbo.StringMap_AddressTypeStringMapId",
                        column: x => x.AddressTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PostalCodes_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Attachment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FileName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FileSize = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MimeType = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DocumentBody = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AnnotationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Version = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Attachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Attachment_dbo.Annotation_AnnotationId",
                        column: x => x.AnnotationId,
                        principalTable: "Annotation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Attachment_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Attachment_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalMedicalSpecialty",
                columns: table => new
                {
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicalSpecialtyId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProfessionalMedicalSpecialty", x => new { x.HealthProfessionalId, x.MedicalSpecialtyId });
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalMedicalSpecialty_dbo.HealthProfessional_MedicalSpecialtyId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalMedicalSpecialty_dbo.MedicalSpecialty_HealthProfessionalId",
                        column: x => x.MedicalSpecialtyId,
                        principalTable: "MedicalSpecialty",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ResourceWorkSettings",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PeriodMorning = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PeriodAfternoon = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PeriodNocturnal = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Sunday = table.Column<bool>(type: "bit", nullable: true),
                    Monday = table.Column<bool>(type: "bit", nullable: true),
                    Tuesday = table.Column<bool>(type: "bit", nullable: true),
                    Wednesday = table.Column<bool>(type: "bit", nullable: true),
                    Thursday = table.Column<bool>(type: "bit", nullable: true),
                    Friday = table.Column<bool>(type: "bit", nullable: true),
                    Saturday = table.Column<bool>(type: "bit", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CalendarTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ServiceTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ServiceDuration = table.Column<int>(type: "int", nullable: true),
                    ValityStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ValityEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CalendarTypeStringMap_StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ResourceWorkSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.ResourceWorkSettings_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ResourceWorkSettings_dbo.ServiceType_ServiceTypeId",
                        column: x => x.ServiceTypeId,
                        principalTable: "ServiceType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ResourceWorkSettings_dbo.StringMap_CalendarTypeStringMap_StringMapId",
                        column: x => x.CalendarTypeStringMap_StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ResourceWorkSettings_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccessHistoryAttendance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentAccessId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttemptAccess = table.Column<bool>(type: "bit", nullable: true),
                    AttemptAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    KeepAttempt = table.Column<bool>(type: "bit", nullable: true),
                    NextAttemptAccess = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentDelivered = table.Column<bool>(type: "bit", nullable: true),
                    DocumentDeliveredDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentSeparated = table.Column<bool>(type: "bit", nullable: true),
                    DocumentSeparatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DifficultyWithDocument = table.Column<bool>(type: "bit", nullable: true),
                    ExplainedByAttendant = table.Column<bool>(type: "bit", nullable: true),
                    GotAccess = table.Column<bool>(type: "bit", nullable: true),
                    GotAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    KeepAttemptAccess = table.Column<bool>(type: "bit", nullable: true),
                    DifficultyWithAccess = table.Column<bool>(type: "bit", nullable: true),
                    WaiverDetailStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStarted = table.Column<bool>(type: "bit", nullable: true),
                    WillStart = table.Column<bool>(type: "bit", nullable: true),
                    DateToStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    DetailDifficultyWithAccessStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DetailNoDifficultyWithAccessStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DetailDifficultyWithDocumentsStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentSettingsId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConsentDataShare = table.Column<bool>(type: "bit", nullable: true),
                    InactivateTreatment = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessHistoryAttendance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailDifficultyWithAccessStringMapId",
                        column: x => x.DetailDifficultyWithAccessStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailDifficultyWithDocumentsStringMapId",
                        column: x => x.DetailDifficultyWithDocumentsStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailNoDifficultyWithAccessStringMapId",
                        column: x => x.DetailNoDifficultyWithAccessStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessHistoryAttendance_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessHistoryAttendance_dbo.StringMap_WaiverDetailStringMapId",
                        column: x => x.WaiverDetailStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccessMannerByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessMannerByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccessMannerByProgram_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessMannerByProgram_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessMannerByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccessOrderByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessWayId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessMannerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessMannerByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessOriented = table.Column<bool>(type: "bit", nullable: true),
                    AccessRecord = table.Column<bool>(type: "bit", nullable: true),
                    Order = table.Column<int>(type: "int", nullable: true),
                    AccessProcedure = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AccessDocuments = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AccessExam = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessOrderByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccessOrderByProgram_dbo.AccessMannerByProgram_AccessMannerByProgramId",
                        column: x => x.AccessMannerByProgramId,
                        principalTable: "AccessMannerByProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessOrderByProgram_dbo.AccessManner_AccessMannerId",
                        column: x => x.AccessMannerId,
                        principalTable: "AccessManner",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessOrderByProgram_dbo.AccessWay_AccessWayId",
                        column: x => x.AccessWayId,
                        principalTable: "AccessWay",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessOrderByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccessProcedureByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Procedure = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Documents = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AccessExam = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessProcedureByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccessProcedureByProgram_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessProcedureByProgram_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessProcedureByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccessProcedureByProgramAccount",
                columns: table => new
                {
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessProcedureByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessProcedureByProgramAccount", x => new { x.AccountId, x.AccessProcedureByProgramId });
                    table.ForeignKey(
                        name: "FK_dbo.AccessProcedureByProgramAccount_dbo.AccessProcedureByProgram_AccessProcedureByProgramId",
                        column: x => x.AccessProcedureByProgramId,
                        principalTable: "AccessProcedureByProgram",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AccessProfile",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessProfileTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessProfile", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccessProfile_dbo.StringMap_AccessProfileTypeStringMapId",
                        column: x => x.AccessProfileTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessProfile_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccessProfileUser",
                columns: table => new
                {
                    AccessProfileId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessProfileUser", x => new { x.AccessProfileId, x.UserId });
                    table.ForeignKey(
                        name: "FK_dbo.AccessProfileUser_dbo.AccessProfile_AccessProfileId",
                        column: x => x.AccessProfileId,
                        principalTable: "AccessProfile",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.AccessProfileUser_dbo.User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AccessRightEntity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityMetadataIdName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Create = table.Column<bool>(type: "bit", nullable: true),
                    Read = table.Column<bool>(type: "bit", nullable: true),
                    Update = table.Column<bool>(type: "bit", nullable: true),
                    Delete = table.Column<bool>(type: "bit", nullable: true),
                    HasActivities = table.Column<bool>(type: "bit", nullable: true),
                    IsVisibleMenu = table.Column<bool>(type: "bit", nullable: true),
                    Annotations = table.Column<bool>(type: "bit", nullable: true),
                    Inactivation = table.Column<bool>(type: "bit", nullable: true),
                    AccessProfileId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HasSurvey = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccessRightEntity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccessRightEntity_dbo.AccessProfile_AccessProfileId",
                        column: x => x.AccessProfileId,
                        principalTable: "AccessProfile",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccessRightEntity_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Account",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TelephoneFax = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MobilePhone = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Site = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressReference = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Latitude = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Longitude = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StateRegistration = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CompanyName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessWayId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessMannerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessCoverageAreaStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessMakesStatement = table.Column<bool>(type: "bit", nullable: true),
                    AccessMakesInformation = table.Column<bool>(type: "bit", nullable: true),
                    AccessObservation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ClinicTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ClinicPublicOrPrivateStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorResponsableId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProfessional_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MainContact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OfficeHours = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ANSNumber = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Account", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.AccessManner_AccessMannerId",
                        column: x => x.AccessMannerId,
                        principalTable: "AccessManner",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.AccessWay_AccessWayId",
                        column: x => x.AccessWayId,
                        principalTable: "AccessWay",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.HealthProfessional_HealthProfessional_Id",
                        column: x => x.HealthProfessional_Id,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.StringMap_AccessCoverageAreaStringMapId",
                        column: x => x.AccessCoverageAreaStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.StringMap_AccountTypeStringMapId",
                        column: x => x.AccountTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.StringMap_ClinicPublicOrPrivateStringMapId",
                        column: x => x.ClinicPublicOrPrivateStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.StringMap_ClinicTypeStringMapId",
                        column: x => x.ClinicTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Account_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccountCoverageArea",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccountCoverageArea", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccountCoverageArea_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountCoverageArea_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Contact",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OfficialName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Department = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Office = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Workschedule = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Contact", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Contact_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Contact_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Contact_dbo.User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Doctor",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ClinicId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LicenseTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LicenseNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LicenseState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExpirationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LicenseStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Latitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Doctor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Doctor_dbo.Account_ClinicId",
                        column: x => x.ClinicId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Doctor_dbo.StringMap_GenderStringMapId",
                        column: x => x.GenderStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Doctor_dbo.StringMap_LicenseStatusStringMapId",
                        column: x => x.LicenseStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Doctor_dbo.StringMap_LicenseTypeStringMapId",
                        column: x => x.LicenseTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Doctor_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ValueAttendance = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ValuePerKM = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HasTraining = table.Column<bool>(type: "bit", nullable: false),
                    EffectiveDateInitialDocument = table.Column<DateTime>(type: "datetime", nullable: false),
                    EffectiveDateFinalDocument = table.Column<DateTime>(type: "datetime", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IndicatedConsultantName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IndicatedConsultantEmail = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NurceStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProfessionalByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalByProgram_dbo.Account_LocalId",
                        column: x => x.LocalId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalByProgram_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalByProgram_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalByProgram_dbo.StringMap_NurceStatusStringMapId",
                        column: x => x.NurceStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalByProgram_dbo.User_ConsultantId",
                        column: x => x.ConsultantId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DashBoardPageName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HasPurchase = table.Column<bool>(type: "bit", nullable: true),
                    HasIncident = table.Column<bool>(type: "bit", nullable: true),
                    HasPharmacovigilance = table.Column<bool>(type: "bit", nullable: true),
                    HasDiagnosis = table.Column<bool>(type: "bit", nullable: true),
                    HasDiagnosisExams = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosisByLogisticSchedule = table.Column<bool>(type: "bit", nullable: true),
                    HasVisit = table.Column<bool>(type: "bit", nullable: true),
                    HasVisitSurvey = table.Column<bool>(type: "bit", nullable: true),
                    HasVisitSLA = table.Column<bool>(type: "bit", nullable: true),
                    NurseDefaultValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    HasVoucher = table.Column<bool>(type: "bit", nullable: true),
                    HasLogistics = table.Column<bool>(type: "bit", nullable: true),
                    LogisticsTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LogisticPartnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasExam = table.Column<bool>(type: "bit", nullable: true),
                    NeedBudgetToExams = table.Column<bool>(type: "bit", nullable: true),
                    HasInfusion = table.Column<bool>(type: "bit", nullable: true),
                    HasInfusionExpiration = table.Column<bool>(type: "bit", nullable: true),
                    InfusionDaysToExpire = table.Column<int>(type: "int", nullable: true),
                    HasPreRegistration = table.Column<bool>(type: "bit", nullable: true),
                    HasRegister = table.Column<bool>(type: "bit", nullable: true),
                    HasAccess = table.Column<bool>(type: "bit", nullable: true),
                    HasAdhesion = table.Column<bool>(type: "bit", nullable: true),
                    EligibilityMinimumAge = table.Column<int>(type: "int", nullable: true),
                    EligibilitymaximumAge = table.Column<int>(type: "int", nullable: true),
                    EligibilityRequiresPrescription = table.Column<bool>(type: "bit", nullable: true),
                    EligibilityRequiresAttachmentPrescription = table.Column<bool>(type: "bit", nullable: true),
                    AkkaActorsId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ScriptNamespace = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HasTreatmentCustomData = table.Column<bool>(type: "bit", nullable: true),
                    HasTherapeuticHistory = table.Column<bool>(type: "bit", nullable: true),
                    HasPeriodSubject = table.Column<bool>(type: "bit", nullable: true),
                    MorningInitialHour = table.Column<int>(type: "int", nullable: true),
                    MorningFinalHour = table.Column<int>(type: "int", nullable: true),
                    AfternoonInitialHour = table.Column<int>(type: "int", nullable: true),
                    AfternoonFinalHour = table.Column<int>(type: "int", nullable: true),
                    HasTreatment = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgram_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgram_dbo.Account_LogisticPartnerId",
                        column: x => x.LogisticPartnerId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgram_dbo.AkkaActors_AkkaActorsId",
                        column: x => x.AkkaActorsId,
                        principalTable: "AkkaActors",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgram_dbo.StringMap_LogisticsTypeStringMapId",
                        column: x => x.LogisticsTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Representative",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Representative", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Representative_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Representative_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Representative_dbo.User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DoctorMedicalSpecialty",
                columns: table => new
                {
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicalSpecialtyId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.DoctorMedicalSpecialty", x => new { x.DoctorId, x.MedicalSpecialtyId });
                    table.ForeignKey(
                        name: "FK_dbo.DoctorMedicalSpecialty_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.DoctorMedicalSpecialty_dbo.MedicalSpecialty_MedicalSpecialtyId",
                        column: x => x.MedicalSpecialtyId,
                        principalTable: "MedicalSpecialty",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "AccountExamTypeByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccountExamTypeByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccountExamTypeByProgram_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountExamTypeByProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountExamTypeByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ActionCategory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActionColorHex = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ActionCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.ActionCategory_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ActionCategory_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Campaign",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DateScheduledStart = table.Column<DateTime>(type: "datetime", nullable: false),
                    DateScheduledEnd = table.Column<DateTime>(type: "datetime", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Responsible = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    NumberOfHealthProfessional = table.Column<int>(type: "int", nullable: false),
                    StatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Campaign", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Campaign_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.Campaign_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Campaign_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Campaign_dbo.StringMap_StatusStringMapId",
                        column: x => x.StatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Caregiver",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CivilStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EducationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OccupationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Stature = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Age = table.Column<int>(type: "int", nullable: true),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    KinshipStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Caregiver", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Caregiver_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Caregiver_dbo.Occupation_OccupationId",
                        column: x => x.OccupationId,
                        principalTable: "Occupation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Caregiver_dbo.StringMap_CivilStatusStringMapId",
                        column: x => x.CivilStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Caregiver_dbo.StringMap_EducationStringMapId",
                        column: x => x.EducationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Caregiver_dbo.StringMap_GenderStringMapId",
                        column: x => x.GenderStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Caregiver_dbo.StringMap_KinshipStringMapId",
                        column: x => x.KinshipStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Caregiver_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Chat",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ChatTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OperatorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ActualStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActualEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    Duration = table.Column<int>(type: "int", nullable: true),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OriginRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Chat", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Chat_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Chat_dbo.RegardingEntity_OriginRegardingEntityId",
                        column: x => x.OriginRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Chat_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Chat_dbo.StringMap_ChatTypeStringMapId",
                        column: x => x.ChatTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Chat_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Chat_dbo.User_OperatorId",
                        column: x => x.OperatorId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Communication",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ToId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FromId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Subject = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    VisitRequest = table.Column<bool>(type: "bit", nullable: true),
                    CommunicationTypeByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OriginRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Communication", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Communication_dbo.CommunicationTypeByProgram_CommunicationTypeByProgramId",
                        column: x => x.CommunicationTypeByProgramId,
                        principalTable: "CommunicationTypeByProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Communication_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Communication_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Communication_dbo.RegardingEntity_FromId",
                        column: x => x.FromId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Communication_dbo.RegardingEntity_OriginRegardingEntityId",
                        column: x => x.OriginRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Communication_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Communication_dbo.RegardingEntity_ToId",
                        column: x => x.ToId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Communication_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CommunicationTypeByProgramHealthProgram",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CommunicationTypeByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.CommunicationTypeByProgramHealthProgram", x => new { x.HealthProgramId, x.CommunicationTypeByProgramId });
                    table.ForeignKey(
                        name: "FK_dbo.CommunicationTypeByProgramHealthProgram_dbo.CommunicationTypeByProgram_CommunicationTypeByProgramId",
                        column: x => x.CommunicationTypeByProgramId,
                        principalTable: "CommunicationTypeByProgram",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.CommunicationTypeByProgramHealthProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "CoverageArea",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostalcodeStartId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostalcodeEndId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostalCodeCityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostalCodeStateId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VIPServiceZone = table.Column<bool>(type: "bit", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    City = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    State = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DeliveryTime = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.CoverageArea", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.CoverageArea_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CoverageArea_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CoverageArea_dbo.PostalCodeCity_PostalCodeCityId",
                        column: x => x.PostalCodeCityId,
                        principalTable: "PostalCodeCity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CoverageArea_dbo.PostalCodeState_PostalCodeStateId",
                        column: x => x.PostalCodeStateId,
                        principalTable: "PostalCodeState",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CoverageArea_dbo.PostalCodes_PostalcodeEndId",
                        column: x => x.PostalcodeEndId,
                        principalTable: "PostalCodes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CoverageArea_dbo.PostalCodes_PostalcodeStartId",
                        column: x => x.PostalcodeStartId,
                        principalTable: "PostalCodes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CoverageArea_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticConsent = table.Column<bool>(type: "bit", nullable: true),
                    ConfirmPersonalInformation = table.Column<bool>(type: "bit", nullable: true),
                    ProgramParticipationConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramParticipationConsentComments = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DiagnosticConsentComments = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramRequestDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsProgramParticipationApproved = table.Column<bool>(type: "bit", nullable: true),
                    IsDiagnosticConsentApproved = table.Column<bool>(type: "bit", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AuthorizeVisitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AuthorizeSMSStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AuthorizesTitrationofDosageStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    RequestDiagnosticConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramParticipationConsent2 = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticConsent2 = table.Column<bool>(type: "bit", nullable: true),
                    SystemUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LicenseNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LicenseState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProgramParticipationConsent3 = table.Column<bool>(type: "bit", nullable: true),
                    Specialty = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Latitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Longitude = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPD = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPDDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SourceConsentStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.DoctorByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.Doctor_Doctor_Id",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizeSMSStringMapId",
                        column: x => x.AuthorizeSMSStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizeVisitStringMapId",
                        column: x => x.AuthorizeVisitStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizesTitrationofDosageStringMapId",
                        column: x => x.AuthorizesTitrationofDosageStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.StringMap_SourceConsentStringMapId",
                        column: x => x.SourceConsentStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.User_ConsultantId",
                        column: x => x.ConsultantId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgram_dbo.User_SystemUserId",
                        column: x => x.SystemUserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Email",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EmailBoxSettingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    To = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Ccc = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Cco = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Subject = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Body = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MimeType = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SendedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LastAttempt = table.Column<DateTime>(type: "datetime", nullable: true),
                    Attempts = table.Column<int>(type: "int", nullable: true),
                    MessageError = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    OriginRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Email", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Email_dbo.EmailBoxSetting_EmailBoxSettingId",
                        column: x => x.EmailBoxSettingId,
                        principalTable: "EmailBoxSetting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Email_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Email_dbo.RegardingEntity_OriginRegardingEntityId",
                        column: x => x.OriginRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Email_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Email_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionHealthProgram",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ExamDefinitionHealthProgram", x => new { x.HealthProgramId, x.ExamDefinitionId });
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionHealthProgram_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionHealthProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionSettingsByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamPeriodicity = table.Column<int>(type: "int", nullable: true),
                    ExamQuantity = table.Column<int>(type: "int", nullable: true),
                    MounthlyAmount = table.Column<int>(type: "int", nullable: true),
                    AnnualAmount = table.Column<int>(type: "int", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LaboratoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    LabManagementQuantityExamInternedPatient = table.Column<int>(type: "int", nullable: true),
                    LabManagementQuantityExamNotInternedPatient = table.Column<int>(type: "int", nullable: true),
                    LabManagementLastUserGuid = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LabManagementLastUser = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LabManagementLastUpdate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ExamDefinitionSettingsByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionSettingsByProgram_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionSettingsByProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionSettingsByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HealthProfessionalHealthProgram",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProfessionalHealthProgram", x => new { x.HealthProgramId, x.HealthProfessionalId });
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalHealthProgram_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.HealthProfessionalHealthProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramAccount",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProgramAccount", x => new { x.HealthProgramId, x.AccountId });
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramAccount_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramAccount_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramDisease",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    IsDiseaseSuspect = table.Column<bool>(type: "bit", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SuspectDiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProgramDisease", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramDisease_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramDisease_dbo.Disease_SuspectDiseaseId",
                        column: x => x.SuspectDiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramDisease_dbo.HealthProgram_HealthProgram_Id",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramDisease_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramExamByEntity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Entity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProgramExamByEntity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramExamByEntity_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramExamByEntity_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramExamByEntity_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramMedicament",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProgramMedicament", x => new { x.HealthProgramId, x.MedicamentId });
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramMedicament_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramMedicament_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramServiceType",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ServiceTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProgramServiceType", x => new { x.HealthProgramId, x.ServiceTypeId });
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramServiceType_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramServiceType_dbo.ServiceType_ServiceTypeId",
                        column: x => x.ServiceTypeId,
                        principalTable: "ServiceType",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "IncidentProduct",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IncidentProduct", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentProduct_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentProduct_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "IncidentSubject",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IncidentSubject", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentSubject_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentSubject_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "JsRulesByEntity",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Rules = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.JsRulesByEntity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.JsRulesByEntity_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.JsRulesByEntity_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentCompetitorHealthProgram",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicamentCompetitorHealthProgram", x => new { x.HealthProgramId, x.MedicamentCompetitorId });
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentCompetitorHealthProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentCompetitorHealthProgram_dbo.MedicamentCompetitor_MedicamentCompetitorId",
                        column: x => x.MedicamentCompetitorId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "MedicationNonadherenceReasonHealthProgram",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicationNonadherenceReasonId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicationNonadherenceReasonHealthProgram", x => new { x.HealthProgramId, x.MedicationNonadherenceReasonId });
                    table.ForeignKey(
                        name: "FK_dbo.MedicationNonadherenceReasonHealthProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.MedicationNonadherenceReasonHealthProgram_dbo.MedicationNonadherenceReason_MedicationNonadherenceReasonId",
                        column: x => x.MedicationNonadherenceReasonId,
                        principalTable: "MedicationNonadherenceReason",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Patient",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AbbreviationName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CivilStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EducationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OccupationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Stature = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Age = table.Column<int>(type: "int", nullable: true),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false, collation: "Latin1_General_CI_AI"),
                    RG = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PatientTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SystemUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Patient", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Patient_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Patient_dbo.Occupation_OccupationId",
                        column: x => x.OccupationId,
                        principalTable: "Occupation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Patient_dbo.StringMap_CivilStatusStringMapId",
                        column: x => x.CivilStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Patient_dbo.StringMap_EducationStringMapId",
                        column: x => x.EducationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Patient_dbo.StringMap_GenderStringMapId",
                        column: x => x.GenderStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Patient_dbo.StringMap_PatientTypeStringMapId",
                        column: x => x.PatientTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Patient_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Patient_dbo.User_SystemUserId",
                        column: x => x.SystemUserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PhoneCall",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    PhoneCallTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CallForRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CallFromRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PhoneNumber1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PhoneNumber2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PhoneNumber3 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Direction = table.Column<int>(type: "int", nullable: false),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UnSuccessfully = table.Column<bool>(type: "bit", nullable: true),
                    UnSuccessfulReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduleReturnDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PhoneCallStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduledStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ScheduledEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActualStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActualEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    Duration = table.Column<int>(type: "int", nullable: true),
                    UserAttempts = table.Column<int>(type: "int", nullable: true),
                    Counter = table.Column<int>(type: "int", nullable: true),
                    AgentId = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CallId = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OriginRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.PhoneCall", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.RegardingEntity_CallForRegardingEntityId",
                        column: x => x.CallForRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.RegardingEntity_CallFromRegardingEntityId",
                        column: x => x.CallFromRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.RegardingEntity_OriginRegardingEntityId",
                        column: x => x.OriginRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.StringMap_PhoneCallStatusStringMapId",
                        column: x => x.PhoneCallStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.StringMap_PhoneCallTypeStringMapId",
                        column: x => x.PhoneCallTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PhoneCall_dbo.StringMap_UnSuccessfulReasonStringMapId",
                        column: x => x.UnSuccessfulReasonStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SMS",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    TicketNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SmsTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SMSFromRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SMSToRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ToPhoneNumber = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Message = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ScheduledSend = table.Column<DateTime>(type: "datetime", nullable: true),
                    ActualSend = table.Column<DateTime>(type: "datetime", nullable: true),
                    SmsStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ParentSMSId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MessageLevel = table.Column<int>(type: "int", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OriginRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SubjectTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.SMS", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.RegardingEntity_OriginRegardingEntityId",
                        column: x => x.OriginRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.RegardingEntity_SMSFromRegardingEntityId",
                        column: x => x.SMSFromRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.RegardingEntity_SMSToRegardingEntityId",
                        column: x => x.SMSToRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.SMS_ParentSMSId",
                        column: x => x.ParentSMSId,
                        principalTable: "SMS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.StringMap_SmsStatusStringMapId",
                        column: x => x.SmsStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.StringMap_SmsTypeStringMapId",
                        column: x => x.SmsTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SMS_dbo.StringMap_SubjectTypeStringMapId",
                        column: x => x.SubjectTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Survey",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    SurveyDescription = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SourceEntityTypeCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SourceEntityName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SourceEntityID = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Status = table.Column<bool>(type: "bit", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    note = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SurveyTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Survey", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Survey_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Survey_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Survey_dbo.StringMap_SurveyTypeStringMapId",
                        column: x => x.SurveyTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Task",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Duration = table.Column<long>(type: "bigint", nullable: false),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OriginRegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Task", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Task_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Task_dbo.RegardingEntity_OriginRegardingEntityId",
                        column: x => x.OriginRegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Task_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Task_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Template",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Subject = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Message = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SmsTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TemplateTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ValidationResult_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Template", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Template_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Template_dbo.StringMap_SmsTypeStringMapId",
                        column: x => x.SmsTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Template_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Template_dbo.StringMap_TemplateTypeStringMapId",
                        column: x => x.TemplateTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Template_dbo.ValidationResult_ValidationResult_Id",
                        column: x => x.ValidationResult_Id,
                        principalTable: "ValidationResult",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TrainingRecord",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TrainingRecordTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TrainingDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RecycleTrainingDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TrainingRecord", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TrainingRecord_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TrainingRecord_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TrainingRecord_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TrainingRecord_dbo.StringMap_TrainingRecordTypeStringMapId",
                        column: x => x.TrainingRecordTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentSettings",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentSituationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentSettings_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentSettings_dbo.Phase_PhaseId",
                        column: x => x.PhaseId,
                        principalTable: "Phase",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentSettings_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentSettings_dbo.TreatmentSituation_TreatmentSituationId",
                        column: x => x.TreatmentSituationId,
                        principalTable: "TreatmentSituation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentSettings_dbo.TreatmentStatusDetail_TreatmentStatusDetailId",
                        column: x => x.TreatmentStatusDetailId,
                        principalTable: "TreatmentStatusDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentSettings_dbo.TreatmentStatus_TreatmentStatusId",
                        column: x => x.TreatmentStatusId,
                        principalTable: "TreatmentStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentStatusDetailHealthProgram",
                columns: table => new
                {
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentStatusDetailHealthProgram", x => new { x.HealthProgramId, x.TreatmentStatusDetailId });
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentStatusDetailHealthProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentStatusDetailHealthProgram_dbo.TreatmentStatusDetail_TreatmentStatusDetailId",
                        column: x => x.TreatmentStatusDetailId,
                        principalTable: "TreatmentStatusDetail",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "UserSystemLog",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActionName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ActionOrder = table.Column<int>(type: "int", nullable: true),
                    ActionKey = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ActionValue = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ActionDescription = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FinishDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.UserSystemLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.UserSystemLog_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.UserSystemLog_dbo.User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "VoucherConfiguration",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CodePattern = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HasSequencialCode = table.Column<bool>(type: "bit", nullable: true),
                    DeadlineInDays = table.Column<int>(type: "int", nullable: true),
                    ExpirationFromScheduling = table.Column<bool>(type: "bit", nullable: true),
                    PeriodicityInMonths = table.Column<int>(type: "int", nullable: true),
                    VoucherConfigTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    MinimumQuantity = table.Column<int>(type: "int", nullable: true),
                    MessageMinimumQuantity = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.VoucherConfiguration", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.VoucherConfiguration_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.VoucherConfiguration_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.VoucherConfiguration_dbo.StringMap_VoucherConfigTypeStringMapId",
                        column: x => x.VoucherConfigTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DoctorsRepresentative",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.DoctorsRepresentative", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorsRepresentative_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorsRepresentative_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorsRepresentative_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorsRepresentative_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorsRepresentative_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorsRepresentative_dbo.Representative_ManagerId",
                        column: x => x.ManagerId,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorsRepresentative_dbo.Representative_RepresentativeId",
                        column: x => x.RepresentativeId,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DoctorsRepresentative_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RegionalManager",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RepresentativeSupervisorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostalCodeCityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostalCodeStateId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.RegionalManager", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.RegionalManager_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.RegionalManager_dbo.PostalCodeCity_PostalCodeCityId",
                        column: x => x.PostalCodeCityId,
                        principalTable: "PostalCodeCity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.RegionalManager_dbo.PostalCodeState_PostalCodeStateId",
                        column: x => x.PostalCodeStateId,
                        principalTable: "PostalCodeState",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.RegionalManager_dbo.Representative_RepresentativeId",
                        column: x => x.RepresentativeId,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.RegionalManager_dbo.Representative_RepresentativeSupervisorId",
                        column: x => x.RepresentativeSupervisorId,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.RegionalManager_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RepresentativeRegion",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsMainRepresentative = table.Column<bool>(type: "bit", nullable: true),
                    ValidationResult_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Representative_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.RepresentativeRegion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.RepresentativeRegion_dbo.Representative_Representative_Id",
                        column: x => x.Representative_Id,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.RepresentativeRegion_dbo.ValidationResult_ValidationResult_Id",
                        column: x => x.ValidationResult_Id,
                        principalTable: "ValidationResult",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionAccountExamTypeByProgram",
                columns: table => new
                {
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountExamTypeByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ExamDefinitionAccountExamTypeByProgram", x => new { x.ExamDefinitionId, x.AccountExamTypeByProgramId });
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionAccountExamTypeByProgram_dbo.AccountExamTypeByProgram_AccountExamTypeByProgramId",
                        column: x => x.AccountExamTypeByProgramId,
                        principalTable: "AccountExamTypeByProgram",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionAccountExamTypeByProgram_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ActionConfiguration",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActionCode = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    SourceEntityName = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    SourceEntityTypeCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Type = table.Column<int>(type: "int", nullable: false),
                    Receiver = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ActionCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActionColorHex = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    BaseDateField = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    UnplannedSubject = table.Column<bool>(type: "bit", nullable: true),
                    ActionOwnerStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ActionConfiguration", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.ActionConfiguration_dbo.ActionCategory_ActionCategoryId",
                        column: x => x.ActionCategoryId,
                        principalTable: "ActionCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ActionConfiguration_dbo.HealthProgram_ProgramId",
                        column: x => x.ProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ActionConfiguration_dbo.StringMap_ActionOwnerStringMapId",
                        column: x => x.ActionOwnerStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ActionConfiguration_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CampaignHealthProfessional",
                columns: table => new
                {
                    CampaignId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.CampaignHealthProfessional", x => new { x.CampaignId, x.HealthProfessionalId });
                    table.ForeignKey(
                        name: "FK_dbo.CampaignHealthProfessional_dbo.Campaign_CampaignId",
                        column: x => x.CampaignId,
                        principalTable: "Campaign",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.CampaignHealthProfessional_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ChatDialogs",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    From = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    To = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    Message = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ChatId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ChatDialogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.ChatDialogs_dbo.Chat_ChatId",
                        column: x => x.ChatId,
                        principalTable: "Chat",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ChatDialogs_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ChatDialogs_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccountSettingsByProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HomeCare = table.Column<bool>(type: "bit", nullable: true),
                    PatientTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MakesInfusion = table.Column<bool>(type: "bit", nullable: true),
                    MakesIT = table.Column<bool>(type: "bit", nullable: true),
                    MakesOT = table.Column<bool>(type: "bit", nullable: true),
                    MakesInfusionSubsidy = table.Column<bool>(type: "bit", nullable: true),
                    SpecialtyDerm = table.Column<bool>(type: "bit", nullable: true),
                    SpecialtyGastro = table.Column<bool>(type: "bit", nullable: true),
                    SpecialtyRheumato = table.Column<bool>(type: "bit", nullable: true),
                    CodeClinicIntegra = table.Column<int>(type: "int", nullable: false),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OtherExam = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ApprovalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Price = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    MainContact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Area = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RequestId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NickName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MounthlyVouchers = table.Column<int>(type: "int", nullable: true),
                    AnnualVouchers = table.Column<int>(type: "int", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SystemUserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EmailAddress = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AnalysisTime = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HomeCollect = table.Column<bool>(type: "bit", nullable: true),
                    UntilKM = table.Column<int>(type: "int", nullable: true),
                    UntilKMValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    BetweenKM = table.Column<int>(type: "int", nullable: true),
                    AndKM = table.Column<int>(type: "int", nullable: true),
                    BetweenKMValue = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    OutsideCoverageAreaAboveKM = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccountSettingsByProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.DoctorByProgram_DoctorByProgramId",
                        column: x => x.DoctorByProgramId,
                        principalTable: "DoctorByProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.StringMap_AccountStatusStringMapId",
                        column: x => x.AccountStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.StringMap_ExamTypeStringMapId",
                        column: x => x.ExamTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.StringMap_PatientTypeStringMapId",
                        column: x => x.PatientTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountSettingsByProgram_dbo.User_SystemUserId",
                        column: x => x.SystemUserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DoctorByProgramAccount",
                columns: table => new
                {
                    DoctorByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.DoctorByProgramAccount", x => new { x.DoctorByProgramId, x.AccountId });
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgramAccount_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.DoctorByProgramAccount_dbo.DoctorByProgram_DoctorByProgramId",
                        column: x => x.DoctorByProgramId,
                        principalTable: "DoctorByProgram",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramDiseaseExam",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CoveredByProgram = table.Column<bool>(type: "bit", nullable: true),
                    ExamTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramDisease_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProgramDiseaseExam", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramDiseaseExam_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramDiseaseExam_dbo.HealthProgramDisease_HealthProgramDisease_Id",
                        column: x => x.HealthProgramDisease_Id,
                        principalTable: "HealthProgramDisease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramDiseaseExam_dbo.StringMap_ExamTypeStringMapId",
                        column: x => x.ExamTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramDiseaseExam_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "IncidentTypeDetailProgram",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentTypeDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    IncidentSubjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentProductId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EmailTemplateName = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IncidentTypeDetailProgram", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentTypeDetailProgram_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentTypeDetailProgram_dbo.IncidentProduct_IncidentProductId",
                        column: x => x.IncidentProductId,
                        principalTable: "IncidentProduct",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentTypeDetailProgram_dbo.IncidentSubject_IncidentSubjectId",
                        column: x => x.IncidentSubjectId,
                        principalTable: "IncidentSubject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentTypeDetailProgram_dbo.IncidentTypeDetail_IncidentTypeDetailId",
                        column: x => x.IncidentTypeDetailId,
                        principalTable: "IncidentTypeDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentTypeDetailProgram_dbo.IncidentType_IncidentTypeId",
                        column: x => x.IncidentTypeId,
                        principalTable: "IncidentType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentTypeDetailProgram_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CustomerAddress",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PrincipalAddress = table.Column<bool>(type: "bit", nullable: true),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CaregiverId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.CustomerAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.CustomerAddress_dbo.Caregiver_CaregiverId",
                        column: x => x.CaregiverId,
                        principalTable: "Caregiver",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CustomerAddress_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CustomerAddress_dbo.StringMap_AddressTypeStringMapId",
                        column: x => x.AddressTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CustomerAddress_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PatientSalesOrder",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CPFCNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsNewPatient = table.Column<bool>(type: "bit", nullable: true),
                    HasUsedProductBefore = table.Column<bool>(type: "bit", nullable: true),
                    PatientSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SolicitorStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HasPrescription = table.Column<bool>(type: "bit", nullable: true),
                    DoctorFullName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorLicenseNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorLicenseState = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MedicalSpecialty = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasHealthcareProvider = table.Column<bool>(type: "bit", nullable: true),
                    HealthcareProviderId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiagnosticDescription = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BillingDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PurchaseAskDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    HasStoreSent = table.Column<bool>(type: "bit", nullable: true),
                    StoreSentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    HasReturned = table.Column<bool>(type: "bit", nullable: true),
                    IsPurchaseDone = table.Column<bool>(type: "bit", nullable: true),
                    HasBoughtOnFirstContact = table.Column<bool>(type: "bit", nullable: true),
                    InvoiceNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FormOfPayment = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentTerms = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrengthMedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    UnitPrice = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TotalPrice = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    HasUsedProgramClinic = table.Column<bool>(type: "bit", nullable: true),
                    ActualDeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonOrderFailed = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    MedicalInsurance = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.PatientSalesOrder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.Account_HealthcareProviderId",
                        column: x => x.HealthcareProviderId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.StrengthMedicament_StrengthMedicamentId",
                        column: x => x.StrengthMedicamentId,
                        principalTable: "StrengthMedicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.StringMap_PatientSourceStringMapId",
                        column: x => x.PatientSourceStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.StringMap_SolicitorStringMapId",
                        column: x => x.SolicitorStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.PatientSalesOrder_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HealthProgramTemplateSetting",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntityMetadataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttributeName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ScheduleDays = table.Column<int>(type: "int", nullable: true),
                    EmailBoxSettingId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TemplateTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    TemplateId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    To = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Ccc = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TemplateTypeStringMap_StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.HealthProgramTemplateSetting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramTemplateSetting_dbo.EmailBoxSetting_EmailBoxSettingId",
                        column: x => x.EmailBoxSettingId,
                        principalTable: "EmailBoxSetting",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramTemplateSetting_dbo.EntityMetadata_EntityMetadataId",
                        column: x => x.EntityMetadataId,
                        principalTable: "EntityMetadata",
                        principalColumn: "EntityMetadataId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramTemplateSetting_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramTemplateSetting_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramTemplateSetting_dbo.StringMap_TemplateTypeStringMap_StringMapId",
                        column: x => x.TemplateTypeStringMap_StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.HealthProgramTemplateSetting_dbo.Template_TemplateId",
                        column: x => x.TemplateId,
                        principalTable: "Template",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionVoucherConfiguration",
                columns: table => new
                {
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VoucherConfigurationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ExamDefinitionVoucherConfiguration", x => new { x.ExamDefinitionId, x.VoucherConfigurationId });
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionVoucherConfiguration_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionVoucherConfiguration_dbo.VoucherConfiguration_VoucherConfigurationId",
                        column: x => x.VoucherConfigurationId,
                        principalTable: "VoucherConfiguration",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ActionRule",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PeriodicityDays = table.Column<int>(type: "int", nullable: false),
                    Attempt = table.Column<int>(type: "int", nullable: false),
                    IsSuccess = table.Column<bool>(type: "bit", nullable: false),
                    IsContinuous = table.Column<bool>(type: "bit", nullable: false),
                    ActionConfigurationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ActionRule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.ActionRule_dbo.ActionConfiguration_ActionConfigurationId",
                        column: x => x.ActionConfigurationId,
                        principalTable: "ActionConfiguration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ActionRule_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.ActionRule_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AccountInternalDemand",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LaboratoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: false),
                    ValidationResult_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountSettingsByProgram_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AccountInternalDemand", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AccountInternalDemand_dbo.AccountSettingsByProgram_AccountSettingsByProgram_Id",
                        column: x => x.AccountSettingsByProgram_Id,
                        principalTable: "AccountSettingsByProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AccountInternalDemand_dbo.ValidationResult_ValidationResult_Id",
                        column: x => x.ValidationResult_Id,
                        principalTable: "ValidationResult",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AdhesionAttendance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasUsed = table.Column<bool>(type: "bit", nullable: true),
                    MedicationNonadherenceReasonId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    KeepOnTheProgram = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentFinishedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExpectedDateToReturn = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentSettingsId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentStarted = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    WillStart = table.Column<bool>(type: "bit", nullable: true),
                    DateToStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    DetailDifficultyWithAccessStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConsentDataShare = table.Column<bool>(type: "bit", nullable: true),
                    OriginStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Month = table.Column<int>(type: "int", nullable: true),
                    Week = table.Column<int>(type: "int", nullable: true),
                    FollowedPrescription = table.Column<bool>(type: "bit", nullable: true),
                    DosageStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    FrequencyStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LastDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReleaseNextShipment = table.Column<bool>(type: "bit", nullable: true),
                    NextDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentIntervalStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DateofLastInfusion = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateofNextInfusion = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateofLastConsultation = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateoftheNextConsultation = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateofUse = table.Column<DateTime>(type: "datetime", nullable: true),
                    Cycle = table.Column<int>(type: "int", nullable: true),
                    PharmacovigilanceReported = table.Column<bool>(type: "bit", nullable: true),
                    Dosage = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoseOptimizationPatient = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AdhesionAttendance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.MedicamentCompetitor_MedicamentCompetitorId",
                        column: x => x.MedicamentCompetitorId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.MedicationNonadherenceReason_MedicationNonadherenceReasonId",
                        column: x => x.MedicationNonadherenceReasonId,
                        principalTable: "MedicationNonadherenceReason",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.StringMap_DetailDifficultyWithAccessStringMapId",
                        column: x => x.DetailDifficultyWithAccessStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.StringMap_DosageStringMapId",
                        column: x => x.FrequencyStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.StringMap_OriginStringMapId",
                        column: x => x.OriginStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.StringMap_TreatmentIntervalStringMapId",
                        column: x => x.TreatmentIntervalStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AdhesionAttendance_dbo.TreatmentSettings_TreatmentSettingsId",
                        column: x => x.TreatmentSettingsId,
                        principalTable: "TreatmentSettings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AttemptCallLog",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    TreatmentAndDiagnosticActionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PhoneCallId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Date = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.AttemptCallLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.AttemptCallLog_dbo.PhoneCall_PhoneCallId",
                        column: x => x.PhoneCallId,
                        principalTable: "PhoneCall",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.AttemptCallLog_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Benefit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BenefitTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    ScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RealizationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    BenefitStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PreviewDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CustomBoolean1 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomString1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Custom1StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Custom2StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Benefit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Benefit_dbo.Account_LocalId",
                        column: x => x.LocalId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Benefit_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Benefit_dbo.StringMap_BenefitStatusStringMapId",
                        column: x => x.BenefitStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Benefit_dbo.StringMap_BenefitTypeStringMapId",
                        column: x => x.BenefitTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Benefit_dbo.StringMap_Custom1StringMapId",
                        column: x => x.Custom1StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Benefit_dbo.StringMap_Custom2StringMapId",
                        column: x => x.Custom2StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Benefit_dbo.StringMap_SourceStringMapId",
                        column: x => x.SourceStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Benefit_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CalendarScheduled",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ScheduleTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    AllDay = table.Column<bool>(type: "bit", nullable: true),
                    Start = table.Column<DateTime>(type: "datetime", nullable: true),
                    End = table.Column<DateTime>(type: "datetime", nullable: true),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ScheduleTypeStringMap_StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.CalendarScheduled", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.CalendarScheduled_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CalendarScheduled_dbo.StringMap_ScheduleTypeStringMap_StringMapId",
                        column: x => x.ScheduleTypeStringMap_StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.CalendarScheduled_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Diagnostic",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave primária da tabela"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Primeiro nome do paciente", collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Ultimo nome do paciente", collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Nome completo do paciente", collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Endereço de email 1 do paciente", collation: "Latin1_General_CI_AI"),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone 1 do paciente", collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone móvel 1 do paciente", collation: "Latin1_General_CI_AI"),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true, comment: "Data de aniversário do paciente"),
                    Age = table.Column<int>(type: "int", nullable: true, comment: "Idade do paciente"),
                    CPF = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "CPF do paciente", collation: "Latin1_General_CI_AI"),
                    ReturnDateContact = table.Column<DateTime>(type: "datetime", nullable: true),
                    AddressTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela string map para o tipo de endereço"),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "CEP do paciente", collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Logradouro do paciente", collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Número da residência do paciente", collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Informações complementares do endereço do paciente", collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Bairro do paciente", collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Cidade do paciente", collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "UF da localidade do paciente", collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "País do paciente", collation: "Latin1_General_CI_AI"),
                    FirstName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Primeiro nome do cuidador do paciente", collation: "Latin1_General_CI_AI"),
                    LastName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Ultimo nome do cuidador do paciente", collation: "Latin1_General_CI_AI"),
                    FullName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Nome completo do cuidador do paciente", collation: "Latin1_General_CI_AI"),
                    EmailAddress1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Endereço de email 1 do cuidador do paciente", collation: "Latin1_General_CI_AI"),
                    Telephone1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone 1 do cuidador do paciente", collation: "Latin1_General_CI_AI"),
                    Mobilephone1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone móvel 1 do cuidador do paciente", collation: "Latin1_General_CI_AI"),
                    Birthdate_Caregiver = table.Column<DateTime>(type: "datetime", nullable: true, comment: "Aniversário do cuidador do paciente"),
                    CPF_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "CPF do cuidador", collation: "Latin1_General_CI_AI"),
                    FromSystem = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FromSystemId = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "chave estrangeira da tabela HealthProgram, que indica a qual programa o paciente participa"),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "chave estrangeira da tabela Disease, que indica qual é a doença diagnosticada do paciente"),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "chave estrangeira da tabela Doctor, que indica qual médico diagnosticou este paciente"),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "chave estrangeira da tabela Patient, que indica qual paciente está vinculado a este diagnóstido"),
                    MainContactStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da stringmap onde indica se o contato cadastrado é o contato principal"),
                    CaregiverId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela Caregiver, que indica qual é o cuidador do paciente"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, comment: "Codigo alfanumérico de identificação do diagnóstico no sistema", collation: "Latin1_General_CI_AI"),
                    IsQualified = table.Column<bool>(type: "bit", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, comment: "Campo que indica qual programa o paciente participa", collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true, comment: "Data de criação do registro no banco de dados"),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true, comment: "Data de modificação do registro no banco de dados"),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true, comment: "Data de inativação do registro no banco de dados"),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "Chave estrangeira da tabela User, indica qual usuário que inseriu o registro no sistema"),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, comment: "Nome do usuário que inseriu o registro no sistema.", collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "Chave estrangeira da tabela User, indica qual usuário que alterou o registro no sistema"),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, comment: "Nome do usuário que alterou o registro no sistema.", collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "Chave estrangeira da tabela User, indica qual usuário deletou o registro no sistema"),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, comment: "Nome do usuário que deletou o registro no sistema.", collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false, comment: "Campo que indica se o diagnóstico está deletado"),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true, comment: "Chave estrangeira da tabela User, indica qual usuário é o dono do registro"),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, comment: "Nome do usuário que é o dono do registro.", collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true, comment: "Campo que indica se o diagnóstico está ativo."),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da stringmap onde descreve qual o status do diagnóstico."),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Campo para detalhar quais os motivos da inativação do diagnóstico."),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, comment: "Campo para detalhar quais os motivos da exclusão do diagnóstico.", collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, comment: "Codigo alfanumérico de identificação do diagnóstico no sistema, também utilizado para códigos provenientes de importação de dados", collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "campo para informações internas."),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ReportReceived = table.Column<bool>(type: "bit", nullable: true),
                    PatientDiagnosed = table.Column<bool>(type: "bit", nullable: true),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela StringMap, indica qual o gênero do paciente."),
                    PatientSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "chave estrangeira da tabela StringMap, indica qual meio de contato da operação e o paciente para tratar de assuntos do programa"),
                    DiagnosticStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela StringMap, indica qual status de andamento do diagnóstico"),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true, comment: "Campo que atesta o consentimento do paciente a participar do programa"),
                    MondayStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SpecificTimeMonday = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TuesdayStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SpecificTimeTuesday = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WednesdayStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SpecificTimeWednesday = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ThursdayStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SpecificTimeThursday = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FridayStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SpecificTimeFriday = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SaturdayStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SpecificTimeSaturday = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela Account onde indica qual é o local de tratamento"),
                    DiagnosticStatusDetailStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela StringMap, indica qual o SubStatus do tratamento"),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone 2 do paciente"),
                    MedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela MedicamentCompetitor onde indica qual medicamento é utilizado para o tratamento."),
                    PreferredTimeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela StringMap onde indica a preferência do paciente para realizar o tratamento."),
                    Stature = table.Column<decimal>(type: "decimal(18,2)", nullable: true, comment: "Campo onde é informado a altura do paciente"),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true, comment: "Campo onde é informado o peso do paciente"),
                    Telephone1Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone de observação 1 do paciente"),
                    Telephone2Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone de observação 2 do paciente"),
                    Telephone3 = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone 3 do paciente"),
                    Telephone3Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone de observação 3 do paciente"),
                    Mobilephone1Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone móvel de observação 1 do paciente"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone móvel 2 do paciente"),
                    Mobilephone2Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone móvel de observação 2 do paciente"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone móvel 3  do paciente"),
                    Mobilephone3Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Telefone móvel de observação 4 do paciente"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Endereço de email 2 do paciente"),
                    RNE = table.Column<string>(type: "nvarchar(max)", nullable: false, comment: "Campo para inserir o Registro Nacional Unico, para pacientes de origem estrangeira."),
                    KinshipStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false, comment: "Chave estrangeira da tabela StringMap, indica qual o grau de parentesco entre o cuidador e o paciente."),
                    DoctorsEmailforExamResult = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DeclarationInformation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MedicalSpecialtyId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CategoryOfExamsStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasProgramMaterial = table.Column<bool>(type: "bit", nullable: true),
                    HaveMedicalRequesTofHLAB27OrMagneticResonance = table.Column<bool>(type: "bit", nullable: true),
                    PatientUsedAnotherMedication = table.Column<bool>(type: "bit", nullable: true),
                    PreviousMedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentLineStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToSendDataToDoctor = table.Column<bool>(type: "bit", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PatientDiagnosedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentLine2StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasOPS = table.Column<bool>(type: "bit", nullable: true),
                    PreviousTreatmentAmount = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MultipleExamsType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OtherTypeExams = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HasKit = table.Column<bool>(type: "bit", nullable: true),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MultipleMedicamentCompetitor = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsentFormCompleted = table.Column<bool>(type: "bit", nullable: true),
                    ConsentAccreditedLaboratory = table.Column<bool>(type: "bit", nullable: true),
                    ProtocolNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RequestDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateLogisticalCollection = table.Column<DateTime>(type: "datetime", nullable: true),
                    TransitDateToLaboratory = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReportReleaseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    BlockReturnDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionReceived = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionIsValid = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PrescriptionValidationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionValidatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrescriptionDueDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionHasDivergentInterval = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasLackOfInterval = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasDateMissing = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasStampSignatureMissing = table.Column<bool>(type: "bit", nullable: true),
                    WillDoctorMakeNewPrescription = table.Column<bool>(type: "bit", nullable: true),
                    DoctorPrescriberId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountSettingsByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SkypeUser_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConsentToReceiveLogistics = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPD = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPDDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SourceConsentStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InTreatment = table.Column<bool>(type: "bit", nullable: true),
                    TypeOfAnalysisStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StageOfDiseaseStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EthnicityStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthCareProviderId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressCity_Patient = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressState_Patient = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomBoolean1 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean3 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean4 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean5 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean6 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean7 = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Diagnostic", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.AccountSettingsByProgram_AccountSettingsByProgramId",
                        column: x => x.AccountSettingsByProgramId,
                        principalTable: "AccountSettingsByProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.Account_HealthCareProviderId",
                        column: x => x.HealthCareProviderId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.Caregiver_CaregiverId",
                        column: x => x.CaregiverId,
                        principalTable: "Caregiver",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.Doctor_DoctorPrescriberId",
                        column: x => x.DoctorPrescriberId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.MedicalSpecialty_MedicalSpecialtyId",
                        column: x => x.MedicalSpecialtyId,
                        principalTable: "MedicalSpecialty",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.MedicamentCompetitor_MedicamentCompetitorId",
                        column: x => x.MedicamentCompetitorId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId",
                        column: x => x.PreviousMedicamentCompetitorId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_AddressTypeStringMapId",
                        column: x => x.AddressTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_CategoryOfExamsStringMapId",
                        column: x => x.CategoryOfExamsStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_DiagnosticStatusDetailStringMapId",
                        column: x => x.DiagnosticStatusDetailStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_DiagnosticStatusStringMapId",
                        column: x => x.DiagnosticStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_EthnicityStringMapId",
                        column: x => x.EthnicityStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_FridayStringMapId",
                        column: x => x.FridayStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_GenderStringMapId",
                        column: x => x.GenderStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_KinshipStringMapId",
                        column: x => x.KinshipStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_MainContactStringMapId",
                        column: x => x.MainContactStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_MondayStringMapId",
                        column: x => x.MondayStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_PatientSourceStringMapId",
                        column: x => x.PatientSourceStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_PreferredTimeStringMapId",
                        column: x => x.PreferredTimeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_PrescriptionStatusStringMapId",
                        column: x => x.PrescriptionStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_SaturdayStringMapId",
                        column: x => x.SaturdayStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_SourceConsentStringMapId",
                        column: x => x.SourceConsentStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_StageOfDiseaseStringMapId",
                        column: x => x.StageOfDiseaseStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_ThursdayStringMapId",
                        column: x => x.ThursdayStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_TreatmentLine2StringMapId",
                        column: x => x.TreatmentLine2StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_TreatmentLineStringMapId",
                        column: x => x.TreatmentLineStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_TuesdayStringMapId",
                        column: x => x.TuesdayStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_TypeOfAnalysisStringMapId",
                        column: x => x.TypeOfAnalysisStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.StringMap_WednesdayStringMapId",
                        column: x => x.WednesdayStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Diagnostic_dbo.User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Tabela de diagnósticos ");

            migrationBuilder.CreateTable(
                name: "DiagnosticExam",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RealizationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    NeedCaptation = table.Column<bool>(type: "bit", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DiagnosticStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ResponsibleForReceiving = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.DiagnosticExam", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.DiagnosticExam_dbo.Account_LocalId",
                        column: x => x.LocalId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DiagnosticExam_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DiagnosticExam_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DiagnosticExam_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DiagnosticExam_dbo.StringMap_DiagnosticStatusStringMapId",
                        column: x => x.DiagnosticStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DiagnosticExam_dbo.StringMap_ExamTypeStringMapId",
                        column: x => x.ExamTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.DiagnosticExam_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Exam",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduleDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RealizationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    NeedCaptation = table.Column<bool>(type: "bit", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduleSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    VoucherByEmail = table.Column<bool>(type: "bit", nullable: true),
                    ReportSent = table.Column<bool>(type: "bit", nullable: true),
                    ExpectedDateToSend = table.Column<DateTime>(type: "datetime", nullable: true),
                    ETicket = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DueETicket = table.Column<DateTime>(type: "datetime", nullable: true),
                    WithdrawalPreferenceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorHasFilterPaper = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermReceived = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermValidated = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentTermValidatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentTermValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HaveDateReturnDoctor = table.Column<bool>(type: "bit", nullable: true),
                    DateReturnDoctor = table.Column<DateTime>(type: "datetime", nullable: true),
                    NumberofTubes = table.Column<int>(type: "int", nullable: false),
                    DateIssueReport = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateOfApproval = table.Column<DateTime>(type: "datetime", nullable: true),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsSchedule_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    WithdrawalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReschedulingReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VoucherReceived = table.Column<bool>(type: "bit", nullable: true),
                    VoucherValidated = table.Column<bool>(type: "bit", nullable: true),
                    VoucherValidatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    VoucherValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsScheduleItemId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasDiagnosis = table.Column<bool>(type: "bit", nullable: true),
                    Distance = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    MedicationUseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentEligibilityCriteria = table.Column<bool>(type: "bit", nullable: true),
                    ConsentResponsibility = table.Column<bool>(type: "bit", nullable: true),
                    ConsentSample = table.Column<bool>(type: "bit", nullable: true),
                    ConsentCloseDiagnostic = table.Column<bool>(type: "bit", nullable: true),
                    ConsentUseImatinibNilotinib = table.Column<bool>(type: "bit", nullable: true),
                    ResultStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OwnershipLevelStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Exam", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.Account_LocalId",
                        column: x => x.LocalId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.Diagnostic_DiagnosticId",
                        column: x => x.DiagnosticId,
                        principalTable: "Diagnostic",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.StringMap_ExamStatusStringMapId",
                        column: x => x.ExamStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.StringMap_OwnershipLevelStringMapId",
                        column: x => x.OwnershipLevelStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.StringMap_ReschedulingReasonStringMapId",
                        column: x => x.ReschedulingReasonStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.StringMap_ResultStringMapId",
                        column: x => x.ResultStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.StringMap_ScheduleSourceStringMapId",
                        column: x => x.ScheduleSourceStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Exam_dbo.StringMap_WithdrawalPreferenceStringMapId",
                        column: x => x.WithdrawalPreferenceStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ExamDefinitionExam",
                columns: table => new
                {
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.ExamDefinitionExam", x => new { x.ExamDefinitionId, x.ExamId });
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionExam_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.ExamDefinitionExam_dbo.Exam_ExamId",
                        column: x => x.ExamId,
                        principalTable: "Exam",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Incident",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Subject = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OriginStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CustomerTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CustomerAccountName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressReference = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TelephoneFax = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IncidentProductId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentTypeDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    RegardingEntityId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ContactTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorCPF = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LicenseNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequestStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    SendPeriodicity = table.Column<int>(type: "int", nullable: true),
                    AmountPatientInfusing = table.Column<int>(type: "int", nullable: true),
                    RequestDateStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    RequestDateEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    RequestBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleForReceiving = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TelephoneReceiver = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DistributorLogisticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PartnerCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CTE = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    InformedDateByPartner = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryDone = table.Column<bool>(type: "bit", nullable: true),
                    PartnerConfirmDelivery = table.Column<bool>(type: "bit", nullable: true),
                    IncidentSubjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Lot = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AcquisitionLocation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveVisit = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveLogistics = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToSendDataToDoctor = table.Column<bool>(type: "bit", nullable: true),
                    ConsentDataShare = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceived = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionIsValid = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PrescriptionValidationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionValidatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    PreviousMedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SectorOfTheRequester = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Age = table.Column<int>(type: "int", nullable: true),
                    MedicalSpecialtyId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentLineStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountAuthorizationNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCityPatient = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressStatePatient = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressCityDoctor = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AddressStateDoctor = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomBoolean1 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean3 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean4 = table.Column<bool>(type: "bit", nullable: true),
                    CustomString1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString4 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString5 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString6 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomDateTime1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    CustomDateTime2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    Custom1StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Custom2StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Incident", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.Account_DistributorLogisticId",
                        column: x => x.DistributorLogisticId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.IncidentProduct_IncidentProductId",
                        column: x => x.IncidentProductId,
                        principalTable: "IncidentProduct",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.IncidentSubject_IncidentSubjectId",
                        column: x => x.IncidentSubjectId,
                        principalTable: "IncidentSubject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.IncidentTypeDetail_IncidentTypeDetailId",
                        column: x => x.IncidentTypeDetailId,
                        principalTable: "IncidentTypeDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.IncidentType_IncidentTypeId",
                        column: x => x.IncidentTypeId,
                        principalTable: "IncidentType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.MedicalSpecialty_MedicalSpecialtyId",
                        column: x => x.MedicalSpecialtyId,
                        principalTable: "MedicalSpecialty",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId",
                        column: x => x.PreviousMedicamentCompetitorId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.RegardingEntity_RegardingEntityId",
                        column: x => x.RegardingEntityId,
                        principalTable: "RegardingEntity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.Representative_RepresentativeId",
                        column: x => x.RepresentativeId,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_AccountTypeStringMapId",
                        column: x => x.AccountTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_ContactTypeStringMapId",
                        column: x => x.ContactTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_Custom1StringMapId",
                        column: x => x.Custom1StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_Custom2StringMapId",
                        column: x => x.Custom2StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_CustomerTypeStringMapId",
                        column: x => x.CustomerTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_OriginStringMapId",
                        column: x => x.OriginStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_PrescriptionStatusStringMapId",
                        column: x => x.PrescriptionStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_RequestStatusStringMapId",
                        column: x => x.RequestStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_StatusStringMapId",
                        column: x => x.StatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Incident_dbo.StringMap_TreatmentLineStringMapId",
                        column: x => x.TreatmentLineStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "IncidentItem",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Age = table.Column<int>(type: "int", nullable: true),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CPF = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Used = table.Column<bool>(type: "bit", nullable: true),
                    Elegible = table.Column<bool>(type: "bit", nullable: true),
                    Aproved = table.Column<bool>(type: "bit", nullable: true),
                    Haspatientusedbiologiccmedicationbefore = table.Column<bool>(type: "bit", nullable: true),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RequestAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AprovedAccessDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.IncidentItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentItem_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentItem_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentItem_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentItem_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentItem_dbo.Incident_IncidentId",
                        column: x => x.IncidentId,
                        principalTable: "Incident",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentItem_dbo.StringMap_GenderStringMapId",
                        column: x => x.GenderStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.IncidentItem_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InformationCollect",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PlaceOfCollectionStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CollectionDiagnosisStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DateandTimeCollect = table.Column<DateTime>(type: "datetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.InformationCollect", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.InformationCollect_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.InformationCollect_dbo.StringMap_CollectionDiagnosisStringMapId",
                        column: x => x.CollectionDiagnosisStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.InformationCollect_dbo.StringMap_PlaceOfCollectionStringMapId",
                        column: x => x.PlaceOfCollectionStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.InformationCollect_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InformationVisit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EntryDateandTimeVisit = table.Column<DateTime>(type: "datetime", nullable: false),
                    DepartureDateandTimeVisit = table.Column<DateTime>(type: "datetime", nullable: false),
                    TotalkmTraveled = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    DoctorPrescription = table.Column<bool>(type: "bit", nullable: false),
                    AbsenceJustificationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.InformationVisit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.InformationVisit_dbo.StringMap_AbsenceJustificationStringMapId",
                        column: x => x.AbsenceJustificationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.InformationVisit_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.InformationVisit_dbo.StringMap_VisitStatusStringMapId",
                        column: x => x.VisitStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Infusion",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    InfusionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionPlaceTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PlaceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionPlaceProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduledDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Observations = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ActualDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Dosage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ApplicationTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountableHealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionWeekStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ApprovalRequired = table.Column<bool>(type: "bit", nullable: true),
                    InfusionApproved = table.Column<bool>(type: "bit", nullable: true),
                    ExceptionReason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreviousInfusionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RemipackKitQuantity = table.Column<int>(type: "int", nullable: true),
                    Lot = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsPaid = table.Column<bool>(type: "bit", nullable: true),
                    PaidBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentSubmissionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionSent = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionValidated = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionValidationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreviewDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleAmountStored = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleAmountExpected = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonInfusionNotDoneStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionDispatchNumberStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UseNumber = table.Column<int>(type: "int", nullable: true),
                    Days = table.Column<int>(type: "int", nullable: true),
                    Month = table.Column<int>(type: "int", nullable: true),
                    LogisticsId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientSalesOrderId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Week = table.Column<int>(type: "int", nullable: true),
                    SupportFieldStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Infusion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.Account_PlaceId",
                        column: x => x.PlaceId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.HealthProfessional_AccountableHealthProfessionalId",
                        column: x => x.AccountableHealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.HealthProfessional_InfusionPlaceProfessionalId",
                        column: x => x.InfusionPlaceProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.PatientSalesOrder_PatientSalesOrderId",
                        column: x => x.PatientSalesOrderId,
                        principalTable: "PatientSalesOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_ApplicationTypeStringMapId",
                        column: x => x.ApplicationTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_InfusionDispatchNumberStringMapId",
                        column: x => x.InfusionDispatchNumberStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_InfusionPlaceTypeStringMapId",
                        column: x => x.InfusionPlaceTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_InfusionStatusStringMapId",
                        column: x => x.InfusionStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_InfusionTypeStringMapId",
                        column: x => x.InfusionTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_InfusionWeekStringMapId",
                        column: x => x.InfusionWeekStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_ReasonInfusionNotDoneStringMapId",
                        column: x => x.ReasonInfusionNotDoneStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Infusion_dbo.StringMap_SupportFieldStringMapId",
                        column: x => x.SupportFieldStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Logistics",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    LogisticsTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SendStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LogisticsPartnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequestDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PreviousDeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TrackingCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressReference = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    UCB_HasPrescription = table.Column<bool>(type: "bit", nullable: true),
                    UCB_ValidatedPrescription = table.Column<bool>(type: "bit", nullable: true),
                    UCB_PrescriptionValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UCB_DateSendedPrescription = table.Column<DateTime>(type: "datetime", nullable: true),
                    UCB_ReasonSendedBlank = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UCB_KitSentReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryTime = table.Column<int>(type: "int", nullable: true),
                    SendSubStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentDescription = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Devolutive = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Devolutivedate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DevolutiveDescription = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ExpectecdDeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RequestCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DateActionLogistics = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReceivedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IntegrationStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CorreiosTrackingCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConfirmedReceipt = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean1 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomString1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString4 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString5 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString6 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomDateTime1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    CustomDateTime2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    Custom1StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Custom2StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Logistics", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.Account_LogisticsPartnerId",
                        column: x => x.LogisticsPartnerId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_Custom1StringMapId",
                        column: x => x.Custom1StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_Custom2StringMapId",
                        column: x => x.Custom2StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_IncidentStatusStringMapId",
                        column: x => x.IncidentStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_IntegrationStatusStringMapId",
                        column: x => x.IntegrationStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_LogisticsTypeStringMapId",
                        column: x => x.LogisticsTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_SendStatusStringMapId",
                        column: x => x.SendStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_SendSubStatusStringMapId",
                        column: x => x.SendSubStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Logistics_dbo.StringMap_UCB_KitSentReasonStringMapId",
                        column: x => x.UCB_KitSentReasonStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsSchedule",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    LogisticsScheduleTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduleStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduledStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ScheduledEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    LogisticsPartnerCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPFDoctor = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CTE = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SendRequestKit = table.Column<bool>(type: "bit", nullable: true),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequestDoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LogisticsPartnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ClientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Action = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ConfirmWithdrawal = table.Column<bool>(type: "bit", nullable: true),
                    DeliveryLaboratoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ResponsibleForReceiving = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleForCollecting = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AmountUsed = table.Column<int>(type: "int", nullable: true),
                    AmountCanceled = table.Column<int>(type: "int", nullable: true),
                    CurrentBalance = table.Column<int>(type: "int", nullable: true),
                    DateForReceiving = table.Column<DateTime>(type: "datetime", nullable: true),
                    IncidentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DateForCollecting = table.Column<DateTime>(type: "datetime", nullable: true),
                    KitTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LocalTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OtherPlace = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LocalDeliveryWithdrawStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OtherLocalDeliveryWithdraw = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ApprovedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RequestBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Orientation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DeliveryPeriod = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResponsibleTelephoneWithdrawal = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WithdrawalTime = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Section = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConsultantId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Exam_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CNPJ = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Temperature = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IntegrationStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    isLegacy = table.Column<bool>(type: "bit", nullable: true),
                    LegacyId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ReportDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConfirmWithdrawalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateReceivingBlock = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReportReleaseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    RetesteReleased = table.Column<bool>(type: "bit", nullable: true),
                    ConsentTermRecivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StorageTubeTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ShortSampleSupplyForTwoExams = table.Column<bool>(type: "bit", nullable: true),
                    ChosenExamTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FGFRThroughNGS = table.Column<bool>(type: "bit", nullable: true),
                    AuthorizedByClient = table.Column<bool>(type: "bit", nullable: true),
                    EnoughSampleSupplyForOneExam = table.Column<bool>(type: "bit", nullable: true),
                    PendingCollectionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingCollection = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RecollectionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryConfirmationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeliveryConfirmationPendingDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingDelivery = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CancelDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsPendingAnalysis = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ResultDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Result = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SchedulingPendencyDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReasonsSchedulingPendency = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreferredTimeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountSettingsByProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExpectedDeliveryDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PendingAnalysisDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReturnDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    MainContact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContactTelephoneExtension = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RecollectDate = table.Column<DateTime>(type: "datetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LogisticsSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.AccountSettingsByProgram_AccountSettingsByProgramId",
                        column: x => x.AccountSettingsByProgramId,
                        principalTable: "AccountSettingsByProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Account_ClientId",
                        column: x => x.ClientId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Account_DeliveryLaboratoryId",
                        column: x => x.DeliveryLaboratoryId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Account_LocalId",
                        column: x => x.LocalId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Account_LogisticsPartnerId",
                        column: x => x.LogisticsPartnerId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Diagnostic_DiagnosticId",
                        column: x => x.DiagnosticId,
                        principalTable: "Diagnostic",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Doctor_RequestDoctorId",
                        column: x => x.RequestDoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Exam_Exam_Id",
                        column: x => x.Exam_Id,
                        principalTable: "Exam",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.Incident_IncidentId",
                        column: x => x.IncidentId,
                        principalTable: "Incident",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_ChosenExamTypeStringMapId",
                        column: x => x.ChosenExamTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_IntegrationStatusStringMapId",
                        column: x => x.IntegrationStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_KitTypeStringMapId",
                        column: x => x.KitTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_LocalDeliveryWithdrawStringMapId",
                        column: x => x.LocalDeliveryWithdrawStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_LocalTypeStringMapId",
                        column: x => x.LocalTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_LogisticsScheduleTypeStringMapId",
                        column: x => x.LogisticsScheduleTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_PreferredTimeStringMapId",
                        column: x => x.PreferredTimeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_ScheduleStatusStringMapId",
                        column: x => x.ScheduleStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.StringMap_StorageTubeTypeStringMapId",
                        column: x => x.StorageTubeTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsSchedule_dbo.User_ConsultantId",
                        column: x => x.ConsultantId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsStuff",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CodeNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AvailableQuantity = table.Column<int>(type: "int", nullable: true),
                    LogisticsStuffTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StuffStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SAPCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ANVISACode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    BarCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TaxClassification = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ListPrice = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManufacturerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrengthMedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Packing = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IsInStock = table.Column<bool>(type: "bit", nullable: true),
                    ProductFeatures = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ForecastCast = table.Column<DateTime>(type: "datetime", nullable: true),
                    IsControlled = table.Column<bool>(type: "bit", nullable: true),
                    NeedsAprovals = table.Column<bool>(type: "bit", nullable: true),
                    HasPeriodicSend = table.Column<bool>(type: "bit", nullable: true),
                    IsReset = table.Column<bool>(type: "bit", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    KitId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PrescritionIsRequired = table.Column<bool>(type: "bit", nullable: true),
                    LogisticsSchedule_Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasServFarmaIntegration = table.Column<bool>(type: "bit", nullable: true),
                    LaboratoryCode = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LogisticsStuff", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.Account_ManufacturerId",
                        column: x => x.ManufacturerId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.LogisticsSchedule_LogisticsSchedule_Id",
                        column: x => x.LogisticsSchedule_Id,
                        principalTable: "LogisticsSchedule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.LogisticsStuff_KitId",
                        column: x => x.KitId,
                        principalTable: "LogisticsStuff",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.StrengthMedicament_StrengthMedicamentId",
                        column: x => x.StrengthMedicamentId,
                        principalTable: "StrengthMedicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.StringMap_LogisticsStuffTypeStringMapId",
                        column: x => x.LogisticsStuffTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuff_dbo.StringMap_StuffStatusStringMapId",
                        column: x => x.StuffStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LogisticsStuffKits",
                columns: table => new
                {
                    KitsId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LogisticsStuffId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LogisticsStuffKits", x => new { x.KitsId, x.LogisticsStuffId });
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuffKits_dbo.LogisticsStuff_KitsId",
                        column: x => x.KitsId,
                        principalTable: "LogisticsStuff",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsStuffKits_dbo.LogisticsStuff_LogisticsStuffId",
                        column: x => x.LogisticsStuffId,
                        principalTable: "LogisticsStuff",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "LogisticsScheduleItem",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    AbbreviationName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Age = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Mutable = table.Column<bool>(type: "bit", nullable: true),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CPF = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.LogisticsScheduleItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsScheduleItem_dbo.LogisticsSchedule_LogisticsScheduleId",
                        column: x => x.LogisticsScheduleId,
                        principalTable: "LogisticsSchedule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.LogisticsScheduleItem_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentAccess",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    AccessWayId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessMannerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessSubStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttemptAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentSeparatedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentDeliveredDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttemptAccessFinished = table.Column<bool>(type: "bit", nullable: true),
                    LastAttemptAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    NextAttemptAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    AttemptAccessModifiedById = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttemptAccessCancelDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DetailDifficultyWithAccessStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DetailNoDifficultyWithAccessStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DetailDifficultyWithDocumentsStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AttemptAccessDateSystem = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentSeparatedDateSystem = table.Column<DateTime>(type: "datetime", nullable: true),
                    DocumentDeliveredDateSystem = table.Column<DateTime>(type: "datetime", nullable: true),
                    GotAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    GotAccessDateSystem = table.Column<DateTime>(type: "datetime", nullable: true),
                    NextStepAccess = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NextAccessAction = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicamentAccess", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.AccessManner_AccessMannerId",
                        column: x => x.AccessMannerId,
                        principalTable: "AccessManner",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.AccessWay_AccessWayId",
                        column: x => x.AccessWayId,
                        principalTable: "AccessWay",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.StringMap_AccessStatusStringMapId",
                        column: x => x.AccessStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.StringMap_AccessSubStatusStringMapId",
                        column: x => x.AccessSubStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.StringMap_AccessTypeStringMapId",
                        column: x => x.AccessTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.StringMap_DetailDifficultyWithAccessStringMapId",
                        column: x => x.DetailDifficultyWithAccessStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.StringMap_DetailDifficultyWithDocumentsStringMapId",
                        column: x => x.DetailDifficultyWithDocumentsStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.StringMap_DetailNoDifficultyWithAccessStringMapId",
                        column: x => x.DetailNoDifficultyWithAccessStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentAccess_dbo.User_AttemptAccessModifiedById",
                        column: x => x.AttemptAccessModifiedById,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MedicamentConcomitant",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Indication = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StartDateDescription = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    EndDateDescription = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseDescription = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.MedicamentConcomitant", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentConcomitant_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.MedicamentConcomitant_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Pharmacovigilance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IncidentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Pharmacovigilance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Pharmacovigilance_dbo.Incident_IncidentId",
                        column: x => x.IncidentId,
                        principalTable: "Incident",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Pharmacovigilance_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Purchase",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Amount = table.Column<int>(type: "int", nullable: true),
                    Identifier = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PurchaseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Lot = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PointOfPurchase = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Observations = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Doctor = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PenDosage = table.Column<int>(type: "int", nullable: true),
                    PrescribedDosage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    AmpouleDuration = table.Column<int>(type: "int", nullable: true),
                    FrequencyStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PrescriptionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Purchase", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Purchase_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Purchase_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Purchase_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Purchase_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Purchase_dbo.StringMap_FrequencyStringMapId",
                        column: x => x.FrequencyStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Purchase_dbo.StringMap_PrescriptionTypeStringMapId",
                        column: x => x.PrescriptionTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Purchase_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SchedulingHistory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduledDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ReschedulingReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    ScheduledDateBefore = table.Column<DateTime>(type: "datetime", nullable: true),
                    StatusBefore = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StatusAfter = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LogisticsScheduleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CampaignId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.SchedulingHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.SchedulingHistory_dbo.Campaign_CampaignId",
                        column: x => x.CampaignId,
                        principalTable: "Campaign",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SchedulingHistory_dbo.Exam_ExamId",
                        column: x => x.ExamId,
                        principalTable: "Exam",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SchedulingHistory_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SchedulingHistory_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SchedulingHistory_dbo.LogisticsSchedule_LogisticsScheduleId",
                        column: x => x.LogisticsScheduleId,
                        principalTable: "LogisticsSchedule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SchedulingHistory_dbo.StringMap_ReschedulingReasonStringMapId",
                        column: x => x.ReschedulingReasonStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.SchedulingHistory_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TherapeuticHistory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Order = table.Column<int>(type: "int", nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    FinishDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SupplyMethodStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Dosage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    DosageUnitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DateModificationDosage = table.Column<DateTime>(type: "datetime", nullable: true),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IncidentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TherapeuticHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticHistory_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticHistory_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticHistory_dbo.Incident_IncidentId",
                        column: x => x.IncidentId,
                        principalTable: "Incident",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticHistory_dbo.MedicamentCompetitor_MedicamentCompetitorId",
                        column: x => x.MedicamentCompetitorId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticHistory_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticHistory_dbo.StringMap_DosageUnitStringMapId",
                        column: x => x.DosageUnitStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticHistory_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TherapeuticHistory_dbo.StringMap_SupplyMethodStringMapId",
                        column: x => x.SupplyMethodStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Treatment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiseaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StrengthMedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PosologeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Dosage = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    DosageUnitStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthCareProviderId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthInsuranceType = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentSituationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramParticipationConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemTreatmentStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemAccessStartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentStopDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemTreatmentInativationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemLastContactDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemLastSuccessfullContactDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    MainContactStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CaregiverId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CPF = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Birthdate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Age = table.Column<int>(type: "int", nullable: true),
                    Telephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone3 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone3 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress2 = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Stature = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    Weight = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    GenderStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CivilStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    EducationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RG = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    OccupationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FirstName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    LastName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    FullName_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    EmailAddress1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Telephone1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Mobilephone1_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Birthdate_Caregiver = table.Column<DateTime>(type: "datetime", nullable: true),
                    CPF_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SkypeUser_Caregiver = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    KinshipStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AmpouleAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    InfusionPlaceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramParticipationConsent = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveSMS = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveEmail = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveVisit = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToReceiveLogistics = table.Column<bool>(type: "bit", nullable: true),
                    ConsentToSendDataToDoctor = table.Column<bool>(type: "bit", nullable: true),
                    ConsentDataShare = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceived = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionReceivedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionIsValid = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionValidationDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionValidatedByName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    PatientSourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientDiagnosedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SystemRegistrationEndDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    Telephone1Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone2Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Telephone3Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone1Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone2Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Mobilephone3Observation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RNE = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TreatmentCustomDataId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AbbreviationName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PrescriptionDueDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ProgramTime = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    TreatmentTime = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    SupportField = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Password = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CID = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PNCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PreferredTimeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ContractTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    GotAccessDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PrescriptionStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PrescriptionHasDivergentDosage = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasLackOfDosage = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasDivergentInterval = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasLackOfInterval = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasDateMissing = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasStampSignatureMissing = table.Column<bool>(type: "bit", nullable: true),
                    PrescriptionHasMissingMedicationName = table.Column<bool>(type: "bit", nullable: true),
                    WillDoctorMakeNewPrescription = table.Column<bool>(type: "bit", nullable: true),
                    MedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OnlyCareMigration = table.Column<bool>(type: "bit", nullable: true),
                    DoctorPrescriberId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Haspatientusedmedicationbefore = table.Column<bool>(type: "bit", nullable: true),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    GotAccess = table.Column<bool>(type: "bit", nullable: true),
                    PatientDiagnosed = table.Column<bool>(type: "bit", nullable: true),
                    SampleCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhaseStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusDetailStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonInactivationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProgramParticipationDiagnosticConsent = table.Column<bool>(type: "bit", nullable: true),
                    ProgramParticipationDiagnosticConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentToReceiveDiagnosticPhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticPhonecallConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConsentToReceiveDiagnosticEmail = table.Column<bool>(type: "bit", nullable: true),
                    DiagnosticEmailConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModalityStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccessTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionInterval = table.Column<int>(type: "int", nullable: true),
                    TherapeuticTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RequestBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SectorOfTheRequester = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    VisitRefusalReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ConsentLGPD = table.Column<bool>(type: "bit", nullable: true),
                    ConsentLGPDDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SourceConsentStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HasOPS = table.Column<bool>(type: "bit", nullable: true),
                    CardNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorConsentToReceivePhonecalls = table.Column<bool>(type: "bit", nullable: true),
                    DoctorPhonecallsConsentDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    StageOfDiseaseStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CustomBoolean = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean_1 = table.Column<bool>(type: "bit", nullable: true),
                    Disease2Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CustomBoolean_2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean_3 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean_4 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean1 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomString1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString4 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString5 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString6 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomDateTime1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    CustomDateTime2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    Custom1StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Custom2StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Treatment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Account_HealthCareProviderId",
                        column: x => x.HealthCareProviderId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Account_InfusionPlaceId",
                        column: x => x.InfusionPlaceId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Caregiver_CaregiverId",
                        column: x => x.CaregiverId,
                        principalTable: "Caregiver",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Diagnostic_DiagnosticId",
                        column: x => x.DiagnosticId,
                        principalTable: "Diagnostic",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Disease_Disease2Id",
                        column: x => x.Disease2Id,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Disease_DiseaseId",
                        column: x => x.DiseaseId,
                        principalTable: "Disease",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Doctor_DoctorPrescriberId",
                        column: x => x.DoctorPrescriberId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.MedicamentCompetitor_MedicamentCompetitorId",
                        column: x => x.MedicamentCompetitorId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Medicament_MedicamentId",
                        column: x => x.MedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Occupation_OccupationId",
                        column: x => x.OccupationId,
                        principalTable: "Occupation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Phase_PhaseId",
                        column: x => x.PhaseId,
                        principalTable: "Phase",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.Posologe_PosologeId",
                        column: x => x.PosologeId,
                        principalTable: "Posologe",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StrengthMedicament_StrengthMedicamentId",
                        column: x => x.StrengthMedicamentId,
                        principalTable: "StrengthMedicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_AccessTypeStringMapId",
                        column: x => x.AccessTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_CivilStatusStringMapId",
                        column: x => x.CivilStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_ContractTypeStringMapId",
                        column: x => x.ContractTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_Custom1StringMapId",
                        column: x => x.Custom1StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_Custom2StringMapId",
                        column: x => x.Custom2StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_DosageUnitStringMapId",
                        column: x => x.DosageUnitStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_EducationStringMapId",
                        column: x => x.EducationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_GenderStringMapId",
                        column: x => x.GenderStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_KinshipStringMapId",
                        column: x => x.KinshipStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_MainContactStringMapId",
                        column: x => x.MainContactStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_ModalityStringMapId",
                        column: x => x.ModalityStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_PatientSourceStringMapId",
                        column: x => x.PatientSourceStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_PhaseStringMapId",
                        column: x => x.PhaseStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_PreferredTimeStringMapId",
                        column: x => x.PreferredTimeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_PrescriptionStatusStringMapId",
                        column: x => x.PrescriptionStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_ReasonInactivationStringMapId",
                        column: x => x.ReasonInactivationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_SourceConsentStringMapId",
                        column: x => x.SourceConsentStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_StageOfDiseaseStringMapId",
                        column: x => x.StageOfDiseaseStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_TreatmentStatusDetailStringMapId",
                        column: x => x.TreatmentStatusDetailStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_TreatmentStatusStringMapId",
                        column: x => x.TreatmentStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.StringMap_VisitRefusalReasonStringMapId",
                        column: x => x.VisitRefusalReasonStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.TherapeuticType_TherapeuticTypeId",
                        column: x => x.TherapeuticTypeId,
                        principalTable: "TherapeuticType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.TreatmentSituation_TreatmentSituationId",
                        column: x => x.TreatmentSituationId,
                        principalTable: "TreatmentSituation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.TreatmentStatusDetail_TreatmentStatusDetailId",
                        column: x => x.TreatmentStatusDetailId,
                        principalTable: "TreatmentStatusDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.TreatmentStatus_TreatmentStatusId",
                        column: x => x.TreatmentStatusId,
                        principalTable: "TreatmentStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Treatment_dbo.User_UserId",
                        column: x => x.UserId,
                        principalTable: "User",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentAddress",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    CustomerAddressId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CoverageAreaId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitAddress = table.Column<bool>(type: "bit", nullable: true),
                    ReceiveMail = table.Column<bool>(type: "bit", nullable: true),
                    MainAddress = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AddressPostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressNumber = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressComplement = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressDistrict = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCity = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressState = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressCountry = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    AddressReference = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IsintheAreaofCoverage = table.Column<bool>(type: "bit", nullable: true),
                    AddressTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAddress_dbo.CoverageArea_CoverageAreaId",
                        column: x => x.CoverageAreaId,
                        principalTable: "CoverageArea",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAddress_dbo.CustomerAddress_CustomerAddressId",
                        column: x => x.CustomerAddressId,
                        principalTable: "CustomerAddress",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAddress_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAddress_dbo.StringMap_AddressTypeStringMapId",
                        column: x => x.AddressTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAddress_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAddress_dbo.Treatment_TreatmentId",
                        column: x => x.TreatmentId,
                        principalTable: "Treatment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentAndDiagnosticAction",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ActionConfigurationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ScheduledDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SuccessAttempt = table.Column<int>(type: "int", nullable: true),
                    FailAttempt = table.Column<int>(type: "int", nullable: true),
                    SourceEntityName = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SourceEntityTypeCode = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    SourceEntityObjectId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActualDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PhoneCallId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActionReceiverId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Type = table.Column<int>(type: "int", nullable: false),
                    ActionStatus = table.Column<int>(type: "int", nullable: false),
                    Receiver = table.Column<int>(type: "int", nullable: false),
                    ActionCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ActionRuleId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PeriodSubject = table.Column<int>(type: "int", nullable: true),
                    IncidentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentAndDiagnosticAction", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionCategory_ActionCategoryId",
                        column: x => x.ActionCategoryId,
                        principalTable: "ActionCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionConfiguration_ActionConfigurationId",
                        column: x => x.ActionConfigurationId,
                        principalTable: "ActionConfiguration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionRule_ActionRuleId",
                        column: x => x.ActionRuleId,
                        principalTable: "ActionRule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAndDiagnosticAction_dbo.Diagnostic_DiagnosticId",
                        column: x => x.DiagnosticId,
                        principalTable: "Diagnostic",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAndDiagnosticAction_dbo.Incident_IncidentId",
                        column: x => x.IncidentId,
                        principalTable: "Incident",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAndDiagnosticAction_dbo.PhoneCall_PhoneCallId",
                        column: x => x.PhoneCallId,
                        principalTable: "PhoneCall",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAndDiagnosticAction_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAndDiagnosticAction_dbo.Treatment_TreatmentId",
                        column: x => x.TreatmentId,
                        principalTable: "Treatment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentAttendance",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LastInfusionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    NextInfusionDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentAttendance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAttendance_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentAttendance_dbo.Treatment_TreatmentId",
                        column: x => x.TreatmentId,
                        principalTable: "Treatment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentHistory",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DetailModifiedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentSituationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PhaseId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentStatusDetailId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    HistoryModalityStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HistoryPhaseStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HistoryStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HistoryStatusDetailStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HistoryDoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.Doctor_HistoryDoctorId",
                        column: x => x.HistoryDoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.Phase_PhaseId",
                        column: x => x.PhaseId,
                        principalTable: "Phase",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.StringMap_HistoryModalityStringMapId",
                        column: x => x.HistoryModalityStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.StringMap_HistoryPhaseStringMapId",
                        column: x => x.HistoryPhaseStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.StringMap_HistoryStatusDetailStringMapId",
                        column: x => x.HistoryStatusDetailStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.StringMap_HistoryStatusStringMapId",
                        column: x => x.HistoryStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.TreatmentSituation_TreatmentSituationId",
                        column: x => x.TreatmentSituationId,
                        principalTable: "TreatmentSituation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.TreatmentStatusDetail_TreatmentStatusDetailId",
                        column: x => x.TreatmentStatusDetailId,
                        principalTable: "TreatmentStatusDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.TreatmentStatus_TreatmentStatusId",
                        column: x => x.TreatmentStatusId,
                        principalTable: "TreatmentStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentHistory_dbo.Treatment_TreatmentId",
                        column: x => x.TreatmentId,
                        principalTable: "Treatment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Voucher",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    Number = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    IssuanceDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    UseDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    DueDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    ExplainNotUsed = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    NotSendViaSMS = table.Column<bool>(type: "bit", nullable: true),
                    SourceStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VoucherStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VoucherConfigurationId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    ExamDefinitionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ManagerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Voucher", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.Diagnostic_DiagnosticId",
                        column: x => x.DiagnosticId,
                        principalTable: "Diagnostic",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.ExamDefinition_ExamDefinitionId",
                        column: x => x.ExamDefinitionId,
                        principalTable: "ExamDefinition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.Representative_ManagerId",
                        column: x => x.ManagerId,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.Representative_RepresentativeId",
                        column: x => x.RepresentativeId,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.StringMap_SourceStringMapId",
                        column: x => x.SourceStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.StringMap_VoucherStatusStringMapId",
                        column: x => x.VoucherStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.Treatment_TreatmentId",
                        column: x => x.TreatmentId,
                        principalTable: "Treatment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Voucher_dbo.VoucherConfiguration_VoucherConfigurationId",
                        column: x => x.VoucherConfigurationId,
                        principalTable: "VoucherConfiguration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentCustomData",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientCode = table.Column<int>(type: "int", nullable: true),
                    DoctorAutorizeStartTreatment = table.Column<bool>(type: "bit", nullable: true),
                    AcceptPartnershipDrugstores = table.Column<bool>(type: "bit", nullable: true),
                    MedicalInstructionAccessWayStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    MedicalIndicationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TransplantedPatient = table.Column<bool>(type: "bit", nullable: true),
                    AmountOfCyclesPrescribed = table.Column<int>(type: "int", nullable: true),
                    PatientTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonForNotAcceptingSMSStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitRefusalReasonStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientTypeDateChanged = table.Column<DateTime>(type: "datetime", nullable: true),
                    TransplantedDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PatientUsedAnotherMedication = table.Column<bool>(type: "bit", nullable: true),
                    PreviousMedicamentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientWillBeginITBenefit = table.Column<bool>(type: "bit", nullable: true),
                    PatientWillBeginOTBenefit = table.Column<bool>(type: "bit", nullable: true),
                    PatientWillGetLocationCode = table.Column<bool>(type: "bit", nullable: true),
                    AccessWayId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SUSProtocolNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ChecklistRequired = table.Column<bool>(type: "bit", nullable: true),
                    WithdrawnMedicamentQuantity = table.Column<int>(type: "int", nullable: true),
                    AccessDetailStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OptimizationSubTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    PlanCoverageStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ContractHasCoparticipation = table.Column<bool>(type: "bit", nullable: true),
                    IFXITCodeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ChecklistReceived = table.Column<bool>(type: "bit", nullable: true),
                    LeftTheBenefit = table.Column<bool>(type: "bit", nullable: true),
                    DateLeftTheBenefit = table.Column<DateTime>(type: "datetime", nullable: true),
                    IFXITStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    JANSSENITStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IFXOTCodeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PerformInfusionEvery8Weeks = table.Column<bool>(type: "bit", nullable: true),
                    IFXOTStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    JANSSENOTStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OTPrescriptionSent = table.Column<bool>(type: "bit", nullable: true),
                    OTPrescriptionValidated = table.Column<bool>(type: "bit", nullable: true),
                    OTPrescriptionValidatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    OTPrescriptionValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ITBenefitApproved = table.Column<bool>(type: "bit", nullable: true),
                    ITBenefitRefusalReason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OTBenefitApproved = table.Column<bool>(type: "bit", nullable: true),
                    OTBenefitRefusalReason = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    InfusionTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionSiteId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StorageLocationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AmpoulesUsed = table.Column<int>(type: "int", nullable: true),
                    ITPerformedInfusions = table.Column<int>(type: "int", nullable: true),
                    PerformedInfusions = table.Column<int>(type: "int", nullable: true),
                    OTPerformedInfusions = table.Column<int>(type: "int", nullable: true),
                    ITBilledInfusions = table.Column<int>(type: "int", nullable: true),
                    SupplyMethodStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IsWorkingStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    HemCasaPatient = table.Column<bool>(type: "bit", nullable: true),
                    myPKFiTPatient = table.Column<bool>(type: "bit", nullable: true),
                    IsWorkingStringMap_StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OldDatabasePatient = table.Column<bool>(type: "bit", nullable: true),
                    TreatmentTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CoagulationFactorReplacement = table.Column<bool>(type: "bit", nullable: true),
                    WillStartTreatmentFactorReplacement = table.Column<bool>(type: "bit", nullable: true),
                    FactorReplacementMedicament = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AccountId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PreviousMedicamentSt = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    HemophiliaDegreeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientHasInternetAccess = table.Column<bool>(type: "bit", nullable: true),
                    AcceptsFutureLabContacts = table.Column<bool>(type: "bit", nullable: true),
                    AcceptsMedicalContactAdverseReactions = table.Column<bool>(type: "bit", nullable: true),
                    FirstcontactwithBayer = table.Column<bool>(type: "bit", nullable: true),
                    PatientsentauthorizationtoBetamens = table.Column<bool>(type: "bit", nullable: true),
                    AcceptOnlineContacts = table.Column<bool>(type: "bit", nullable: true),
                    AcceptsDailySMSDelivery = table.Column<bool>(type: "bit", nullable: true),
                    AcceptReceiveMaintenanceKit = table.Column<bool>(type: "bit", nullable: true),
                    AcceptsIBetaplusRegistration = table.Column<bool>(type: "bit", nullable: true),
                    DoctorAuthorizesDosageTitrationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ApplicationHours = table.Column<int>(type: "int", nullable: true),
                    BETAFERONisthefirsttreatmentdrug = table.Column<bool>(type: "bit", nullable: true),
                    RiskRatingStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CyclePeriod = table.Column<int>(type: "int", nullable: true),
                    ApplicatorTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ApplicatorTypeCustom = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ApplicatorLot = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateoflastMRI = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateOfLastMedicalAppointment = table.Column<DateTime>(type: "datetime", nullable: true),
                    DateOfLastSUSWithdrawal = table.Column<DateTime>(type: "datetime", nullable: true),
                    TreatmentCyclesStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FormofAccessStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RepresentativeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    LocationsInfusion = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateOfNextInfusion = table.Column<DateTime>(type: "datetime", nullable: true),
                    PreviousMedicamentCompetitorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    OptimizationTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PharmacovigilanceReported = table.Column<bool>(type: "bit", nullable: true),
                    EmailNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TreatmentIntervalStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AcceptVoucher = table.Column<bool>(type: "bit", nullable: true),
                    ContractTypeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ContractHasCoparticipationStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ITBenefitException = table.Column<bool>(type: "bit", nullable: true),
                    ConsentReceiveSpecificStuff = table.Column<bool>(type: "bit", nullable: true),
                    HasOPS = table.Column<bool>(type: "bit", nullable: true),
                    CurrentAccess = table.Column<bool>(type: "bit", nullable: true),
                    ApprovalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    WithdrawalDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    MedicalReturnDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    PreviousTreatmentAmount = table.Column<int>(type: "int", nullable: true),
                    MultipleMedicamentCompetitor = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StageOfDiseaseStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InInductionStage = table.Column<bool>(type: "bit", nullable: true),
                    UpdateRiskRatingDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    TermPrivacy = table.Column<bool>(type: "bit", nullable: true),
                    TermConsentReceived = table.Column<bool>(type: "bit", nullable: true),
                    DateReceivementTerm = table.Column<DateTime>(type: "datetime", nullable: true),
                    TermValidated = table.Column<bool>(type: "bit", nullable: true),
                    DateValidation = table.Column<DateTime>(type: "datetime", nullable: true),
                    TermValidatedBy = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DiseaseDiagnosticDate2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    DiagnosticDisease = table.Column<bool>(type: "bit", nullable: true),
                    DiseaseDiagnosticDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SupportFieldBool = table.Column<bool>(type: "bit", nullable: true),
                    StartDate = table.Column<DateTime>(type: "datetime", nullable: true),
                    SupportFieldInt = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((0))"),
                    SupportFieldInt2 = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((0))"),
                    SupportFieldInt3 = table.Column<int>(type: "int", nullable: true, defaultValueSql: "((0))"),
                    Dosage = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomBoolean1 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean3 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean4 = table.Column<bool>(type: "bit", nullable: true),
                    CustomString1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString4 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString5 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString6 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomDateTime1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    CustomDateTime2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    Custom1StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Custom2StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentCustomData", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.AccessWay_AccessWayId",
                        column: x => x.AccessWayId,
                        principalTable: "AccessWay",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.Account_AccountId",
                        column: x => x.AccountId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.Account_InfusionSiteId",
                        column: x => x.InfusionSiteId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId",
                        column: x => x.PreviousMedicamentCompetitorId,
                        principalTable: "MedicamentCompetitor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.Medicament_PreviousMedicamentId",
                        column: x => x.PreviousMedicamentId,
                        principalTable: "Medicament",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.Representative_RepresentativeId",
                        column: x => x.RepresentativeId,
                        principalTable: "Representative",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_AccessDetailStringMapId",
                        column: x => x.AccessDetailStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_ApplicatorTypeStringMapId",
                        column: x => x.ApplicatorTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_ContractHasCoparticipationStringMapId",
                        column: x => x.ContractHasCoparticipationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_ContractTypeStringMapId",
                        column: x => x.ContractTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_Custom1StringMapId",
                        column: x => x.Custom1StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_Custom2StringMapId",
                        column: x => x.Custom2StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_DoctorAuthorizesDosageTitrationStringMapId",
                        column: x => x.DoctorAuthorizesDosageTitrationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_FormofAccessStringMapId",
                        column: x => x.FormofAccessStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_HemophiliaDegreeStringMapId",
                        column: x => x.HemophiliaDegreeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_IFXITStatusStringMapId",
                        column: x => x.IFXITStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_IFXOTStatusStringMapId",
                        column: x => x.IFXOTStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_InfusionTypeStringMapId",
                        column: x => x.InfusionTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_IsWorkingStringMap_StringMapId",
                        column: x => x.IsWorkingStringMap_StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_JANSSENITStatusStringMapId",
                        column: x => x.JANSSENITStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_JANSSENOTStatusStringMapId",
                        column: x => x.JANSSENOTStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_MedicalIndicationStringMapId",
                        column: x => x.MedicalIndicationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_MedicalInstructionAccessWayStringMapId",
                        column: x => x.MedicalInstructionAccessWayStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_OptimizationTypeStringMapId",
                        column: x => x.OptimizationTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_PatientTypeStringMapId",
                        column: x => x.PatientTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_PlanCoverageStringMapId",
                        column: x => x.PlanCoverageStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_ReasonForNotAcceptingSMSStringMapId",
                        column: x => x.ReasonForNotAcceptingSMSStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_RiskRatingStringMapId",
                        column: x => x.RiskRatingStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_StageOfDiseaseStringMapId",
                        column: x => x.StageOfDiseaseStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_StorageLocationStringMapId",
                        column: x => x.StorageLocationStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_SupplyMethodStringMapId",
                        column: x => x.SupplyMethodStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentCyclesStringMapId",
                        column: x => x.TreatmentCyclesStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentIntervalStringMapId",
                        column: x => x.TreatmentIntervalStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentTypeStringMapId",
                        column: x => x.TreatmentTypeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.StringMap_VisitRefusalReasonStringMapId",
                        column: x => x.VisitRefusalReasonStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.Voucher_IFXITCodeId",
                        column: x => x.IFXITCodeId,
                        principalTable: "Voucher",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentCustomData_dbo.Voucher_IFXOTCodeId",
                        column: x => x.IFXOTCodeId,
                        principalTable: "Voucher",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Visit",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ServiceTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false, collation: "Latin1_General_CI_AI"),
                    ScheduleDateStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ScheduleDateEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConclusionDateStart = table.Column<DateTime>(type: "datetime", nullable: true),
                    ConclusionDateEnd = table.Column<DateTime>(type: "datetime", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    StatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PreSchedulingStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    Observation = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    TreatmentAddressId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    DiagnosticId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false, collation: "Latin1_General_CI_AI"),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false, collation: "Latin1_General_CI_AI"),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false, collation: "Latin1_General_CI_AI"),
                    DistanceBetweenPatientHealthProfessional = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    LocalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Contact = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DoctorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitFormForwarded = table.Column<bool>(type: "bit", nullable: true),
                    NumberEstablishedVisits = table.Column<int>(type: "int", nullable: true),
                    VoucherId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CustomBoolean1 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean2 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean3 = table.Column<bool>(type: "bit", nullable: true),
                    CustomBoolean4 = table.Column<bool>(type: "bit", nullable: true),
                    CustomString1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString3 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString4 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString5 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomString6 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomDateTime1 = table.Column<DateTime>(type: "datetime", nullable: true),
                    CustomDateTime2 = table.Column<DateTime>(type: "datetime", nullable: true),
                    Custom1StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Custom2StringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CampaignId = table.Column<Guid>(type: "uniqueidentifier", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.Visit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.Account_LocalId",
                        column: x => x.LocalId,
                        principalTable: "Account",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.Campaign_CampaignId",
                        column: x => x.CampaignId,
                        principalTable: "Campaign",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.Diagnostic_DiagnosticId",
                        column: x => x.DiagnosticId,
                        principalTable: "Diagnostic",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.Doctor_DoctorId",
                        column: x => x.DoctorId,
                        principalTable: "Doctor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.ServiceType_ServiceTypeId",
                        column: x => x.ServiceTypeId,
                        principalTable: "ServiceType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.StringMap_Custom1StringMapId",
                        column: x => x.Custom1StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.StringMap_Custom2StringMapId",
                        column: x => x.Custom2StringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.StringMap_PreSchedulingStatusStringMapId",
                        column: x => x.PreSchedulingStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.StringMap_StatusStringMapId",
                        column: x => x.StatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.TreatmentAddress_TreatmentAddressId",
                        column: x => x.TreatmentAddressId,
                        principalTable: "TreatmentAddress",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.Treatment_TreatmentId",
                        column: x => x.TreatmentId,
                        principalTable: "Treatment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.Visit_dbo.Voucher_VoucherId",
                        column: x => x.VoucherId,
                        principalTable: "Voucher",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TreatmentPayment",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentPaymentStatusStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    VisitId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExamId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    InfusionId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ValueVisit = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ValueVisitPerKM = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ValueVisitCalculated = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    EstimatedVisitkm = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    PerformedVisitkm = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    ValueVisitPay = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    InvoiceAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    CreatedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    ModifiedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    DeletedOn = table.Column<DateTime>(type: "datetime", nullable: true),
                    CreatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CreatedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ModifiedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ModifiedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedByName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    isDeleted = table.Column<bool>(type: "bit", nullable: false),
                    OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OwnerIdName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    StateCode = table.Column<bool>(type: "bit", nullable: true),
                    StatusCodeStringMapId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ReasonStateCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReasonDeleted = table.Column<string>(type: "nvarchar(250)", maxLength: 250, nullable: false),
                    FriendlyCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    ImportCode = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InternalControl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntityOriginalValues = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: false),
                    HealthProgramId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TreatmentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    HealthProfessionalId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PatientId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ForwardReason = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dbo.TreatmentPayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentBilling_dbo.Exam_ExamId",
                        column: x => x.ExamId,
                        principalTable: "Exam",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentBilling_dbo.Infusion_InfusionId",
                        column: x => x.InfusionId,
                        principalTable: "Infusion",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentBilling_dbo.StringMap_StatusCodeStringMapId",
                        column: x => x.StatusCodeStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentBilling_dbo.StringMap_TreatmentBillingStatusStringMapId",
                        column: x => x.TreatmentPaymentStatusStringMapId,
                        principalTable: "StringMap",
                        principalColumn: "StringMapId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentBilling_dbo.Visit_VisitId",
                        column: x => x.VisitId,
                        principalTable: "Visit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentPayment_dbo.HealthProfessional_HealthProfessionalId",
                        column: x => x.HealthProfessionalId,
                        principalTable: "HealthProfessional",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentPayment_dbo.HealthProgram_HealthProgramId",
                        column: x => x.HealthProgramId,
                        principalTable: "HealthProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentPayment_dbo.Patient_PatientId",
                        column: x => x.PatientId,
                        principalTable: "Patient",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_dbo.TreatmentPayment_dbo.Treatment_TreatmentId",
                        column: x => x.TreatmentId,
                        principalTable: "Treatment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_DetailDifficultyWithAccessStringMapId",
                table: "AccessHistoryAttendance",
                column: "DetailDifficultyWithAccessStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DetailDifficultyWithDocumentsStringMapId",
                table: "AccessHistoryAttendance",
                column: "DetailDifficultyWithDocumentsStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DetailNoDifficultyWithAccessStringMapId",
                table: "AccessHistoryAttendance",
                column: "DetailNoDifficultyWithAccessStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "AccessHistoryAttendance",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentAccessId",
                table: "AccessHistoryAttendance",
                column: "MedicamentAccessId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccessHistoryAttendance",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "AccessHistoryAttendance",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentSettingsId",
                table: "AccessHistoryAttendance",
                column: "TreatmentSettingsId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_WaiverDetailStringMapId",
                table: "AccessHistoryAttendance",
                column: "WaiverDetailStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessHistoryAttendanceAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessHistoryAttendanceAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccessManner",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessMannerAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessMannerAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "AccessMannerByProgram",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "AccessMannerByProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "AccessMannerByProgram",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccessMannerByProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessMannerByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessMannerByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessMannerByProgramId",
                table: "AccessOrderByProgram",
                column: "AccessMannerByProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessMannerId",
                table: "AccessOrderByProgram",
                column: "AccessMannerId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessWayId",
                table: "AccessOrderByProgram",
                column: "AccessWayId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "AccessOrderByProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccessOrderByProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessOrderByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessOrderByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "AccessProcedureByProgram",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "AccessProcedureByProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "AccessProcedureByProgram",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccessProcedureByProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessProcedureByProgramId",
                table: "AccessProcedureByProgramAccount",
                column: "AccessProcedureByProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "AccessProcedureByProgramAccount",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessProcedureByProgramAccountAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessProcedureByProgramAccountAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessProcedureByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessProcedureByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessProfileTypeStringMapId",
                table: "AccessProfile",
                column: "AccessProfileTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "AccessProfile",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccessProfile",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessProfileAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessProfileAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessProfileId",
                table: "AccessProfileUser",
                column: "AccessProfileId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "AccessProfileUser",
                column: "UserId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessProfileUserAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessProfileUserAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessProfileId",
                table: "AccessRightEntity",
                column: "AccessProfileId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccessRightEntity",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessRightEntityAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessRightEntityAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccessWay",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccessWayAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccessWayAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessCoverageAreaStringMapId",
                table: "Account",
                column: "AccessCoverageAreaStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessMannerId",
                table: "Account",
                column: "AccessMannerId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessWayId",
                table: "Account",
                column: "AccessWayId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountTypeStringMapId",
                table: "Account",
                column: "AccountTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ClinicPublicOrPrivateStringMapId",
                table: "Account",
                column: "ClinicPublicOrPrivateStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ClinicTypeStringMapId",
                table: "Account",
                column: "ClinicTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorResponsableId",
                table: "Account",
                column: "DoctorResponsableId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessional_Id",
                table: "Account",
                column: "HealthProfessional_Id")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_ACCOUNT_1",
                table: "Account",
                column: "Name");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "Account",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Account",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Account_BKP_19_04Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Account_BKP_19_04Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccountAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccountAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "AccountCoverageArea",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccountCoverageArea",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccountCoverageAreaAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccountCoverageAreaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "AccountExamTypeByProgram",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "AccountExamTypeByProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccountExamTypeByProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccountExamTypeByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccountExamTypeByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountSettingsByProgram_Id",
                table: "AccountInternalDemand",
                column: "AccountSettingsByProgram_Id");

            migrationBuilder.CreateIndex(
                name: "IX_ValidationResult_Id",
                table: "AccountInternalDemand",
                column: "ValidationResult_Id");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccountInternalDemandAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccountInternalDemandAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "AccountSettingsByProgram",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountStatusStringMapId",
                table: "AccountSettingsByProgram",
                column: "AccountStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "AccountSettingsByProgram",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorByProgramId",
                table: "AccountSettingsByProgram",
                column: "DoctorByProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "AccountSettingsByProgram",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamTypeStringMapId",
                table: "AccountSettingsByProgram",
                column: "ExamTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "AccountSettingsByProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "AccountSettingsByProgram",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientTypeStringMapId",
                table: "AccountSettingsByProgram",
                column: "PatientTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AccountSettingsByProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SystemUserId",
                table: "AccountSettingsByProgram",
                column: "SystemUserId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccountSettingsByProgram_BKP_19_04_22Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccountSettingsByProgram_BKP_19_04_22Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AccountSettingsByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AccountSettingsByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "ActionCategory",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "ActionCategory",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ActionCategoryAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ActionCategoryAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ActionCategoryId",
                table: "ActionConfiguration",
                column: "ActionCategoryId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ActionOwnerStringMapId",
                table: "ActionConfiguration",
                column: "ActionOwnerStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ProgramId",
                table: "ActionConfiguration",
                column: "ProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "ActionConfiguration",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ActionConfigurationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ActionConfigurationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ActionConfigurationId",
                table: "ActionRule",
                column: "ActionConfigurationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "ActionRule",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "ActionRule",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ActionRuleAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ActionRuleAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "AdhesionAttendance",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DetailDifficultyWithAccessStringMapId",
                table: "AdhesionAttendance",
                column: "DetailDifficultyWithAccessStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_FrequencyStringMapId",
                table: "AdhesionAttendance",
                column: "FrequencyStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentCompetitorId",
                table: "AdhesionAttendance",
                column: "MedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "AdhesionAttendance",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicationNonadherenceReasonId",
                table: "AdhesionAttendance",
                column: "MedicationNonadherenceReasonId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_AdhesionAttendance",
                table: "AdhesionAttendance",
                column: "CreatedByName");

            migrationBuilder.CreateIndex(
                name: "IX_NC_AdhesionAttendance_0",
                table: "AdhesionAttendance",
                columns: new[] { "HasUsed", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_OriginStringMapId",
                table: "AdhesionAttendance",
                column: "OriginStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AdhesionAttendance",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "AdhesionAttendance",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentIntervalStringMapId",
                table: "AdhesionAttendance",
                column: "TreatmentIntervalStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentSettingsId",
                table: "AdhesionAttendance",
                column: "TreatmentSettingsId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AdhesionAttendanceAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AdhesionAttendanceAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_PathIsActive",
                table: "AkkaActors",
                columns: new[] { "Path", "IsActive" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AkkaActorsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AkkaActorsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_ActorProgramEntity",
                table: "AkkaMessages",
                columns: new[] { "AkkaActorsId", "AkkaActorsProgramId", "EntityMetadataId", "EntityMetadataIdName" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AkkaMessagesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AkkaMessagesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AkkaActorsId",
                table: "AkkaPublishEvents",
                column: "AkkaActorsId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AkkaPublishEventsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AkkaPublishEventsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AkkaActorsId",
                table: "AkkaSubscribeEvents",
                column: "AkkaActorsId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AkkaSubscribeEventsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AkkaSubscribeEventsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AnnotationTypeStringMapId",
                table: "Annotation",
                column: "AnnotationTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "Annotation",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Annotation",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AnnotationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AnnotationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "Name",
                unique: true)
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AspNetRolesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AspNetRolesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "AspNetUserClaims",
                column: "UserId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AspNetUserClaimsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AspNetUserClaimsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "AspNetUserLogins",
                column: "UserId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AspNetUserLoginsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AspNetUserLoginsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "AspNetUserRoles",
                column: "UserId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AspNetUserRolesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AspNetUserRolesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "UserName",
                unique: true)
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AspNetUsersAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AspNetUsersAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AnnotationId",
                table: "Attachment",
                column: "AnnotationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "Attachment",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Attachment",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AttachmentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AttachmentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticId",
                table: "AttemptCallLog",
                column: "DiagnosticId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PhoneCallId",
                table: "AttemptCallLog",
                column: "PhoneCallId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "AttemptCallLog",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentAndDiagnosticActionId",
                table: "AttemptCallLog",
                column: "TreatmentAndDiagnosticActionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "AttemptCallLog",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "AttemptCallLogAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "AttemptCallLogAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_AttributeName",
                table: "AttributeMetadata",
                columns: new[] { "EntityMetadataId", "AttributeName", "AttributeType" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EntityMetadataId",
                table: "AttributeMetadata",
                column: "EntityMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Bank",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "BankAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "BankAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "BASE_TREATMENTAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "BASE_TREATMENTAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "BaseDoctorRepresentativeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "BaseDoctorRepresentativeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "BEMESTAR_VOUCHER_PENDENTE_LAUDOAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "BEMESTAR_VOUCHER_PENDENTE_LAUDOAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_BenefitStatusStringMapId",
                table: "Benefit",
                column: "BenefitStatusStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_BenefitTypeStringMapId",
                table: "Benefit",
                column: "BenefitTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_Custom1StringMapId",
                table: "Benefit",
                column: "Custom1StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_Custom2StringMapId",
                table: "Benefit",
                column: "Custom2StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticId",
                table: "Benefit",
                column: "DiagnosticId");

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Benefit",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LocalId",
                table: "Benefit",
                column: "LocalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SourceStringMapId",
                table: "Benefit",
                column: "SourceStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Benefit",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Benefit",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherId",
                table: "Benefit",
                column: "VoucherId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "BenefitAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "BenefitAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "BKP_ENTRENOS_REATIVADO_20200624Audit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "BKP_ENTRENOS_REATIVADO_20200624Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CadastrosTakedaAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CadastrosTakedaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "CalendarScheduled",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ScheduleTypeStringMap_StringMapId",
                table: "CalendarScheduled",
                column: "ScheduleTypeStringMap_StringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "CalendarScheduled",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VisitId",
                table: "CalendarScheduled",
                column: "VisitId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CalendarScheduledAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CalendarScheduledAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "Campaign",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Campaign",
                column: "HealthProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Campaign",
                column: "StatusCodeStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusStringMapId",
                table: "Campaign",
                column: "StatusStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CampaignAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CampaignAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_CampaignId",
                table: "CampaignHealthProfessional",
                column: "CampaignId");

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "CampaignHealthProfessional",
                column: "HealthProfessionalId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CampaignHealthProfessionalAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CampaignHealthProfessionalAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_CivilStatusStringMapId",
                table: "Caregiver",
                column: "CivilStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EducationStringMapId",
                table: "Caregiver",
                column: "EducationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_GenderStringMapId",
                table: "Caregiver",
                column: "GenderStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Caregiver",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_KinshipStringMapId",
                table: "Caregiver",
                column: "KinshipStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OccupationId",
                table: "Caregiver",
                column: "OccupationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Caregiver",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CaregiverAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CaregiverAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CargaMedicoConsultorAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CargaMedicoConsultorAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ChatTypeStringMapId",
                table: "Chat",
                column: "ChatTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Chat",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OperatorId",
                table: "Chat",
                column: "OperatorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OriginRegardingEntityId",
                table: "Chat",
                column: "OriginRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "Chat",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Chat",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ChatAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ChatAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ChatId",
                table: "ChatDialogs",
                column: "ChatId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "ChatDialogs",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "ChatDialogs",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ChatDialogsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ChatDialogsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Clinicas_Import2Audit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Clinicas_Import2Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Clinicas_ImportAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Clinicas_ImportAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Clinicas_Infusao_ImportAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Clinicas_Infusao_ImportAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CommunicationTypeByProgramId",
                table: "Communication",
                column: "CommunicationTypeByProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_FromId",
                table: "Communication",
                column: "FromId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "Communication",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Communication",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OriginRegardingEntityId",
                table: "Communication",
                column: "OriginRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "Communication",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Communication",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ToId",
                table: "Communication",
                column: "ToId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CommunicationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CommunicationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "CommunicationTypeByProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CommunicationTypeByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CommunicationTypeByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CommunicationTypeByProgramId",
                table: "CommunicationTypeByProgramHealthProgram",
                column: "CommunicationTypeByProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "CommunicationTypeByProgramHealthProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CommunicationTypeByProgramHealthProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CommunicationTypeByProgramHealthProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ConfigurationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ConfigurationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "Contact",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Contact",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "Contact",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ContactAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ContactAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "CoverageArea",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "CoverageArea",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalCodeCityId",
                table: "CoverageArea",
                column: "PostalCodeCityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalcodeEndId",
                table: "CoverageArea",
                column: "PostalcodeEndId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalcodeStartId",
                table: "CoverageArea",
                column: "PostalcodeStartId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalCodeStateId",
                table: "CoverageArea",
                column: "PostalCodeStateId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "CoverageArea",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CoverageAreaAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CoverageAreaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AddressTypeStringMapId",
                table: "CustomerAddress",
                column: "AddressTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CaregiverId",
                table: "CustomerAddress",
                column: "CaregiverId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "CustomerAddress",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "CustomerAddress",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "CustomerAddressAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "CustomerAddressAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ClusteredIndex-20200507-145503",
                table: "DASHBOARD_ASTELLAS",
                column: "TableId",
                unique: true)
                .Annotation("SqlServer:Clustered", true);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DASHBOARD_ASTELLASAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DASHBOARD_ASTELLASAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "Diagnostic",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountSettingsByProgramId",
                table: "Diagnostic",
                column: "AccountSettingsByProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_AddressTypeStringMapId",
                table: "Diagnostic",
                column: "AddressTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CaregiverId",
                table: "Diagnostic",
                column: "CaregiverId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CategoryOfExamsStringMapId",
                table: "Diagnostic",
                column: "CategoryOfExamsStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticStatusDetailStringMapId",
                table: "Diagnostic",
                column: "DiagnosticStatusDetailStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticStatusStringMapId",
                table: "Diagnostic",
                column: "DiagnosticStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "Diagnostic",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "Diagnostic",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorPrescriberId",
                table: "Diagnostic",
                column: "DoctorPrescriberId");

            migrationBuilder.CreateIndex(
                name: "IX_EthnicityStringMapId",
                table: "Diagnostic",
                column: "EthnicityStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "Diagnostic",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_FridayStringMapId",
                table: "Diagnostic",
                column: "FridayStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_GenderStringMapId",
                table: "Diagnostic",
                column: "GenderStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthCareProviderId",
                table: "Diagnostic",
                column: "HealthCareProviderId");

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "Diagnostic",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Diagnostic",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_KinshipStringMapId",
                table: "Diagnostic",
                column: "KinshipStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MainContactStringMapId",
                table: "Diagnostic",
                column: "MainContactStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicalSpecialtyId",
                table: "Diagnostic",
                column: "MedicalSpecialtyId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentCompetitorId",
                table: "Diagnostic",
                column: "MedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MondayStringMapId",
                table: "Diagnostic",
                column: "MondayStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Diagnostic",
                table: "Diagnostic",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_DIAGNOSTIC_1",
                table: "Diagnostic",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "ix_nc_diagnostic_2",
                table: "Diagnostic",
                columns: new[] { "HealthProgramId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_DIAGNOSTIC_20",
                table: "Diagnostic",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "Diagnostic",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientSourceStringMapId",
                table: "Diagnostic",
                column: "PatientSourceStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PreferredTimeStringMapId",
                table: "Diagnostic",
                column: "PreferredTimeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PrescriptionStatusStringMapId",
                table: "Diagnostic",
                column: "PrescriptionStatusStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_PreviousMedicamentCompetitorId",
                table: "Diagnostic",
                column: "PreviousMedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SaturdayStringMapId",
                table: "Diagnostic",
                column: "SaturdayStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SourceConsentStringMapId",
                table: "Diagnostic",
                column: "SourceConsentStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_StageOfDiseaseStringMapId",
                table: "Diagnostic",
                column: "StageOfDiseaseStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Diagnostic",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ThursdayStringMapId",
                table: "Diagnostic",
                column: "ThursdayStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentLine2StringMapId",
                table: "Diagnostic",
                column: "TreatmentLine2StringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentLineStringMapId",
                table: "Diagnostic",
                column: "TreatmentLineStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TuesdayStringMapId",
                table: "Diagnostic",
                column: "TuesdayStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TypeOfAnalysisStringMapId",
                table: "Diagnostic",
                column: "TypeOfAnalysisStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "Diagnostic",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherId",
                table: "Diagnostic",
                column: "VoucherId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_WednesdayStringMapId",
                table: "Diagnostic",
                column: "WednesdayStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DiagnosticAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DiagnosticAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticStatusStringMapId",
                table: "DiagnosticExam",
                column: "DiagnosticStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "DiagnosticExam",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "DiagnosticExam",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamTypeStringMapId",
                table: "DiagnosticExam",
                column: "ExamTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "DiagnosticExam",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LocalId",
                table: "DiagnosticExam",
                column: "LocalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "DiagnosticExam",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "DiagnosticExam",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherId",
                table: "DiagnosticExam",
                column: "VoucherId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DiagnosticExamAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DiagnosticExamAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Disease",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DiseaseAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DiseaseAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ClinicId",
                table: "Doctor",
                column: "ClinicId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_GenderStringMapId",
                table: "Doctor",
                column: "GenderStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LicenseStatusStringMapId",
                table: "Doctor",
                column: "LicenseStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LicenseTypeStringMapId",
                table: "Doctor",
                column: "LicenseTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Doctor",
                table: "Doctor",
                column: "FullName")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_DOCTOR_2",
                table: "Doctor",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_DOCTOR_3",
                table: "Doctor",
                column: "Name");

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Doctor",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DoctorAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DoctorAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AuthorizeSMSStringMapId",
                table: "DoctorByProgram",
                column: "AuthorizeSMSStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AuthorizesTitrationofDosageStringMapId",
                table: "DoctorByProgram",
                column: "AuthorizesTitrationofDosageStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AuthorizeVisitStringMapId",
                table: "DoctorByProgram",
                column: "AuthorizeVisitStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ConsultantId",
                table: "DoctorByProgram",
                column: "ConsultantId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "DoctorByProgram",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "DoctorByProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SourceConsentStringMapId",
                table: "DoctorByProgram",
                column: "SourceConsentStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "DoctorByProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SystemUserId",
                table: "DoctorByProgram",
                column: "SystemUserId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DoctorByProgram_bkp_05_11_2021Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DoctorByProgram_bkp_05_11_2021Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DoctorByProgram_bkp02122021Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DoctorByProgram_bkp02122021Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DoctorByProgram_Bkp231121Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DoctorByProgram_Bkp231121Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "DoctorByProgramAccount",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorByProgramId",
                table: "DoctorByProgramAccount",
                column: "DoctorByProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DoctorByProgramAccountAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DoctorByProgramAccountAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DoctorByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DoctorByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "DoctorMedicalSpecialty",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicalSpecialtyId",
                table: "DoctorMedicalSpecialty",
                column: "MedicalSpecialtyId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DoctorMedicalSpecialtyAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DoctorMedicalSpecialtyAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "DoctorsRepresentative",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "DoctorsRepresentative",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "DoctorsRepresentative",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "DoctorsRepresentative",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ManagerId",
                table: "DoctorsRepresentative",
                column: "ManagerId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "DoctorsRepresentative",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_DoctorsRepresentative",
                table: "DoctorsRepresentative",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_DoctorsRepresentative_2",
                table: "DoctorsRepresentative",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RepresentativeId",
                table: "DoctorsRepresentative",
                column: "RepresentativeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "DoctorsRepresentative",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "DoctorsRepresentativeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "DoctorsRepresentativeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ELMAH_Error_App_Time_Seq",
                table: "ELMAH_Error",
                columns: new[] { "Application", "TimeUtc", "Sequence" },
                descending: new[] { false, true, true })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ELMAH_ErrorAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ELMAH_ErrorAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EmailBoxSettingId",
                table: "Email",
                column: "EmailBoxSettingId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Email",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OriginRegardingEntityId",
                table: "Email",
                column: "OriginRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "Email",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Email",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "EmailAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "EmailAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "EmailBoxSetting",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "EmailBoxSettingAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "EmailBoxSettingAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "EntityConfigurationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "EntityConfigurationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_EntityName",
                table: "EntityMetadata",
                columns: new[] { "EntityName", "EntityTypeCode" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EntityConfigurationId",
                table: "EntityMetadata",
                column: "EntityConfigurationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "EspecialidadeAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "EspecialidadeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticId",
                table: "Exam",
                column: "DiagnosticId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "Exam",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "Exam",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamStatusStringMapId",
                table: "Exam",
                column: "ExamStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "Exam",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Exam",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LocalId",
                table: "Exam",
                column: "LocalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsSchedule_Id",
                table: "Exam",
                column: "LogisticsSchedule_Id")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsScheduleId",
                table: "Exam",
                column: "LogisticsScheduleId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsScheduleItemId",
                table: "Exam",
                column: "LogisticsScheduleItemId");

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsStuffId",
                table: "Exam",
                column: "LogisticsStuffId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Exam",
                table: "Exam",
                columns: new[] { "ExamDefinitionId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_1",
                table: "Exam",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_10",
                table: "Exam",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_11",
                table: "Exam",
                columns: new[] { "HealthProgramId", "isDeleted", "StateCode" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_2",
                table: "Exam",
                columns: new[] { "HealthProgramId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_3",
                table: "Exam",
                columns: new[] { "isDeleted", "StateCode", "TreatmentId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_Exam_4",
                table: "Exam",
                columns: new[] { "isDeleted", "StateCode" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_5",
                table: "Exam",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "ix_nc_exam_6",
                table: "Exam",
                columns: new[] { "ExamDefinitionId", "isDeleted", "StateCode" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_7",
                table: "Exam",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_8",
                table: "Exam",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_EXAM_9",
                table: "Exam",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_OwnershipLevelStringMapId",
                table: "Exam",
                column: "OwnershipLevelStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_ReschedulingReasonStringMapId",
                table: "Exam",
                column: "ReschedulingReasonStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ResultStringMapId",
                table: "Exam",
                column: "ResultStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_ScheduleSourceStringMapId",
                table: "Exam",
                column: "ScheduleSourceStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Exam",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Exam",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherId",
                table: "Exam",
                column: "VoucherId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_WithdrawalPreferenceStringMapId",
                table: "Exam",
                column: "WithdrawalPreferenceStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Exam_BKP_19_04_22Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Exam_BKP_19_04_22Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "exam_BKP_updt_nivel_sericoAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "exam_BKP_updt_nivel_sericoAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Exam_BKP3011Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Exam_BKP3011Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ExamAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ExamAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamTypeStringMapId",
                table: "ExamDefinition",
                column: "ExamTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "ExamDefinition",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountExamTypeByProgramId",
                table: "ExamDefinitionAccountExamTypeByProgram",
                column: "AccountExamTypeByProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "ExamDefinitionAccountExamTypeByProgram",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ExamDefinitionAccountExamTypeByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ExamDefinitionAccountExamTypeByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ExamDefinitionAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ExamDefinitionAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "ExamDefinitionExam",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamId",
                table: "ExamDefinitionExam",
                column: "ExamId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ExamDefinitionExamAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ExamDefinitionExamAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "ExamDefinitionHealthProgram",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "ExamDefinitionHealthProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ExamDefinitionHealthProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ExamDefinitionHealthProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "ExamDefinitionSettingsByProgram",
                column: "ExamDefinitionId");

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "ExamDefinitionSettingsByProgram",
                column: "HealthProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "ExamDefinitionSettingsByProgram",
                column: "StatusCodeStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ExamDefinitionSettingsByProgramAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ExamDefinitionSettingsByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "ExamDefinitionVoucherConfiguration",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherConfigurationId",
                table: "ExamDefinitionVoucherConfiguration",
                column: "VoucherConfigurationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ExamDefinitionVoucherConfigurationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ExamDefinitionVoucherConfigurationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ExamStatusHistoryAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ExamStatusHistoryAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "FeriadoAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "FeriadoAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_BankAccountTypeStringMapId",
                table: "HealthProfessional",
                column: "BankAccountTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_BankId",
                table: "HealthProfessional",
                column: "BankId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_GenderStringMapId",
                table: "HealthProfessional",
                column: "GenderStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HiringTypeStringMapId",
                table: "HealthProfessional",
                column: "HiringTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NurseProfessionalTypeStringMapId",
                table: "HealthProfessional",
                column: "NurseProfessionalTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ProfessionalLicenseTypeStringMapId",
                table: "HealthProfessional",
                column: "ProfessionalLicenseTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "HealthProfessional",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "HealthProfessional",
                column: "UserId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProfessionalAccountAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProfessionalAccountAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProfessionalAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProfessionalAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ConsultantId",
                table: "HealthProfessionalByProgram",
                column: "ConsultantId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "HealthProfessionalByProgram",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "HealthProfessionalByProgram",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LocalId",
                table: "HealthProfessionalByProgram",
                column: "LocalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NurceStatusStringMapId",
                table: "HealthProfessionalByProgram",
                column: "NurceStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "HealthProfessionalByProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProfessionalByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProfessionalByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "HealthProfessionalHealthProgram",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "HealthProfessionalHealthProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProfessionalHealthProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProfessionalHealthProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "HealthProfessionalMedicalSpecialty",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicalSpecialtyId",
                table: "HealthProfessionalMedicalSpecialty",
                column: "MedicalSpecialtyId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProfessionalMedicalSpecialtyAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProfessionalMedicalSpecialtyAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "HealthProgram",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AkkaActorsId",
                table: "HealthProgram",
                column: "AkkaActorsId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticPartnerId",
                table: "HealthProgram",
                column: "LogisticPartnerId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsTypeStringMapId",
                table: "HealthProgram",
                column: "LogisticsTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "HealthProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "HealthProgramAccount",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "HealthProgramAccount",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramAccount_BKP_19_04_22Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramAccount_BKP_19_04_22Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramAccountAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramAccountAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "HealthProgramDisease",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "HealthProgramDisease",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "HealthProgramDisease",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SuspectDiseaseId",
                table: "HealthProgramDisease",
                column: "SuspectDiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramDiseaseAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramDiseaseAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "HealthProgramDiseaseExam",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamTypeStringMapId",
                table: "HealthProgramDiseaseExam",
                column: "ExamTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramDisease_Id",
                table: "HealthProgramDiseaseExam",
                column: "HealthProgramDisease_Id")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "HealthProgramDiseaseExam",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramDiseaseExamAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramDiseaseExamAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "HealthProgramExamByEntity",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "HealthProgramExamByEntity",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "HealthProgramExamByEntity",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramExamByEntityAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramExamByEntityAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "HealthProgramMedicament",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "HealthProgramMedicament",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramMedicamentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramMedicamentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "HealthProgramServiceType",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ServiceTypeId",
                table: "HealthProgramServiceType",
                column: "ServiceTypeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramServiceTypeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramServiceTypeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EmailBoxSettingId",
                table: "HealthProgramTemplateSetting",
                column: "EmailBoxSettingId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EntityMetadataId",
                table: "HealthProgramTemplateSetting",
                column: "EntityMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "HealthProgramTemplateSetting",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "HealthProgramTemplateSetting",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TemplateId",
                table: "HealthProgramTemplateSetting",
                column: "TemplateId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TemplateTypeStringMap_StringMapId",
                table: "HealthProgramTemplateSetting",
                column: "TemplateTypeStringMap_StringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "HealthProgramTemplateSettingAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "HealthProgramTemplateSettingAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IdentityCodeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IdentityCodeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "Incident",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountTypeStringMapId",
                table: "Incident",
                column: "AccountTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ContactTypeStringMapId",
                table: "Incident",
                column: "ContactTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_Custom1StringMapId",
                table: "Incident",
                column: "Custom1StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_Custom2StringMapId",
                table: "Incident",
                column: "Custom2StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerTypeStringMapId",
                table: "Incident",
                column: "CustomerTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "Incident",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DistributorLogisticId",
                table: "Incident",
                column: "DistributorLogisticId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "Incident",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Incident",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentProductId",
                table: "Incident",
                column: "IncidentProductId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentSubjectId",
                table: "Incident",
                column: "IncidentSubjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentTypeDetailId",
                table: "Incident",
                column: "IncidentTypeDetailId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentTypeId",
                table: "Incident",
                column: "IncidentTypeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicalSpecialtyId",
                table: "Incident",
                column: "MedicalSpecialtyId");

            migrationBuilder.CreateIndex(
                name: "IX_OriginStringMapId",
                table: "Incident",
                column: "OriginStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "Incident",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PrescriptionStatusStringMapId",
                table: "Incident",
                column: "PrescriptionStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PreviousMedicamentCompetitorId",
                table: "Incident",
                column: "PreviousMedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "Incident",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RepresentativeId",
                table: "Incident",
                column: "RepresentativeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RequestStatusStringMapId",
                table: "Incident",
                column: "RequestStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Incident",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusStringMapId",
                table: "Incident",
                column: "StatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Incident",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentLineStringMapId",
                table: "Incident",
                column: "TreatmentLineStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IncidentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IncidentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "IncidentItem",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "IncidentItem",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "IncidentItem",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_GenderStringMapId",
                table: "IncidentItem",
                column: "GenderStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "IncidentItem",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentId",
                table: "IncidentItem",
                column: "IncidentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsScheduleId",
                table: "IncidentItem",
                column: "LogisticsScheduleId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "IncidentItem",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IncidentItemAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IncidentItemAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "IncidentProduct",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "IncidentProduct",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IncidentProductAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IncidentProductAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "IncidentSubject",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "IncidentSubject",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IncidentSubjectAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IncidentSubjectAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "IncidentType",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IncidentTypeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IncidentTypeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "IncidentTypeDetail",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IncidentTypeDetailAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IncidentTypeDetailAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "IncidentTypeDetailProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentProductId",
                table: "IncidentTypeDetailProgram",
                column: "IncidentProductId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentSubjectId",
                table: "IncidentTypeDetailProgram",
                column: "IncidentSubjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentTypeDetailId",
                table: "IncidentTypeDetailProgram",
                column: "IncidentTypeDetailId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentTypeId",
                table: "IncidentTypeDetailProgram",
                column: "IncidentTypeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "IncidentTypeDetailProgram",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IncidentTypeDetailProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IncidentTypeDetailProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_EntityAttributieProgram",
                table: "IndexViewsEntityMetadata",
                columns: new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EntityMetadataId",
                table: "IndexViewsEntityMetadata",
                column: "EntityMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CollectionDiagnosisStringMapId",
                table: "InformationCollect",
                column: "CollectionDiagnosisStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "InformationCollect",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PlaceOfCollectionStringMapId",
                table: "InformationCollect",
                column: "PlaceOfCollectionStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "InformationCollect",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VisitId",
                table: "InformationCollect",
                column: "VisitId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "InformationCollectAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "InformationCollectAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AbsenceJustificationStringMapId",
                table: "InformationVisit",
                column: "AbsenceJustificationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "InformationVisit",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VisitId",
                table: "InformationVisit",
                column: "VisitId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VisitStatusStringMapId",
                table: "InformationVisit",
                column: "VisitStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "InformationVisitAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "InformationVisitAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountableHealthProfessionalId",
                table: "Infusion",
                column: "AccountableHealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationTypeStringMapId",
                table: "Infusion",
                column: "ApplicationTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "Infusion",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "Infusion",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Infusion",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionDispatchNumberStringMapId",
                table: "Infusion",
                column: "InfusionDispatchNumberStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionPlaceProfessionalId",
                table: "Infusion",
                column: "InfusionPlaceProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionPlaceTypeStringMapId",
                table: "Infusion",
                column: "InfusionPlaceTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionStatusStringMapId",
                table: "Infusion",
                column: "InfusionStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionTypeStringMapId",
                table: "Infusion",
                column: "InfusionTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionTypeStringMapId_2",
                table: "Infusion",
                column: "InfusionTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionWeekStringMapId",
                table: "Infusion",
                column: "InfusionWeekStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsId",
                table: "Infusion",
                column: "LogisticsId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "Infusion",
                column: "MedicamentId");

            migrationBuilder.CreateIndex(
                name: "IX_NC_Infusion",
                table: "Infusion",
                column: "InfusionStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_0",
                table: "Infusion",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_1",
                table: "Infusion",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_Infusion_10",
                table: "Infusion",
                column: "ActualDate")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_11",
                table: "Infusion",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Infusion_12",
                table: "Infusion",
                column: "Weight");

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_13",
                table: "Infusion",
                columns: new[] { "InfusionStatusStringMapId", "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_14",
                table: "Infusion",
                column: "AmpouleAmountExpected");

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_15",
                table: "Infusion",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_NC_Infusion_2",
                table: "Infusion",
                column: "InfusionStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_3",
                table: "Infusion",
                columns: new[] { "InfusionStatusStringMapId", "HealthProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_4",
                table: "Infusion",
                columns: new[] { "InfusionStatusStringMapId", "isDeleted", "HealthProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_5",
                table: "Infusion",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_6",
                table: "Infusion",
                columns: new[] { "InfusionTypeStringMapId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_7",
                table: "Infusion",
                columns: new[] { "InfusionStatusStringMapId", "isDeleted", "HealthProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_8",
                table: "Infusion",
                columns: new[] { "isDeleted", "InfusionTypeStringMapId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_INFUSION_9",
                table: "Infusion",
                columns: new[] { "InfusionStatusStringMapId", "isDeleted", "HealthProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientSalesOrderId",
                table: "Infusion",
                column: "PatientSalesOrderId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PlaceId",
                table: "Infusion",
                column: "PlaceId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ReasonInfusionNotDoneStringMapId",
                table: "Infusion",
                column: "ReasonInfusionNotDoneStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Infusion",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SupportFieldStringMapId",
                table: "Infusion",
                column: "SupportFieldStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Infusion",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherId",
                table: "Infusion",
                column: "VoucherId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Infusion_BKP_19_04_22Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Infusion_BKP_19_04_22Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "InfusionAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "InfusionAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "infusoesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "infusoesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "IntegrationLogAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "IntegrationLogAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "JsRulesByEntity",
                column: "HealthProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "JsRulesByEntity",
                column: "StatusCodeStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "JsRulesByEntity_BKP_20201015Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "JsRulesByEntity_BKP_20201015Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "JsRulesByEntityAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "JsRulesByEntityAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "Idx_EntityAttributie",
                table: "LanguageAttribute",
                columns: new[] { "AttributeMetadataId", "EntityMetadataId", "AttributeMetadataIdName", "EntityMetadataIdName" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_ProgramId",
                table: "LanguageAttribute",
                column: "ProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LanguageAttributeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LanguageAttributeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LanguageDefaultAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LanguageDefaultAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LanguageEntitiesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LanguageEntitiesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MenuMetadataId",
                table: "LanguageMenuMetadata",
                column: "MenuMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SectionMetadataId",
                table: "LanguageSectionMetadata",
                column: "SectionMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ListaDeTabelasAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ListaDeTabelasAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "log_atualizacao_nono_digitoAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "log_atualizacao_nono_digitoAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_Custom1StringMapId",
                table: "Logistics",
                column: "Custom1StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_Custom2StringMapId",
                table: "Logistics",
                column: "Custom2StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Logistics",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentStatusStringMapId",
                table: "Logistics",
                column: "IncidentStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationStatusStringMapId",
                table: "Logistics",
                column: "IntegrationStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsPartnerId",
                table: "Logistics",
                column: "LogisticsPartnerId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsStuffId",
                table: "Logistics",
                column: "LogisticsStuffId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsTypeStringMapId",
                table: "Logistics",
                column: "LogisticsTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "Logistics",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Logistics",
                table: "Logistics",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_NC_LOGISTICS_2",
                table: "Logistics",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_NC_LOGISTICS_3",
                table: "Logistics",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "Logistics",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SendStatusStringMapId",
                table: "Logistics",
                column: "SendStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SendSubStatusStringMapId",
                table: "Logistics",
                column: "SendSubStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Logistics",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Logistics",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UCB_KitSentReasonStringMapId",
                table: "Logistics",
                column: "UCB_KitSentReasonStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LogisticsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LogisticsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountSettingsByProgramId",
                table: "LogisticsSchedule",
                column: "AccountSettingsByProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_ChosenExamTypeStringMapId",
                table: "LogisticsSchedule",
                column: "ChosenExamTypeStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_ClientId",
                table: "LogisticsSchedule",
                column: "ClientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ConsultantId",
                table: "LogisticsSchedule",
                column: "ConsultantId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryLaboratoryId",
                table: "LogisticsSchedule",
                column: "DeliveryLaboratoryId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticId",
                table: "LogisticsSchedule",
                column: "DiagnosticId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "LogisticsSchedule",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_Exam_Id",
                table: "LogisticsSchedule",
                column: "Exam_Id")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "LogisticsSchedule",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamId",
                table: "LogisticsSchedule",
                column: "ExamId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "LogisticsSchedule",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "LogisticsSchedule",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentId",
                table: "LogisticsSchedule",
                column: "IncidentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IntegrationStatusStringMapId",
                table: "LogisticsSchedule",
                column: "IntegrationStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_KitTypeStringMapId",
                table: "LogisticsSchedule",
                column: "KitTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LocalDeliveryWithdrawStringMapId",
                table: "LogisticsSchedule",
                column: "LocalDeliveryWithdrawStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LocalId",
                table: "LogisticsSchedule",
                column: "LocalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LocalTypeStringMapId",
                table: "LogisticsSchedule",
                column: "LocalTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsPartnerId",
                table: "LogisticsSchedule",
                column: "LogisticsPartnerId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsScheduleTypeStringMapId",
                table: "LogisticsSchedule",
                column: "LogisticsScheduleTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsStuffId",
                table: "LogisticsSchedule",
                column: "LogisticsStuffId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_LogisticsSchedule",
                table: "LogisticsSchedule",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "ix_nc_LogisticsSchedule_0",
                table: "LogisticsSchedule",
                columns: new[] { "LogisticsScheduleTypeStringMapId", "HealthProgramId", "Name" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_LogisticsSchedule_1",
                table: "LogisticsSchedule",
                column: "DiagnosticId");

            migrationBuilder.CreateIndex(
                name: "IX_NC_LogisticsSchedule_2",
                table: "LogisticsSchedule",
                column: "DiagnosticId");

            migrationBuilder.CreateIndex(
                name: "IX_PreferredTimeStringMapId",
                table: "LogisticsSchedule",
                column: "PreferredTimeStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_RequestDoctorId",
                table: "LogisticsSchedule",
                column: "RequestDoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ScheduleStatusStringMapId",
                table: "LogisticsSchedule",
                column: "ScheduleStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "LogisticsSchedule",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StorageTubeTypeStringMapId",
                table: "LogisticsSchedule",
                column: "StorageTubeTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherId",
                table: "LogisticsSchedule",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LogisticsSchedule_BKP_01072022_1106Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LogisticsSchedule_BKP_01072022_1106Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LogisticsSchedule_BKP_01072022Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LogisticsSchedule_BKP_01072022Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LogisticsScheduleAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LogisticsScheduleAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsScheduleId",
                table: "LogisticsScheduleItem",
                column: "LogisticsScheduleId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "LogisticsScheduleItem",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherId",
                table: "LogisticsScheduleItem",
                column: "VoucherId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LogisticsScheduleItemAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LogisticsScheduleItemAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "LogisticsStuff",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_KitId",
                table: "LogisticsStuff",
                column: "KitId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsSchedule_Id",
                table: "LogisticsStuff",
                column: "LogisticsSchedule_Id")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsStuffTypeStringMapId",
                table: "LogisticsStuff",
                column: "LogisticsStuffTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ManufacturerId",
                table: "LogisticsStuff",
                column: "ManufacturerId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "LogisticsStuff",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "LogisticsStuff",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StrengthMedicamentId",
                table: "LogisticsStuff",
                column: "StrengthMedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StuffStatusStringMapId",
                table: "LogisticsStuff",
                column: "StuffStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LogisticsStuffAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LogisticsStuffAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_KitsId",
                table: "LogisticsStuffKits",
                column: "KitsId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsStuffId",
                table: "LogisticsStuffKits",
                column: "LogisticsStuffId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "LogisticsStuffKitsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "LogisticsStuffKitsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "MedicalSpecialty",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicalSpecialtyAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicalSpecialtyAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Medicament",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessMannerId",
                table: "MedicamentAccess",
                column: "AccessMannerId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessStatusStringMapId",
                table: "MedicamentAccess",
                column: "AccessStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessSubStatusStringMapId",
                table: "MedicamentAccess",
                column: "AccessSubStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessTypeStringMapId",
                table: "MedicamentAccess",
                column: "AccessTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessWayId",
                table: "MedicamentAccess",
                column: "AccessWayId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "MedicamentAccess",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AttemptAccessModifiedById",
                table: "MedicamentAccess",
                column: "AttemptAccessModifiedById")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DetailDifficultyWithAccessStringMapId",
                table: "MedicamentAccess",
                column: "DetailDifficultyWithAccessStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DetailDifficultyWithDocumentsStringMapId",
                table: "MedicamentAccess",
                column: "DetailDifficultyWithDocumentsStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DetailNoDifficultyWithAccessStringMapId",
                table: "MedicamentAccess",
                column: "DetailNoDifficultyWithAccessStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "MedicamentAccess",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_MedicamentAccess",
                table: "MedicamentAccess",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_MedicamentAccess_1",
                table: "MedicamentAccess",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "MedicamentAccess",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "MedicamentAccess",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "MedicamentAccess",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicamentAccessAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicamentAccessAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicamentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicamentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "MedicamentCompetitor",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicamentCompetitorAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicamentCompetitorAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "MedicamentCompetitorDisease",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentCompetitorId",
                table: "MedicamentCompetitorDisease",
                column: "MedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicamentCompetitorDiseaseAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicamentCompetitorDiseaseAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "MedicamentCompetitorHealthProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentCompetitorId",
                table: "MedicamentCompetitorHealthProgram",
                column: "MedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicamentCompetitorHealthProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicamentCompetitorHealthProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "MedicamentConcomitant",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "MedicamentConcomitant",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "MedicamentConcomitant",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicamentConcomitantAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicamentConcomitantAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "MedicamentDisease",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "MedicamentDisease",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicamentDiseaseAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicamentDiseaseAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "MedicamentStrengthMedicament",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StrengthMedicamentId",
                table: "MedicamentStrengthMedicament",
                column: "StrengthMedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicamentStrengthMedicamentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicamentStrengthMedicamentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "MedicationNonadherenceReason",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicationNonadherenceReasonAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicationNonadherenceReasonAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "MedicationNonadherenceReasonHealthProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicationNonadherenceReasonId",
                table: "MedicationNonadherenceReasonHealthProgram",
                column: "MedicationNonadherenceReasonId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "MedicationNonadherenceReasonHealthProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "MedicationNonadherenceReasonHealthProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ParentMenuMetadataId",
                table: "MenuMetadata",
                column: "ParentMenuMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EntityMetadataId",
                table: "MenuMetadataEntityMetadata",
                column: "EntityMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MenuMetadataId",
                table: "MenuMetadataEntityMetadata",
                column: "MenuMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Occupation",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "OccupationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "OccupationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PacientesAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PacientesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PacientesPesquisaAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PacientesPesquisaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Painel MedicoMelanomaAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Painel MedicoMelanomaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Painel MedicoTASIGNAAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Painel MedicoTASIGNAAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PainelMedicoEntyvio$Audit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PainelMedicoEntyvio$Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CivilStatusStringMapId",
                table: "Patient",
                column: "CivilStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EducationStringMapId",
                table: "Patient",
                column: "EducationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_GenderStringMapId",
                table: "Patient",
                column: "GenderStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Patient",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Patient",
                table: "Patient",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OccupationId",
                table: "Patient",
                column: "OccupationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientTypeStringMapId",
                table: "Patient",
                column: "PatientTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Patient",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SystemUserId",
                table: "Patient",
                column: "SystemUserId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PatientAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PatientAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "PatientSalesOrder",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthcareProviderId",
                table: "PatientSalesOrder",
                column: "HealthcareProviderId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "PatientSalesOrder",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "PatientSalesOrder",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "PatientSalesOrder",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientSourceStringMapId",
                table: "PatientSalesOrder",
                column: "PatientSourceStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SolicitorStringMapId",
                table: "PatientSalesOrder",
                column: "SolicitorStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "PatientSalesOrder",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StrengthMedicamentId",
                table: "PatientSalesOrder",
                column: "StrengthMedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PatientSalesOrderAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PatientSalesOrderAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentId",
                table: "Pharmacovigilance",
                column: "IncidentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Pharmacovigilance",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Pharmacovigilance",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PharmacovigilanceAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PharmacovigilanceAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Phase",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PhaseAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PhaseAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RulesAttributeMetadataId",
                table: "PhaseRulesMetadata",
                column: "RulesAttributeMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CallForRegardingEntityId",
                table: "PhoneCall",
                column: "CallForRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CallFromRegardingEntityId",
                table: "PhoneCall",
                column: "CallFromRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "PhoneCall",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_PhoneCall",
                table: "PhoneCall",
                columns: new[] { "ActualEnd", "HealthProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_phonecall_0",
                table: "PhoneCall",
                column: "ActualEnd");

            migrationBuilder.CreateIndex(
                name: "IX_NC_PHONECALL_1",
                table: "PhoneCall",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_PhoneCall_2",
                table: "PhoneCall",
                column: "UnSuccessfully")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_PHONECALL_3",
                table: "PhoneCall",
                column: "UnSuccessfully")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_PHONECALL_4",
                table: "PhoneCall",
                columns: new[] { "PhoneCallStatusStringMapId", "UnSuccessfully" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_phonecall_5",
                table: "PhoneCall",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_PHONECALL_6",
                table: "PhoneCall",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_OriginRegardingEntityId",
                table: "PhoneCall",
                column: "OriginRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PhoneCallStatusStringMapId",
                table: "PhoneCall",
                column: "PhoneCallStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PhoneCallTypeStringMapId",
                table: "PhoneCall",
                column: "PhoneCallTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "PhoneCall",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "PhoneCall",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UnSuccessfulReasonStringMapId",
                table: "PhoneCall",
                column: "UnSuccessfulReasonStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PhoneCallAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PhoneCallAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Posologe",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PosologeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PosologeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "PosologeMedicament",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PosologeId",
                table: "PosologeMedicament",
                column: "PosologeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PosologeMedicamentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PosologeMedicamentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalCodeStateId",
                table: "PostalCodeCity",
                column: "PostalCodeStateId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "PostalCodeCity",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PostalCodeCityAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PostalCodeCityAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AddressTypeStringMapId",
                table: "PostalCodes",
                column: "AddressTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalCodeCityId",
                table: "PostalCodes",
                column: "PostalCodeCityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalCodeStateId",
                table: "PostalCodes",
                column: "PostalCodeStateId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "PostalCodes",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PostalCodesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PostalCodesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "PostalCodeState",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PostalCodeStateAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PostalCodeStateAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_ObjectIdStatusEntity",
                table: "ProcessLog",
                columns: new[] { "ObjectId", "Status", "isScreenLocker", "EntityCode", "EntityName" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ProcessLogAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ProcessLogAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "profarmaacessoAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "profarmaacessoAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ProfileAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ProfileAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "Purchase",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_FrequencyStringMapId",
                table: "Purchase",
                column: "FrequencyStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Purchase",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "Purchase",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "Purchase",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PrescriptionTypeStringMapId",
                table: "Purchase",
                column: "PrescriptionTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Purchase",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Purchase",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "PurchaseAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "PurchaseAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Question",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "QuestionAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "QuestionAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "QuestionOptions",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "QuestionOptionsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "QuestionOptionsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_RegardingEntity",
                table: "RegardingEntity",
                column: "RegardingObjectIdSource")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_RegardingObjectIdTarget",
                table: "RegardingEntity",
                column: "RegardingObjectIdTarget")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "RegardingEntity",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "RegardingEntityAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "RegardingEntityAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "RegionalManager",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalCodeCityId",
                table: "RegionalManager",
                column: "PostalCodeCityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PostalCodeStateId",
                table: "RegionalManager",
                column: "PostalCodeStateId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RepresentativeId",
                table: "RegionalManager",
                column: "RepresentativeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RepresentativeSupervisorId",
                table: "RegionalManager",
                column: "RepresentativeSupervisorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "RegionalManager",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "RegionalManagerAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "RegionalManagerAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "relatorio_pacientes_ativos_em_frente_Total_infusoesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "relatorio_pacientes_ativos_em_frente_Total_infusoesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "relatorio_pacientes_ativos_em_frente_Total_VisitasAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "relatorio_pacientes_ativos_em_frente_Total_VisitasAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "relatorio_pacientes_ativos_em_frenteAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "relatorio_pacientes_ativos_em_frenteAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "Representative",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Representative",
                table: "Representative",
                columns: new[] { "FullName", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_Representative_1",
                table: "Representative",
                columns: new[] { "isDeleted", "Name" });

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Representative",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "Representative",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Representative_bkp15072021Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Representative_bkp15072021Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "RepresentativeAccountAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "RepresentativeAccountAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "RepresentativeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "RepresentativeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_Representative_Id",
                table: "RepresentativeRegion",
                column: "Representative_Id");

            migrationBuilder.CreateIndex(
                name: "IX_ValidationResult_Id",
                table: "RepresentativeRegion",
                column: "ValidationResult_Id");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "RepresentativeRegionAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "RepresentativeRegionAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_CalendarTypeStringMap_StringMapId",
                table: "ResourceWorkSettings",
                column: "CalendarTypeStringMap_StringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "ResourceWorkSettings",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ServiceTypeId",
                table: "ResourceWorkSettings",
                column: "ServiceTypeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "ResourceWorkSettings",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ResourceWorkSettingsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ResourceWorkSettingsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_EntityAtrributieProgram",
                table: "RulesAttributeMetadata",
                columns: new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_ProgramId",
                table: "RulesAttributeMetadata",
                column: "ProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AttributeMetadataId",
                table: "RulesAttributeMetadata",
                column: "AttributeMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "RulesAttributeMetadata_bkp_30092021Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "RulesAttributeMetadata_bkp_30092021Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SchedulingDatesAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SchedulingDatesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_CampaignId",
                table: "SchedulingHistory",
                column: "CampaignId");

            migrationBuilder.CreateIndex(
                name: "IX_ExamId",
                table: "SchedulingHistory",
                column: "ExamId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "SchedulingHistory",
                column: "HealthProfessionalId");

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "SchedulingHistory",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LogisticsScheduleId",
                table: "SchedulingHistory",
                column: "LogisticsScheduleId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ReschedulingReasonStringMapId",
                table: "SchedulingHistory",
                column: "ReschedulingReasonStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "SchedulingHistory",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VisitId",
                table: "SchedulingHistory",
                column: "VisitId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SchedulingHistoryAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SchedulingHistoryAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EntityMetadataId",
                table: "SectionExcludedByPhase",
                column: "EntityMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SectionExcludedByPhaseAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SectionExcludedByPhaseAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_EntityAndProgramId",
                table: "SectionMetadata",
                columns: new[] { "EntityMetadataId", "ProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EntityMetadataId",
                table: "SectionMetadata",
                column: "EntityMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SectionMetadata_bkp_24092021Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SectionMetadata_bkp_24092021Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "ServiceType",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ServiceTypeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ServiceTypeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "SMS",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OriginRegardingEntityId",
                table: "SMS",
                column: "OriginRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ParentSMSId",
                table: "SMS",
                column: "ParentSMSId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "SMS",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SMSFromRegardingEntityId",
                table: "SMS",
                column: "SMSFromRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SmsStatusStringMapId",
                table: "SMS",
                column: "SmsStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SMSToRegardingEntityId",
                table: "SMS",
                column: "SMSToRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SmsTypeStringMapId",
                table: "SMS",
                column: "SmsTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "SMS",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SubjectTypeStringMapId",
                table: "SMS",
                column: "SubjectTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SMSAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SMSAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ProcessLogId",
                table: "StepLogs",
                column: "ProcessLogId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "StepLogsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "StepLogsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "StrengthMedicament",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "StrengthMedicamentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "StrengthMedicamentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_EntityAttributieProgramId",
                table: "StringMap",
                columns: new[] { "EntityMetadataId", "AttributeMetadataId", "ProgramId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AttributeMetadataId",
                table: "StringMap",
                column: "AttributeMetadataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "StringMapAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "StringMapAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ParentSubjectId",
                table: "Subject",
                column: "ParentSubjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Subject",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SubjectAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SubjectAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Survey",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Survey",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SurveyTypeStringMapId",
                table: "Survey",
                column: "SurveyTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SurveyAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SurveyAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "SurveyQuestionList",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SurveyQuestionListAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SurveyQuestionListAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_SurveyResponse",
                table: "SurveyResponse",
                columns: new[] { "QuestionId", "SurveyId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_SurveyResponse_2",
                table: "SurveyResponse",
                column: "ObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "SurveyResponse",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "SurveyResponse",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SurveyResponseAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SurveyResponseAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "SurveyResponseLine",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "SurveyResponseLineAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "SurveyResponseLineAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "T_LOG_COLLATEAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "T_LOG_COLLATEAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Task",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OriginRegardingEntityId",
                table: "Task",
                column: "OriginRegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingEntityId",
                table: "Task",
                column: "RegardingEntityId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Task",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TaskAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TaskAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TB_RELATORIO_JANSSEN_SUSTENNAAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TB_RELATORIO_JANSSEN_SUSTENNAAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_AcompanhamentoInfusao_ShireAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_AcompanhamentoInfusao_ShireAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TBL_CAREAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TBL_CAREAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TBL_CLINICASAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TBL_CLINICASAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_correcao_infusoesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_correcao_infusoesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TBL_DDDS_NONO_DIGITOAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TBL_DDDS_NONO_DIGITOAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_deletar_infusaoAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_deletar_infusaoAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_feriados_nacionaisAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_feriados_nacionaisAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_finalAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_finalAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_infusoes_2Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_infusoes_2Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_tbl_infusoes_previstas",
                table: "tbl_infusoes_previstas",
                column: "Linha");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_infusoes_previstasAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_infusoes_previstasAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_infusoesAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_infusoesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TBL_NOVARTIS_GERALAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TBL_NOVARTIS_GERALAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_relatorio_comparativo_patientmap_enzimaisAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_relatorio_comparativo_patientmap_enzimaisAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tbl_relatorio_entrenos_entyvio_geral_2Audit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tbl_relatorio_entrenos_entyvio_geral_2Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgramAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TEMP_CUIDAR_MAIS_ACESSOAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TEMP_CUIDAR_MAIS_ACESSOAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TempContingenciaAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TempContingenciaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TempInfusionCareAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TempInfusionCareAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Template",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SmsTypeStringMapId",
                table: "Template",
                column: "SmsTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Template",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TemplateTypeStringMapId",
                table: "Template",
                column: "TemplateTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ValidationResult_Id",
                table: "Template",
                column: "ValidationResult_Id")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TemplateAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TemplateAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TempPesquisaAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TempPesquisaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "teste_somar_22112019Audit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "teste_somar_22112019Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TESTE_XMLAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TESTE_XMLAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "TherapeuticHistory",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DosageUnitStringMapId",
                table: "TherapeuticHistory",
                column: "DosageUnitStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "TherapeuticHistory",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentId",
                table: "TherapeuticHistory",
                column: "IncidentId");

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentCompetitorId",
                table: "TherapeuticHistory",
                column: "MedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "TherapeuticHistory",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TherapeuticHistory",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SupplyMethodStringMapId",
                table: "TherapeuticHistory",
                column: "SupplyMethodStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "TherapeuticHistory",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TherapeuticHistoryAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TherapeuticHistoryAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TherapeuticType",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TherapeuticTypeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TherapeuticTypeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_accountAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_accountAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_accountSeetingByProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_accountSeetingByProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_AMPOLASAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_AMPOLASAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_APOIO_DIAGNOSTICOAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_APOIO_DIAGNOSTICOAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_DATA_ULTIMA_RETIRADA_AMOSTRAAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_DATA_ULTIMA_RETIRADA_AMOSTRAAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_deletar_10_dupAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_deletar_10_dupAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_deletarAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_deletarAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_DROPOUTSAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_DROPOUTSAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_duplicidade_vouchersAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_duplicidade_vouchersAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_ENROLLEDAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_ENROLLEDAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_ENTRADA_LOCALAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_ENTRADA_LOCALAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_ENTRADA_PAUSAAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_ENTRADA_PAUSAAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_final_pacientes_em_frenteAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_final_pacientes_em_frenteAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_infusion_teste_inserirAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_infusion_teste_inserirAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_infusion_testeAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_infusion_testeAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_INFUSOES_COMPLETO_ADDAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_INFUSOES_COMPLETO_ADDAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_INFUSOES_COMPLETOAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_INFUSOES_COMPLETOAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_INFUSOES_RollAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_INFUSOES_RollAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_INFUSOESAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_INFUSOESAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_kpi_infusoesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_kpi_infusoesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_LogisticScheduleAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_LogisticScheduleAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_marcar_como_is_deleted_no_careAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_marcar_como_is_deleted_no_careAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_marcar_deleted2Audit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_marcar_deleted2Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_marcar_deletedAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_marcar_deletedAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_MEDICOSAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_MEDICOSAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_nao_encontradoAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_nao_encontradoAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_NOVOSAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_NOVOSAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_PACIENTE_ENROLLEDAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_PACIENTE_ENROLLEDAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_pacientes_ativos_em_frente_dadosAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_pacientes_ativos_em_frente_dadosAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_pacientes_ativos_em_frente_InfusoesAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_pacientes_ativos_em_frente_InfusoesAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_pacientes_ativos_em_frente_visitaAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_pacientes_ativos_em_frente_visitaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_pacientes_ativos_em_frenteAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_pacientes_ativos_em_frenteAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_PACIENTES_BASEAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_PACIENTES_BASEAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_RETENTIONAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_RETENTIONAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_retorno2Audit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_retorno2Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_retornoAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_retornoAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_SAIDA_LOCALAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_SAIDA_LOCALAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_SAIDA_PAUSAAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_SAIDA_PAUSAAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_Schedule_HierarquiaAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_Schedule_HierarquiaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_semanaAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_semanaAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_TOTAL_INFUSIONSAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_TOTAL_INFUSIONSAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_ULTIMA_ENTRADAAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_ULTIMA_ENTRADAAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmp_validarAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmp_validarAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_VIALSAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_VIALSAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TMP_VOUCHERAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TMP_VOUCHERAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "tmpAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "tmpAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TmpDataDeAdesaoAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TmpDataDeAdesaoAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TrackingAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TrackingAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "TrainingRecord",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "TrainingRecord",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TrainingRecord",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TrainingRecordTypeStringMapId",
                table: "TrainingRecord",
                column: "TrainingRecordTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TrainingRecordAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TrainingRecordAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessTypeStringMapId",
                table: "Treatment",
                column: "AccessTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "Treatment",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CaregiverId",
                table: "Treatment",
                column: "CaregiverId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CivilStatusStringMapId",
                table: "Treatment",
                column: "CivilStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ContractTypeStringMapId",
                table: "Treatment",
                column: "ContractTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CreatedOn",
                table: "Treatment",
                column: "CreatedOn");

            migrationBuilder.CreateIndex(
                name: "IX_Custom1StringMapId",
                table: "Treatment",
                column: "Custom1StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_Custom2StringMapId",
                table: "Treatment",
                column: "Custom2StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticId",
                table: "Treatment",
                column: "DiagnosticId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_Disease2Id",
                table: "Treatment",
                column: "Disease2Id");

            migrationBuilder.CreateIndex(
                name: "IX_DiseaseId",
                table: "Treatment",
                column: "DiseaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "Treatment",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorPrescriberId",
                table: "Treatment",
                column: "DoctorPrescriberId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DosageUnitStringMapId",
                table: "Treatment",
                column: "DosageUnitStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_EducationStringMapId",
                table: "Treatment",
                column: "EducationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_GenderStringMapId",
                table: "Treatment",
                column: "GenderStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthCareProviderId",
                table: "Treatment",
                column: "HealthCareProviderId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Treatment",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HEALTHPROGRAMID_2",
                table: "Treatment",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HEALTHPROGRAMID_ISDELETED_STATECODE",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted", "StateCode" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HEALTHPROGRAMID_ISDELETED_STATECODE_V2",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted", "StateCode" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionPlaceId",
                table: "Treatment",
                column: "InfusionPlaceId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_KinshipStringMapId",
                table: "Treatment",
                column: "KinshipStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MainContactStringMapId",
                table: "Treatment",
                column: "MainContactStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentCompetitorId",
                table: "Treatment",
                column: "MedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicamentId",
                table: "Treatment",
                column: "MedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ModalityStringMapId",
                table: "Treatment",
                column: "ModalityStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Treatment",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "FriendlyCode" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_0",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted", "ModifiedOn" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_1",
                table: "Treatment",
                columns: new[] { "isDeleted", "HealthProgramId", "PhaseId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Treatment_10",
                table: "Treatment",
                column: "isDeleted")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Treatment_11",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted", "StateCode" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_12",
                table: "Treatment",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_13",
                table: "Treatment",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_14",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_15",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted", "ModifiedOn" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_Treatment_2",
                table: "Treatment",
                column: "FriendlyCode")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Treatment_3",
                table: "Treatment",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_4",
                table: "Treatment",
                columns: new[] { "TreatmentSituationId", "isDeleted", "HealthProgramId", "PhaseId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_5",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Treatment_6",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_Treatment_7",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TREATMENT_8",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_Treatment_9",
                table: "Treatment",
                columns: new[] { "HealthProgramId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OccupationId",
                table: "Treatment",
                column: "OccupationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "Treatment",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientSourceStringMapId",
                table: "Treatment",
                column: "PatientSourceStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PhaseId",
                table: "Treatment",
                column: "PhaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PhaseStringMapId",
                table: "Treatment",
                column: "PhaseStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PosologeId",
                table: "Treatment",
                column: "PosologeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PreferredTimeStringMapId",
                table: "Treatment",
                column: "PreferredTimeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PrescriptionStatusStringMapId",
                table: "Treatment",
                column: "PrescriptionStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ReasonInactivationStringMapId",
                table: "Treatment",
                column: "ReasonInactivationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SourceConsentStringMapId",
                table: "Treatment",
                column: "SourceConsentStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_StageOfDiseaseStringMapId",
                table: "Treatment",
                column: "StageOfDiseaseStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Treatment",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StrengthMedicamentId",
                table: "Treatment",
                column: "StrengthMedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TherapeuticTypeId",
                table: "Treatment",
                column: "TherapeuticTypeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_Treatment_CreatedOn_desc",
                table: "Treatment",
                column: "CreatedOn",
                descending: new bool[0]);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentCustomDataId",
                table: "Treatment",
                column: "TreatmentCustomDataId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentSituationId",
                table: "Treatment",
                column: "TreatmentSituationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusDetailId",
                table: "Treatment",
                column: "TreatmentStatusDetailId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusDetailStringMapId",
                table: "Treatment",
                column: "TreatmentStatusDetailStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusId",
                table: "Treatment",
                column: "TreatmentStatusId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusStringMapId",
                table: "Treatment",
                column: "TreatmentStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "Treatment",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_VisitRefusalReasonStringMapId",
                table: "Treatment",
                column: "VisitRefusalReasonStringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Treatment_bkp_05_11_2021Audit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Treatment_bkp_05_11_2021Audit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_CPF",
                table: "Treatment_RECEITADEVIDA_FIND",
                column: "CPF")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "Treatment_RECEITADEVIDA_FINDAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "Treatment_RECEITADEVIDA_FINDAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AddressTypeStringMapId",
                table: "TreatmentAddress",
                column: "AddressTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CoverageAreaId",
                table: "TreatmentAddress",
                column: "CoverageAreaId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CustomerAddressId",
                table: "TreatmentAddress",
                column: "CustomerAddressId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "TreatmentAddress",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TreatmentAddress",
                table: "TreatmentAddress",
                column: "MainAddress")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentAddress",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "TreatmentAddress",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentAddressAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentAddressAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ActionCategoryId",
                table: "TreatmentAndDiagnosticAction",
                column: "ActionCategoryId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ActionConfigurationId",
                table: "TreatmentAndDiagnosticAction",
                column: "ActionConfigurationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ActionRuleId",
                table: "TreatmentAndDiagnosticAction",
                column: "ActionRuleId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticId",
                table: "TreatmentAndDiagnosticAction",
                column: "DiagnosticId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IncidentId",
                table: "TreatmentAndDiagnosticAction",
                column: "IncidentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_TreatmentAndDiagnosticAction",
                table: "TreatmentAndDiagnosticAction",
                column: "ActionStatus")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TreatmentAndDiagnosticAction_2",
                table: "TreatmentAndDiagnosticAction",
                columns: new[] { "ActionConfigurationId", "isDeleted" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PhoneCallId",
                table: "TreatmentAndDiagnosticAction",
                column: "PhoneCallId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentAndDiagnosticAction",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "TreatmentAndDiagnosticAction",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentAndDiagnosticActionAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentAndDiagnosticActionAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentAttendance",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "TreatmentAttendance",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentAttendanceAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentAttendanceAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_TreatmentAudit",
                table: "TreatmentAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentBillingAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentBillingAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessDetailStringMapId",
                table: "TreatmentCustomData",
                column: "AccessDetailStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccessWayId",
                table: "TreatmentCustomData",
                column: "AccessWayId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "TreatmentCustomData",
                column: "AccountId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ApplicatorTypeStringMapId",
                table: "TreatmentCustomData",
                column: "ApplicatorTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ContractHasCoparticipationStringMapId",
                table: "TreatmentCustomData",
                column: "ContractHasCoparticipationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ContractTypeStringMapId",
                table: "TreatmentCustomData",
                column: "ContractTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_Custom1StringMapId",
                table: "TreatmentCustomData",
                column: "Custom1StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_Custom2StringMapId",
                table: "TreatmentCustomData",
                column: "Custom2StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_DoctorAuthorizesDosageTitrationStringMapId",
                table: "TreatmentCustomData",
                column: "DoctorAuthorizesDosageTitrationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_FormofAccessStringMapId",
                table: "TreatmentCustomData",
                column: "FormofAccessStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HemophiliaDegreeStringMapId",
                table: "TreatmentCustomData",
                column: "HemophiliaDegreeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IFXITCodeId",
                table: "TreatmentCustomData",
                column: "IFXITCodeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IFXITStatusStringMapId",
                table: "TreatmentCustomData",
                column: "IFXITStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IFXOTCodeId",
                table: "TreatmentCustomData",
                column: "IFXOTCodeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IFXOTStatusStringMapId",
                table: "TreatmentCustomData",
                column: "IFXOTStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionSiteId",
                table: "TreatmentCustomData",
                column: "InfusionSiteId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionTypeStringMapId",
                table: "TreatmentCustomData",
                column: "InfusionTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_IsWorkingStringMap_StringMapId",
                table: "TreatmentCustomData",
                column: "IsWorkingStringMap_StringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_JANSSENITStatusStringMapId",
                table: "TreatmentCustomData",
                column: "JANSSENITStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_JANSSENOTStatusStringMapId",
                table: "TreatmentCustomData",
                column: "JANSSENOTStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicalIndicationStringMapId",
                table: "TreatmentCustomData",
                column: "MedicalIndicationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_MedicalInstructionAccessWayStringMapId",
                table: "TreatmentCustomData",
                column: "MedicalInstructionAccessWayStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TreatmentCustomData",
                table: "TreatmentCustomData",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_NC_TreatmentCustomData_2",
                table: "TreatmentCustomData",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_OptimizationSubTypeStringMapId",
                table: "TreatmentCustomData",
                column: "OptimizationSubTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_OptimizationTypeStringMapId",
                table: "TreatmentCustomData",
                column: "OptimizationTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientTypeStringMapId",
                table: "TreatmentCustomData",
                column: "PatientTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PlanCoverageStringMapId",
                table: "TreatmentCustomData",
                column: "PlanCoverageStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PreviousMedicamentCompetitorId",
                table: "TreatmentCustomData",
                column: "PreviousMedicamentCompetitorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PreviousMedicamentId",
                table: "TreatmentCustomData",
                column: "PreviousMedicamentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ReasonForNotAcceptingSMSStringMapId",
                table: "TreatmentCustomData",
                column: "ReasonForNotAcceptingSMSStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RepresentativeId",
                table: "TreatmentCustomData",
                column: "RepresentativeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RiskRatingStringMapId",
                table: "TreatmentCustomData",
                column: "RiskRatingStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StageOfDiseaseStringMapId",
                table: "TreatmentCustomData",
                column: "StageOfDiseaseStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentCustomData",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StorageLocationStringMapId",
                table: "TreatmentCustomData",
                column: "StorageLocationStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SupplyMethodStringMapId",
                table: "TreatmentCustomData",
                column: "SupplyMethodStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentCyclesStringMapId",
                table: "TreatmentCustomData",
                column: "TreatmentCyclesStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentIntervalStringMapId",
                table: "TreatmentCustomData",
                column: "TreatmentIntervalStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentTypeStringMapId",
                table: "TreatmentCustomData",
                column: "TreatmentTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VisitRefusalReasonStringMapId",
                table: "TreatmentCustomData",
                column: "VisitRefusalReasonStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentCustomDataAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentCustomDataAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HistoryDoctorId",
                table: "TreatmentHistory",
                column: "HistoryDoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HistoryModalityStringMapId",
                table: "TreatmentHistory",
                column: "HistoryModalityStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HistoryPhaseStringMapId",
                table: "TreatmentHistory",
                column: "HistoryPhaseStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HistoryStatusDetailStringMapId",
                table: "TreatmentHistory",
                column: "HistoryStatusDetailStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HistoryStatusStringMapId",
                table: "TreatmentHistory",
                column: "HistoryStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_TreatmentHistory",
                table: "TreatmentHistory",
                column: "PhaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_NC_TreatmentHistory_0",
                table: "TreatmentHistory",
                columns: new[] { "PhaseId", "isDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_NC_TreatmentHistory_1",
                table: "TreatmentHistory",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_PhaseId",
                table: "TreatmentHistory",
                column: "PhaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentHistory",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "TreatmentHistory",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentSituationId",
                table: "TreatmentHistory",
                column: "TreatmentSituationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusDetailId",
                table: "TreatmentHistory",
                column: "TreatmentStatusDetailId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusId",
                table: "TreatmentHistory",
                column: "TreatmentStatusId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentHistoryAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentHistoryAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ExamId",
                table: "TreatmentPayment",
                column: "ExamId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "TreatmentPayment",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "TreatmentPayment",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_InfusionId",
                table: "TreatmentPayment",
                column: "InfusionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PatientId",
                table: "TreatmentPayment",
                column: "PatientId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentPayment",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "TreatmentPayment",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentPaymentStatusStringMapId",
                table: "TreatmentPayment",
                column: "TreatmentPaymentStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VisitId",
                table: "TreatmentPayment",
                column: "VisitId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentPaymentAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentPaymentAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "TreatmentSettings",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_PhaseId",
                table: "TreatmentSettings",
                column: "PhaseId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentSettings",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentSituationId",
                table: "TreatmentSettings",
                column: "TreatmentSituationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusDetailId",
                table: "TreatmentSettings",
                column: "TreatmentStatusDetailId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusId",
                table: "TreatmentSettings",
                column: "TreatmentStatusId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentSettingsAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentSettingsAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentSituation",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentSituationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentSituationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentStatus",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentStatusAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentStatusAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "TreatmentStatusDetail",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentStatusDetailAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentStatusDetailAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "TreatmentStatusDetailHealthProgram",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentStatusDetailId",
                table: "TreatmentStatusDetailHealthProgram",
                column: "TreatmentStatusDetailId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "TreatmentStatusDetailHealthProgramAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "TreatmentStatusDetailHealthProgramAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_Profile_Id",
                table: "User",
                column: "Profile_Id")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "User",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "UserAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "UserAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "UserSystemLog",
                column: "HealthProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_UserId",
                table: "UserSystemLog",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "UserSystemLogAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "UserSystemLogAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "ValidationResultAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "ValidationResultAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_MetadataId",
                table: "ViewsEntityMetadata",
                columns: new[] { "SourceEntityMetadataId", "SourceAttributeMetadataId", "ProgramId", "IsVisible" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_CampaignId",
                table: "Visit",
                column: "CampaignId");

            migrationBuilder.CreateIndex(
                name: "IX_Custom1StringMapId",
                table: "Visit",
                column: "Custom1StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_Custom2StringMapId",
                table: "Visit",
                column: "Custom2StringMapId");

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticId",
                table: "Visit",
                column: "DiagnosticId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "Visit",
                column: "DoctorId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProfessionalId",
                table: "Visit",
                column: "HealthProfessionalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Visit",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_LocalId",
                table: "Visit",
                column: "LocalId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "ix_nc_Visit",
                table: "Visit",
                column: "isDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_PreSchedulingStatusStringMapId",
                table: "Visit",
                column: "PreSchedulingStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ServiceTypeId",
                table: "Visit",
                column: "ServiceTypeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Visit",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusStringMapId",
                table: "Visit",
                column: "StatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentAddressId",
                table: "Visit",
                column: "TreatmentAddressId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Visit",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherId",
                table: "Visit",
                column: "VoucherId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "VisitAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "VisitAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "idx_voucher_healthprogramid",
                table: "Voucher",
                columns: new[] { "HealthProgramId", "isDeleted", "UseDate" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_AccountId",
                table: "Voucher",
                column: "AccountId");

            migrationBuilder.CreateIndex(
                name: "IX_DiagnosticId",
                table: "Voucher",
                column: "DiagnosticId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_DoctorId",
                table: "Voucher",
                column: "DoctorId");

            migrationBuilder.CreateIndex(
                name: "IX_ExamDefinitionId",
                table: "Voucher",
                column: "ExamDefinitionId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "Voucher",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_ManagerId",
                table: "Voucher",
                column: "ManagerId");

            migrationBuilder.CreateIndex(
                name: "IX_NC_VOUCHER",
                table: "Voucher",
                column: "HealthProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_NC_VOUCHER_2",
                table: "Voucher",
                column: "HealthProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_RepresentativeId",
                table: "Voucher",
                column: "RepresentativeId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_SourceStringMapId",
                table: "Voucher",
                column: "SourceStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "Voucher",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_TreatmentId",
                table: "Voucher",
                column: "TreatmentId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherConfigurationId",
                table: "Voucher",
                column: "VoucherConfigurationId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherStatusStringMapId",
                table: "Voucher",
                column: "VoucherStatusStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "VoucherAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "VoucherAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_HealthProgramId",
                table: "VoucherConfiguration",
                column: "HealthProgramId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_StatusCodeStringMapId",
                table: "VoucherConfiguration",
                column: "StatusCodeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_VoucherConfigTypeStringMapId",
                table: "VoucherConfiguration",
                column: "VoucherConfigTypeStringMapId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "VoucherConfigurationAudit",
                column: "RegardingObjectId")
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "VoucherConfigurationAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" })
                .Annotation("SqlServer:FillFactor", 90);

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectId",
                table: "zzmigAudit",
                column: "RegardingObjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RegardingObjectIdMessage",
                table: "zzmigAudit",
                columns: new[] { "Message", "RegardingObjectId", "UserId" });

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessHistoryAttendance_dbo.HealthProgram_HealthProgramId",
                table: "AccessHistoryAttendance",
                column: "HealthProgramId",
                principalTable: "HealthProgram",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessHistoryAttendance_dbo.MedicamentAccess_MedicamentAccessId",
                table: "AccessHistoryAttendance",
                column: "MedicamentAccessId",
                principalTable: "MedicamentAccess",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessHistoryAttendance_dbo.TreatmentSettings_TreatmentSettingsId",
                table: "AccessHistoryAttendance",
                column: "TreatmentSettingsId",
                principalTable: "TreatmentSettings",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessHistoryAttendance_dbo.Treatment_TreatmentId",
                table: "AccessHistoryAttendance",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessMannerByProgram_dbo.HealthProgram_HealthProgramId",
                table: "AccessMannerByProgram",
                column: "HealthProgramId",
                principalTable: "HealthProgram",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessOrderByProgram_dbo.HealthProgram_HealthProgramId",
                table: "AccessOrderByProgram",
                column: "HealthProgramId",
                principalTable: "HealthProgram",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessProcedureByProgram_dbo.HealthProgram_HealthProgramId",
                table: "AccessProcedureByProgram",
                column: "HealthProgramId",
                principalTable: "HealthProgram",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessProcedureByProgramAccount_dbo.Account_AccountId",
                table: "AccessProcedureByProgramAccount",
                column: "AccountId",
                principalTable: "Account",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AccessProfile_dbo.HealthProgram_HealthProgramId",
                table: "AccessProfile",
                column: "HealthProgramId",
                principalTable: "HealthProgram",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Account_dbo.Doctor_DoctorResponsableId",
                table: "Account",
                column: "DoctorResponsableId",
                principalTable: "Doctor",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AdhesionAttendance_dbo.Treatment_TreatmentId",
                table: "AdhesionAttendance",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AttemptCallLog_dbo.Diagnostic_DiagnosticId",
                table: "AttemptCallLog",
                column: "DiagnosticId",
                principalTable: "Diagnostic",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AttemptCallLog_dbo.TreatmentAndDiagnosticAction_TreatmentAndDiagnosticActionId",
                table: "AttemptCallLog",
                column: "TreatmentAndDiagnosticActionId",
                principalTable: "TreatmentAndDiagnosticAction",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.AttemptCallLog_dbo.Treatment_TreatmentId",
                table: "AttemptCallLog",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Benefit_dbo.Diagnostic_DiagnosticId",
                table: "Benefit",
                column: "DiagnosticId",
                principalTable: "Diagnostic",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Benefit_dbo.Treatment_TreatmentId",
                table: "Benefit",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Benefit_dbo.Voucher_VoucherId",
                table: "Benefit",
                column: "VoucherId",
                principalTable: "Voucher",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.CalendarScheduled_dbo.Visit_VisitId",
                table: "CalendarScheduled",
                column: "VisitId",
                principalTable: "Visit",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Diagnostic_dbo.Voucher_VoucherId",
                table: "Diagnostic",
                column: "VoucherId",
                principalTable: "Voucher",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.DiagnosticExam_dbo.Treatment_TreatmentId",
                table: "DiagnosticExam",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.DiagnosticExam_dbo.Voucher_VoucherId",
                table: "DiagnosticExam",
                column: "VoucherId",
                principalTable: "Voucher",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Exam_dbo.LogisticsScheduleItem_LogisticsScheduleItemId",
                table: "Exam",
                column: "LogisticsScheduleItemId",
                principalTable: "LogisticsScheduleItem",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Exam_dbo.LogisticsSchedule_LogisticsScheduleId",
                table: "Exam",
                column: "LogisticsScheduleId",
                principalTable: "LogisticsSchedule",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Exam_dbo.LogisticsSchedule_LogisticsSchedule_Id",
                table: "Exam",
                column: "LogisticsSchedule_Id",
                principalTable: "LogisticsSchedule",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Exam_dbo.LogisticsStuff_LogisticsStuffId",
                table: "Exam",
                column: "LogisticsStuffId",
                principalTable: "LogisticsStuff",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Exam_dbo.Treatment_TreatmentId",
                table: "Exam",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Exam_dbo.Voucher_VoucherId",
                table: "Exam",
                column: "VoucherId",
                principalTable: "Voucher",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Incident_dbo.Treatment_TreatmentId",
                table: "Incident",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.IncidentItem_dbo.LogisticsSchedule_LogisticsScheduleId",
                table: "IncidentItem",
                column: "LogisticsScheduleId",
                principalTable: "LogisticsSchedule",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.InformationCollect_dbo.Visit_VisitId",
                table: "InformationCollect",
                column: "VisitId",
                principalTable: "Visit",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.InformationVisit_dbo.Visit_VisitId",
                table: "InformationVisit",
                column: "VisitId",
                principalTable: "Visit",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Infusion_dbo.Logistics_LogisticsId",
                table: "Infusion",
                column: "LogisticsId",
                principalTable: "Logistics",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Infusion_dbo.Treatment_TreatmentId",
                table: "Infusion",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Infusion_dbo.Voucher_VoucherId",
                table: "Infusion",
                column: "VoucherId",
                principalTable: "Voucher",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Logistics_dbo.LogisticsStuff_LogisticsStuffId",
                table: "Logistics",
                column: "LogisticsStuffId",
                principalTable: "LogisticsStuff",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Logistics_dbo.Treatment_TreatmentId",
                table: "Logistics",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.LogisticsStuff_LogisticsStuffId",
                table: "LogisticsSchedule",
                column: "LogisticsStuffId",
                principalTable: "LogisticsStuff",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Voucher_VoucherId",
                table: "LogisticsSchedule",
                column: "VoucherId",
                principalTable: "Voucher",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.LogisticsScheduleItem_dbo.Voucher_VoucherId",
                table: "LogisticsScheduleItem",
                column: "VoucherId",
                principalTable: "Voucher",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.MedicamentAccess_dbo.Treatment_TreatmentId",
                table: "MedicamentAccess",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.MedicamentConcomitant_dbo.Treatment_TreatmentId",
                table: "MedicamentConcomitant",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Pharmacovigilance_dbo.Treatment_TreatmentId",
                table: "Pharmacovigilance",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Purchase_dbo.Treatment_TreatmentId",
                table: "Purchase",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.SchedulingHistory_dbo.Visit_VisitId",
                table: "SchedulingHistory",
                column: "VisitId",
                principalTable: "Visit",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.TherapeuticHistory_dbo.Treatment_TreatmentId",
                table: "TherapeuticHistory",
                column: "TreatmentId",
                principalTable: "Treatment",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_dbo.Treatment_dbo.TreatmentCustomData_TreatmentCustomDataId",
                table: "Treatment",
                column: "TreatmentCustomDataId",
                principalTable: "TreatmentCustomData",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.HealthProgram_HealthProgramId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Caregiver_dbo.HealthProgram_HealthProgramId",
                table: "Caregiver");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.HealthProgram_HealthProgramId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.HealthProgram_HealthProgramId",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.HealthProgram_HealthProgramId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.HealthProgram_HealthProgramId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.IncidentProduct_dbo.HealthProgram_HealthProgramId",
                table: "IncidentProduct");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.IncidentSubject_dbo.HealthProgram_HealthProgramId",
                table: "IncidentSubject");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.HealthProgram_HealthProgramId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsStuff_dbo.HealthProgram_HealthProgramId",
                table: "LogisticsStuff");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Patient_dbo.HealthProgram_HealthProgramId",
                table: "Patient");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.HealthProgram_HealthProgramId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.HealthProgram_HealthProgramId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.VoucherConfiguration_dbo.HealthProgram_HealthProgramId",
                table: "VoucherConfiguration");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccessManner_dbo.StringMap_StatusCodeStringMapId",
                table: "AccessManner");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccessWay_dbo.StringMap_StatusCodeStringMapId",
                table: "AccessWay");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Account_dbo.StringMap_AccessCoverageAreaStringMapId",
                table: "Account");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Account_dbo.StringMap_AccountTypeStringMapId",
                table: "Account");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Account_dbo.StringMap_ClinicPublicOrPrivateStringMapId",
                table: "Account");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Account_dbo.StringMap_ClinicTypeStringMapId",
                table: "Account");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Account_dbo.StringMap_StatusCodeStringMapId",
                table: "Account");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.StringMap_AccountStatusStringMapId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.StringMap_ExamTypeStringMapId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.StringMap_PatientTypeStringMapId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.StringMap_StatusCodeStringMapId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Bank_dbo.StringMap_StatusCodeStringMapId",
                table: "Bank");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Caregiver_dbo.StringMap_CivilStatusStringMapId",
                table: "Caregiver");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Caregiver_dbo.StringMap_EducationStringMapId",
                table: "Caregiver");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Caregiver_dbo.StringMap_GenderStringMapId",
                table: "Caregiver");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Caregiver_dbo.StringMap_KinshipStringMapId",
                table: "Caregiver");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Caregiver_dbo.StringMap_StatusCodeStringMapId",
                table: "Caregiver");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_AddressTypeStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_CategoryOfExamsStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_DiagnosticStatusDetailStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_DiagnosticStatusStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_EthnicityStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_FridayStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_GenderStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_KinshipStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_MainContactStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_MondayStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_PatientSourceStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_PreferredTimeStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_PrescriptionStatusStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_SaturdayStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_SourceConsentStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_StageOfDiseaseStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_StatusCodeStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_ThursdayStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_TreatmentLine2StringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_TreatmentLineStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_TuesdayStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_TypeOfAnalysisStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.StringMap_WednesdayStringMapId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Disease_dbo.StringMap_StatusCodeStringMapId",
                table: "Disease");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Doctor_dbo.StringMap_GenderStringMapId",
                table: "Doctor");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Doctor_dbo.StringMap_LicenseStatusStringMapId",
                table: "Doctor");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Doctor_dbo.StringMap_LicenseTypeStringMapId",
                table: "Doctor");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Doctor_dbo.StringMap_StatusCodeStringMapId",
                table: "Doctor");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizeSMSStringMapId",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizeVisitStringMapId",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizesTitrationofDosageStringMapId",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.StringMap_SourceConsentStringMapId",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.StringMap_StatusCodeStringMapId",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.StringMap_ExamStatusStringMapId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.StringMap_OwnershipLevelStringMapId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.StringMap_ReschedulingReasonStringMapId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.StringMap_ResultStringMapId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.StringMap_ScheduleSourceStringMapId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.StringMap_StatusCodeStringMapId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.StringMap_WithdrawalPreferenceStringMapId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.ExamDefinition_dbo.StringMap_ExamTypeStringMapId",
                table: "ExamDefinition");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.ExamDefinition_dbo.StringMap_StatusCodeStringMapId",
                table: "ExamDefinition");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.HealthProfessional_dbo.StringMap_BankAccountTypeStringMapId",
                table: "HealthProfessional");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.HealthProfessional_dbo.StringMap_GenderStringMapId",
                table: "HealthProfessional");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.HealthProfessional_dbo.StringMap_HiringTypeStringMapId",
                table: "HealthProfessional");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.HealthProfessional_dbo.StringMap_NurseProfessionalTypeStringMapId",
                table: "HealthProfessional");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.HealthProfessional_dbo.StringMap_ProfessionalLicenseTypeStringMapId",
                table: "HealthProfessional");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.HealthProfessional_dbo.StringMap_StatusCodeStringMapId",
                table: "HealthProfessional");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_AccountTypeStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_ContactTypeStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_Custom1StringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_Custom2StringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_CustomerTypeStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_OriginStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_PrescriptionStatusStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_RequestStatusStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_StatusCodeStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_StatusStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.StringMap_TreatmentLineStringMapId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.IncidentProduct_dbo.StringMap_StatusCodeStringMapId",
                table: "IncidentProduct");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.IncidentSubject_dbo.StringMap_StatusCodeStringMapId",
                table: "IncidentSubject");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.IncidentType_dbo.StringMap_StatusCodeStringMapId",
                table: "IncidentType");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.IncidentTypeDetail_dbo.StringMap_StatusCodeStringMapId",
                table: "IncidentTypeDetail");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_ChosenExamTypeStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_IntegrationStatusStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_KitTypeStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_LocalDeliveryWithdrawStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_LocalTypeStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_LogisticsScheduleTypeStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_PreferredTimeStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_ScheduleStatusStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_StatusCodeStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.StringMap_StorageTubeTypeStringMapId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsScheduleItem_dbo.StringMap_StatusCodeStringMapId",
                table: "LogisticsScheduleItem");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsStuff_dbo.StringMap_LogisticsStuffTypeStringMapId",
                table: "LogisticsStuff");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsStuff_dbo.StringMap_StatusCodeStringMapId",
                table: "LogisticsStuff");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsStuff_dbo.StringMap_StuffStatusStringMapId",
                table: "LogisticsStuff");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.MedicalSpecialty_dbo.StringMap_StatusCodeStringMapId",
                table: "MedicalSpecialty");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Medicament_dbo.StringMap_StatusCodeStringMapId",
                table: "Medicament");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.MedicamentCompetitor_dbo.StringMap_StatusCodeStringMapId",
                table: "MedicamentCompetitor");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Occupation_dbo.StringMap_StatusCodeStringMapId",
                table: "Occupation");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Patient_dbo.StringMap_CivilStatusStringMapId",
                table: "Patient");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Patient_dbo.StringMap_EducationStringMapId",
                table: "Patient");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Patient_dbo.StringMap_GenderStringMapId",
                table: "Patient");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Patient_dbo.StringMap_PatientTypeStringMapId",
                table: "Patient");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Patient_dbo.StringMap_StatusCodeStringMapId",
                table: "Patient");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Phase_dbo.StringMap_StatusCodeStringMapId",
                table: "Phase");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Posologe_dbo.StringMap_StatusCodeStringMapId",
                table: "Posologe");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.RegardingEntity_dbo.StringMap_StatusCodeStringMapId",
                table: "RegardingEntity");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Representative_dbo.StringMap_StatusCodeStringMapId",
                table: "Representative");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.StrengthMedicament_dbo.StringMap_StatusCodeStringMapId",
                table: "StrengthMedicament");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TherapeuticType_dbo.StringMap_StatusCodeStringMapId",
                table: "TherapeuticType");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_AccessTypeStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_CivilStatusStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_ContractTypeStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_Custom1StringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_Custom2StringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_DosageUnitStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_EducationStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_GenderStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_KinshipStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_MainContactStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_ModalityStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_PatientSourceStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_PhaseStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_PreferredTimeStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_PrescriptionStatusStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_ReasonInactivationStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_SourceConsentStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_StageOfDiseaseStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_StatusCodeStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_TreatmentStatusDetailStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_TreatmentStatusStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Treatment_dbo.StringMap_VisitRefusalReasonStringMapId",
                table: "Treatment");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_AccessDetailStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_ApplicatorTypeStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_ContractHasCoparticipationStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_ContractTypeStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_Custom1StringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_Custom2StringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_DoctorAuthorizesDosageTitrationStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_FormofAccessStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_HemophiliaDegreeStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_IFXITStatusStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_IFXOTStatusStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_InfusionTypeStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_IsWorkingStringMap_StringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_JANSSENITStatusStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_JANSSENOTStatusStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_MedicalIndicationStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_MedicalInstructionAccessWayStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_OptimizationTypeStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_PatientTypeStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_PlanCoverageStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_ReasonForNotAcceptingSMSStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_RiskRatingStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_StageOfDiseaseStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_StatusCodeStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_StorageLocationStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_SupplyMethodStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentCyclesStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentIntervalStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentTypeStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentCustomData_dbo.StringMap_VisitRefusalReasonStringMapId",
                table: "TreatmentCustomData");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentSituation_dbo.StringMap_StatusCodeStringMapId",
                table: "TreatmentSituation");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentStatus_dbo.StringMap_StatusCodeStringMapId",
                table: "TreatmentStatus");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.TreatmentStatusDetail_dbo.StringMap_StatusCodeStringMapId",
                table: "TreatmentStatusDetail");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.User_dbo.StringMap_StatusCodeStringMapId",
                table: "User");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.StringMap_SourceStringMapId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.StringMap_StatusCodeStringMapId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.StringMap_VoucherStatusStringMapId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.VoucherConfiguration_dbo.StringMap_StatusCodeStringMapId",
                table: "VoucherConfiguration");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.VoucherConfiguration_dbo.StringMap_VoucherConfigTypeStringMapId",
                table: "VoucherConfiguration");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.Treatment_TreatmentId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.Treatment_TreatmentId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.Treatment_TreatmentId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.Disease_DiseaseId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.Disease_DiseaseId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.Disease_DiseaseId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Disease_DiseaseId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.Medicament_MedicamentId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsStuff_dbo.Medicament_MedicamentId",
                table: "LogisticsStuff");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Account_dbo.AccessManner_AccessMannerId",
                table: "Account");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Account_dbo.AccessWay_AccessWayId",
                table: "Account");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.Account_AccountId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.Account_AccountId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.Account_HealthCareProviderId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Doctor_dbo.Account_ClinicId",
                table: "Doctor");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.Account_LocalId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.Account_AccountId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.Account_DistributorLogisticId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Account_ClientId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Account_DeliveryLaboratoryId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Account_LocalId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Account_LogisticsPartnerId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsStuff_dbo.Account_ManufacturerId",
                table: "LogisticsStuff");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Representative_dbo.Account_AccountId",
                table: "Representative");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.Account_AccountId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.AccountSettingsByProgram_dbo.User_SystemUserId",
                table: "AccountSettingsByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.User_UserId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.User_ConsultantId",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.User_SystemUserId",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.HealthProfessional_dbo.User_UserId",
                table: "HealthProfessional");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.User_ConsultantId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Patient_dbo.User_SystemUserId",
                table: "Patient");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Representative_dbo.User_UserId",
                table: "Representative");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.Doctor_DoctorId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.Doctor_DoctorPrescriberId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.DoctorByProgram_dbo.Doctor_Doctor_Id",
                table: "DoctorByProgram");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.Doctor_DoctorId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.Doctor_DoctorId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Doctor_RequestDoctorId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.Doctor_DoctorId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.HealthProfessional_HealthProfessionalId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.HealthProfessional_HealthProfessionalId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.HealthProfessional_HealthProfessionalId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.RegardingEntity_RegardingEntityId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.AccountSettingsByProgram_AccountSettingsByProgramId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.AccountSettingsByProgram_AccountSettingsByProgramId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.ExamDefinition_ExamDefinitionId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.ExamDefinition_ExamDefinitionId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.ExamDefinition_ExamDefinitionId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.ExamDefinition_ExamDefinitionId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.MedicamentCompetitor_MedicamentCompetitorId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Diagnostic_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId",
                table: "Diagnostic");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.Diagnostic_DiagnosticId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Diagnostic_DiagnosticId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Voucher_dbo.Diagnostic_DiagnosticId",
                table: "Voucher");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.Voucher_VoucherId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsSchedule_dbo.Voucher_VoucherId",
                table: "LogisticsSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsScheduleItem_dbo.Voucher_VoucherId",
                table: "LogisticsScheduleItem");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Patient_dbo.Occupation_OccupationId",
                table: "Patient");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.Patient_PatientId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.MedicalSpecialty_MedicalSpecialtyId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Incident_dbo.Representative_RepresentativeId",
                table: "Incident");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.LogisticsScheduleItem_LogisticsScheduleItemId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.LogisticsSchedule_LogisticsScheduleId",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.Exam_dbo.LogisticsSchedule_LogisticsSchedule_Id",
                table: "Exam");

            migrationBuilder.DropForeignKey(
                name: "FK_dbo.LogisticsStuff_dbo.LogisticsSchedule_LogisticsSchedule_Id",
                table: "LogisticsStuff");

            migrationBuilder.DropTable(
                name: "__MigrationHistory");

            migrationBuilder.DropTable(
                name: "AccessHistoryAttendance");

            migrationBuilder.DropTable(
                name: "AccessHistoryAttendanceAudit");

            migrationBuilder.DropTable(
                name: "AccessMannerAudit");

            migrationBuilder.DropTable(
                name: "AccessMannerByProgramAudit");

            migrationBuilder.DropTable(
                name: "AccessOrderByProgram");

            migrationBuilder.DropTable(
                name: "AccessOrderByProgramAudit");

            migrationBuilder.DropTable(
                name: "AccessProcedureByProgramAccount");

            migrationBuilder.DropTable(
                name: "AccessProcedureByProgramAccountAudit");

            migrationBuilder.DropTable(
                name: "AccessProcedureByProgramAudit");

            migrationBuilder.DropTable(
                name: "AccessProfileAudit");

            migrationBuilder.DropTable(
                name: "AccessProfileUser");

            migrationBuilder.DropTable(
                name: "AccessProfileUserAudit");

            migrationBuilder.DropTable(
                name: "AccessRightEntity");

            migrationBuilder.DropTable(
                name: "AccessRightEntityAudit");

            migrationBuilder.DropTable(
                name: "AccessWayAudit");

            migrationBuilder.DropTable(
                name: "Account_BKP_19_04");

            migrationBuilder.DropTable(
                name: "Account_BKP_19_04Audit");

            migrationBuilder.DropTable(
                name: "AccountAudit");

            migrationBuilder.DropTable(
                name: "AccountCoverageArea");

            migrationBuilder.DropTable(
                name: "AccountCoverageAreaAudit");

            migrationBuilder.DropTable(
                name: "AccountExamTypeByProgramAudit");

            migrationBuilder.DropTable(
                name: "AccountInternalDemand");

            migrationBuilder.DropTable(
                name: "AccountInternalDemandAudit");

            migrationBuilder.DropTable(
                name: "AccountSettingsByProgram_BKP_19_04_22");

            migrationBuilder.DropTable(
                name: "AccountSettingsByProgram_BKP_19_04_22Audit");

            migrationBuilder.DropTable(
                name: "AccountSettingsByProgramAudit");

            migrationBuilder.DropTable(
                name: "ActionCategoryAudit");

            migrationBuilder.DropTable(
                name: "ActionConfigurationAudit");

            migrationBuilder.DropTable(
                name: "ActionRuleAudit");

            migrationBuilder.DropTable(
                name: "AdhesionAttendance");

            migrationBuilder.DropTable(
                name: "AdhesionAttendanceAudit");

            migrationBuilder.DropTable(
                name: "AkkaActorsAudit");

            migrationBuilder.DropTable(
                name: "AkkaMessages");

            migrationBuilder.DropTable(
                name: "AkkaMessagesAudit");

            migrationBuilder.DropTable(
                name: "AkkaPublishEvents");

            migrationBuilder.DropTable(
                name: "AkkaPublishEventsAudit");

            migrationBuilder.DropTable(
                name: "AkkaSubscribeEvents");

            migrationBuilder.DropTable(
                name: "AkkaSubscribeEventsAudit");

            migrationBuilder.DropTable(
                name: "AnnotationAudit");

            migrationBuilder.DropTable(
                name: "AspNetRolesAudit");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaimsAudit");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserLoginsAudit");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserRolesAudit");

            migrationBuilder.DropTable(
                name: "AspNetUsersAudit");

            migrationBuilder.DropTable(
                name: "Attachment");

            migrationBuilder.DropTable(
                name: "AttachmentAudit");

            migrationBuilder.DropTable(
                name: "AttemptCallLog");

            migrationBuilder.DropTable(
                name: "AttemptCallLogAudit");

            migrationBuilder.DropTable(
                name: "BankAudit");

            migrationBuilder.DropTable(
                name: "BASE_TREATMENT");

            migrationBuilder.DropTable(
                name: "BASE_TREATMENTAudit");

            migrationBuilder.DropTable(
                name: "BaseDoctorRepresentative");

            migrationBuilder.DropTable(
                name: "BaseDoctorRepresentativeAudit");

            migrationBuilder.DropTable(
                name: "BEMESTAR_VOUCHER_PENDENTE_LAUDO");

            migrationBuilder.DropTable(
                name: "BEMESTAR_VOUCHER_PENDENTE_LAUDOAudit");

            migrationBuilder.DropTable(
                name: "Benefit");

            migrationBuilder.DropTable(
                name: "BenefitAudit");

            migrationBuilder.DropTable(
                name: "BKP_ENTRENOS_REATIVADO_20200624");

            migrationBuilder.DropTable(
                name: "BKP_ENTRENOS_REATIVADO_20200624Audit");

            migrationBuilder.DropTable(
                name: "CadastrosTakeda");

            migrationBuilder.DropTable(
                name: "CadastrosTakedaAudit");

            migrationBuilder.DropTable(
                name: "CalendarScheduled");

            migrationBuilder.DropTable(
                name: "CalendarScheduledAudit");

            migrationBuilder.DropTable(
                name: "CampaignAudit");

            migrationBuilder.DropTable(
                name: "CampaignHealthProfessional");

            migrationBuilder.DropTable(
                name: "CampaignHealthProfessionalAudit");

            migrationBuilder.DropTable(
                name: "CaregiverAudit");

            migrationBuilder.DropTable(
                name: "CargaMedicoConsultor");

            migrationBuilder.DropTable(
                name: "CargaMedicoConsultorAudit");

            migrationBuilder.DropTable(
                name: "ChatAudit");

            migrationBuilder.DropTable(
                name: "ChatDialogs");

            migrationBuilder.DropTable(
                name: "ChatDialogsAudit");

            migrationBuilder.DropTable(
                name: "Clinicas_Import");

            migrationBuilder.DropTable(
                name: "Clinicas_Import2");

            migrationBuilder.DropTable(
                name: "Clinicas_Import2Audit");

            migrationBuilder.DropTable(
                name: "Clinicas_ImportAudit");

            migrationBuilder.DropTable(
                name: "Clinicas_Infusao_Import");

            migrationBuilder.DropTable(
                name: "Clinicas_Infusao_ImportAudit");

            migrationBuilder.DropTable(
                name: "Communication");

            migrationBuilder.DropTable(
                name: "CommunicationAudit");

            migrationBuilder.DropTable(
                name: "CommunicationTypeByProgramAudit");

            migrationBuilder.DropTable(
                name: "CommunicationTypeByProgramHealthProgram");

            migrationBuilder.DropTable(
                name: "CommunicationTypeByProgramHealthProgramAudit");

            migrationBuilder.DropTable(
                name: "Configuration");

            migrationBuilder.DropTable(
                name: "ConfigurationAudit");

            migrationBuilder.DropTable(
                name: "Contact");

            migrationBuilder.DropTable(
                name: "ContactAudit");

            migrationBuilder.DropTable(
                name: "CoverageAreaAudit");

            migrationBuilder.DropTable(
                name: "CustomerAddressAudit");

            migrationBuilder.DropTable(
                name: "DASHBOARD_ASTELLAS");

            migrationBuilder.DropTable(
                name: "DASHBOARD_ASTELLASAudit");

            migrationBuilder.DropTable(
                name: "DiagnosticAudit");

            migrationBuilder.DropTable(
                name: "DiagnosticExam");

            migrationBuilder.DropTable(
                name: "DiagnosticExamAudit");

            migrationBuilder.DropTable(
                name: "DiseaseAudit");

            migrationBuilder.DropTable(
                name: "DoctorAudit");

            migrationBuilder.DropTable(
                name: "DoctorByProgram_bkp_05_11_2021");

            migrationBuilder.DropTable(
                name: "DoctorByProgram_bkp_05_11_2021Audit");

            migrationBuilder.DropTable(
                name: "DoctorByProgram_bkp02122021");

            migrationBuilder.DropTable(
                name: "DoctorByProgram_bkp02122021Audit");

            migrationBuilder.DropTable(
                name: "DoctorByProgram_Bkp231121");

            migrationBuilder.DropTable(
                name: "DoctorByProgram_Bkp231121Audit");

            migrationBuilder.DropTable(
                name: "DoctorByProgramAccount");

            migrationBuilder.DropTable(
                name: "DoctorByProgramAccountAudit");

            migrationBuilder.DropTable(
                name: "DoctorByProgramAudit");

            migrationBuilder.DropTable(
                name: "DoctorMedicalSpecialty");

            migrationBuilder.DropTable(
                name: "DoctorMedicalSpecialtyAudit");

            migrationBuilder.DropTable(
                name: "DoctorsRepresentative");

            migrationBuilder.DropTable(
                name: "DoctorsRepresentativeAudit");

            migrationBuilder.DropTable(
                name: "ELMAH_Error");

            migrationBuilder.DropTable(
                name: "ELMAH_ErrorAudit");

            migrationBuilder.DropTable(
                name: "Email");

            migrationBuilder.DropTable(
                name: "EmailAudit");

            migrationBuilder.DropTable(
                name: "EmailBoxSettingAudit");

            migrationBuilder.DropTable(
                name: "EntityConfigurationAudit");

            migrationBuilder.DropTable(
                name: "Especialidade");

            migrationBuilder.DropTable(
                name: "EspecialidadeAudit");

            migrationBuilder.DropTable(
                name: "Exam_BKP_19_04_22");

            migrationBuilder.DropTable(
                name: "Exam_BKP_19_04_22Audit");

            migrationBuilder.DropTable(
                name: "exam_BKP_updt_nivel_serico");

            migrationBuilder.DropTable(
                name: "exam_BKP_updt_nivel_sericoAudit");

            migrationBuilder.DropTable(
                name: "Exam_BKP3011");

            migrationBuilder.DropTable(
                name: "Exam_BKP3011Audit");

            migrationBuilder.DropTable(
                name: "ExamAudit");

            migrationBuilder.DropTable(
                name: "ExamDefinitionAccountExamTypeByProgram");

            migrationBuilder.DropTable(
                name: "ExamDefinitionAccountExamTypeByProgramAudit");

            migrationBuilder.DropTable(
                name: "ExamDefinitionAudit");

            migrationBuilder.DropTable(
                name: "ExamDefinitionExam");

            migrationBuilder.DropTable(
                name: "ExamDefinitionExamAudit");

            migrationBuilder.DropTable(
                name: "ExamDefinitionHealthProgram");

            migrationBuilder.DropTable(
                name: "ExamDefinitionHealthProgramAudit");

            migrationBuilder.DropTable(
                name: "ExamDefinitionSettingsByProgram");

            migrationBuilder.DropTable(
                name: "ExamDefinitionSettingsByProgramAudit");

            migrationBuilder.DropTable(
                name: "ExamDefinitionVoucherConfiguration");

            migrationBuilder.DropTable(
                name: "ExamDefinitionVoucherConfigurationAudit");

            migrationBuilder.DropTable(
                name: "ExamStatusHistory");

            migrationBuilder.DropTable(
                name: "ExamStatusHistoryAudit");

            migrationBuilder.DropTable(
                name: "Feriado");

            migrationBuilder.DropTable(
                name: "FeriadoAudit");

            migrationBuilder.DropTable(
                name: "HealthProfessionalAccount");

            migrationBuilder.DropTable(
                name: "HealthProfessionalAccountAudit");

            migrationBuilder.DropTable(
                name: "HealthProfessionalAudit");

            migrationBuilder.DropTable(
                name: "HealthProfessionalByProgram");

            migrationBuilder.DropTable(
                name: "HealthProfessionalByProgramAudit");

            migrationBuilder.DropTable(
                name: "HealthProfessionalHealthProgram");

            migrationBuilder.DropTable(
                name: "HealthProfessionalHealthProgramAudit");

            migrationBuilder.DropTable(
                name: "HealthProfessionalMedicalSpecialty");

            migrationBuilder.DropTable(
                name: "HealthProfessionalMedicalSpecialtyAudit");

            migrationBuilder.DropTable(
                name: "HealthProgramAccount");

            migrationBuilder.DropTable(
                name: "HealthProgramAccount_BKP_19_04_22");

            migrationBuilder.DropTable(
                name: "HealthProgramAccount_BKP_19_04_22Audit");

            migrationBuilder.DropTable(
                name: "HealthProgramAccountAudit");

            migrationBuilder.DropTable(
                name: "HealthProgramAudit");

            migrationBuilder.DropTable(
                name: "HealthProgramDiseaseAudit");

            migrationBuilder.DropTable(
                name: "HealthProgramDiseaseExam");

            migrationBuilder.DropTable(
                name: "HealthProgramDiseaseExamAudit");

            migrationBuilder.DropTable(
                name: "HealthProgramExamByEntity");

            migrationBuilder.DropTable(
                name: "HealthProgramExamByEntityAudit");

            migrationBuilder.DropTable(
                name: "HealthProgramMedicament");

            migrationBuilder.DropTable(
                name: "HealthProgramMedicamentAudit");

            migrationBuilder.DropTable(
                name: "HealthProgramServiceType");

            migrationBuilder.DropTable(
                name: "HealthProgramServiceTypeAudit");

            migrationBuilder.DropTable(
                name: "HealthProgramTemplateSetting");

            migrationBuilder.DropTable(
                name: "HealthProgramTemplateSettingAudit");

            migrationBuilder.DropTable(
                name: "IdentityCode");

            migrationBuilder.DropTable(
                name: "IdentityCodeAudit");

            migrationBuilder.DropTable(
                name: "IncidentAudit");

            migrationBuilder.DropTable(
                name: "IncidentItem");

            migrationBuilder.DropTable(
                name: "IncidentItemAudit");

            migrationBuilder.DropTable(
                name: "IncidentProductAudit");

            migrationBuilder.DropTable(
                name: "IncidentSubjectAudit");

            migrationBuilder.DropTable(
                name: "IncidentTypeAudit");

            migrationBuilder.DropTable(
                name: "IncidentTypeDetailAudit");

            migrationBuilder.DropTable(
                name: "IncidentTypeDetailProgram");

            migrationBuilder.DropTable(
                name: "IncidentTypeDetailProgramAudit");

            migrationBuilder.DropTable(
                name: "IndexViewsEntityMetadata");

            migrationBuilder.DropTable(
                name: "InformationCollect");

            migrationBuilder.DropTable(
                name: "InformationCollectAudit");

            migrationBuilder.DropTable(
                name: "InformationVisit");

            migrationBuilder.DropTable(
                name: "InformationVisitAudit");

            migrationBuilder.DropTable(
                name: "Infusion_BKP_19_04_22");

            migrationBuilder.DropTable(
                name: "Infusion_BKP_19_04_22Audit");

            migrationBuilder.DropTable(
                name: "InfusionAudit");

            migrationBuilder.DropTable(
                name: "infusoes");

            migrationBuilder.DropTable(
                name: "infusoesAudit");

            migrationBuilder.DropTable(
                name: "IntegrationLog");

            migrationBuilder.DropTable(
                name: "IntegrationLogAudit");

            migrationBuilder.DropTable(
                name: "JsRulesByEntity");

            migrationBuilder.DropTable(
                name: "JsRulesByEntity_BKP_20201015");

            migrationBuilder.DropTable(
                name: "JsRulesByEntity_BKP_20201015Audit");

            migrationBuilder.DropTable(
                name: "JsRulesByEntityAudit");

            migrationBuilder.DropTable(
                name: "LanguageAttribute");

            migrationBuilder.DropTable(
                name: "LanguageAttributeAudit");

            migrationBuilder.DropTable(
                name: "LanguageDefault");

            migrationBuilder.DropTable(
                name: "LanguageDefaultAudit");

            migrationBuilder.DropTable(
                name: "LanguageEntities");

            migrationBuilder.DropTable(
                name: "LanguageEntitiesAudit");

            migrationBuilder.DropTable(
                name: "LanguageMenuMetadata");

            migrationBuilder.DropTable(
                name: "LanguageSectionMetadata");

            migrationBuilder.DropTable(
                name: "ListaDeTabelas");

            migrationBuilder.DropTable(
                name: "ListaDeTabelasAudit");

            migrationBuilder.DropTable(
                name: "log_atualizacao_nono_digito");

            migrationBuilder.DropTable(
                name: "log_atualizacao_nono_digitoAudit");

            migrationBuilder.DropTable(
                name: "LogisticsAudit");

            migrationBuilder.DropTable(
                name: "LogisticsSchedule_BKP_01072022");

            migrationBuilder.DropTable(
                name: "LogisticsSchedule_BKP_01072022_1106");

            migrationBuilder.DropTable(
                name: "LogisticsSchedule_BKP_01072022_1106Audit");

            migrationBuilder.DropTable(
                name: "LogisticsSchedule_BKP_01072022Audit");

            migrationBuilder.DropTable(
                name: "LogisticsScheduleAudit");

            migrationBuilder.DropTable(
                name: "LogisticsScheduleItemAudit");

            migrationBuilder.DropTable(
                name: "LogisticsStuffAudit");

            migrationBuilder.DropTable(
                name: "LogisticsStuffKits");

            migrationBuilder.DropTable(
                name: "LogisticsStuffKitsAudit");

            migrationBuilder.DropTable(
                name: "MedicalSpecialtyAudit");

            migrationBuilder.DropTable(
                name: "MedicamentAccessAudit");

            migrationBuilder.DropTable(
                name: "MedicamentAudit");

            migrationBuilder.DropTable(
                name: "MedicamentCompetitorAudit");

            migrationBuilder.DropTable(
                name: "MedicamentCompetitorDisease");

            migrationBuilder.DropTable(
                name: "MedicamentCompetitorDiseaseAudit");

            migrationBuilder.DropTable(
                name: "MedicamentCompetitorHealthProgram");

            migrationBuilder.DropTable(
                name: "MedicamentCompetitorHealthProgramAudit");

            migrationBuilder.DropTable(
                name: "MedicamentConcomitant");

            migrationBuilder.DropTable(
                name: "MedicamentConcomitantAudit");

            migrationBuilder.DropTable(
                name: "MedicamentDisease");

            migrationBuilder.DropTable(
                name: "MedicamentDiseaseAudit");

            migrationBuilder.DropTable(
                name: "MedicamentStrengthMedicament");

            migrationBuilder.DropTable(
                name: "MedicamentStrengthMedicamentAudit");

            migrationBuilder.DropTable(
                name: "MedicationNonadherenceReasonAudit");

            migrationBuilder.DropTable(
                name: "MedicationNonadherenceReasonHealthProgram");

            migrationBuilder.DropTable(
                name: "MedicationNonadherenceReasonHealthProgramAudit");

            migrationBuilder.DropTable(
                name: "MenuMetadataEntityMetadata");

            migrationBuilder.DropTable(
                name: "OccupationAudit");

            migrationBuilder.DropTable(
                name: "Pacientes");

            migrationBuilder.DropTable(
                name: "PacientesAudit");

            migrationBuilder.DropTable(
                name: "PacientesPesquisa");

            migrationBuilder.DropTable(
                name: "PacientesPesquisaAudit");

            migrationBuilder.DropTable(
                name: "Painel MedicoMelanoma");

            migrationBuilder.DropTable(
                name: "Painel MedicoMelanomaAudit");

            migrationBuilder.DropTable(
                name: "Painel MedicoTASIGNA");

            migrationBuilder.DropTable(
                name: "Painel MedicoTASIGNAAudit");

            migrationBuilder.DropTable(
                name: "PainelMedicoEntyvio$");

            migrationBuilder.DropTable(
                name: "PainelMedicoEntyvio$Audit");

            migrationBuilder.DropTable(
                name: "PatientAudit");

            migrationBuilder.DropTable(
                name: "PatientSalesOrderAudit");

            migrationBuilder.DropTable(
                name: "Pharmacovigilance");

            migrationBuilder.DropTable(
                name: "PharmacovigilanceAudit");

            migrationBuilder.DropTable(
                name: "PhaseAudit");

            migrationBuilder.DropTable(
                name: "PhaseRulesMetadata");

            migrationBuilder.DropTable(
                name: "PhoneCallAudit");

            migrationBuilder.DropTable(
                name: "PosologeAudit");

            migrationBuilder.DropTable(
                name: "PosologeMedicament");

            migrationBuilder.DropTable(
                name: "PosologeMedicamentAudit");

            migrationBuilder.DropTable(
                name: "PostalCodeCityAudit");

            migrationBuilder.DropTable(
                name: "PostalCodesAudit");

            migrationBuilder.DropTable(
                name: "PostalCodeStateAudit");

            migrationBuilder.DropTable(
                name: "ProcessLogAudit");

            migrationBuilder.DropTable(
                name: "profarmaacesso");

            migrationBuilder.DropTable(
                name: "profarmaacessoAudit");

            migrationBuilder.DropTable(
                name: "ProfileAudit");

            migrationBuilder.DropTable(
                name: "Purchase");

            migrationBuilder.DropTable(
                name: "PurchaseAudit");

            migrationBuilder.DropTable(
                name: "Question");

            migrationBuilder.DropTable(
                name: "QuestionAudit");

            migrationBuilder.DropTable(
                name: "QuestionOptions");

            migrationBuilder.DropTable(
                name: "QuestionOptionsAudit");

            migrationBuilder.DropTable(
                name: "RegardingEntityAudit");

            migrationBuilder.DropTable(
                name: "RegionalManager");

            migrationBuilder.DropTable(
                name: "RegionalManagerAudit");

            migrationBuilder.DropTable(
                name: "relatorio_pacientes_ativos_em_frente");

            migrationBuilder.DropTable(
                name: "relatorio_pacientes_ativos_em_frente_Total_infusoes");

            migrationBuilder.DropTable(
                name: "relatorio_pacientes_ativos_em_frente_Total_infusoesAudit");

            migrationBuilder.DropTable(
                name: "relatorio_pacientes_ativos_em_frente_Total_Visitas");

            migrationBuilder.DropTable(
                name: "relatorio_pacientes_ativos_em_frente_Total_VisitasAudit");

            migrationBuilder.DropTable(
                name: "relatorio_pacientes_ativos_em_frenteAudit");

            migrationBuilder.DropTable(
                name: "Representative_bkp15072021");

            migrationBuilder.DropTable(
                name: "Representative_bkp15072021Audit");

            migrationBuilder.DropTable(
                name: "RepresentativeAccount");

            migrationBuilder.DropTable(
                name: "RepresentativeAccountAudit");

            migrationBuilder.DropTable(
                name: "RepresentativeAudit");

            migrationBuilder.DropTable(
                name: "RepresentativeRegion");

            migrationBuilder.DropTable(
                name: "RepresentativeRegionAudit");

            migrationBuilder.DropTable(
                name: "ResourceWorkSettings");

            migrationBuilder.DropTable(
                name: "ResourceWorkSettingsAudit");

            migrationBuilder.DropTable(
                name: "RulesAttributeMetadata_bkp_30092021");

            migrationBuilder.DropTable(
                name: "RulesAttributeMetadata_bkp_30092021Audit");

            migrationBuilder.DropTable(
                name: "SchedulingDates");

            migrationBuilder.DropTable(
                name: "SchedulingDatesAudit");

            migrationBuilder.DropTable(
                name: "SchedulingHistory");

            migrationBuilder.DropTable(
                name: "SchedulingHistoryAudit");

            migrationBuilder.DropTable(
                name: "SectionExcludedByPhase");

            migrationBuilder.DropTable(
                name: "SectionExcludedByPhaseAudit");

            migrationBuilder.DropTable(
                name: "SectionMetadata_bkp_24092021");

            migrationBuilder.DropTable(
                name: "SectionMetadata_bkp_24092021Audit");

            migrationBuilder.DropTable(
                name: "ServiceTypeAudit");

            migrationBuilder.DropTable(
                name: "SMS");

            migrationBuilder.DropTable(
                name: "SMSAudit");

            migrationBuilder.DropTable(
                name: "StepLogs");

            migrationBuilder.DropTable(
                name: "StepLogsAudit");

            migrationBuilder.DropTable(
                name: "StrengthMedicamentAudit");

            migrationBuilder.DropTable(
                name: "StringMapAudit");

            migrationBuilder.DropTable(
                name: "Subject");

            migrationBuilder.DropTable(
                name: "SubjectAudit");

            migrationBuilder.DropTable(
                name: "Survey");

            migrationBuilder.DropTable(
                name: "SurveyAudit");

            migrationBuilder.DropTable(
                name: "SurveyQuestionList");

            migrationBuilder.DropTable(
                name: "SurveyQuestionListAudit");

            migrationBuilder.DropTable(
                name: "SurveyResponse");

            migrationBuilder.DropTable(
                name: "SurveyResponseAudit");

            migrationBuilder.DropTable(
                name: "SurveyResponseLine");

            migrationBuilder.DropTable(
                name: "SurveyResponseLineAudit");

            migrationBuilder.DropTable(
                name: "T_LOG_COLLATE");

            migrationBuilder.DropTable(
                name: "T_LOG_COLLATEAudit");

            migrationBuilder.DropTable(
                name: "Task");

            migrationBuilder.DropTable(
                name: "TaskAudit");

            migrationBuilder.DropTable(
                name: "TB_RELATORIO_JANSSEN_SUSTENNA");

            migrationBuilder.DropTable(
                name: "TB_RELATORIO_JANSSEN_SUSTENNAAudit");

            migrationBuilder.DropTable(
                name: "tbl_AcompanhamentoInfusao_Shire");

            migrationBuilder.DropTable(
                name: "tbl_AcompanhamentoInfusao_ShireAudit");

            migrationBuilder.DropTable(
                name: "TBL_CARE");

            migrationBuilder.DropTable(
                name: "TBL_CAREAudit");

            migrationBuilder.DropTable(
                name: "TBL_CLINICAS");

            migrationBuilder.DropTable(
                name: "TBL_CLINICASAudit");

            migrationBuilder.DropTable(
                name: "tbl_correcao_infusoes");

            migrationBuilder.DropTable(
                name: "tbl_correcao_infusoesAudit");

            migrationBuilder.DropTable(
                name: "TBL_DDDS_NONO_DIGITO");

            migrationBuilder.DropTable(
                name: "TBL_DDDS_NONO_DIGITOAudit");

            migrationBuilder.DropTable(
                name: "tbl_deletar_infusao");

            migrationBuilder.DropTable(
                name: "tbl_deletar_infusaoAudit");

            migrationBuilder.DropTable(
                name: "tbl_feriados_nacionais");

            migrationBuilder.DropTable(
                name: "tbl_feriados_nacionaisAudit");

            migrationBuilder.DropTable(
                name: "tbl_final");

            migrationBuilder.DropTable(
                name: "tbl_finalAudit");

            migrationBuilder.DropTable(
                name: "tbl_infusoes");

            migrationBuilder.DropTable(
                name: "tbl_infusoes_2");

            migrationBuilder.DropTable(
                name: "tbl_infusoes_2Audit");

            migrationBuilder.DropTable(
                name: "tbl_infusoes_previstas");

            migrationBuilder.DropTable(
                name: "tbl_infusoes_previstasAudit");

            migrationBuilder.DropTable(
                name: "tbl_infusoesAudit");

            migrationBuilder.DropTable(
                name: "TBL_NOVARTIS_GERAL");

            migrationBuilder.DropTable(
                name: "TBL_NOVARTIS_GERALAudit");

            migrationBuilder.DropTable(
                name: "tbl_relatorio_comparativo_patientmap_enzimais");

            migrationBuilder.DropTable(
                name: "tbl_relatorio_comparativo_patientmap_enzimaisAudit");

            migrationBuilder.DropTable(
                name: "tbl_relatorio_entrenos_entyvio_geral_2");

            migrationBuilder.DropTable(
                name: "tbl_relatorio_entrenos_entyvio_geral_2Audit");

            migrationBuilder.DropTable(
                name: "TEMP_CUIDAR_MAIS_ACESSO");

            migrationBuilder.DropTable(
                name: "TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgram");

            migrationBuilder.DropTable(
                name: "TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgramAudit");

            migrationBuilder.DropTable(
                name: "TEMP_CUIDAR_MAIS_ACESSOAudit");

            migrationBuilder.DropTable(
                name: "TempContingencia");

            migrationBuilder.DropTable(
                name: "TempContingenciaAudit");

            migrationBuilder.DropTable(
                name: "TempInfusionCare");

            migrationBuilder.DropTable(
                name: "TempInfusionCareAudit");

            migrationBuilder.DropTable(
                name: "TemplateAudit");

            migrationBuilder.DropTable(
                name: "TempPesquisa");

            migrationBuilder.DropTable(
                name: "TempPesquisaAudit");

            migrationBuilder.DropTable(
                name: "teste_somar_22112019");

            migrationBuilder.DropTable(
                name: "teste_somar_22112019Audit");

            migrationBuilder.DropTable(
                name: "TESTE_XML");

            migrationBuilder.DropTable(
                name: "TESTE_XMLAudit");

            migrationBuilder.DropTable(
                name: "TherapeuticHistory");

            migrationBuilder.DropTable(
                name: "TherapeuticHistoryAudit");

            migrationBuilder.DropTable(
                name: "TherapeuticTypeAudit");

            migrationBuilder.DropTable(
                name: "tmp");

            migrationBuilder.DropTable(
                name: "tmp_account");

            migrationBuilder.DropTable(
                name: "tmp_accountAudit");

            migrationBuilder.DropTable(
                name: "tmp_accountSeetingByProgram");

            migrationBuilder.DropTable(
                name: "tmp_accountSeetingByProgramAudit");

            migrationBuilder.DropTable(
                name: "TMP_AMPOLAS");

            migrationBuilder.DropTable(
                name: "TMP_AMPOLASAudit");

            migrationBuilder.DropTable(
                name: "TMP_APOIO_DIAGNOSTICO");

            migrationBuilder.DropTable(
                name: "TMP_APOIO_DIAGNOSTICOAudit");

            migrationBuilder.DropTable(
                name: "TMP_DATA_ULTIMA_RETIRADA_AMOSTRA");

            migrationBuilder.DropTable(
                name: "TMP_DATA_ULTIMA_RETIRADA_AMOSTRAAudit");

            migrationBuilder.DropTable(
                name: "tmp_deletar");

            migrationBuilder.DropTable(
                name: "tmp_deletar_10_dup");

            migrationBuilder.DropTable(
                name: "tmp_deletar_10_dupAudit");

            migrationBuilder.DropTable(
                name: "tmp_deletarAudit");

            migrationBuilder.DropTable(
                name: "TMP_DROPOUTSAudit");

            migrationBuilder.DropTable(
                name: "tmp_duplicidade_vouchers");

            migrationBuilder.DropTable(
                name: "tmp_duplicidade_vouchersAudit");

            migrationBuilder.DropTable(
                name: "TMP_ENROLLED");

            migrationBuilder.DropTable(
                name: "TMP_ENROLLEDAudit");

            migrationBuilder.DropTable(
                name: "TMP_ENTRADA_LOCAL");

            migrationBuilder.DropTable(
                name: "TMP_ENTRADA_LOCALAudit");

            migrationBuilder.DropTable(
                name: "TMP_ENTRADA_PAUSA");

            migrationBuilder.DropTable(
                name: "TMP_ENTRADA_PAUSAAudit");

            migrationBuilder.DropTable(
                name: "tmp_final_pacientes_em_frente");

            migrationBuilder.DropTable(
                name: "tmp_final_pacientes_em_frenteAudit");

            migrationBuilder.DropTable(
                name: "tmp_infusion_teste");

            migrationBuilder.DropTable(
                name: "tmp_infusion_teste_inserir");

            migrationBuilder.DropTable(
                name: "tmp_infusion_teste_inserirAudit");

            migrationBuilder.DropTable(
                name: "tmp_infusion_testeAudit");

            migrationBuilder.DropTable(
                name: "TMP_INFUSOES");

            migrationBuilder.DropTable(
                name: "TMP_INFUSOES_COMPLETO");

            migrationBuilder.DropTable(
                name: "TMP_INFUSOES_COMPLETO_ADD");

            migrationBuilder.DropTable(
                name: "TMP_INFUSOES_COMPLETO_ADDAudit");

            migrationBuilder.DropTable(
                name: "TMP_INFUSOES_COMPLETOAudit");

            migrationBuilder.DropTable(
                name: "TMP_INFUSOES_Roll");

            migrationBuilder.DropTable(
                name: "TMP_INFUSOES_RollAudit");

            migrationBuilder.DropTable(
                name: "TMP_INFUSOESAudit");

            migrationBuilder.DropTable(
                name: "tmp_kpi_infusoes");

            migrationBuilder.DropTable(
                name: "tmp_kpi_infusoesAudit");

            migrationBuilder.DropTable(
                name: "TMP_LogisticSchedule");

            migrationBuilder.DropTable(
                name: "TMP_LogisticScheduleAudit");

            migrationBuilder.DropTable(
                name: "tmp_marcar_como_is_deleted_no_care");

            migrationBuilder.DropTable(
                name: "tmp_marcar_como_is_deleted_no_careAudit");

            migrationBuilder.DropTable(
                name: "tmp_marcar_deleted");

            migrationBuilder.DropTable(
                name: "tmp_marcar_deleted2");

            migrationBuilder.DropTable(
                name: "tmp_marcar_deleted2Audit");

            migrationBuilder.DropTable(
                name: "tmp_marcar_deletedAudit");

            migrationBuilder.DropTable(
                name: "TMP_MEDICOS");

            migrationBuilder.DropTable(
                name: "TMP_MEDICOSAudit");

            migrationBuilder.DropTable(
                name: "tmp_nao_encontrado");

            migrationBuilder.DropTable(
                name: "tmp_nao_encontradoAudit");

            migrationBuilder.DropTable(
                name: "TMP_NOVOS");

            migrationBuilder.DropTable(
                name: "TMP_NOVOSAudit");

            migrationBuilder.DropTable(
                name: "TMP_PACIENTE_ENROLLED");

            migrationBuilder.DropTable(
                name: "TMP_PACIENTE_ENROLLEDAudit");

            migrationBuilder.DropTable(
                name: "tmp_pacientes_ativos_em_frente");

            migrationBuilder.DropTable(
                name: "tmp_pacientes_ativos_em_frente_dados");

            migrationBuilder.DropTable(
                name: "tmp_pacientes_ativos_em_frente_dadosAudit");

            migrationBuilder.DropTable(
                name: "tmp_pacientes_ativos_em_frente_Infusoes");

            migrationBuilder.DropTable(
                name: "tmp_pacientes_ativos_em_frente_InfusoesAudit");

            migrationBuilder.DropTable(
                name: "tmp_pacientes_ativos_em_frente_visita");

            migrationBuilder.DropTable(
                name: "tmp_pacientes_ativos_em_frente_visitaAudit");

            migrationBuilder.DropTable(
                name: "tmp_pacientes_ativos_em_frenteAudit");

            migrationBuilder.DropTable(
                name: "TMP_PACIENTES_BASE");

            migrationBuilder.DropTable(
                name: "TMP_PACIENTES_BASEAudit");

            migrationBuilder.DropTable(
                name: "TMP_RETENTION");

            migrationBuilder.DropTable(
                name: "TMP_RETENTIONAudit");

            migrationBuilder.DropTable(
                name: "tmp_retorno");

            migrationBuilder.DropTable(
                name: "tmp_retorno2");

            migrationBuilder.DropTable(
                name: "tmp_retorno2Audit");

            migrationBuilder.DropTable(
                name: "tmp_retornoAudit");

            migrationBuilder.DropTable(
                name: "TMP_SAIDA_LOCAL");

            migrationBuilder.DropTable(
                name: "TMP_SAIDA_LOCALAudit");

            migrationBuilder.DropTable(
                name: "TMP_SAIDA_PAUSA");

            migrationBuilder.DropTable(
                name: "TMP_SAIDA_PAUSAAudit");

            migrationBuilder.DropTable(
                name: "tmp_Schedule_Hierarquia");

            migrationBuilder.DropTable(
                name: "tmp_Schedule_HierarquiaAudit");

            migrationBuilder.DropTable(
                name: "tmp_semana");

            migrationBuilder.DropTable(
                name: "tmp_semanaAudit");

            migrationBuilder.DropTable(
                name: "TMP_TOTAL_INFUSIONS");

            migrationBuilder.DropTable(
                name: "TMP_TOTAL_INFUSIONSAudit");

            migrationBuilder.DropTable(
                name: "TMP_ULTIMA_ENTRADA");

            migrationBuilder.DropTable(
                name: "TMP_ULTIMA_ENTRADAAudit");

            migrationBuilder.DropTable(
                name: "tmp_validar");

            migrationBuilder.DropTable(
                name: "tmp_validarAudit");

            migrationBuilder.DropTable(
                name: "TMP_VIALS");

            migrationBuilder.DropTable(
                name: "TMP_VIALSAudit");

            migrationBuilder.DropTable(
                name: "TMP_VOUCHER");

            migrationBuilder.DropTable(
                name: "TMP_VOUCHERAudit");

            migrationBuilder.DropTable(
                name: "tmpAudit");

            migrationBuilder.DropTable(
                name: "TmpDataDeAdesao");

            migrationBuilder.DropTable(
                name: "TmpDataDeAdesaoAudit");

            migrationBuilder.DropTable(
                name: "Tracking");

            migrationBuilder.DropTable(
                name: "TrackingAudit");

            migrationBuilder.DropTable(
                name: "TrainingRecord");

            migrationBuilder.DropTable(
                name: "TrainingRecordAudit");

            migrationBuilder.DropTable(
                name: "Treatment_bkp_05_11_2021");

            migrationBuilder.DropTable(
                name: "Treatment_bkp_05_11_2021Audit");

            migrationBuilder.DropTable(
                name: "Treatment_RECEITADEVIDA_FIND");

            migrationBuilder.DropTable(
                name: "Treatment_RECEITADEVIDA_FINDAudit");

            migrationBuilder.DropTable(
                name: "TreatmentAddressAudit");

            migrationBuilder.DropTable(
                name: "TreatmentAndDiagnosticActionAudit");

            migrationBuilder.DropTable(
                name: "TreatmentAttendance");

            migrationBuilder.DropTable(
                name: "TreatmentAttendanceAudit");

            migrationBuilder.DropTable(
                name: "TreatmentAudit");

            migrationBuilder.DropTable(
                name: "TreatmentBillingAudit");

            migrationBuilder.DropTable(
                name: "TreatmentCustomDataAudit");

            migrationBuilder.DropTable(
                name: "TreatmentHistory");

            migrationBuilder.DropTable(
                name: "TreatmentHistoryAudit");

            migrationBuilder.DropTable(
                name: "TreatmentPayment");

            migrationBuilder.DropTable(
                name: "TreatmentPaymentAudit");

            migrationBuilder.DropTable(
                name: "TreatmentSettingsAudit");

            migrationBuilder.DropTable(
                name: "TreatmentSituationAudit");

            migrationBuilder.DropTable(
                name: "TreatmentStatusAudit");

            migrationBuilder.DropTable(
                name: "TreatmentStatusDetailAudit");

            migrationBuilder.DropTable(
                name: "TreatmentStatusDetailHealthProgram");

            migrationBuilder.DropTable(
                name: "TreatmentStatusDetailHealthProgramAudit");

            migrationBuilder.DropTable(
                name: "UserAudit");

            migrationBuilder.DropTable(
                name: "UserSystemLog");

            migrationBuilder.DropTable(
                name: "UserSystemLogAudit");

            migrationBuilder.DropTable(
                name: "ValidationResultAudit");

            migrationBuilder.DropTable(
                name: "ViewsEntityMetadata");

            migrationBuilder.DropTable(
                name: "VisitAudit");

            migrationBuilder.DropTable(
                name: "VoucherAudit");

            migrationBuilder.DropTable(
                name: "VoucherConfigurationAudit");

            migrationBuilder.DropTable(
                name: "zzmig");

            migrationBuilder.DropTable(
                name: "zzmigAudit");

            migrationBuilder.DropTable(
                name: "MedicamentAccess");

            migrationBuilder.DropTable(
                name: "AccessMannerByProgram");

            migrationBuilder.DropTable(
                name: "AccessProcedureByProgram");

            migrationBuilder.DropTable(
                name: "AccessProfile");

            migrationBuilder.DropTable(
                name: "TreatmentSettings");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Annotation");

            migrationBuilder.DropTable(
                name: "TreatmentAndDiagnosticAction");

            migrationBuilder.DropTable(
                name: "Chat");

            migrationBuilder.DropTable(
                name: "CommunicationTypeByProgram");

            migrationBuilder.DropTable(
                name: "AccountExamTypeByProgram");

            migrationBuilder.DropTable(
                name: "HealthProgramDisease");

            migrationBuilder.DropTable(
                name: "EmailBoxSetting");

            migrationBuilder.DropTable(
                name: "Template");

            migrationBuilder.DropTable(
                name: "SectionMetadata");

            migrationBuilder.DropTable(
                name: "MedicationNonadherenceReason");

            migrationBuilder.DropTable(
                name: "MenuMetadata");

            migrationBuilder.DropTable(
                name: "RulesAttributeMetadata");

            migrationBuilder.DropTable(
                name: "ProcessLog");

            migrationBuilder.DropTable(
                name: "Infusion");

            migrationBuilder.DropTable(
                name: "Visit");

            migrationBuilder.DropTable(
                name: "ActionRule");

            migrationBuilder.DropTable(
                name: "PhoneCall");

            migrationBuilder.DropTable(
                name: "ValidationResult");

            migrationBuilder.DropTable(
                name: "Logistics");

            migrationBuilder.DropTable(
                name: "PatientSalesOrder");

            migrationBuilder.DropTable(
                name: "Campaign");

            migrationBuilder.DropTable(
                name: "ServiceType");

            migrationBuilder.DropTable(
                name: "TreatmentAddress");

            migrationBuilder.DropTable(
                name: "ActionConfiguration");

            migrationBuilder.DropTable(
                name: "CoverageArea");

            migrationBuilder.DropTable(
                name: "CustomerAddress");

            migrationBuilder.DropTable(
                name: "ActionCategory");

            migrationBuilder.DropTable(
                name: "PostalCodes");

            migrationBuilder.DropTable(
                name: "PostalCodeCity");

            migrationBuilder.DropTable(
                name: "PostalCodeState");

            migrationBuilder.DropTable(
                name: "HealthProgram");

            migrationBuilder.DropTable(
                name: "AkkaActors");

            migrationBuilder.DropTable(
                name: "StringMap");

            migrationBuilder.DropTable(
                name: "AttributeMetadata");

            migrationBuilder.DropTable(
                name: "EntityMetadata");

            migrationBuilder.DropTable(
                name: "EntityConfiguration");

            migrationBuilder.DropTable(
                name: "Treatment");

            migrationBuilder.DropTable(
                name: "Phase");

            migrationBuilder.DropTable(
                name: "Posologe");

            migrationBuilder.DropTable(
                name: "TherapeuticType");

            migrationBuilder.DropTable(
                name: "TreatmentCustomData");

            migrationBuilder.DropTable(
                name: "TreatmentSituation");

            migrationBuilder.DropTable(
                name: "TreatmentStatusDetail");

            migrationBuilder.DropTable(
                name: "TreatmentStatus");

            migrationBuilder.DropTable(
                name: "Disease");

            migrationBuilder.DropTable(
                name: "Medicament");

            migrationBuilder.DropTable(
                name: "AccessManner");

            migrationBuilder.DropTable(
                name: "AccessWay");

            migrationBuilder.DropTable(
                name: "Account");

            migrationBuilder.DropTable(
                name: "User");

            migrationBuilder.DropTable(
                name: "Profile");

            migrationBuilder.DropTable(
                name: "Doctor");

            migrationBuilder.DropTable(
                name: "HealthProfessional");

            migrationBuilder.DropTable(
                name: "Bank");

            migrationBuilder.DropTable(
                name: "RegardingEntity");

            migrationBuilder.DropTable(
                name: "AccountSettingsByProgram");

            migrationBuilder.DropTable(
                name: "DoctorByProgram");

            migrationBuilder.DropTable(
                name: "ExamDefinition");

            migrationBuilder.DropTable(
                name: "MedicamentCompetitor");

            migrationBuilder.DropTable(
                name: "Diagnostic");

            migrationBuilder.DropTable(
                name: "Caregiver");

            migrationBuilder.DropTable(
                name: "Voucher");

            migrationBuilder.DropTable(
                name: "VoucherConfiguration");

            migrationBuilder.DropTable(
                name: "Occupation");

            migrationBuilder.DropTable(
                name: "Patient");

            migrationBuilder.DropTable(
                name: "MedicalSpecialty");

            migrationBuilder.DropTable(
                name: "Representative");

            migrationBuilder.DropTable(
                name: "LogisticsScheduleItem");

            migrationBuilder.DropTable(
                name: "LogisticsSchedule");

            migrationBuilder.DropTable(
                name: "Exam");

            migrationBuilder.DropTable(
                name: "Incident");

            migrationBuilder.DropTable(
                name: "LogisticsStuff");

            migrationBuilder.DropTable(
                name: "IncidentProduct");

            migrationBuilder.DropTable(
                name: "IncidentSubject");

            migrationBuilder.DropTable(
                name: "IncidentTypeDetail");

            migrationBuilder.DropTable(
                name: "IncidentType");

            migrationBuilder.DropTable(
                name: "StrengthMedicament");
        }
    }
}
