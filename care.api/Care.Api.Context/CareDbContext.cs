using Microsoft.EntityFrameworkCore;
using Care.Api.Models;
using Microsoft.Extensions.Configuration;
using Care.Api.Models.Models;
using System;

namespace Care.Api.Context;

public partial class CareDbContext : DbContext
{
    public readonly IConfiguration _configuration;

    public CareDbContext(DbContextOptions<CareDbContext> options, IConfiguration configuration)
        : base(options)
    {
        _configuration = configuration;
    }

    public virtual DbSet<AccessHistoryAttendance> AccessHistoryAttendances { get; set; }

    public virtual DbSet<AccessHistoryAttendanceAudit> AccessHistoryAttendanceAudits { get; set; }

    public virtual DbSet<AccessManner> AccessManners { get; set; }

    public virtual DbSet<AccessMannerAudit> AccessMannerAudits { get; set; }

    public virtual DbSet<AccessMannerByProgram> AccessMannerByPrograms { get; set; }

    public virtual DbSet<AccessMannerByProgramAudit> AccessMannerByProgramAudits { get; set; }

    public virtual DbSet<AccessOrderByProgram> AccessOrderByPrograms { get; set; }

    public virtual DbSet<AccessOrderByProgramAudit> AccessOrderByProgramAudits { get; set; }

    public virtual DbSet<AccessProcedureByProgram> AccessProcedureByPrograms { get; set; }

    public virtual DbSet<AccessProcedureByProgramAccountAudit> AccessProcedureByProgramAccountAudits { get; set; }

    public virtual DbSet<AccessProcedureByProgramAudit> AccessProcedureByProgramAudits { get; set; }

    public virtual DbSet<AccessProfile> AccessProfiles { get; set; }

    public virtual DbSet<AccessProfileAudit> AccessProfileAudits { get; set; }

    public virtual DbSet<AccessProfileUserAudit> AccessProfileUserAudits { get; set; }

    public virtual DbSet<AccessRightEntity> AccessRightEntities { get; set; }

    public virtual DbSet<AccessRightEntityAudit> AccessRightEntityAudits { get; set; }

    public virtual DbSet<AccessWay> AccessWays { get; set; }

    public virtual DbSet<AccessWayAudit> AccessWayAudits { get; set; }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountAudit> AccountAudits { get; set; }

    public virtual DbSet<AccountBkp1904> AccountBkp1904s { get; set; }

    public virtual DbSet<AccountBkp1904audit> AccountBkp1904audits { get; set; }

    public virtual DbSet<AccountCoverageArea> AccountCoverageAreas { get; set; }

    public virtual DbSet<AccountCoverageAreaAudit> AccountCoverageAreaAudits { get; set; }

    public virtual DbSet<AccountExamTypeByProgram> AccountExamTypeByPrograms { get; set; }

    public virtual DbSet<AccountExamTypeByProgramAudit> AccountExamTypeByProgramAudits { get; set; }

    public virtual DbSet<AccountInternalDemand> AccountInternalDemands { get; set; }

    public virtual DbSet<AccountInternalDemandAudit> AccountInternalDemandAudits { get; set; }

    public virtual DbSet<AccountSettingsByProgram> AccountSettingsByPrograms { get; set; }

    public virtual DbSet<AccountSettingsByProgramAudit> AccountSettingsByProgramAudits { get; set; }

    public virtual DbSet<AccountSettingsByProgramBkp190422> AccountSettingsByProgramBkp190422s { get; set; }

    public virtual DbSet<AccountSettingsByProgramBkp190422audit> AccountSettingsByProgramBkp190422audits { get; set; }

    public virtual DbSet<ActionCategory> ActionCategories { get; set; }

    public virtual DbSet<ActionCategoryAudit> ActionCategoryAudits { get; set; }

    public virtual DbSet<ActionConfiguration> ActionConfigurations { get; set; }

    public virtual DbSet<ActionConfigurationAudit> ActionConfigurationAudits { get; set; }

    public virtual DbSet<ActionRule> ActionRules { get; set; }

    public virtual DbSet<ActionRuleAudit> ActionRuleAudits { get; set; }

    public virtual DbSet<AdhesionAttendance> AdhesionAttendances { get; set; }

    public virtual DbSet<AdhesionAttendanceAudit> AdhesionAttendanceAudits { get; set; }

    public virtual DbSet<AkkaActor> AkkaActors { get; set; }

    public virtual DbSet<AkkaActorsAudit> AkkaActorsAudits { get; set; }

    public virtual DbSet<AkkaMessage> AkkaMessages { get; set; }

    public virtual DbSet<AkkaMessagesAudit> AkkaMessagesAudits { get; set; }

    public virtual DbSet<AkkaPublishEvent> AkkaPublishEvents { get; set; }

    public virtual DbSet<AkkaPublishEventsAudit> AkkaPublishEventsAudits { get; set; }

    public virtual DbSet<AkkaSubscribeEvent> AkkaSubscribeEvents { get; set; }

    public virtual DbSet<AkkaSubscribeEventsAudit> AkkaSubscribeEventsAudits { get; set; }

    public virtual DbSet<Annotation> Annotations { get; set; }

    public virtual DbSet<AnnotationAudit> AnnotationAudits { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRolesAudit> AspNetRolesAudits { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserClaimsAudit> AspNetUserClaimsAudits { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserLoginsAudit> AspNetUserLoginsAudits { get; set; }

    public virtual DbSet<AspNetUserRolesAudit> AspNetUserRolesAudits { get; set; }

    public virtual DbSet<AspNetUsersAudit> AspNetUsersAudits { get; set; }

    public virtual DbSet<Attachment> Attachments { get; set; }

    public virtual DbSet<AttachmentAudit> AttachmentAudits { get; set; }

    public virtual DbSet<AttemptCallLog> AttemptCallLogs { get; set; }

    public virtual DbSet<AttemptCallLogAudit> AttemptCallLogAudits { get; set; }

    public virtual DbSet<AttributeMetadata> AttributeMetadata { get; set; }

    public virtual DbSet<Bank> Banks { get; set; }

    public virtual DbSet<BankAudit> BankAudits { get; set; }

    public virtual DbSet<BaseDoctorRepresentative> BaseDoctorRepresentatives { get; set; }

    public virtual DbSet<BaseDoctorRepresentativeAudit> BaseDoctorRepresentativeAudits { get; set; }

    public virtual DbSet<BaseTreatment> BaseTreatments { get; set; }

    public virtual DbSet<BaseTreatmentaudit> BaseTreatmentaudits { get; set; }

    public virtual DbSet<BemestarVoucherPendenteLaudo> BemestarVoucherPendenteLaudos { get; set; }

    public virtual DbSet<BemestarVoucherPendenteLaudoaudit> BemestarVoucherPendenteLaudoaudits { get; set; }

    public virtual DbSet<Benefit> Benefits { get; set; }

    public virtual DbSet<BenefitAudit> BenefitAudits { get; set; }

    public virtual DbSet<BkpEntrenosReativado20200624> BkpEntrenosReativado20200624s { get; set; }

    public virtual DbSet<BkpEntrenosReativado20200624audit> BkpEntrenosReativado20200624audits { get; set; }

    public virtual DbSet<CadastrosTakedaAudit> CadastrosTakedaAudits { get; set; }

    public virtual DbSet<CadastrosTakedum> CadastrosTakeda { get; set; }

    public virtual DbSet<CalendarScheduled> CalendarScheduleds { get; set; }

    public virtual DbSet<CalendarScheduledAudit> CalendarScheduledAudits { get; set; }

    public virtual DbSet<Campaign> Campaigns { get; set; }

    public virtual DbSet<CampaignAudit> CampaignAudits { get; set; }

    public virtual DbSet<CampaignHealthProfessionalAudit> CampaignHealthProfessionalAudits { get; set; }

    public virtual DbSet<Caregiver> Caregivers { get; set; }

    public virtual DbSet<CaregiverAudit> CaregiverAudits { get; set; }

    public virtual DbSet<CargaMedicoConsultor> CargaMedicoConsultors { get; set; }

    public virtual DbSet<CargaMedicoConsultorAudit> CargaMedicoConsultorAudits { get; set; }

    public virtual DbSet<Chat> Chats { get; set; }

    public virtual DbSet<ChatAudit> ChatAudits { get; set; }

    public virtual DbSet<ChatDialog> ChatDialogs { get; set; }

    public virtual DbSet<ChatDialogsAudit> ChatDialogsAudits { get; set; }

    public virtual DbSet<ClinicasImport> ClinicasImports { get; set; }

    public virtual DbSet<ClinicasImport2> ClinicasImport2s { get; set; }

    public virtual DbSet<ClinicasImport2Audit> ClinicasImport2Audits { get; set; }

    public virtual DbSet<ClinicasImportAudit> ClinicasImportAudits { get; set; }

    public virtual DbSet<ClinicasInfusaoImport> ClinicasInfusaoImports { get; set; }

    public virtual DbSet<ClinicasInfusaoImportAudit> ClinicasInfusaoImportAudits { get; set; }

    public virtual DbSet<Communication> Communications { get; set; }

    public virtual DbSet<CommunicationAudit> CommunicationAudits { get; set; }

    public virtual DbSet<CommunicationTypeByProgram> CommunicationTypeByPrograms { get; set; }

    public virtual DbSet<CommunicationTypeByProgramAudit> CommunicationTypeByProgramAudits { get; set; }

    public virtual DbSet<CommunicationTypeByProgramHealthProgramAudit> CommunicationTypeByProgramHealthProgramAudits { get; set; }

    public virtual DbSet<Configuration> Configurations { get; set; }

    public virtual DbSet<ConfigurationAudit> ConfigurationAudits { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<ContactAudit> ContactAudits { get; set; }

    public virtual DbSet<CoverageArea> CoverageAreas { get; set; }

    public virtual DbSet<CoverageAreaAudit> CoverageAreaAudits { get; set; }

    public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }

    public virtual DbSet<CustomerAddressAudit> CustomerAddressAudits { get; set; }

    public virtual DbSet<DashboardAstella> DashboardAstellas { get; set; }

    public virtual DbSet<DashboardAstellasaudit> DashboardAstellasaudits { get; set; }

    public virtual DbSet<Diagnostic> Diagnostics { get; set; }

    public virtual DbSet<DiagnosticAudit> DiagnosticAudits { get; set; }

    public virtual DbSet<DiagnosticExam> DiagnosticExams { get; set; }

    public virtual DbSet<DiagnosticExamAudit> DiagnosticExamAudits { get; set; }

    public virtual DbSet<Disease> Diseases { get; set; }

    public virtual DbSet<DiseaseAudit> DiseaseAudits { get; set; }

    public virtual DbSet<Doctor> Doctors { get; set; }

    public virtual DbSet<DoctorAudit> DoctorAudits { get; set; }

    public virtual DbSet<DoctorByProgram> DoctorByPrograms { get; set; }

    public virtual DbSet<DoctorByProgramAccountAudit> DoctorByProgramAccountAudits { get; set; }

    public virtual DbSet<DoctorByProgramAudit> DoctorByProgramAudits { get; set; }

    public virtual DbSet<DoctorByProgramBkp02122021> DoctorByProgramBkp02122021s { get; set; }

    public virtual DbSet<DoctorByProgramBkp02122021Audit> DoctorByProgramBkp02122021Audits { get; set; }

    public virtual DbSet<DoctorByProgramBkp05112021> DoctorByProgramBkp05112021s { get; set; }

    public virtual DbSet<DoctorByProgramBkp05112021audit> DoctorByProgramBkp05112021audits { get; set; }

    public virtual DbSet<DoctorByProgramBkp231121> DoctorByProgramBkp231121s { get; set; }

    public virtual DbSet<DoctorByProgramBkp231121Audit> DoctorByProgramBkp231121Audits { get; set; }

    public virtual DbSet<DoctorMedicalSpecialtyAudit> DoctorMedicalSpecialtyAudits { get; set; }

    public virtual DbSet<DoctorsRepresentative> DoctorsRepresentatives { get; set; }

    public virtual DbSet<DoctorsRepresentativeAudit> DoctorsRepresentativeAudits { get; set; }

    public virtual DbSet<ElmahError> ElmahErrors { get; set; }

    public virtual DbSet<ElmahErrorAudit> ElmahErrorAudits { get; set; }

    public virtual DbSet<Email> Emails { get; set; }

    public virtual DbSet<EmailAudit> EmailAudits { get; set; }

    public virtual DbSet<EmailBoxSetting> EmailBoxSettings { get; set; }

    public virtual DbSet<EmailBoxSettingAudit> EmailBoxSettingAudits { get; set; }

    public virtual DbSet<EntityConfiguration> EntityConfigurations { get; set; }

    public virtual DbSet<EntityConfigurationAudit> EntityConfigurationAudits { get; set; }

    public virtual DbSet<EntityMetadata> EntityMetadata { get; set; }

    public virtual DbSet<Especialidade> Especialidades { get; set; }

    public virtual DbSet<EspecialidadeAudit> EspecialidadeAudits { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<ExamAudit> ExamAudits { get; set; }

    public virtual DbSet<ExamBkp190422> ExamBkp190422s { get; set; }

    public virtual DbSet<ExamBkp190422audit> ExamBkp190422audits { get; set; }

    public virtual DbSet<ExamBkp3011> ExamBkp3011s { get; set; }

    public virtual DbSet<ExamBkp3011audit> ExamBkp3011audits { get; set; }

    public virtual DbSet<ExamBkpUpdtNivelSerico> ExamBkpUpdtNivelSericos { get; set; }

    public virtual DbSet<ExamBkpUpdtNivelSericoAudit> ExamBkpUpdtNivelSericoAudits { get; set; }

    public virtual DbSet<ExamDefinition> ExamDefinitions { get; set; }

    public virtual DbSet<ExamDefinitionAccountExamTypeByProgramAudit> ExamDefinitionAccountExamTypeByProgramAudits { get; set; }

    public virtual DbSet<ExamDefinitionAudit> ExamDefinitionAudits { get; set; }

    public virtual DbSet<ExamDefinitionExamAudit> ExamDefinitionExamAudits { get; set; }

    public virtual DbSet<ExamDefinitionHealthProgramAudit> ExamDefinitionHealthProgramAudits { get; set; }

    public virtual DbSet<ExamDefinitionSettingsByProgram> ExamDefinitionSettingsByPrograms { get; set; }

    public virtual DbSet<ExamDefinitionSettingsByProgramAudit> ExamDefinitionSettingsByProgramAudits { get; set; }

    public virtual DbSet<ExamDefinitionVoucherConfigurationAudit> ExamDefinitionVoucherConfigurationAudits { get; set; }

    public virtual DbSet<ExamStatusHistory> ExamStatusHistories { get; set; }

    public virtual DbSet<ExamStatusHistoryAudit> ExamStatusHistoryAudits { get; set; }

    public virtual DbSet<Feriado> Feriados { get; set; }

    public virtual DbSet<FeriadoAudit> FeriadoAudits { get; set; }

    public virtual DbSet<HealthProfessional> HealthProfessionals { get; set; }

    public virtual DbSet<HealthProfessionalAccount> HealthProfessionalAccounts { get; set; }

    public virtual DbSet<HealthProfessionalAccountAudit> HealthProfessionalAccountAudits { get; set; }

    public virtual DbSet<HealthProfessionalAudit> HealthProfessionalAudits { get; set; }

    public virtual DbSet<HealthProfessionalByProgram> HealthProfessionalByPrograms { get; set; }

    public virtual DbSet<HealthProfessionalByProgramAudit> HealthProfessionalByProgramAudits { get; set; }

    public virtual DbSet<HealthProfessionalHealthProgramAudit> HealthProfessionalHealthProgramAudits { get; set; }

    public virtual DbSet<HealthProfessionalMedicalSpecialtyAudit> HealthProfessionalMedicalSpecialtyAudits { get; set; }

    public virtual DbSet<HealthProgram> HealthPrograms { get; set; }

    public virtual DbSet<HealthProgramAccountAudit> HealthProgramAccountAudits { get; set; }

    public virtual DbSet<HealthProgramAccountBkp190422> HealthProgramAccountBkp190422s { get; set; }

    public virtual DbSet<HealthProgramAccountBkp190422audit> HealthProgramAccountBkp190422audits { get; set; }

    public virtual DbSet<HealthProgramAudit> HealthProgramAudits { get; set; }

    public virtual DbSet<HealthProgramDisease> HealthProgramDiseases { get; set; }

    public virtual DbSet<HealthProgramDiseaseAudit> HealthProgramDiseaseAudits { get; set; }

    public virtual DbSet<HealthProgramDiseaseExam> HealthProgramDiseaseExams { get; set; }

    public virtual DbSet<HealthProgramDiseaseExamAudit> HealthProgramDiseaseExamAudits { get; set; }

    public virtual DbSet<HealthProgramExamByEntity> HealthProgramExamByEntities { get; set; }

    public virtual DbSet<HealthProgramExamByEntityAudit> HealthProgramExamByEntityAudits { get; set; }

    public virtual DbSet<HealthProgramMedicamentAudit> HealthProgramMedicamentAudits { get; set; }

    public virtual DbSet<HealthProgramServiceTypeAudit> HealthProgramServiceTypeAudits { get; set; }

    public virtual DbSet<HealthProgramTemplateSetting> HealthProgramTemplateSettings { get; set; }

    public virtual DbSet<HealthProgramTemplateSettingAudit> HealthProgramTemplateSettingAudits { get; set; }

    public virtual DbSet<HemoEnf> HemoEnfs { get; set; }

    public virtual DbSet<IdentityCode> IdentityCodes { get; set; }

    public virtual DbSet<IdentityCodeAudit> IdentityCodeAudits { get; set; }

    public virtual DbSet<Incident> Incidents { get; set; }

    public virtual DbSet<IncidentAudit> IncidentAudits { get; set; }

    public virtual DbSet<IncidentItem> IncidentItems { get; set; }

    public virtual DbSet<IncidentItemAudit> IncidentItemAudits { get; set; }

    public virtual DbSet<IncidentProduct> IncidentProducts { get; set; }

    public virtual DbSet<IncidentProductAudit> IncidentProductAudits { get; set; }

    public virtual DbSet<IncidentSubject> IncidentSubjects { get; set; }

    public virtual DbSet<IncidentSubjectAudit> IncidentSubjectAudits { get; set; }

    public virtual DbSet<IncidentType> IncidentTypes { get; set; }

    public virtual DbSet<IncidentTypeAudit> IncidentTypeAudits { get; set; }

    public virtual DbSet<IncidentTypeDetail> IncidentTypeDetails { get; set; }

    public virtual DbSet<IncidentTypeDetailAudit> IncidentTypeDetailAudits { get; set; }

    public virtual DbSet<IncidentTypeDetailProgram> IncidentTypeDetailPrograms { get; set; }

    public virtual DbSet<IncidentTypeDetailProgramAudit> IncidentTypeDetailProgramAudits { get; set; }

    public virtual DbSet<IndexViewsEntityMetadatum> IndexViewsEntityMetadata { get; set; }

    public virtual DbSet<InformationCollect> InformationCollects { get; set; }

    public virtual DbSet<InformationCollectAudit> InformationCollectAudits { get; set; }

    public virtual DbSet<InformationVisit> InformationVisits { get; set; }

    public virtual DbSet<InformationVisitAudit> InformationVisitAudits { get; set; }

    public virtual DbSet<Infusion> Infusions { get; set; }

    public virtual DbSet<InfusionAudit> InfusionAudits { get; set; }

    public virtual DbSet<InfusionBkp190422> InfusionBkp190422s { get; set; }

    public virtual DbSet<InfusionBkp190422audit> InfusionBkp190422audits { get; set; }

    public virtual DbSet<Infuso> Infusoes { get; set; }

    public virtual DbSet<InfusoesAudit> InfusoesAudits { get; set; }

    public virtual DbSet<IntegrationLog> IntegrationLogs { get; set; }

    public virtual DbSet<IntegrationLogAudit> IntegrationLogAudits { get; set; }

    public virtual DbSet<JsRulesByEntity> JsRulesByEntities { get; set; }

    public virtual DbSet<JsRulesByEntityAudit> JsRulesByEntityAudits { get; set; }

    public virtual DbSet<JsRulesByEntityBkp20201015> JsRulesByEntityBkp20201015s { get; set; }

    public virtual DbSet<JsRulesByEntityBkp20201015audit> JsRulesByEntityBkp20201015audits { get; set; }

    public virtual DbSet<LanguageAttribute> LanguageAttributes { get; set; }

    public virtual DbSet<LanguageAttributeAudit> LanguageAttributeAudits { get; set; }

    public virtual DbSet<LanguageDefault> LanguageDefaults { get; set; }

    public virtual DbSet<LanguageDefaultAudit> LanguageDefaultAudits { get; set; }

    public virtual DbSet<LanguageEntitiesAudit> LanguageEntitiesAudits { get; set; }

    public virtual DbSet<LanguageEntity> LanguageEntities { get; set; }

    public virtual DbSet<LanguageMenuMetadatum> LanguageMenuMetadata { get; set; }

    public virtual DbSet<LanguageSectionMetadatum> LanguageSectionMetadata { get; set; }

    public virtual DbSet<ListaDeTabela> ListaDeTabelas { get; set; }

    public virtual DbSet<ListaDeTabelasAudit> ListaDeTabelasAudits { get; set; }

    public virtual DbSet<LogAtualizacaoNonoDigito> LogAtualizacaoNonoDigitos { get; set; }

    public virtual DbSet<LogAtualizacaoNonoDigitoAudit> LogAtualizacaoNonoDigitoAudits { get; set; }

    public virtual DbSet<Logistics> Logistics { get; set; }

    public virtual DbSet<LogisticsAudit> LogisticsAudits { get; set; }

    public virtual DbSet<LogisticsSchedule> LogisticsSchedules { get; set; }

    public virtual DbSet<LogisticsScheduleAudit> LogisticsScheduleAudits { get; set; }

    public virtual DbSet<LogisticsScheduleBkp01072022> LogisticsScheduleBkp01072022s { get; set; }

    public virtual DbSet<LogisticsScheduleBkp010720221106> LogisticsScheduleBkp010720221106s { get; set; }

    public virtual DbSet<LogisticsScheduleBkp010720221106audit> LogisticsScheduleBkp010720221106audits { get; set; }

    public virtual DbSet<LogisticsScheduleBkp01072022audit> LogisticsScheduleBkp01072022audits { get; set; }

    public virtual DbSet<LogisticsScheduleItem> LogisticsScheduleItems { get; set; }

    public virtual DbSet<LogisticsScheduleItemAudit> LogisticsScheduleItemAudits { get; set; }

    public virtual DbSet<LogisticsStuff> LogisticsStuffs { get; set; }

    public virtual DbSet<LogisticsStuffAudit> LogisticsStuffAudits { get; set; }

    public virtual DbSet<LogisticsStuffKitsAudit> LogisticsStuffKitsAudits { get; set; }

    public virtual DbSet<MedicalSpecialty> MedicalSpecialties { get; set; }

    public virtual DbSet<MedicalSpecialtyAudit> MedicalSpecialtyAudits { get; set; }

    public virtual DbSet<Medicament> Medicaments { get; set; }

    public virtual DbSet<MedicamentAccess> MedicamentAccesses { get; set; }

    public virtual DbSet<MedicamentAccessAudit> MedicamentAccessAudits { get; set; }

    public virtual DbSet<MedicamentAudit> MedicamentAudits { get; set; }

    public virtual DbSet<MedicamentCompetitor> MedicamentCompetitors { get; set; }

    public virtual DbSet<MedicamentCompetitorAudit> MedicamentCompetitorAudits { get; set; }

    public virtual DbSet<MedicamentCompetitorDiseaseAudit> MedicamentCompetitorDiseaseAudits { get; set; }

    public virtual DbSet<MedicamentCompetitorHealthProgramAudit> MedicamentCompetitorHealthProgramAudits { get; set; }

    public virtual DbSet<MedicamentConcomitant> MedicamentConcomitants { get; set; }

    public virtual DbSet<MedicamentConcomitantAudit> MedicamentConcomitantAudits { get; set; }

    public virtual DbSet<MedicamentDiseaseAudit> MedicamentDiseaseAudits { get; set; }

    public virtual DbSet<MedicamentStrengthMedicamentAudit> MedicamentStrengthMedicamentAudits { get; set; }

    public virtual DbSet<MedicationNonadherenceReason> MedicationNonadherenceReasons { get; set; }

    public virtual DbSet<MedicationNonadherenceReasonAudit> MedicationNonadherenceReasonAudits { get; set; }

    public virtual DbSet<MedicationNonadherenceReasonHealthProgramAudit> MedicationNonadherenceReasonHealthProgramAudits { get; set; }

    public virtual DbSet<MenuMetadatum> MenuMetadata { get; set; }

    public virtual DbSet<MigrationHistory> MigrationHistories { get; set; }

    public virtual DbSet<Occupation> Occupations { get; set; }

    public virtual DbSet<OccupationAudit> OccupationAudits { get; set; }

    public virtual DbSet<Paciente> Pacientes { get; set; }

    public virtual DbSet<PacientesAudit> PacientesAudits { get; set; }

    public virtual DbSet<PacientesPesquisa> PacientesPesquisas { get; set; }

    public virtual DbSet<PacientesPesquisaAudit> PacientesPesquisaAudits { get; set; }

    public virtual DbSet<PainelMedicoEntyvio> PainelMedicoEntyvios { get; set; }

    public virtual DbSet<PainelMedicoEntyvioAudit> PainelMedicoEntyvioAudits { get; set; }

    public virtual DbSet<PainelMedicoMelanoma> PainelMedicoMelanomas { get; set; }

    public virtual DbSet<PainelMedicoMelanomaAudit> PainelMedicoMelanomaAudits { get; set; }

    public virtual DbSet<PainelMedicoTasigna> PainelMedicoTasignas { get; set; }

    public virtual DbSet<PainelMedicoTasignaaudit> PainelMedicoTasignaaudits { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<PatientAudit> PatientAudits { get; set; }

    public virtual DbSet<PatientSalesOrder> PatientSalesOrders { get; set; }

    public virtual DbSet<PatientSalesOrderAudit> PatientSalesOrderAudits { get; set; }

    public virtual DbSet<Pharmacovigilance> Pharmacovigilances { get; set; }

    public virtual DbSet<PharmacovigilanceAudit> PharmacovigilanceAudits { get; set; }

    public virtual DbSet<Phase> Phases { get; set; }

    public virtual DbSet<PhaseAudit> PhaseAudits { get; set; }

    public virtual DbSet<PhaseRulesMetadatum> PhaseRulesMetadata { get; set; }

    public virtual DbSet<PhoneCall> PhoneCalls { get; set; }

    public virtual DbSet<PhoneCallAudit> PhoneCallAudits { get; set; }

    public virtual DbSet<Posologe> Posologes { get; set; }

    public virtual DbSet<PosologeAudit> PosologeAudits { get; set; }

    public virtual DbSet<PosologeMedicamentAudit> PosologeMedicamentAudits { get; set; }

    public virtual DbSet<PostalCode> PostalCodes { get; set; }

    public virtual DbSet<PostalCodeCity> PostalCodeCities { get; set; }

    public virtual DbSet<PostalCodeCityAudit> PostalCodeCityAudits { get; set; }

    public virtual DbSet<PostalCodeState> PostalCodeStates { get; set; }

    public virtual DbSet<PostalCodeStateAudit> PostalCodeStateAudits { get; set; }

    public virtual DbSet<PostalCodesAudit> PostalCodesAudits { get; set; }

    public virtual DbSet<ProcessLog> ProcessLogs { get; set; }

    public virtual DbSet<ProcessLogAudit> ProcessLogAudits { get; set; }

    public virtual DbSet<Profarmaacesso> Profarmaacessos { get; set; }

    public virtual DbSet<ProfarmaacessoAudit> ProfarmaacessoAudits { get; set; }

    public virtual DbSet<Profile> Profiles { get; set; }

    public virtual DbSet<ProfileAudit> ProfileAudits { get; set; }

    public virtual DbSet<Purchase> Purchases { get; set; }

    public virtual DbSet<PurchaseAudit> PurchaseAudits { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionAudit> QuestionAudits { get; set; }

    public virtual DbSet<QuestionOption> QuestionOptions { get; set; }

    public virtual DbSet<QuestionOptionsAudit> QuestionOptionsAudits { get; set; }

    public virtual DbSet<RegardingEntity> RegardingEntities { get; set; }

    public virtual DbSet<RegardingEntityAudit> RegardingEntityAudits { get; set; }

    public virtual DbSet<RegionalManager> RegionalManagers { get; set; }

    public virtual DbSet<RegionalManagerAudit> RegionalManagerAudits { get; set; }

    public virtual DbSet<RelatorioPacientesAtivosEmFrente> RelatorioPacientesAtivosEmFrentes { get; set; }

    public virtual DbSet<RelatorioPacientesAtivosEmFrenteAudit> RelatorioPacientesAtivosEmFrenteAudits { get; set; }

    public virtual DbSet<RelatorioPacientesAtivosEmFrenteTotalInfuso> RelatorioPacientesAtivosEmFrenteTotalInfusoes { get; set; }

    public virtual DbSet<RelatorioPacientesAtivosEmFrenteTotalInfusoesAudit> RelatorioPacientesAtivosEmFrenteTotalInfusoesAudits { get; set; }

    public virtual DbSet<RelatorioPacientesAtivosEmFrenteTotalVisita> RelatorioPacientesAtivosEmFrenteTotalVisitas { get; set; }

    public virtual DbSet<RelatorioPacientesAtivosEmFrenteTotalVisitasAudit> RelatorioPacientesAtivosEmFrenteTotalVisitasAudits { get; set; }

    public virtual DbSet<Representative> Representatives { get; set; }

    public virtual DbSet<RepresentativeAccount> RepresentativeAccounts { get; set; }

    public virtual DbSet<RepresentativeAccountAudit> RepresentativeAccountAudits { get; set; }

    public virtual DbSet<RepresentativeAudit> RepresentativeAudits { get; set; }

    public virtual DbSet<RepresentativeBkp15072021> RepresentativeBkp15072021s { get; set; }

    public virtual DbSet<RepresentativeBkp15072021Audit> RepresentativeBkp15072021Audits { get; set; }

    public virtual DbSet<RepresentativeRegion> RepresentativeRegions { get; set; }

    public virtual DbSet<RepresentativeRegionAudit> RepresentativeRegionAudits { get; set; }

    public virtual DbSet<RepresentativeDoctorByProgram> RepresentativeDoctorByPrograms { get; set; }

    public virtual DbSet<ResourceWorkSetting> ResourceWorkSettings { get; set; }

    public virtual DbSet<ResourceWorkSettingsAudit> ResourceWorkSettingsAudits { get; set; }

    public virtual DbSet<RulesAttributeMetadataBkp30092021> RulesAttributeMetadataBkp30092021s { get; set; }

    public virtual DbSet<RulesAttributeMetadataBkp30092021audit> RulesAttributeMetadataBkp30092021audits { get; set; }

    public virtual DbSet<RulesAttributeMetadatum> RulesAttributeMetadata { get; set; }

    public virtual DbSet<SchedulingDate> SchedulingDates { get; set; }

    public virtual DbSet<SchedulingDatesAudit> SchedulingDatesAudits { get; set; }

    public virtual DbSet<SchedulingHistory> SchedulingHistories { get; set; }

    public virtual DbSet<SchedulingHistoryAudit> SchedulingHistoryAudits { get; set; }

    public virtual DbSet<SectionExcludedByPhase> SectionExcludedByPhases { get; set; }

    public virtual DbSet<SectionExcludedByPhaseAudit> SectionExcludedByPhaseAudits { get; set; }

    public virtual DbSet<SectionMetadataBkp24092021> SectionMetadataBkp24092021s { get; set; }

    public virtual DbSet<SectionMetadataBkp24092021audit> SectionMetadataBkp24092021audits { get; set; }

    public virtual DbSet<SectionMetadatum> SectionMetadata { get; set; }

    public virtual DbSet<ServiceType> ServiceTypes { get; set; }

    public virtual DbSet<ServiceTypeAudit> ServiceTypeAudits { get; set; }

    public virtual DbSet<Sms> Sms { get; set; }

    public virtual DbSet<Smsaudit> Smsaudits { get; set; }

    public virtual DbSet<StepLog> StepLogs { get; set; }

    public virtual DbSet<StepLogsAudit> StepLogsAudits { get; set; }

    public virtual DbSet<StrengthMedicament> StrengthMedicaments { get; set; }

    public virtual DbSet<StrengthMedicamentAudit> StrengthMedicamentAudits { get; set; }

    public virtual DbSet<StringMap> StringMaps { get; set; }

    public virtual DbSet<StringMapAudit> StringMapAudits { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<SubjectAudit> SubjectAudits { get; set; }

    public virtual DbSet<Survey> Surveys { get; set; }

    public virtual DbSet<SurveyAudit> SurveyAudits { get; set; }

    public virtual DbSet<SurveyQuestionList> SurveyQuestionLists { get; set; }

    public virtual DbSet<SurveyQuestionListAudit> SurveyQuestionListAudits { get; set; }

    public virtual DbSet<SurveyResponse> SurveyResponses { get; set; }

    public virtual DbSet<SurveyResponseAudit> SurveyResponseAudits { get; set; }

    public virtual DbSet<SurveyResponseLine> SurveyResponseLines { get; set; }

    public virtual DbSet<SurveyResponseLineAudit> SurveyResponseLineAudits { get; set; }

    public virtual DbSet<TLogCollate> TLogCollates { get; set; }

    public virtual DbSet<TLogCollateaudit> TLogCollateaudits { get; set; }

    public virtual DbSet<Care.Api.Models.Task> Tasks { get; set; }

    public virtual DbSet<TaskAudit> TaskAudits { get; set; }

    public virtual DbSet<TbRelatorioJanssenSustenna> TbRelatorioJanssenSustennas { get; set; }

    public virtual DbSet<TbRelatorioJanssenSustennaaudit> TbRelatorioJanssenSustennaaudits { get; set; }

    public virtual DbSet<TblAcompanhamentoInfusaoShire> TblAcompanhamentoInfusaoShires { get; set; }

    public virtual DbSet<TblAcompanhamentoInfusaoShireAudit> TblAcompanhamentoInfusaoShireAudits { get; set; }

    public virtual DbSet<TblCare> TblCares { get; set; }

    public virtual DbSet<TblCareaudit> TblCareaudits { get; set; }

    public virtual DbSet<TblClinica> TblClinicas { get; set; }

    public virtual DbSet<TblClinicasaudit> TblClinicasaudits { get; set; }

    public virtual DbSet<TblCorrecaoInfuso> TblCorrecaoInfusoes { get; set; }

    public virtual DbSet<TblCorrecaoInfusoesAudit> TblCorrecaoInfusoesAudits { get; set; }

    public virtual DbSet<TblDddsNonoDigito> TblDddsNonoDigitos { get; set; }

    public virtual DbSet<TblDddsNonoDigitoaudit> TblDddsNonoDigitoaudits { get; set; }

    public virtual DbSet<TblDeletarInfusao> TblDeletarInfusaos { get; set; }

    public virtual DbSet<TblDeletarInfusaoAudit> TblDeletarInfusaoAudits { get; set; }

    public virtual DbSet<TblFeriadosNacionai> TblFeriadosNacionais { get; set; }

    public virtual DbSet<TblFeriadosNacionaisAudit> TblFeriadosNacionaisAudits { get; set; }

    public virtual DbSet<TblFinal> TblFinals { get; set; }

    public virtual DbSet<TblFinalAudit> TblFinalAudits { get; set; }

    public virtual DbSet<TblInfuso> TblInfusoes { get; set; }

    public virtual DbSet<TblInfusoes2> TblInfusoes2s { get; set; }

    public virtual DbSet<TblInfusoes2audit> TblInfusoes2audits { get; set; }

    public virtual DbSet<TblInfusoesAudit> TblInfusoesAudits { get; set; }

    public virtual DbSet<TblInfusoesPrevista> TblInfusoesPrevistas { get; set; }

    public virtual DbSet<TblInfusoesPrevistasAudit> TblInfusoesPrevistasAudits { get; set; }

    public virtual DbSet<TblNovartisGeral> TblNovartisGerals { get; set; }

    public virtual DbSet<TblNovartisGeralaudit> TblNovartisGeralaudits { get; set; }

    public virtual DbSet<TblRelatorioComparativoPatientmapEnzimai> TblRelatorioComparativoPatientmapEnzimais { get; set; }

    public virtual DbSet<TblRelatorioComparativoPatientmapEnzimaisAudit> TblRelatorioComparativoPatientmapEnzimaisAudits { get; set; }

    public virtual DbSet<TblRelatorioEntrenosEntyvioGeral2> TblRelatorioEntrenosEntyvioGeral2s { get; set; }

    public virtual DbSet<TblRelatorioEntrenosEntyvioGeral2audit> TblRelatorioEntrenosEntyvioGeral2audits { get; set; }

    public virtual DbSet<TempContingenciaAudit> TempContingenciaAudits { get; set; }

    public virtual DbSet<TempContingencium> TempContingencia { get; set; }

    public virtual DbSet<TempCuidarMaisAcesso> TempCuidarMaisAcessos { get; set; }

    public virtual DbSet<TempCuidarMaisAcessoAccessProcedureByProgram> TempCuidarMaisAcessoAccessProcedureByPrograms { get; set; }

    public virtual DbSet<TempCuidarMaisAcessoAccessProcedureByProgramAudit> TempCuidarMaisAcessoAccessProcedureByProgramAudits { get; set; }

    public virtual DbSet<TempCuidarMaisAcessoaudit> TempCuidarMaisAcessoaudits { get; set; }

    public virtual DbSet<TempInfusionCare> TempInfusionCares { get; set; }

    public virtual DbSet<TempInfusionCareAudit> TempInfusionCareAudits { get; set; }

    public virtual DbSet<TempPesquisa> TempPesquisas { get; set; }

    public virtual DbSet<TempPesquisaAudit> TempPesquisaAudits { get; set; }

    public virtual DbSet<Template> Templates { get; set; }

    public virtual DbSet<TemplateAudit> TemplateAudits { get; set; }

    public virtual DbSet<TesteSomar22112019> TesteSomar22112019s { get; set; }

    public virtual DbSet<TesteSomar22112019audit> TesteSomar22112019audits { get; set; }

    public virtual DbSet<TesteXml> TesteXmls { get; set; }

    public virtual DbSet<TesteXmlaudit> TesteXmlaudits { get; set; }

    public virtual DbSet<TherapeuticHistory> TherapeuticHistories { get; set; }

    public virtual DbSet<TherapeuticHistoryAudit> TherapeuticHistoryAudits { get; set; }

    public virtual DbSet<TherapeuticType> TherapeuticTypes { get; set; }

    public virtual DbSet<TherapeuticTypeAudit> TherapeuticTypeAudits { get; set; }

    public virtual DbSet<Tmp> Tmps { get; set; }

    public virtual DbSet<TmpAccount> TmpAccounts { get; set; }

    public virtual DbSet<TmpAccountAudit> TmpAccountAudits { get; set; }

    public virtual DbSet<TmpAccountSeetingByProgram> TmpAccountSeetingByPrograms { get; set; }

    public virtual DbSet<TmpAccountSeetingByProgramAudit> TmpAccountSeetingByProgramAudits { get; set; }

    public virtual DbSet<TmpAmpola> TmpAmpolas { get; set; }

    public virtual DbSet<TmpAmpolasaudit> TmpAmpolasaudits { get; set; }

    public virtual DbSet<TmpApoioDiagnostico> TmpApoioDiagnosticos { get; set; }

    public virtual DbSet<TmpApoioDiagnosticoaudit> TmpApoioDiagnosticoaudits { get; set; }

    public virtual DbSet<TmpAudit> TmpAudits { get; set; }

    public virtual DbSet<TmpDataDeAdesao> TmpDataDeAdesaos { get; set; }

    public virtual DbSet<TmpDataDeAdesaoAudit> TmpDataDeAdesaoAudits { get; set; }

    public virtual DbSet<TmpDataUltimaRetiradaAmostra> TmpDataUltimaRetiradaAmostras { get; set; }

    public virtual DbSet<TmpDataUltimaRetiradaAmostraaudit> TmpDataUltimaRetiradaAmostraaudits { get; set; }

    public virtual DbSet<TmpDeletar> TmpDeletars { get; set; }

    public virtual DbSet<TmpDeletar10Dup> TmpDeletar10Dups { get; set; }

    public virtual DbSet<TmpDeletar10DupAudit> TmpDeletar10DupAudits { get; set; }

    public virtual DbSet<TmpDeletarAudit> TmpDeletarAudits { get; set; }

    public virtual DbSet<TmpDropoutsaudit> TmpDropoutsaudits { get; set; }

    public virtual DbSet<TmpDuplicidadeVoucher> TmpDuplicidadeVouchers { get; set; }

    public virtual DbSet<TmpDuplicidadeVouchersAudit> TmpDuplicidadeVouchersAudits { get; set; }

    public virtual DbSet<TmpEnrolled> TmpEnrolleds { get; set; }

    public virtual DbSet<TmpEnrolledaudit> TmpEnrolledaudits { get; set; }

    public virtual DbSet<TmpEntradaLocal> TmpEntradaLocals { get; set; }

    public virtual DbSet<TmpEntradaLocalaudit> TmpEntradaLocalaudits { get; set; }

    public virtual DbSet<TmpEntradaPausa> TmpEntradaPausas { get; set; }

    public virtual DbSet<TmpEntradaPausaaudit> TmpEntradaPausaaudits { get; set; }

    public virtual DbSet<TmpFinalPacientesEmFrente> TmpFinalPacientesEmFrentes { get; set; }

    public virtual DbSet<TmpFinalPacientesEmFrenteAudit> TmpFinalPacientesEmFrenteAudits { get; set; }

    public virtual DbSet<TmpInfusionTeste> TmpInfusionTestes { get; set; }

    public virtual DbSet<TmpInfusionTesteAudit> TmpInfusionTesteAudits { get; set; }

    public virtual DbSet<TmpInfusionTesteInserir> TmpInfusionTesteInserirs { get; set; }

    public virtual DbSet<TmpInfusionTesteInserirAudit> TmpInfusionTesteInserirAudits { get; set; }

    public virtual DbSet<TmpInfuso> TmpInfusoes { get; set; }

    public virtual DbSet<TmpInfusoesCompleto> TmpInfusoesCompletos { get; set; }

    public virtual DbSet<TmpInfusoesCompletoAdd> TmpInfusoesCompletoAdds { get; set; }

    public virtual DbSet<TmpInfusoesCompletoAddaudit> TmpInfusoesCompletoAddaudits { get; set; }

    public virtual DbSet<TmpInfusoesCompletoaudit> TmpInfusoesCompletoaudits { get; set; }

    public virtual DbSet<TmpInfusoesRoll> TmpInfusoesRolls { get; set; }

    public virtual DbSet<TmpInfusoesRollAudit> TmpInfusoesRollAudits { get; set; }

    public virtual DbSet<TmpInfusoesaudit> TmpInfusoesaudits { get; set; }

    public virtual DbSet<TmpKpiInfuso> TmpKpiInfusoes { get; set; }

    public virtual DbSet<TmpKpiInfusoesAudit> TmpKpiInfusoesAudits { get; set; }

    public virtual DbSet<TmpLogisticSchedule> TmpLogisticSchedules { get; set; }

    public virtual DbSet<TmpLogisticScheduleAudit> TmpLogisticScheduleAudits { get; set; }

    public virtual DbSet<TmpMarcarComoIsDeletedNoCare> TmpMarcarComoIsDeletedNoCares { get; set; }

    public virtual DbSet<TmpMarcarComoIsDeletedNoCareAudit> TmpMarcarComoIsDeletedNoCareAudits { get; set; }

    public virtual DbSet<TmpMarcarDeleted> TmpMarcarDeleteds { get; set; }

    public virtual DbSet<TmpMarcarDeleted2> TmpMarcarDeleted2s { get; set; }

    public virtual DbSet<TmpMarcarDeleted2Audit> TmpMarcarDeleted2Audits { get; set; }

    public virtual DbSet<TmpMarcarDeletedAudit> TmpMarcarDeletedAudits { get; set; }

    public virtual DbSet<TmpMedico> TmpMedicos { get; set; }

    public virtual DbSet<TmpMedicosaudit> TmpMedicosaudits { get; set; }

    public virtual DbSet<TmpNaoEncontrado> TmpNaoEncontrados { get; set; }

    public virtual DbSet<TmpNaoEncontradoAudit> TmpNaoEncontradoAudits { get; set; }

    public virtual DbSet<TmpNovo> TmpNovos { get; set; }

    public virtual DbSet<TmpNovosaudit> TmpNovosaudits { get; set; }

    public virtual DbSet<TmpPacienteEnrolled> TmpPacienteEnrolleds { get; set; }

    public virtual DbSet<TmpPacienteEnrolledaudit> TmpPacienteEnrolledaudits { get; set; }

    public virtual DbSet<TmpPacientesAtivosEmFrente> TmpPacientesAtivosEmFrentes { get; set; }

    public virtual DbSet<TmpPacientesAtivosEmFrenteAudit> TmpPacientesAtivosEmFrenteAudits { get; set; }

    public virtual DbSet<TmpPacientesAtivosEmFrenteDado> TmpPacientesAtivosEmFrenteDados { get; set; }

    public virtual DbSet<TmpPacientesAtivosEmFrenteDadosAudit> TmpPacientesAtivosEmFrenteDadosAudits { get; set; }

    public virtual DbSet<TmpPacientesAtivosEmFrenteInfuso> TmpPacientesAtivosEmFrenteInfusoes { get; set; }

    public virtual DbSet<TmpPacientesAtivosEmFrenteInfusoesAudit> TmpPacientesAtivosEmFrenteInfusoesAudits { get; set; }

    public virtual DbSet<TmpPacientesAtivosEmFrenteVisitaAudit> TmpPacientesAtivosEmFrenteVisitaAudits { get; set; }

    public virtual DbSet<TmpPacientesAtivosEmFrenteVisitum> TmpPacientesAtivosEmFrenteVisita { get; set; }

    public virtual DbSet<TmpPacientesBase> TmpPacientesBases { get; set; }

    public virtual DbSet<TmpPacientesBaseaudit> TmpPacientesBaseaudits { get; set; }

    public virtual DbSet<TmpRetention> TmpRetentions { get; set; }

    public virtual DbSet<TmpRetentionaudit> TmpRetentionaudits { get; set; }

    public virtual DbSet<TmpRetorno> TmpRetornos { get; set; }

    public virtual DbSet<TmpRetorno2> TmpRetorno2s { get; set; }

    public virtual DbSet<TmpRetorno2Audit> TmpRetorno2Audits { get; set; }

    public virtual DbSet<TmpRetornoAudit> TmpRetornoAudits { get; set; }

    public virtual DbSet<TmpSaidaLocal> TmpSaidaLocals { get; set; }

    public virtual DbSet<TmpSaidaLocalaudit> TmpSaidaLocalaudits { get; set; }

    public virtual DbSet<TmpSaidaPausa> TmpSaidaPausas { get; set; }

    public virtual DbSet<TmpSaidaPausaaudit> TmpSaidaPausaaudits { get; set; }

    public virtual DbSet<TmpScheduleHierarquiaAudit> TmpScheduleHierarquiaAudits { get; set; }

    public virtual DbSet<TmpScheduleHierarquium> TmpScheduleHierarquia { get; set; }

    public virtual DbSet<TmpSemana> TmpSemanas { get; set; }

    public virtual DbSet<TmpSemanaAudit> TmpSemanaAudits { get; set; }

    public virtual DbSet<TmpTotalInfusion> TmpTotalInfusions { get; set; }

    public virtual DbSet<TmpTotalInfusionsaudit> TmpTotalInfusionsaudits { get; set; }

    public virtual DbSet<TmpUltimaEntradaaudit> TmpUltimaEntradaaudits { get; set; }

    public virtual DbSet<TmpUltimaEntradum> TmpUltimaEntrada { get; set; }

    public virtual DbSet<TmpValidar> TmpValidars { get; set; }

    public virtual DbSet<TmpValidarAudit> TmpValidarAudits { get; set; }

    public virtual DbSet<TmpVial> TmpVials { get; set; }

    public virtual DbSet<TmpVialsaudit> TmpVialsaudits { get; set; }

    public virtual DbSet<TmpVoucher> TmpVouchers { get; set; }

    public virtual DbSet<TmpVoucheraudit> TmpVoucheraudits { get; set; }

    public virtual DbSet<Tracking> Trackings { get; set; }

    public virtual DbSet<TrackingAudit> TrackingAudits { get; set; }

    public virtual DbSet<TrainingRecord> TrainingRecords { get; set; }

    public virtual DbSet<TrainingRecordAudit> TrainingRecordAudits { get; set; }

    public virtual DbSet<Treatment> Treatments { get; set; }

    public virtual DbSet<TreatmentAddress> TreatmentAddresses { get; set; }

    public virtual DbSet<TreatmentAddressAudit> TreatmentAddressAudits { get; set; }

    public virtual DbSet<TreatmentAndDiagnosticAction> TreatmentAndDiagnosticActions { get; set; }

    public virtual DbSet<TreatmentAndDiagnosticActionAudit> TreatmentAndDiagnosticActionAudits { get; set; }

    public virtual DbSet<TreatmentAttendance> TreatmentAttendances { get; set; }

    public virtual DbSet<TreatmentAttendanceAudit> TreatmentAttendanceAudits { get; set; }

    public virtual DbSet<TreatmentAudit> TreatmentAudits { get; set; }

    public virtual DbSet<TreatmentBillingAudit> TreatmentBillingAudits { get; set; }

    public virtual DbSet<TreatmentBkp05112021> TreatmentBkp05112021s { get; set; }

    public virtual DbSet<TreatmentBkp05112021audit> TreatmentBkp05112021audits { get; set; }

    public virtual DbSet<TreatmentCustomDataAudit> TreatmentCustomDataAudits { get; set; }

    public virtual DbSet<TreatmentCustomData> TreatmentCustomData { get; set; }

    public virtual DbSet<TreatmentHistory> TreatmentHistories { get; set; }

    public virtual DbSet<TreatmentHistoryAudit> TreatmentHistoryAudits { get; set; }

    public virtual DbSet<TreatmentPayment> TreatmentPayments { get; set; }

    public virtual DbSet<TreatmentPaymentAudit> TreatmentPaymentAudits { get; set; }

    public virtual DbSet<TreatmentReceitadevidaFind> TreatmentReceitadevidaFinds { get; set; }

    public virtual DbSet<TreatmentReceitadevidaFindaudit> TreatmentReceitadevidaFindaudits { get; set; }

    public virtual DbSet<TreatmentSetting> TreatmentSettings { get; set; }

    public virtual DbSet<TreatmentSettingsAudit> TreatmentSettingsAudits { get; set; }

    public virtual DbSet<TreatmentSituation> TreatmentSituations { get; set; }

    public virtual DbSet<TreatmentSituationAudit> TreatmentSituationAudits { get; set; }

    public virtual DbSet<TreatmentStatus> TreatmentStatuses { get; set; }

    public virtual DbSet<TreatmentStatusAudit> TreatmentStatusAudits { get; set; }

    public virtual DbSet<TreatmentStatusDetail> TreatmentStatusDetails { get; set; }

    public virtual DbSet<TreatmentStatusDetailAudit> TreatmentStatusDetailAudits { get; set; }

    public virtual DbSet<TreatmentStatusDetailHealthProgramAudit> TreatmentStatusDetailHealthProgramAudits { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAccessProfileHealthProgram> UserAccessProfileHealthPrograms { get; set; }

    public virtual DbSet<UserAudit> UserAudits { get; set; }

    public virtual DbSet<UserSystemLog> UserSystemLogs { get; set; }

    public virtual DbSet<UserSystemLogAudit> UserSystemLogAudits { get; set; }

    public virtual DbSet<VLogisticsScheduleAudit> VLogisticsScheduleAudits { get; set; }

    public virtual DbSet<VMonitoramentoEnzimai> VMonitoramentoEnzimais { get; set; }

    public virtual DbSet<ValidationResult> ValidationResults { get; set; }

    public virtual DbSet<ValidationResultAudit> ValidationResultAudits { get; set; }

    public virtual DbSet<ViewsEntityMetadatum> ViewsEntityMetadata { get; set; }

    public virtual DbSet<Visit> Visits { get; set; }

    public virtual DbSet<VisitAudit> VisitAudits { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    public virtual DbSet<VoucherAudit> VoucherAudits { get; set; }

    public virtual DbSet<VoucherConfiguration> VoucherConfigurations { get; set; }

    public virtual DbSet<VoucherConfigurationAudit> VoucherConfigurationAudits { get; set; }

    public virtual DbSet<Zzmig> Zzmigs { get; set; }

    public virtual DbSet<ZzmigAudit> ZzmigAudits { get; set; }

    public virtual DbSet<Stock> Stock { get; set; }
    public virtual DbSet<StockAudit> StockAudits { get; set; }


    public virtual DbSet<StockHistory> StockHistory { get; set; }
    public virtual DbSet<StockHistoryAudit> StockHistoryAudit { get; set; }

    public virtual DbSet<UserPasswordHistory> UserPasswordHistorys { get; set; }

    public virtual DbSet<UserPasswordHistoryAudit> UserPasswordHistoryAudits { get; set; }

    public virtual DbSet<Unsubscribe> Unsubscribes { get; set; }

    public virtual DbSet<UrlShortener> UrlShorteners { get; set; }

    public virtual DbSet<UrlShortenerAudit> UrlShortenerAudits { get; set; }

    public virtual DbSet<ClickTracking> ClickTrackings { get; set; }

    public virtual DbSet<ClickTrackingAudit> ClickTrackingAudits { get; set; }

    public virtual DbSet<TemplateConfiguration> TemplateConfigurations { get; set; }

    public virtual DbSet<TemplateConfigurationAudit> TemplateConfigurationAudits { get; set; }


    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //=> optionsBuilder.UseSqlServer("Data Source=10.96.30.7;Initial Catalog=ProfarmaCare_Sanofi; Persist Security Info=True; user id=userprogramas; password=userprogramaspwd; TrustServerCertificate=True;");
        => optionsBuilder.UseSqlServer(_configuration.GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<AccessHistoryAttendance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccessHistoryAttendance");

            entity.ToTable("AccessHistoryAttendance");


            entity.HasIndex(e => e.DetailDifficultyWithAccessStringMapId, "IX_DetailDifficultyWithAccessStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DetailDifficultyWithDocumentsStringMapId, "IX_DetailDifficultyWithDocumentsStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DetailNoDifficultyWithAccessStringMapId, "IX_DetailNoDifficultyWithAccessStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentAccessId, "IX_MedicamentAccessId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentSettingsId, "IX_TreatmentSettingsId").HasFillFactor(90);

            entity.HasIndex(e => e.WaiverDetailStringMapId, "IX_WaiverDetailStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AttemptAccessDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateToStart).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DocumentDeliveredDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentSeparatedDate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.GotAccessDate).HasColumnType("datetime");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NextAttemptAccess).HasColumnType("datetime");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TreatmentStartDate).HasColumnType("datetime");

            entity.HasOne(d => d.DetailDifficultyWithAccessStringMap).WithMany(p => p.AccessHistoryAttendanceDetailDifficultyWithAccessStringMaps)
                .HasForeignKey(d => d.DetailDifficultyWithAccessStringMapId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailDifficultyWithAccessStringMapId");

            entity.HasOne(d => d.DetailDifficultyWithDocumentsStringMap).WithMany(p => p.AccessHistoryAttendanceDetailDifficultyWithDocumentsStringMaps)
                .HasForeignKey(d => d.DetailDifficultyWithDocumentsStringMapId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailDifficultyWithDocumentsStringMapId");

            entity.HasOne(d => d.DetailNoDifficultyWithAccessStringMap).WithMany(p => p.AccessHistoryAttendanceDetailNoDifficultyWithAccessStringMaps)
                .HasForeignKey(d => d.DetailNoDifficultyWithAccessStringMapId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_DetailNoDifficultyWithAccessStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.AccessHistoryAttendances)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.MedicamentAccess).WithMany(p => p.AccessHistoryAttendances)
                .HasForeignKey(d => d.MedicamentAccessId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.MedicamentAccess_MedicamentAccessId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccessHistoryAttendanceStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.AccessHistoryAttendances)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.TreatmentSettings).WithMany(p => p.AccessHistoryAttendances)
                .HasForeignKey(d => d.TreatmentSettingsId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.TreatmentSettings_TreatmentSettingsId");

            entity.HasOne(d => d.WaiverDetailStringMap).WithMany(p => p.AccessHistoryAttendanceWaiverDetailStringMaps)
                .HasForeignKey(d => d.WaiverDetailStringMapId)
                .HasConstraintName("FK_dbo.AccessHistoryAttendance_dbo.StringMap_WaiverDetailStringMapId");
        });

        modelBuilder.Entity<AccessHistoryAttendanceAudit>(entity =>
        {
            entity.ToTable("AccessHistoryAttendanceAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessManner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccessManner");

            entity.ToTable("AccessManner");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccessManners)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccessManner_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AccessMannerAudit>(entity =>
        {
            entity.ToTable("AccessMannerAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessMannerByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccessMannerByProgram");

            entity.ToTable("AccessMannerByProgram");

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Disease).WithMany(p => p.AccessMannerByPrograms)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.AccessMannerByProgram_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.AccessMannerByPrograms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.AccessMannerByProgram_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.AccessMannerByPrograms)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.AccessMannerByProgram_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccessMannerByPrograms)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccessMannerByProgram_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AccessMannerByProgramAudit>(entity =>
        {
            entity.ToTable("AccessMannerByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessOrderByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccessOrderByProgram");

            entity.ToTable("AccessOrderByProgram");

            entity.HasIndex(e => e.AccessMannerByProgramId, "IX_AccessMannerByProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessMannerId, "IX_AccessMannerId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessWayId, "IX_AccessWayId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AccessDocuments).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AccessProcedure).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AccessMannerByProgram).WithMany(p => p.AccessOrderByPrograms)
                .HasForeignKey(d => d.AccessMannerByProgramId)
                .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.AccessMannerByProgram_AccessMannerByProgramId");

            entity.HasOne(d => d.AccessManner).WithMany(p => p.AccessOrderByPrograms)
                .HasForeignKey(d => d.AccessMannerId)
                .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.AccessManner_AccessMannerId");

            entity.HasOne(d => d.AccessWay).WithMany(p => p.AccessOrderByPrograms)
                .HasForeignKey(d => d.AccessWayId)
                .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.AccessWay_AccessWayId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.AccessOrderByPrograms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccessOrderByPrograms)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccessOrderByProgram_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AccessOrderByProgramAudit>(entity =>
        {
            entity.ToTable("AccessOrderByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessProcedureByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccessProcedureByProgram");

            entity.ToTable("AccessProcedureByProgram");

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Documents).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.Procedure).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.Disease).WithMany(p => p.AccessProcedureByPrograms)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.AccessProcedureByProgram_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.AccessProcedureByPrograms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.AccessProcedureByProgram_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.AccessProcedureByPrograms)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.AccessProcedureByProgram_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccessProcedureByPrograms)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccessProcedureByProgram_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AccessProcedureByProgramAccountAudit>(entity =>
        {
            entity.ToTable("AccessProcedureByProgramAccountAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessProcedureByProgramAudit>(entity =>
        {
            entity.ToTable("AccessProcedureByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccessProfile");

            entity.ToTable("AccessProfile");

            entity.HasIndex(e => e.AccessProfileTypeStringMapId, "IX_AccessProfileTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AccessProfileTypeStringMap).WithMany(p => p.AccessProfileAccessProfileTypeStringMaps)
                .HasForeignKey(d => d.AccessProfileTypeStringMapId)
                .HasConstraintName("FK_dbo.AccessProfile_dbo.StringMap_AccessProfileTypeStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.AccessProfiles)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.AccessProfile_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccessProfileStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccessProfile_dbo.StringMap_StatusCodeStringMapId");

            entity.HasMany(d => d.Users).WithMany(p => p.AccessProfiles)
                .UsingEntity<Dictionary<string, object>>(
                    "AccessProfileUser",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.AccessProfileUser_dbo.User_UserId"),
                    l => l.HasOne<AccessProfile>().WithMany()
                        .HasForeignKey("AccessProfileId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.AccessProfileUser_dbo.AccessProfile_AccessProfileId"),
                    j =>
                    {
                        j.HasKey("AccessProfileId", "UserId").HasName("PK_dbo.AccessProfileUser");
                        j.ToTable("AccessProfileUser");
                        j.HasIndex(new[] { "AccessProfileId" }, "IX_AccessProfileId").HasFillFactor(90);
                        j.HasIndex(new[] { "UserId" }, "IX_UserId").HasFillFactor(90);
                    });
        });

        //modelBuilder.Entity<AccessProfileUser>(entity =>
        //{
        //    entity.ToTable("AccessProfileUser");
        //    entity.Property(e => e.AccessProfileId);
        //    entity.Property(e => e.UserId);
        //    entity.HasMany()
        //});

        modelBuilder.Entity<AccessProfileAudit>(entity =>
        {
            entity.ToTable("AccessProfileAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessProfileUserAudit>(entity =>
        {
            entity.ToTable("AccessProfileUserAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessRightEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccessRightEntity");

            entity.ToTable("AccessRightEntity");

            entity.HasIndex(e => e.AccessProfileId, "IX_AccessProfileId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AccessProfile).WithMany(p => p.AccessRightEntities)
                .HasForeignKey(d => d.AccessProfileId)
                .HasConstraintName("FK_dbo.AccessRightEntity_dbo.AccessProfile_AccessProfileId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccessRightEntities)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccessRightEntity_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AccessRightEntityAudit>(entity =>
        {
            entity.ToTable("AccessRightEntityAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccessWay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccessWay");

            entity.ToTable("AccessWay");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccessWays)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccessWay_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AccessWayAudit>(entity =>
        {
            entity.ToTable("AccessWayAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Account");

            entity.ToTable("Account");

            entity.HasIndex(e => e.AccessCoverageAreaStringMapId, "IX_AccessCoverageAreaStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessMannerId, "IX_AccessMannerId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessWayId, "IX_AccessWayId").HasFillFactor(90);

            entity.HasIndex(e => e.AccountTypeStringMapId, "IX_AccountTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ClinicPublicOrPrivateStringMapId, "IX_ClinicPublicOrPrivateStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ClinicTypeStringMapId, "IX_ClinicTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorResponsableId, "IX_DoctorResponsableId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessional_Id").HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_NC_ACCOUNT_1");

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.Custom3StringMapId, "IX_Custom3StringMapId");

            entity.HasIndex(e => e.Custom4StringMapId, "IX_Custom4StringMapId");

            entity.HasIndex(e => e.Custom5StringMapId, "IX_Custom5StringMapId");

            entity.HasIndex(e => e.Custom6StringMapId, "IX_Custom6StringMapId");

            entity.HasIndex(e => e.Custom7StringMapId, "IX_Custom7StringMapId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AccessObservation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressReference).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Ansnumber).HasColumnName("ANSNumber");
            entity.Property(e => e.Cnpj)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CNPJ");
            entity.Property(e => e.CompanyName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.HealthProfessionalId).HasColumnName("HealthProfessional_Id");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Latitude).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Longitude).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MobilePhone).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Site).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StateRegistration).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TelephoneFax).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CustomString1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString4).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString5).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString6).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString7).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime3).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime4).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime5).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime6).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime7).HasColumnType("datetime");

            entity.Property(e => e.CustomBoolean1);
            entity.Property(e => e.CustomBoolean2);
            entity.Property(e => e.CustomBoolean3);
            entity.Property(e => e.CustomBoolean4);
            entity.Property(e => e.CustomBoolean5);
            entity.Property(e => e.CustomBoolean6);
            entity.Property(e => e.CustomBoolean7);

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.AccountCustom1StringMaps)
            .HasForeignKey(d => d.Custom1StringMapId)
            .HasConstraintName("FK_dbo.Account_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.AccountCustom2StringMaps)
            .HasForeignKey(d => d.Custom2StringMapId)
            .HasConstraintName("FK_dbo.Account_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.Custom3StringMap).WithMany(p => p.AccountCustom3StringMaps)
            .HasForeignKey(d => d.Custom3StringMapId)
            .HasConstraintName("FK_dbo.Account_dbo.StringMap_Custom3StringMapId");

            entity.HasOne(d => d.Custom4StringMap).WithMany(p => p.AccountCustom4StringMaps)
            .HasForeignKey(d => d.Custom4StringMapId)
            .HasConstraintName("FK_dbo.Account_dbo.StringMap_Custom4StringMapId");

            entity.HasOne(d => d.Custom5StringMap).WithMany(p => p.AccountCustom5StringMaps)
            .HasForeignKey(d => d.Custom5StringMapId)
            .HasConstraintName("FK_dbo.Account_dbo.StringMap_Custom5StringMapId");

            entity.HasOne(d => d.Custom6StringMap).WithMany(p => p.AccountCustom6StringMaps)
            .HasForeignKey(d => d.Custom6StringMapId)
            .HasConstraintName("FK_dbo.Account_dbo.StringMap_Custom6StringMapId");

            entity.HasOne(d => d.Custom7StringMap).WithMany(p => p.AccountCustom7StringMaps)
            .HasForeignKey(d => d.Custom7StringMapId)
            .HasConstraintName("FK_dbo.Account_dbo.StringMap_Custom7StringMapId");

            entity.HasOne(d => d.AccessCoverageAreaStringMap).WithMany(p => p.AccountAccessCoverageAreaStringMaps)
                .HasForeignKey(d => d.AccessCoverageAreaStringMapId)
                .HasConstraintName("FK_dbo.Account_dbo.StringMap_AccessCoverageAreaStringMapId");

            entity.HasOne(d => d.AccessManner).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.AccessMannerId)
                .HasConstraintName("FK_dbo.Account_dbo.AccessManner_AccessMannerId");

            entity.HasOne(d => d.AccessWay).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.AccessWayId)
                .HasConstraintName("FK_dbo.Account_dbo.AccessWay_AccessWayId");

            entity.HasOne(d => d.AccountTypeStringMap).WithMany(p => p.AccountAccountTypeStringMaps)
                .HasForeignKey(d => d.AccountTypeStringMapId)
                .HasConstraintName("FK_dbo.Account_dbo.StringMap_AccountTypeStringMapId");

            entity.HasOne(d => d.ClinicPublicOrPrivateStringMap).WithMany(p => p.AccountClinicPublicOrPrivateStringMaps)
                .HasForeignKey(d => d.ClinicPublicOrPrivateStringMapId)
                .HasConstraintName("FK_dbo.Account_dbo.StringMap_ClinicPublicOrPrivateStringMapId");

            entity.HasOne(d => d.ClinicTypeStringMap).WithMany(p => p.AccountClinicTypeStringMaps)
                .HasForeignKey(d => d.ClinicTypeStringMapId)
                .HasConstraintName("FK_dbo.Account_dbo.StringMap_ClinicTypeStringMapId");

            entity.HasOne(d => d.DoctorResponsable).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.DoctorResponsableId)
                .HasConstraintName("FK_dbo.Account_dbo.Doctor_DoctorResponsableId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.Account_dbo.HealthProfessional_HealthProfessional_Id");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.Account_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccountStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Account_dbo.StringMap_StatusCodeStringMapId");

            entity.HasMany(d => d.AccessProcedureByPrograms).WithMany(p => p.Accounts)
                .UsingEntity<Dictionary<string, object>>(
                    "AccessProcedureByProgramAccount",
                    r => r.HasOne<AccessProcedureByProgram>().WithMany()
                        .HasForeignKey("AccessProcedureByProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.AccessProcedureByProgramAccount_dbo.AccessProcedureByProgram_AccessProcedureByProgramId"),
                    l => l.HasOne<Account>().WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.AccessProcedureByProgramAccount_dbo.Account_AccountId"),
                    j =>
                    {
                        j.HasKey("AccountId", "AccessProcedureByProgramId").HasName("PK_dbo.AccessProcedureByProgramAccount");
                        j.ToTable("AccessProcedureByProgramAccount");
                        j.HasIndex(new[] { "AccessProcedureByProgramId" }, "IX_AccessProcedureByProgramId").HasFillFactor(90);
                        j.HasIndex(new[] { "AccountId" }, "IX_AccountId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<AccountAudit>(entity =>
        {
            entity.ToTable("AccountAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccountBkp1904>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Account_BKP_19_04");

            entity.Property(e => e.AccessObservation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressReference).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Ansnumber).HasColumnName("ANSNumber");
            entity.Property(e => e.Cnpj)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CNPJ");
            entity.Property(e => e.CompanyName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.HealthProfessionalId).HasColumnName("HealthProfessional_Id");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Latitude).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Longitude).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MobilePhone).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Site).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StateRegistration).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TelephoneFax).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<AccountBkp1904audit>(entity =>
        {
            entity.ToTable("Account_BKP_19_04Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccountCoverageArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccountCoverageArea");

            entity.ToTable("AccountCoverageArea");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountCoverageAreas)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.AccountCoverageArea_dbo.Account_AccountId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccountCoverageAreas)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccountCoverageArea_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AccountCoverageAreaAudit>(entity =>
        {
            entity.ToTable("AccountCoverageAreaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccountExamTypeByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccountExamTypeByProgram");

            entity.ToTable("AccountExamTypeByProgram");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.Account).WithMany(p => p.AccountExamTypeByPrograms)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.AccountExamTypeByProgram_dbo.Account_AccountId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.AccountExamTypeByPrograms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.AccountExamTypeByProgram_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccountExamTypeByPrograms)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccountExamTypeByProgram_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AccountExamTypeByProgramAudit>(entity =>
        {
            entity.ToTable("AccountExamTypeByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccountInternalDemand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccountInternalDemand");

            entity.ToTable("AccountInternalDemand");

            entity.HasIndex(e => e.AccountSettingsByProgramId, "IX_AccountSettingsByProgram_Id");

            entity.HasIndex(e => e.ValidationResultId, "IX_ValidationResult_Id");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AccountSettingsByProgramId).HasColumnName("AccountSettingsByProgram_Id");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ValidationResultId).HasColumnName("ValidationResult_Id");

            entity.HasOne(d => d.AccountSettingsByProgram).WithMany(p => p.AccountInternalDemands)
                .HasForeignKey(d => d.AccountSettingsByProgramId)
                .HasConstraintName("FK_dbo.AccountInternalDemand_dbo.AccountSettingsByProgram_AccountSettingsByProgram_Id");

            entity.HasOne(d => d.ValidationResult).WithMany(p => p.AccountInternalDemands)
                .HasForeignKey(d => d.ValidationResultId)
                .HasConstraintName("FK_dbo.AccountInternalDemand_dbo.ValidationResult_ValidationResult_Id");
        });

        modelBuilder.Entity<AccountInternalDemandAudit>(entity =>
        {
            entity.ToTable("AccountInternalDemandAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccountSettingsByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccountSettingsByProgram");

            entity.ToTable("AccountSettingsByProgram");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.AccountStatusStringMapId, "IX_AccountStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorByProgramId, "IX_DoctorByProgramId");

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamTypeStringMapId, "IX_ExamTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientTypeStringMapId, "IX_PatientTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.Custom3StringMapId, "IX_Custom3StringMapId");

            entity.HasIndex(e => e.Custom4StringMapId, "IX_Custom4StringMapId");

            entity.HasIndex(e => e.Custom5StringMapId, "IX_Custom5StringMapId");

            entity.HasIndex(e => e.Custom6StringMapId, "IX_Custom6StringMapId");

            entity.HasIndex(e => e.Custom7StringMapId, "IX_Custom7StringMapId");

            entity.HasIndex(e => e.SystemUserId, "IX_SystemUserId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AndKm).HasColumnName("AndKM");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.BetweenKm).HasColumnName("BetweenKM");
            entity.Property(e => e.BetweenKmvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BetweenKMValue");
            entity.Property(e => e.Cnpj).HasColumnName("CNPJ");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.MakesIt).HasColumnName("MakesIT");
            entity.Property(e => e.MakesOt).HasColumnName("MakesOT");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OutsideCoverageAreaAboveKm).HasColumnName("OutsideCoverageAreaAboveKM");
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.UntilKm).HasColumnName("UntilKM");
            entity.Property(e => e.UntilKmvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("UntilKMValue");

            entity.Property(e => e.CustomString1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString4).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString5).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString6).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString7).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime3).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime4).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime5).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime6).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime7).HasColumnType("datetime");

            entity.Property(e => e.CustomBoolean1);
            entity.Property(e => e.CustomBoolean2);
            entity.Property(e => e.CustomBoolean3);
            entity.Property(e => e.CustomBoolean4);
            entity.Property(e => e.CustomBoolean5);
            entity.Property(e => e.CustomBoolean6);
            entity.Property(e => e.CustomBoolean7);

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.AccountSettingsByProgramCustom1StringMaps)
            .HasForeignKey(d => d.Custom1StringMapId)
            .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.AccountSettingsByProgramCustom2StringMaps)
            .HasForeignKey(d => d.Custom2StringMapId)
            .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.Custom3StringMap).WithMany(p => p.AccountSettingsByProgramCustom3StringMaps)
            .HasForeignKey(d => d.Custom3StringMapId)
            .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_Custom3StringMapId");

            entity.HasOne(d => d.Custom4StringMap).WithMany(p => p.AccountSettingsByProgramCustom4StringMaps)
            .HasForeignKey(d => d.Custom4StringMapId)
            .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_Custom4StringMapId");

            entity.HasOne(d => d.Custom5StringMap).WithMany(p => p.AccountSettingsByProgramCustom5StringMaps)
            .HasForeignKey(d => d.Custom5StringMapId)
            .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_Custom5StringMapId");

            entity.HasOne(d => d.Custom6StringMap).WithMany(p => p.AccountSettingsByProgramCustom6StringMaps)
            .HasForeignKey(d => d.Custom6StringMapId)
            .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_Custom6StringMapId");

            entity.HasOne(d => d.Custom7StringMap).WithMany(p => p.AccountSettingsByProgramCustom7StringMaps)
            .HasForeignKey(d => d.Custom7StringMapId)
            .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_Custom7StringMapId");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountSettingsByPrograms)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.Account_AccountId");

            entity.HasOne(d => d.AccountStatusStringMap).WithMany(p => p.AccountSettingsByProgramAccountStatusStringMaps)
                .HasForeignKey(d => d.AccountStatusStringMapId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_AccountStatusStringMapId");

            entity.HasOne(d => d.Disease).WithMany(p => p.AccountSettingsByPrograms)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.DoctorByProgram).WithMany(p => p.AccountSettingsByPrograms)
                .HasForeignKey(d => d.DoctorByProgramId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.DoctorByProgram_DoctorByProgramId");

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.AccountSettingsByPrograms)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.ExamTypeStringMap).WithMany(p => p.AccountSettingsByProgramExamTypeStringMaps)
                .HasForeignKey(d => d.ExamTypeStringMapId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_ExamTypeStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.AccountSettingsByPrograms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.AccountSettingsByPrograms)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.PatientTypeStringMap).WithMany(p => p.AccountSettingsByProgramPatientTypeStringMaps)
                .HasForeignKey(d => d.PatientTypeStringMapId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_PatientTypeStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AccountSettingsByProgramStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.SystemUser).WithMany(p => p.AccountSettingsByPrograms)
                .HasForeignKey(d => d.SystemUserId)
                .HasConstraintName("FK_dbo.AccountSettingsByProgram_dbo.User_SystemUserId");
        });

        modelBuilder.Entity<AccountSettingsByProgramAudit>(entity =>
        {
            entity.ToTable("AccountSettingsByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AccountSettingsByProgramBkp190422>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccountSettingsByProgram_BKP_19_04_22");

            entity.Property(e => e.AndKm).HasColumnName("AndKM");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.BetweenKm).HasColumnName("BetweenKM");
            entity.Property(e => e.BetweenKmvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BetweenKMValue");
            entity.Property(e => e.Cnpj).HasColumnName("CNPJ");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.MakesIt).HasColumnName("MakesIT");
            entity.Property(e => e.MakesOt).HasColumnName("MakesOT");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OutsideCoverageAreaAboveKm).HasColumnName("OutsideCoverageAreaAboveKM");
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.UntilKm).HasColumnName("UntilKM");
            entity.Property(e => e.UntilKmvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("UntilKMValue");
        });

        modelBuilder.Entity<AccountSettingsByProgramBkp190422audit>(entity =>
        {
            entity.ToTable("AccountSettingsByProgram_BKP_19_04_22Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ActionCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ActionCategory");

            entity.ToTable("ActionCategory");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ActionColorHex).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.ActionCategories)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.ActionCategory_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ActionCategories)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ActionCategory_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<ActionCategoryAudit>(entity =>
        {
            entity.ToTable("ActionCategoryAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ActionConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ActionConfiguration");

            entity.ToTable("ActionConfiguration");

            entity.HasIndex(e => e.ActionCategoryId, "IX_ActionCategoryId").HasFillFactor(90);

            entity.HasIndex(e => e.ActionOwnerStringMapId, "IX_ActionOwnerStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ProgramId, "IX_ProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ActionCode)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ActionColorHex).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.BaseDateField).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SourceEntityName)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SourceEntityTypeCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.ActionCategory).WithMany(p => p.ActionConfigurations)
                .HasForeignKey(d => d.ActionCategoryId)
                .HasConstraintName("FK_dbo.ActionConfiguration_dbo.ActionCategory_ActionCategoryId");

            entity.HasOne(d => d.ActionOwnerStringMap).WithMany(p => p.ActionConfigurationActionOwnerStringMaps)
                .HasForeignKey(d => d.ActionOwnerStringMapId)
                .HasConstraintName("FK_dbo.ActionConfiguration_dbo.StringMap_ActionOwnerStringMapId");

            entity.HasOne(d => d.Program).WithMany(p => p.ActionConfigurations)
                .HasForeignKey(d => d.ProgramId)
                .HasConstraintName("FK_dbo.ActionConfiguration_dbo.HealthProgram_ProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ActionConfigurationStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ActionConfiguration_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<ActionConfigurationAudit>(entity =>
        {
            entity.ToTable("ActionConfigurationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ActionRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ActionRule");

            entity.ToTable("ActionRule");

            entity.HasIndex(e => e.ActionConfigurationId, "IX_ActionConfigurationId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.ActionConfiguration).WithMany(p => p.ActionRules)
                .HasForeignKey(d => d.ActionConfigurationId)
                .HasConstraintName("FK_dbo.ActionRule_dbo.ActionConfiguration_ActionConfigurationId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.ActionRules)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.ActionRule_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ActionRules)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ActionRule_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<ActionRuleAudit>(entity =>
        {
            entity.ToTable("ActionRuleAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AdhesionAttendance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AdhesionAttendance");

            entity.ToTable("AdhesionAttendance");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.DetailDifficultyWithAccessStringMapId, "IX_DetailDifficultyWithAccessStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.FrequencyStringMapId, "IX_FrequencyStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentCompetitorId, "IX_MedicamentCompetitorId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicationNonadherenceReasonId, "IX_MedicationNonadherenceReasonId").HasFillFactor(90);

            entity.HasIndex(e => e.CreatedByName, "IX_NC_AdhesionAttendance");

            entity.HasIndex(e => new { e.HasUsed, e.IsDeleted }, "IX_NC_AdhesionAttendance_0");

            entity.HasIndex(e => e.OriginStringMapId, "IX_OriginStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentIntervalStringMapId, "IX_TreatmentIntervalStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentSettingsId, "IX_TreatmentSettingsId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateToStart).HasColumnType("datetime");
            entity.Property(e => e.DateofLastConsultation).HasColumnType("datetime");
            entity.Property(e => e.DateofLastInfusion).HasColumnType("datetime");
            entity.Property(e => e.DateofNextInfusion).HasColumnType("datetime");
            entity.Property(e => e.DateofUse).HasColumnType("datetime");
            entity.Property(e => e.DateoftheNextConsultation).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExpectedDateToReturn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NextDate).HasColumnType("datetime");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TreatmentFinishedDate).HasColumnType("datetime");
            entity.Property(e => e.TreatmentStartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.AdhesionAttendances)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.Account_AccountId");

            entity.HasOne(d => d.DetailDifficultyWithAccessStringMap).WithMany(p => p.AdhesionAttendanceDetailDifficultyWithAccessStringMaps)
                .HasForeignKey(d => d.DetailDifficultyWithAccessStringMapId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_DetailDifficultyWithAccessStringMapId");

            entity.HasOne(d => d.FrequencyStringMap).WithMany(p => p.AdhesionAttendanceFrequencyStringMaps)
                .HasForeignKey(d => d.FrequencyStringMapId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_DosageStringMapId");

            entity.HasOne(d => d.MedicamentCompetitor).WithMany(p => p.AdhesionAttendances)
                .HasForeignKey(d => d.MedicamentCompetitorId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.MedicamentCompetitor_MedicamentCompetitorId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.AdhesionAttendances)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.MedicationNonadherenceReason).WithMany(p => p.AdhesionAttendances)
                .HasForeignKey(d => d.MedicationNonadherenceReasonId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.MedicationNonadherenceReason_MedicationNonadherenceReasonId");

            entity.HasOne(d => d.OriginStringMap).WithMany(p => p.AdhesionAttendanceOriginStringMaps)
                .HasForeignKey(d => d.OriginStringMapId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_OriginStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AdhesionAttendanceStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.AdhesionAttendances)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.TreatmentIntervalStringMap).WithMany(p => p.AdhesionAttendanceTreatmentIntervalStringMaps)
                .HasForeignKey(d => d.TreatmentIntervalStringMapId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.StringMap_TreatmentIntervalStringMapId");

            entity.HasOne(d => d.TreatmentSettings).WithMany(p => p.AdhesionAttendances)
                .HasForeignKey(d => d.TreatmentSettingsId)
                .HasConstraintName("FK_dbo.AdhesionAttendance_dbo.TreatmentSettings_TreatmentSettingsId");
        });

        modelBuilder.Entity<AdhesionAttendanceAudit>(entity =>
        {
            entity.ToTable("AdhesionAttendanceAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AkkaActor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AkkaActors");

            entity.HasIndex(e => new { e.Path, e.IsActive }, "idx_PathIsActive").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.EntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Path).HasMaxLength(150);
        });

        modelBuilder.Entity<AkkaActorsAudit>(entity =>
        {
            entity.ToTable("AkkaActorsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AkkaMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AkkaMessages");

            entity.HasIndex(e => new { e.AkkaActorsId, e.AkkaActorsProgramId, e.EntityMetadataId, e.EntityMetadataIdName }, "idx_ActorProgramEntity").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AkkaActorsIdName)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AkkaActorsProgramIdName)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityMetadataIdName).HasMaxLength(150);
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SourceEntityMetadataIdName)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<AkkaMessagesAudit>(entity =>
        {
            entity.ToTable("AkkaMessagesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AkkaPublishEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AkkaPublishEvents");

            entity.HasIndex(e => e.AkkaActorsId, "IX_AkkaActorsId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AkkaActors).WithMany(p => p.AkkaPublishEvents)
                .HasForeignKey(d => d.AkkaActorsId)
                .HasConstraintName("FK_dbo.AkkaPublishEvents_dbo.AkkaActors_AkkaActorsId");
        });

        modelBuilder.Entity<AkkaPublishEventsAudit>(entity =>
        {
            entity.ToTable("AkkaPublishEventsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AkkaSubscribeEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AkkaSubscribeEvents");

            entity.HasIndex(e => e.AkkaActorsId, "IX_AkkaActorsId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AkkaActors).WithMany(p => p.AkkaSubscribeEvents)
                .HasForeignKey(d => d.AkkaActorsId)
                .HasConstraintName("FK_dbo.AkkaSubscribeEvents_dbo.AkkaActors_AkkaActorsId");
        });

        modelBuilder.Entity<AkkaSubscribeEventsAudit>(entity =>
        {
            entity.ToTable("AkkaSubscribeEventsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Annotation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Annotation");

            entity.ToTable("Annotation");

            entity.HasIndex(e => e.AnnotationTypeStringMapId, "IX_AnnotationTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NoteText).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.Subject).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Version)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AnnotationTypeStringMap).WithMany(p => p.AnnotationAnnotationTypeStringMaps)
                .HasForeignKey(d => d.AnnotationTypeStringMapId)
                .HasConstraintName("FK_dbo.Annotation_dbo.StringMap_AnnotationTypeStringMapId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.Annotations)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.Annotation_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AnnotationStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Annotation_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AnnotationAudit>(entity =>
        {
            entity.ToTable("AnnotationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetRoles");

            entity.HasIndex(e => e.Name, "RoleNameIndex")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Id).HasMaxLength(128);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRolesAudit>(entity =>
        {
            entity.ToTable("AspNetRolesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetUsers");

            entity.HasIndex(e => e.UserName, "UserNameIndex")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Id).HasMaxLength(128);
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK_dbo.AspNetUserRoles");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_RoleId").HasFillFactor(90);
                        j.HasIndex(new[] { "UserId" }, "IX_UserId").HasFillFactor(90);
                        j.IndexerProperty<string>("UserId").HasMaxLength(128);
                        j.IndexerProperty<string>("RoleId").HasMaxLength(128);
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetUserClaims");

            entity.HasIndex(e => e.UserId, "IX_UserId").HasFillFactor(90);

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
        });

        modelBuilder.Entity<AspNetUserClaimsAudit>(entity =>
        {
            entity.ToTable("AspNetUserClaimsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId }).HasName("PK_dbo.AspNetUserLogins");

            entity.HasIndex(e => e.UserId, "IX_UserId").HasFillFactor(90);

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.ProviderKey).HasMaxLength(128);
            entity.Property(e => e.UserId).HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
        });

        modelBuilder.Entity<AspNetUserLoginsAudit>(entity =>
        {
            entity.ToTable("AspNetUserLoginsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AspNetUserRolesAudit>(entity =>
        {
            entity.ToTable("AspNetUserRolesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AspNetUsersAudit>(entity =>
        {
            entity.ToTable("AspNetUsersAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Attachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Attachment");

            entity.ToTable("Attachment");

            entity.HasIndex(e => e.AnnotationId, "IX_AnnotationId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentBody).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FileName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FileSize).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.MimeType).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Version)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Annotation).WithMany(p => p.Attachments)
                .HasForeignKey(d => d.AnnotationId)
                .HasConstraintName("FK_dbo.Attachment_dbo.Annotation_AnnotationId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.Attachments)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.Attachment_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Attachments)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Attachment_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<AttachmentAudit>(entity =>
        {
            entity.ToTable("AttachmentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AttemptCallLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AttemptCallLog");

            entity.ToTable("AttemptCallLog");

            entity.HasIndex(e => e.DiagnosticId, "IX_DiagnosticId").HasFillFactor(90);

            entity.HasIndex(e => e.PhoneCallId, "IX_PhoneCallId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentAndDiagnosticActionId, "IX_TreatmentAndDiagnosticActionId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.AttemptCallLogs)
                .HasForeignKey(d => d.DiagnosticId)
                .HasConstraintName("FK_dbo.AttemptCallLog_dbo.Diagnostic_DiagnosticId");

            entity.HasOne(d => d.PhoneCall).WithMany(p => p.AttemptCallLogs)
                .HasForeignKey(d => d.PhoneCallId)
                .HasConstraintName("FK_dbo.AttemptCallLog_dbo.PhoneCall_PhoneCallId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.AttemptCallLogs)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.AttemptCallLog_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.TreatmentAndDiagnosticAction).WithMany(p => p.AttemptCallLogs)
                .HasForeignKey(d => d.TreatmentAndDiagnosticActionId)
                .HasConstraintName("FK_dbo.AttemptCallLog_dbo.TreatmentAndDiagnosticAction_TreatmentAndDiagnosticActionId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.AttemptCallLogs)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.AttemptCallLog_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<AttemptCallLogAudit>(entity =>
        {
            entity.ToTable("AttemptCallLogAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<AttributeMetadata>(entity =>
        {
            entity.HasKey(e => e.AttributeMetadataId).HasName("PK_dbo.AttributeMetadata");

            entity.HasIndex(e => e.EntityMetadataId, "IX_EntityMetadataId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EntityMetadataId, e.AttributeName, e.AttributeType }, "idx_AttributeName").HasFillFactor(90);

            entity.Property(e => e.AttributeMetadataId).ValueGeneratedNever();
            entity.Property(e => e.AttributeName).HasMaxLength(50);
            entity.Property(e => e.AttributeType).HasMaxLength(50);
            entity.Property(e => e.InnerTable).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsTextArea).HasColumnName("isTextArea");

            entity.HasOne(d => d.EntityMetadata).WithMany(p => p.AttributeMetadata)
                .HasForeignKey(d => d.EntityMetadataId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AttributeMetadata_dbo.EntityMetadata_EntityMetadataId");
        });

        modelBuilder.Entity<Bank>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Bank");

            entity.ToTable("Bank");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.BankCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Banks)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Bank_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<BankAudit>(entity =>
        {
            entity.ToTable("BankAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<BaseDoctorRepresentative>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BaseDoctorRepresentative");

            entity.Property(e => e.Doctor)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Doenca)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Gerente)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LicenseNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LIcenseNumber");
            entity.Property(e => e.LicenseState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LIcenseState");
            entity.Property(e => e.Representante)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BaseDoctorRepresentativeAudit>(entity =>
        {
            entity.ToTable("BaseDoctorRepresentativeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<BaseTreatment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BASE_TREATMENT");

            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.BirthdateCaregiver).HasColumnName("Birthdate_Caregiver");
            entity.Property(e => e.Cid).HasColumnName("CID");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf).HasColumnName("CPF");
            entity.Property(e => e.CpfCaregiver).HasColumnName("CPF_Caregiver");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Diseaseid).HasColumnName("diseaseid");
            entity.Property(e => e.Doctorid).HasColumnName("doctorid");
            entity.Property(e => e.EmailAddress1Caregiver).HasColumnName("EmailAddress1_Caregiver");
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.FirstNameCaregiver).HasColumnName("FirstName_Caregiver");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.FullNameCaregiver).HasColumnName("FullName_Caregiver");
            entity.Property(e => e.IsDeleted)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("isDeleted");
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.LastNameCaregiver).HasColumnName("LastName_Caregiver");
            entity.Property(e => e.Mobilephone1Caregiver).HasColumnName("Mobilephone1_Caregiver");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.Pncode).HasColumnName("PNCode");
            entity.Property(e => e.Rg).HasColumnName("RG");
            entity.Property(e => e.Rne).HasColumnName("RNE");
            entity.Property(e => e.SkypeUserCaregiver).HasColumnName("SkypeUser_Caregiver");
            entity.Property(e => e.Statecode).HasColumnName("statecode");
            entity.Property(e => e.SystemTreatmentInativationDate).HasColumnType("datetime");
            entity.Property(e => e.Telephone1Caregiver).HasColumnName("Telephone1_Caregiver");
        });

        modelBuilder.Entity<BaseTreatmentaudit>(entity =>
        {
            entity.ToTable("BASE_TREATMENTAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<BemestarVoucherPendenteLaudo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BEMESTAR_VOUCHER_PENDENTE_LAUDO");

            entity.Property(e => e.CódigoDoPaciente)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Código_do_Paciente");
            entity.Property(e => e.DataProcedimento).HasColumnName("Data_Procedimento");
            entity.Property(e => e.LocalProcedimento)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("Local_Procedimento");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NúmeroVoucherAzimute)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Número_Voucher_Azimute");
            entity.Property(e => e.StatusAtualizado)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Status_atualizado");
            entity.Property(e => e.TipoDeAnálise)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Tipo_de_Análise");
        });

        modelBuilder.Entity<BemestarVoucherPendenteLaudoaudit>(entity =>
        {
            entity.ToTable("BEMESTAR_VOUCHER_PENDENTE_LAUDOAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Benefit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Benefit");

            entity.ToTable("Benefit");

            entity.HasIndex(e => e.BenefitStatusStringMapId, "IX_BenefitStatusStringMapId");

            entity.HasIndex(e => e.BenefitTypeStringMapId, "IX_BenefitTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.DiagnosticId, "IX_DiagnosticId");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.LocalId, "IX_LocalId").HasFillFactor(90);

            entity.HasIndex(e => e.SourceStringMapId, "IX_SourceStringMapId");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.PreviewDate).HasColumnType("datetime");
            entity.Property(e => e.RealizationDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

            entity.HasOne(d => d.BenefitStatusStringMap).WithMany(p => p.BenefitBenefitStatusStringMaps)
                .HasForeignKey(d => d.BenefitStatusStringMapId)
                .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_BenefitStatusStringMapId");

            entity.HasOne(d => d.BenefitTypeStringMap).WithMany(p => p.BenefitBenefitTypeStringMaps)
                .HasForeignKey(d => d.BenefitTypeStringMapId)
                .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_BenefitTypeStringMapId");

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.BenefitCustom1StringMaps)
                .HasForeignKey(d => d.Custom1StringMapId)
                .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.BenefitCustom2StringMaps)
                .HasForeignKey(d => d.Custom2StringMapId)
                .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.Benefits)
                .HasForeignKey(d => d.DiagnosticId)
                .HasConstraintName("FK_dbo.Benefit_dbo.Diagnostic_DiagnosticId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Benefits)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Benefit_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Local).WithMany(p => p.Benefits)
                .HasForeignKey(d => d.LocalId)
                .HasConstraintName("FK_dbo.Benefit_dbo.Account_LocalId");

            entity.HasOne(d => d.SourceStringMap).WithMany(p => p.BenefitSourceStringMaps)
                .HasForeignKey(d => d.SourceStringMapId)
                .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_SourceStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.BenefitStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Benefit_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Benefits)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Benefit_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Benefits)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.Benefit_dbo.Voucher_VoucherId");
        });

        modelBuilder.Entity<BenefitAudit>(entity =>
        {
            entity.ToTable("BenefitAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<BkpEntrenosReativado20200624>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BKP_ENTRENOS_REATIVADO_20200624");

            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.BirthdateCaregiver)
                .HasColumnType("datetime")
                .HasColumnName("Birthdate_Caregiver");
            entity.Property(e => e.Cid).HasColumnName("CID");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("CPF");
            entity.Property(e => e.CpfCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF_Caregiver");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DiagnosticEmailConsentDate).HasColumnType("datetime");
            entity.Property(e => e.DiagnosticPhonecallConsentDate).HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EmailAddress1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("EmailAddress1_Caregiver");
            entity.Property(e => e.EmailAddress2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("FirstName_Caregiver");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("FullName_Caregiver");
            entity.Property(e => e.GotAccessDate).HasColumnType("datetime");
            entity.Property(e => e.HealthInsuranceType).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LastNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LastName_Caregiver");
            entity.Property(e => e.Mobilephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Mobilephone1_Caregiver");
            entity.Property(e => e.Mobilephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PatientDiagnosedDate).HasColumnType("datetime");
            entity.Property(e => e.Pncode).HasColumnName("PNCode");
            entity.Property(e => e.PrescriptionDueDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionValidatedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PrescriptionValidationDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramParticipationConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramParticipationDiagnosticConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.Rne).HasColumnName("RNE");
            entity.Property(e => e.SkypeUser).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SkypeUserCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("SkypeUser_Caregiver");
            entity.Property(e => e.Stature).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SystemAccessStartDate).HasColumnType("datetime");
            entity.Property(e => e.SystemLastContactDate).HasColumnType("datetime");
            entity.Property(e => e.SystemLastSuccessfullContactDate).HasColumnType("datetime");
            entity.Property(e => e.SystemRegistrationEndDate).HasColumnType("datetime");
            entity.Property(e => e.SystemTreatmentInativationDate).HasColumnType("datetime");
            entity.Property(e => e.SystemTreatmentStartDate).HasColumnType("datetime");
            entity.Property(e => e.Telephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Telephone1_Caregiver");
            entity.Property(e => e.Telephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TreatmentStartDate).HasColumnType("datetime");
            entity.Property(e => e.TreatmentStopDate).HasColumnType("datetime");
            entity.Property(e => e.TreatmentTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BkpEntrenosReativado20200624audit>(entity =>
        {
            entity.ToTable("BKP_ENTRENOS_REATIVADO_20200624Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<CadastrosTakedaAudit>(entity =>
        {
            entity.ToTable("CadastrosTakedaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<CadastrosTakedum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AceitaParticiparDoPrograma)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Aceita Participar do Programa?");
            entity.Property(e => e.AceitaReceberEMail)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Aceita receber E-mail?");
            entity.Property(e => e.AceitaReceberLigações)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Aceita receber ligações?");
            entity.Property(e => e.AceitaReceberMateriais)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Aceita receber materiais?");
            entity.Property(e => e.AceiteWhatsApp)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CidadeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade do Paciente");
            entity.Property(e => e.ConsentimentoLgpd)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Consentimento LGPD");
            entity.Property(e => e.ConsentimentoLgpdMedico)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Consentimento LGPD Medico");
            entity.Property(e => e.Consultor)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Crm)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CRM");
            entity.Property(e => e.CódigoDoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Código do Paciente");
            entity.Property(e => e.DataAceitaReceberEMail)
                .HasColumnType("smalldatetime")
                .HasColumnName("data aceita receber E-mail");
            entity.Property(e => e.DataAceitaReceberMateriais)
                .HasColumnType("smalldatetime")
                .HasColumnName("data aceita receber materiais");
            entity.Property(e => e.DataAceiteParticiparDoPrograma)
                .HasColumnType("datetime")
                .HasColumnName("Data aceite participar do programa");
            entity.Property(e => e.DataAceiteReceberLigações)
                .HasColumnType("smalldatetime")
                .HasColumnName("data aceite receber ligações");
            entity.Property(e => e.DataDaInativação)
                .HasColumnType("date")
                .HasColumnName("Data da Inativação");
            entity.Property(e => e.DataDeCadastro)
                .HasColumnType("date")
                .HasColumnName("Data de Cadastro");
            entity.Property(e => e.DataDeNascimento)
                .HasColumnType("date")
                .HasColumnName("Data de Nascimento");
            entity.Property(e => e.DataDoConsentimentoLgpd)
                .HasColumnType("datetime")
                .HasColumnName("Data do Consentimento LGPD");
            entity.Property(e => e.DataDoConsentimentoLgpdMedico)
                .HasColumnType("date")
                .HasColumnName("Data do Consentimento LGPD Medico");
            entity.Property(e => e.DataPrescricao).HasColumnType("date");
            entity.Property(e => e.DetalheDoStatus)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Detalhe do status");
            entity.Property(e => e.Email1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Email2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailMedico1).HasMaxLength(100);
            entity.Property(e => e.EmailMedico2).HasMaxLength(100);
            entity.Property(e => e.EstadoDoPaciente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Estado do paciente");
            entity.Property(e => e.FaixaEtária)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("Faixa Etária");
            entity.Property(e => e.FaseAtual)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Fase Atual");
            entity.Property(e => e.Genero)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gerente)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.GrauDeHemofilia).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Modalidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoDaInativação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo da Inativação");
            entity.Property(e => e.NomeDoMedicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome do medicamento");
            entity.Property(e => e.NomeDoMédico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome do Médico");
            entity.Property(e => e.NomePaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OrigemConsentimento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Origem Consentimento");
            entity.Property(e => e.OrigemConsentimentoMedico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Origem Consentimento Medico");
            entity.Property(e => e.OrigemPaciente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Origem Paciente");
            entity.Property(e => e.Patologia)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Programa)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RegiaoDoPaciente).HasMaxLength(50);
            entity.Property(e => e.SePossuiPrescricao)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SePossuiPrescricaoAnexada)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Situação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Status)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.UfPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UF Paciente");
            entity.Property(e => e.Ufcrm)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UFCRM");
        });

        modelBuilder.Entity<CalendarScheduled>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CalendarScheduled");

            entity.ToTable("CalendarScheduled");

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.ScheduleTypeStringMapStringMapId, "IX_ScheduleTypeStringMap_StringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VisitId, "IX_VisitId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.End).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleTypeStringMapStringMapId).HasColumnName("ScheduleTypeStringMap_StringMapId");
            entity.Property(e => e.Start).HasColumnType("datetime");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.CalendarScheduleds)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.CalendarScheduled_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.ScheduleTypeStringMapStringMap).WithMany(p => p.CalendarScheduledScheduleTypeStringMapStringMaps)
                .HasForeignKey(d => d.ScheduleTypeStringMapStringMapId)
                .HasConstraintName("FK_dbo.CalendarScheduled_dbo.StringMap_ScheduleTypeStringMap_StringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.CalendarScheduledStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.CalendarScheduled_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Visit).WithMany(p => p.CalendarScheduleds)
                .HasForeignKey(d => d.VisitId)
                .HasConstraintName("FK_dbo.CalendarScheduled_dbo.Visit_VisitId");
        });

        modelBuilder.Entity<CalendarScheduledAudit>(entity =>
        {
            entity.ToTable("CalendarScheduledAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Campaign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Campaign");

            entity.ToTable("Campaign");

            entity.HasIndex(e => e.AccountId, "IX_AccountId");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId");

            entity.HasIndex(e => e.StatusStringMapId, "IX_StatusStringMapId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateScheduledEnd).HasColumnType("datetime");
            entity.Property(e => e.DateScheduledStart).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.Account).WithMany(p => p.Campaigns)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Campaign_dbo.Account_AccountId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Campaigns)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Campaign_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.CampaignStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Campaign_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.StatusStringMap).WithMany(p => p.CampaignStatusStringMaps)
                .HasForeignKey(d => d.StatusStringMapId)
                .HasConstraintName("FK_dbo.Campaign_dbo.StringMap_StatusStringMapId");

            entity.HasMany(d => d.HealthProfessionals).WithMany(p => p.Campaigns)
                .UsingEntity<Dictionary<string, object>>(
                    "CampaignHealthProfessional",
                    r => r.HasOne<HealthProfessional>().WithMany()
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.CampaignHealthProfessional_dbo.HealthProfessional_HealthProfessionalId"),
                    l => l.HasOne<Campaign>().WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.CampaignHealthProfessional_dbo.Campaign_CampaignId"),
                    j =>
                    {
                        j.HasKey("CampaignId", "HealthProfessionalId").HasName("PK_dbo.CampaignHealthProfessional");
                        j.ToTable("CampaignHealthProfessional");
                        j.HasIndex(new[] { "CampaignId" }, "IX_CampaignId");
                        j.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId");
                    });
        });

        modelBuilder.Entity<CampaignAudit>(entity =>
        {
            entity.ToTable("CampaignAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<CampaignHealthProfessionalAudit>(entity =>
        {
            entity.ToTable("CampaignHealthProfessionalAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Caregiver>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Caregiver");

            entity.ToTable("Caregiver");

            entity.HasIndex(e => e.CivilStatusStringMapId, "IX_CivilStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.EducationStringMapId, "IX_EducationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderStringMapId, "IX_GenderStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.KinshipStringMapId, "IX_KinshipStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.OccupationId, "IX_OccupationId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress2)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Stature).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Telephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString1)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CivilStatusStringMap).WithMany(p => p.CaregiverCivilStatusStringMaps)
                .HasForeignKey(d => d.CivilStatusStringMapId)
                .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_CivilStatusStringMapId");

            entity.HasOne(d => d.EducationStringMap).WithMany(p => p.CaregiverEducationStringMaps)
                .HasForeignKey(d => d.EducationStringMapId)
                .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_EducationStringMapId");

            entity.HasOne(d => d.GenderStringMap).WithMany(p => p.CaregiverGenderStringMaps)
                .HasForeignKey(d => d.GenderStringMapId)
                .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_GenderStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Caregivers)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Caregiver_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.KinshipStringMap).WithMany(p => p.CaregiverKinshipStringMaps)
                .HasForeignKey(d => d.KinshipStringMapId)
                .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_KinshipStringMapId");

            entity.HasOne(d => d.Occupation).WithMany(p => p.Caregivers)
                .HasForeignKey(d => d.OccupationId)
                .HasConstraintName("FK_dbo.Caregiver_dbo.Occupation_OccupationId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.CaregiverStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Caregiver_dbo.StringMap_StatusCodeStringMapId");

            entity.HasMany(d => d.CaregiverTreatments).WithOne(p => p.Caregiver).HasForeignKey(d => d.CaregiverId);
        });

        modelBuilder.Entity<CaregiverAudit>(entity =>
        {
            entity.ToTable("CaregiverAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<CargaMedicoConsultor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CargaMed__3214EC2751949C76");

            entity.ToTable("CargaMedicoConsultor");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CITY");
            entity.Property(e => e.Consultor)
                .IsRequired()
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CONSULTOR");
            entity.Property(e => e.Crmmedico)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CRMMEDICO");
            entity.Property(e => e.Crmstate)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CRMSTATE");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.LicenseNumber)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medico)
                .IsRequired()
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("MEDICO");
            entity.Property(e => e.State)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("STATE");
            entity.Property(e => e.Usuario)
                .IsRequired()
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("USUARIO");
        });

        modelBuilder.Entity<CargaMedicoConsultorAudit>(entity =>
        {
            entity.ToTable("CargaMedicoConsultorAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Chat");

            entity.ToTable("Chat");

            entity.HasIndex(e => e.ChatTypeStringMapId, "IX_ChatTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.OperatorId, "IX_OperatorId").HasFillFactor(90);

            entity.HasIndex(e => e.OriginRegardingEntityId, "IX_OriginRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ActualEnd).HasColumnType("datetime");
            entity.Property(e => e.ActualStart).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.ChatTypeStringMap).WithMany(p => p.ChatChatTypeStringMaps)
                .HasForeignKey(d => d.ChatTypeStringMapId)
                .HasConstraintName("FK_dbo.Chat_dbo.StringMap_ChatTypeStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Chats)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Chat_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Operator).WithMany(p => p.Chats)
                .HasForeignKey(d => d.OperatorId)
                .HasConstraintName("FK_dbo.Chat_dbo.User_OperatorId");

            entity.HasOne(d => d.OriginRegardingEntity).WithMany(p => p.ChatOriginRegardingEntities)
                .HasForeignKey(d => d.OriginRegardingEntityId)
                .HasConstraintName("FK_dbo.Chat_dbo.RegardingEntity_OriginRegardingEntityId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.ChatRegardingEntities)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.Chat_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ChatStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Chat_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<ChatAudit>(entity =>
        {
            entity.ToTable("ChatAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ChatDialog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ChatDialogs");

            entity.HasIndex(e => e.ChatId, "IX_ChatId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.From).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Message).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.To).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Chat).WithMany(p => p.ChatDialogs)
                .HasForeignKey(d => d.ChatId)
                .HasConstraintName("FK_dbo.ChatDialogs_dbo.Chat_ChatId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.ChatDialogs)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.ChatDialogs_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ChatDialogs)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ChatDialogs_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<ChatDialogsAudit>(entity =>
        {
            entity.ToTable("ChatDialogsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ClinicasImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Clinicas_Import");

            entity.Property(e => e.Cnpj)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNPJ");
            entity.Property(e => e.ColunaIdentity).ValueGeneratedOnAdd();
            entity.Property(e => e.Doenca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOENCA");
            entity.Property(e => e.Procedimento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROCEDIMENTO");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClinicasImport2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Clinicas_Import2");

            entity.Property(e => e.Cnpj)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Doenca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOENCA");
            entity.Property(e => e.Procedimento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROCEDIMENTO");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<ClinicasImport2Audit>(entity =>
        {
            entity.ToTable("Clinicas_Import2Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ClinicasImportAudit>(entity =>
        {
            entity.ToTable("Clinicas_ImportAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ClinicasInfusaoImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Clinicas_Infusao_Import");

            entity.Property(e => e.Cnpj)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNPJ");
            entity.Property(e => e.Doenca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOENCA");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<ClinicasInfusaoImportAudit>(entity =>
        {
            entity.ToTable("Clinicas_Infusao_ImportAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Communication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Communication");

            entity.ToTable("Communication");

            entity.HasIndex(e => e.CommunicationTypeByProgramId, "IX_CommunicationTypeByProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.FromId, "IX_FromId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.OriginRegardingEntityId, "IX_OriginRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ToId, "IX_ToId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Subject).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.CommunicationTypeByProgram).WithMany(p => p.Communications)
                .HasForeignKey(d => d.CommunicationTypeByProgramId)
                .HasConstraintName("FK_dbo.Communication_dbo.CommunicationTypeByProgram_CommunicationTypeByProgramId");

            entity.HasOne(d => d.From).WithMany(p => p.CommunicationFroms)
                .HasForeignKey(d => d.FromId)
                .HasConstraintName("FK_dbo.Communication_dbo.RegardingEntity_FromId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.Communications)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.Communication_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Communications)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Communication_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.OriginRegardingEntity).WithMany(p => p.CommunicationOriginRegardingEntities)
                .HasForeignKey(d => d.OriginRegardingEntityId)
                .HasConstraintName("FK_dbo.Communication_dbo.RegardingEntity_OriginRegardingEntityId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.CommunicationRegardingEntities)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.Communication_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Communications)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Communication_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.To).WithMany(p => p.CommunicationTos)
                .HasForeignKey(d => d.ToId)
                .HasConstraintName("FK_dbo.Communication_dbo.RegardingEntity_ToId");
        });

        modelBuilder.Entity<CommunicationAudit>(entity =>
        {
            entity.ToTable("CommunicationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<CommunicationTypeByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CommunicationTypeByProgram");

            entity.ToTable("CommunicationTypeByProgram");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.CommunicationTypeByPrograms)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.CommunicationTypeByProgram_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<CommunicationTypeByProgramAudit>(entity =>
        {
            entity.ToTable("CommunicationTypeByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<CommunicationTypeByProgramHealthProgramAudit>(entity =>
        {
            entity.ToTable("CommunicationTypeByProgramHealthProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Configuration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Configuration");

            entity.ToTable("Configuration");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Type).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Value).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<ConfigurationAudit>(entity =>
        {
            entity.ToTable("ConfigurationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Contact");

            entity.ToTable("Contact");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1).HasMaxLength(100);
            entity.Property(e => e.EmailAddress2).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.Mobilephone1).HasMaxLength(50);
            entity.Property(e => e.Mobilephone2).HasMaxLength(50);
            entity.Property(e => e.Mobilephone3).HasMaxLength(50);
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser).HasMaxLength(50);
            entity.Property(e => e.Telephone1).HasMaxLength(50);
            entity.Property(e => e.Telephone2).HasMaxLength(50);
            entity.Property(e => e.Telephone3).HasMaxLength(50);

            entity.HasOne(d => d.Account).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.Contact_dbo.Account_AccountId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Contact_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.User).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.Contact_dbo.User_UserId");
        });

        modelBuilder.Entity<ContactAudit>(entity =>
        {
            entity.ToTable("ContactAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<CoverageArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CoverageArea");

            entity.ToTable("CoverageArea");

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.PostalCodeCityId, "IX_PostalCodeCityId").HasFillFactor(90);

            entity.HasIndex(e => e.PostalCodeStateId, "IX_PostalCodeStateId").HasFillFactor(90);

            entity.HasIndex(e => e.PostalcodeEndId, "IX_PostalcodeEndId").HasFillFactor(90);

            entity.HasIndex(e => e.PostalcodeStartId, "IX_PostalcodeStartId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.VipserviceZone).HasColumnName("VIPServiceZone");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.CoverageAreas)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.CoverageArea_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.CoverageAreas)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.CoverageArea_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.PostalCodeCity).WithMany(p => p.CoverageAreas)
                .HasForeignKey(d => d.PostalCodeCityId)
                .HasConstraintName("FK_dbo.CoverageArea_dbo.PostalCodeCity_PostalCodeCityId");

            entity.HasOne(d => d.PostalCodeState).WithMany(p => p.CoverageAreas)
                .HasForeignKey(d => d.PostalCodeStateId)
                .HasConstraintName("FK_dbo.CoverageArea_dbo.PostalCodeState_PostalCodeStateId");

            entity.HasOne(d => d.PostalcodeEnd).WithMany(p => p.CoverageAreaPostalcodeEnds)
                .HasForeignKey(d => d.PostalcodeEndId)
                .HasConstraintName("FK_dbo.CoverageArea_dbo.PostalCodes_PostalcodeEndId");

            entity.HasOne(d => d.PostalcodeStart).WithMany(p => p.CoverageAreaPostalcodeStarts)
                .HasForeignKey(d => d.PostalcodeStartId)
                .HasConstraintName("FK_dbo.CoverageArea_dbo.PostalCodes_PostalcodeStartId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.CoverageAreas)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.CoverageArea_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<CoverageAreaAudit>(entity =>
        {
            entity.ToTable("CoverageAreaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<CustomerAddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerAddress");

            entity.ToTable("CustomerAddress");

            entity.HasIndex(e => e.AddressTypeStringMapId, "IX_AddressTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.CaregiverId, "IX_CaregiverId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AddressTypeStringMap).WithMany(p => p.CustomerAddressAddressTypeStringMaps)
                .HasForeignKey(d => d.AddressTypeStringMapId)
                .HasConstraintName("FK_dbo.CustomerAddress_dbo.StringMap_AddressTypeStringMapId");

            entity.HasOne(d => d.Caregiver).WithMany(p => p.CustomerAddresses)
                .HasForeignKey(d => d.CaregiverId)
                .HasConstraintName("FK_dbo.CustomerAddress_dbo.Caregiver_CaregiverId");

            entity.HasOne(d => d.Patient).WithMany(p => p.CustomerAddresses)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.CustomerAddress_dbo.Patient_PatientId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.CustomerAddressStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.CustomerAddress_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<CustomerAddressAudit>(entity =>
        {
            entity.ToTable("CustomerAddressAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DashboardAstella>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DASHBOARD_ASTELLAS");

            entity.HasIndex(e => e.TableId, "ClusteredIndex-20200507-145503")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.AccessStatus).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CodigoDoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DataLigacao).HasColumnType("datetime");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Fase)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FormaDeAcesso)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Glosas)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.LocalDeAcesso)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OperadoraDeSaude)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PerfilPaciente)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TableId).ValueGeneratedOnAdd();
            entity.Property(e => e.TipoDeAcesso).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Ufmedico)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UFMedico");
        });

        modelBuilder.Entity<DashboardAstellasaudit>(entity =>
        {
            entity.ToTable("DASHBOARD_ASTELLASAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Diagnostic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Diagnostic");

            entity.ToTable("Diagnostic", tb =>
            {
                tb.HasComment("Tabela de diagnósticos ");
                tb.HasTrigger("TR_UpdateFriendlyCodeGilead");
            });

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.AccountSettingsByProgramId, "IX_AccountSettingsByProgramId");

            entity.HasIndex(e => e.AddressTypeStringMapId, "IX_AddressTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.CaregiverId, "IX_CaregiverId").HasFillFactor(90);

            entity.HasIndex(e => e.CategoryOfExamsStringMapId, "IX_CategoryOfExamsStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DiagnosticStatusDetailStringMapId, "IX_DiagnosticStatusDetailStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DiagnosticStatusStringMapId, "IX_DiagnosticStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorPrescriberId, "IX_DoctorPrescriberId");

            entity.HasIndex(e => e.EthnicityStringMapId, "IX_EthnicityStringMapId");

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId").HasFillFactor(90);

            entity.HasIndex(e => e.FridayStringMapId, "IX_FridayStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderStringMapId, "IX_GenderStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthCareProviderId, "IX_HealthCareProviderId");

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.KinshipStringMapId, "IX_KinshipStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.MainContactStringMapId, "IX_MainContactStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicalSpecialtyId, "IX_MedicalSpecialtyId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentCompetitorId, "IX_MedicamentCompetitorId").HasFillFactor(90);

            entity.HasIndex(e => e.MondayStringMapId, "IX_MondayStringMapId").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_DIAGNOSTIC_1");

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_DIAGNOSTIC_20");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_Diagnostic").HasFillFactor(90);

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientSourceStringMapId, "IX_PatientSourceStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PreferredTimeStringMapId, "IX_PreferredTimeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PrescriptionStatusStringMapId, "IX_PrescriptionStatusStringMapId");

            entity.HasIndex(e => e.PreviousMedicamentCompetitorId, "IX_PreviousMedicamentCompetitorId").HasFillFactor(90);

            entity.HasIndex(e => e.SaturdayStringMapId, "IX_SaturdayStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SourceConsentStringMapId, "IX_SourceConsentStringMapId");

            entity.HasIndex(e => e.StageOfDiseaseStringMapId, "IX_StageOfDiseaseStringMapId");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ThursdayStringMapId, "IX_ThursdayStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentLine2StringMapId, "IX_TreatmentLine2StringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentLineStringMapId, "IX_TreatmentLineStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TuesdayStringMapId, "IX_TuesdayStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TypeOfAnalysisStringMapId, "IX_TypeOfAnalysisStringMapId");

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId").HasFillFactor(90);

            entity.HasIndex(e => e.WednesdayStringMapId, "IX_WednesdayStringMapId").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "ix_nc_diagnostic_2").HasFillFactor(90);

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.Custom3StringMapId, "IX_Custom3StringMapId");

            entity.HasIndex(e => e.Custom4StringMapId, "IX_Custom4StringMapId");

            entity.HasIndex(e => e.Custom5StringMapId, "IX_Custom5StringMapId");

            entity.HasIndex(e => e.Custom6StringMapId, "IX_Custom6StringMapId");

            entity.HasIndex(e => e.Custom7StringMapId, "IX_Custom7StringMapId");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasComment("Chave primária da tabela");
            entity.Property(e => e.AccountId).HasComment("Chave estrangeira da tabela Account onde indica qual é o local de tratamento");
            entity.Property(e => e.AddressCity)
                .HasComment("Cidade do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCityPatient).HasColumnName("AddressCity_Patient");
            entity.Property(e => e.AddressComplement)
                .HasComment("Informações complementares do endereço do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry)
                .HasComment("País do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict)
                .HasComment("Bairro do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName)
                .HasComment("Logradouro do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber)
                .HasComment("Número da residência do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode)
                .HasComment("CEP do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState)
                .HasComment("UF da localidade do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressStatePatient).HasColumnName("AddressState_Patient");
            entity.Property(e => e.AddressTypeStringMapId).HasComment("Chave estrangeira da tabela string map para o tipo de endereço");
            entity.Property(e => e.Age).HasComment("Idade do paciente");
            entity.Property(e => e.Birthdate)
                .HasComment("Data de aniversário do paciente")
                .HasColumnType("datetime");
            entity.Property(e => e.BirthdateCaregiver)
                .HasComment("Aniversário do cuidador do paciente")
                .HasColumnType("datetime")
                .HasColumnName("Birthdate_Caregiver");
            entity.Property(e => e.BlockReturnDate).HasColumnType("datetime");
            entity.Property(e => e.CaregiverId).HasComment("Chave estrangeira da tabela Caregiver, que indica qual é o cuidador do paciente");
            entity.Property(e => e.ConsentLgpd).HasColumnName("ConsentLGPD");
            entity.Property(e => e.ConsentLgpddate)
                .HasColumnType("datetime")
                .HasColumnName("ConsentLGPDDate");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .HasComment("CPF do paciente")
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CpfCaregiver)
                .HasComment("CPF do cuidador")
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF_Caregiver");
            entity.Property(e => e.CreatedBy).HasComment("Chave estrangeira da tabela User, indica qual usuário que inseriu o registro no sistema");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .HasComment("Nome do usuário que inseriu o registro no sistema.")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn)
                .HasComment("Data de criação do registro no banco de dados")
                .HasColumnType("datetime");
            entity.Property(e => e.DateLogisticalCollection).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy).HasComment("Chave estrangeira da tabela User, indica qual usuário deletou o registro no sistema");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .HasComment("Nome do usuário que deletou o registro no sistema.")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn)
                .HasComment("Data de inativação do registro no banco de dados")
                .HasColumnType("datetime");
            entity.Property(e => e.DiagnosticStatusDetailStringMapId).HasComment("Chave estrangeira da tabela StringMap, indica qual o SubStatus do tratamento");
            entity.Property(e => e.DiagnosticStatusStringMapId).HasComment("Chave estrangeira da tabela StringMap, indica qual status de andamento do diagnóstico");
            entity.Property(e => e.DiseaseId).HasComment("chave estrangeira da tabela Disease, que indica qual é a doença diagnosticada do paciente");
            entity.Property(e => e.DoctorId).HasComment("chave estrangeira da tabela Doctor, que indica qual médico diagnosticou este paciente");
            entity.Property(e => e.EmailAddress1)
                .HasComment("Endereço de email 1 do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress1Caregiver)
                .HasComment("Endereço de email 1 do cuidador do paciente")
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("EmailAddress1_Caregiver");
            entity.Property(e => e.EmailAddress2).HasComment("Endereço de email 2 do paciente");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName)
                .HasComment("Primeiro nome do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstNameCaregiver)
                .HasComment("Primeiro nome do cuidador do paciente")
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("FirstName_Caregiver");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .HasComment("Codigo alfanumérico de identificação do diagnóstico no sistema")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FromSystem).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FromSystemId).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName)
                .HasComment("Nome completo do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullNameCaregiver)
                .HasComment("Nome completo do cuidador do paciente")
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("FullName_Caregiver");
            entity.Property(e => e.GenderStringMapId).HasComment("Chave estrangeira da tabela StringMap, indica qual o gênero do paciente.");
            entity.Property(e => e.HasOps).HasColumnName("HasOPS");
            entity.Property(e => e.HaveMedicalRequesTofHlab27orMagneticResonance).HasColumnName("HaveMedicalRequesTofHLAB27OrMagneticResonance");
            entity.Property(e => e.HealthProgramId).HasComment("chave estrangeira da tabela HealthProgram, que indica a qual programa o paciente participa");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .HasComment("Codigo alfanumérico de identificação do diagnóstico no sistema, também utilizado para códigos provenientes de importação de dados")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl).HasComment("campo para informações internas.");
            entity.Property(e => e.IsDeleted)
                .HasComment("Campo que indica se o diagnóstico está deletado")
                .HasColumnName("isDeleted");
            entity.Property(e => e.KinshipStringMapId).HasComment("Chave estrangeira da tabela StringMap, indica qual o grau de parentesco entre o cuidador e o paciente.");
            entity.Property(e => e.LastName)
                .HasComment("Ultimo nome do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LastNameCaregiver)
                .HasComment("Ultimo nome do cuidador do paciente")
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LastName_Caregiver");
            entity.Property(e => e.MainContactStringMapId).HasComment("Chave estrangeira da stringmap onde indica se o contato cadastrado é o contato principal");
            entity.Property(e => e.MedicamentCompetitorId).HasComment("Chave estrangeira da tabela MedicamentCompetitor onde indica qual medicamento é utilizado para o tratamento.");
            entity.Property(e => e.Mobilephone1)
                .HasComment("Telefone móvel 1 do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1Caregiver)
                .HasComment("Telefone móvel 1 do cuidador do paciente")
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Mobilephone1_Caregiver");
            entity.Property(e => e.Mobilephone1Observation).HasComment("Telefone móvel de observação 1 do paciente");
            entity.Property(e => e.Mobilephone2).HasComment("Telefone móvel 2 do paciente");
            entity.Property(e => e.Mobilephone2Observation).HasComment("Telefone móvel de observação 2 do paciente");
            entity.Property(e => e.Mobilephone3).HasComment("Telefone móvel 3  do paciente");
            entity.Property(e => e.Mobilephone3Observation).HasComment("Telefone móvel de observação 4 do paciente");
            entity.Property(e => e.ModifiedBy).HasComment("Chave estrangeira da tabela User, indica qual usuário que alterou o registro no sistema");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .HasComment("Nome do usuário que alterou o registro no sistema.")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Data de modificação do registro no banco de dados")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasComment("Campo que indica qual programa o paciente participa")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerId).HasComment("Chave estrangeira da tabela User, indica qual usuário é o dono do registro");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .HasComment("Nome do usuário que é o dono do registro.")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PatientDiagnosedDate).HasColumnType("datetime");
            entity.Property(e => e.PatientId).HasComment("chave estrangeira da tabela Patient, que indica qual paciente está vinculado a este diagnóstido");
            entity.Property(e => e.PatientSourceStringMapId).HasComment("chave estrangeira da tabela StringMap, indica qual meio de contato da operação e o paciente para tratar de assuntos do programa");
            entity.Property(e => e.PreferredTimeStringMapId).HasComment("Chave estrangeira da tabela StringMap onde indica a preferência do paciente para realizar o tratamento.");
            entity.Property(e => e.PrescriptionDueDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionValidationDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramParticipationConsent).HasComment("Campo que atesta o consentimento do paciente a participar do programa");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .HasComment("Campo para detalhar quais os motivos da exclusão do diagnóstico.")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonStateCode).HasComment("Campo para detalhar quais os motivos da inativação do diagnóstico.");
            entity.Property(e => e.ReportReleaseDate).HasColumnType("datetime");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnDateContact).HasColumnType("datetime");
            entity.Property(e => e.Rne)
                .HasComment("Campo para inserir o Registro Nacional Unico, para pacientes de origem estrangeira.")
                .HasColumnName("RNE");
            entity.Property(e => e.SkypeUserCaregiver).HasColumnName("SkypeUser_Caregiver");
            entity.Property(e => e.StateCode).HasComment("Campo que indica se o diagnóstico está ativo.");
            entity.Property(e => e.Stature)
                .HasComment("Campo onde é informado a altura do paciente")
                .HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StatusCodeStringMapId).HasComment("Chave estrangeira da stringmap onde descreve qual o status do diagnóstico.");
            entity.Property(e => e.Telephone1)
                .HasComment("Telefone 1 do paciente")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1Caregiver)
                .HasComment("Telefone 1 do cuidador do paciente")
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Telephone1_Caregiver");
            entity.Property(e => e.Telephone1Observation).HasComment("Telefone de observação 1 do paciente");
            entity.Property(e => e.Telephone2).HasComment("Telefone 2 do paciente");
            entity.Property(e => e.Telephone2Observation).HasComment("Telefone de observação 2 do paciente");
            entity.Property(e => e.Telephone3).HasComment("Telefone 3 do paciente");
            entity.Property(e => e.Telephone3Observation).HasComment("Telefone de observação 3 do paciente");
            entity.Property(e => e.TransitDateToLaboratory).HasColumnType("datetime");
            entity.Property(e => e.Weight)
                .HasComment("Campo onde é informado o peso do paciente")
                .HasColumnType("decimal(18, 2)");

            entity.Property(e => e.CustomString1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString4).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString5).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString6).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString7).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime3).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime4).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime5).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime6).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime7).HasColumnType("datetime");

            entity.Property(e => e.CustomBoolean1);
            entity.Property(e => e.CustomBoolean2);
            entity.Property(e => e.CustomBoolean3);
            entity.Property(e => e.CustomBoolean4);
            entity.Property(e => e.CustomBoolean5);
            entity.Property(e => e.CustomBoolean6);
            entity.Property(e => e.CustomBoolean7);

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.DiagnosticCustom1StringMaps)
            .HasForeignKey(d => d.Custom1StringMapId)
            .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.DiagnosticCustom2StringMaps)
            .HasForeignKey(d => d.Custom2StringMapId)
            .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.Custom3StringMap).WithMany(p => p.DiagnosticCustom3StringMaps)
            .HasForeignKey(d => d.Custom3StringMapId)
            .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_Custom3StringMapId");

            entity.HasOne(d => d.Custom4StringMap).WithMany(p => p.DiagnosticCustom4StringMaps)
            .HasForeignKey(d => d.Custom4StringMapId)
            .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_Custom4StringMapId");

            entity.HasOne(d => d.Custom5StringMap).WithMany(p => p.DiagnosticCustom5StringMaps)
            .HasForeignKey(d => d.Custom5StringMapId)
            .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_Custom5StringMapId");

            entity.HasOne(d => d.Custom6StringMap).WithMany(p => p.DiagnosticCustom6StringMaps)
            .HasForeignKey(d => d.Custom6StringMapId)
            .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_Custom6StringMapId");

            entity.HasOne(d => d.Custom7StringMap).WithMany(p => p.DiagnosticCustom7StringMaps)
            .HasForeignKey(d => d.Custom7StringMapId)
            .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_Custom7StringMapId");

            entity.HasOne(d => d.Account).WithMany(p => p.DiagnosticAccounts)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.Account_AccountId");

            entity.HasOne(d => d.AccountSettingsByProgram).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.AccountSettingsByProgramId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.AccountSettingsByProgram_AccountSettingsByProgramId");

            entity.HasOne(d => d.AddressTypeStringMap).WithMany(p => p.DiagnosticAddressTypeStringMaps)
                .HasForeignKey(d => d.AddressTypeStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_AddressTypeStringMapId");

            entity.HasOne(d => d.Caregiver).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.CaregiverId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.Caregiver_CaregiverId");

            entity.HasOne(d => d.CategoryOfExamsStringMap).WithMany(p => p.DiagnosticCategoryOfExamsStringMaps)
                .HasForeignKey(d => d.CategoryOfExamsStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_CategoryOfExamsStringMapId");

            entity.HasOne(d => d.DiagnosticStatusDetailStringMap).WithMany(p => p.DiagnosticDiagnosticStatusDetailStringMaps)
                .HasForeignKey(d => d.DiagnosticStatusDetailStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_DiagnosticStatusDetailStringMapId");

            entity.HasOne(d => d.DiagnosticStatusStringMap).WithMany(p => p.DiagnosticDiagnosticStatusStringMaps)
                .HasForeignKey(d => d.DiagnosticStatusStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_DiagnosticStatusStringMapId");

            entity.HasOne(d => d.Disease).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.DiagnosticDoctors)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.DoctorPrescriber).WithMany(p => p.DiagnosticDoctorPrescribers)
                .HasForeignKey(d => d.DoctorPrescriberId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.Doctor_DoctorPrescriberId");

            entity.HasOne(d => d.EthnicityStringMap).WithMany(p => p.DiagnosticEthnicityStringMaps)
                .HasForeignKey(d => d.EthnicityStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_EthnicityStringMapId");

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.FridayStringMap).WithMany(p => p.DiagnosticFridayStringMaps)
                .HasForeignKey(d => d.FridayStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_FridayStringMapId");

            entity.HasOne(d => d.GenderStringMap).WithMany(p => p.DiagnosticGenderStringMaps)
                .HasForeignKey(d => d.GenderStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_GenderStringMapId");

            entity.HasOne(d => d.HealthCareProvider).WithMany(p => p.DiagnosticHealthCareProviders)
                .HasForeignKey(d => d.HealthCareProviderId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.Account_HealthCareProviderId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.KinshipStringMap).WithMany(p => p.DiagnosticKinshipStringMaps)
                .HasForeignKey(d => d.KinshipStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_KinshipStringMapId");

            entity.HasOne(d => d.MainContactStringMap).WithMany(p => p.DiagnosticMainContactStringMaps)
                .HasForeignKey(d => d.MainContactStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_MainContactStringMapId");

            entity.HasOne(d => d.MedicalSpecialty).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.MedicalSpecialtyId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.MedicalSpecialty_MedicalSpecialtyId");

            entity.HasOne(d => d.MedicamentCompetitor).WithMany(p => p.DiagnosticMedicamentCompetitors)
                .HasForeignKey(d => d.MedicamentCompetitorId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.MedicamentCompetitor_MedicamentCompetitorId");

            entity.HasOne(d => d.MondayStringMap).WithMany(p => p.DiagnosticMondayStringMaps)
                .HasForeignKey(d => d.MondayStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_MondayStringMapId");

            entity.HasOne(d => d.Patient).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.Patient_PatientId");

            entity.HasOne(d => d.PatientSourceStringMap).WithMany(p => p.DiagnosticPatientSourceStringMaps)
                .HasForeignKey(d => d.PatientSourceStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_PatientSourceStringMapId");

            entity.HasOne(d => d.PreferredTimeStringMap).WithMany(p => p.DiagnosticPreferredTimeStringMaps)
                .HasForeignKey(d => d.PreferredTimeStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_PreferredTimeStringMapId");

            entity.HasOne(d => d.PrescriptionStatusStringMap).WithMany(p => p.DiagnosticPrescriptionStatusStringMaps)
                .HasForeignKey(d => d.PrescriptionStatusStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_PrescriptionStatusStringMapId");

            entity.HasOne(d => d.PreviousMedicamentCompetitor).WithMany(p => p.DiagnosticPreviousMedicamentCompetitors)
                .HasForeignKey(d => d.PreviousMedicamentCompetitorId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId");

            entity.HasOne(d => d.SaturdayStringMap).WithMany(p => p.DiagnosticSaturdayStringMaps)
                .HasForeignKey(d => d.SaturdayStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_SaturdayStringMapId");

            entity.HasOne(d => d.SourceConsentStringMap).WithMany(p => p.DiagnosticSourceConsentStringMaps)
                .HasForeignKey(d => d.SourceConsentStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_SourceConsentStringMapId");

            entity.HasOne(d => d.StageOfDiseaseStringMap).WithMany(p => p.DiagnosticStageOfDiseaseStringMaps)
                .HasForeignKey(d => d.StageOfDiseaseStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_StageOfDiseaseStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.DiagnosticStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.ThursdayStringMap).WithMany(p => p.DiagnosticThursdayStringMaps)
                .HasForeignKey(d => d.ThursdayStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_ThursdayStringMapId");

            entity.HasOne(d => d.TreatmentLine2StringMap).WithMany(p => p.DiagnosticTreatmentLine2StringMaps)
                .HasForeignKey(d => d.TreatmentLine2StringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_TreatmentLine2StringMapId");

            entity.HasOne(d => d.TreatmentLineStringMap).WithMany(p => p.DiagnosticTreatmentLineStringMaps)
                .HasForeignKey(d => d.TreatmentLineStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_TreatmentLineStringMapId");

            entity.HasOne(d => d.TuesdayStringMap).WithMany(p => p.DiagnosticTuesdayStringMaps)
                .HasForeignKey(d => d.TuesdayStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_TuesdayStringMapId");

            entity.HasOne(d => d.TypeOfAnalysisStringMap).WithMany(p => p.DiagnosticTypeOfAnalysisStringMaps)
                .HasForeignKey(d => d.TypeOfAnalysisStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_TypeOfAnalysisStringMapId");

            entity.HasOne(d => d.User).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.User_UserId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Diagnostics)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.Voucher_VoucherId");

            entity.HasOne(d => d.WednesdayStringMap).WithMany(p => p.DiagnosticWednesdayStringMaps)
                .HasForeignKey(d => d.WednesdayStringMapId)
                .HasConstraintName("FK_dbo.Diagnostic_dbo.StringMap_WednesdayStringMapId");
        });

        modelBuilder.Entity<DiagnosticAudit>(entity =>
        {
            entity.ToTable("DiagnosticAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DiagnosticExam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DiagnosticExam");

            entity.ToTable("DiagnosticExam");

            entity.HasIndex(e => e.DiagnosticStatusStringMapId, "IX_DiagnosticStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamTypeStringMapId, "IX_ExamTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.LocalId, "IX_LocalId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RealizationDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

            entity.HasOne(d => d.DiagnosticStatusStringMap).WithMany(p => p.DiagnosticExamDiagnosticStatusStringMaps)
                .HasForeignKey(d => d.DiagnosticStatusStringMapId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.StringMap_DiagnosticStatusStringMapId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.DiagnosticExams)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.DiagnosticExams)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.ExamTypeStringMap).WithMany(p => p.DiagnosticExamExamTypeStringMaps)
                .HasForeignKey(d => d.ExamTypeStringMapId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.StringMap_ExamTypeStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.DiagnosticExams)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Local).WithMany(p => p.DiagnosticExams)
                .HasForeignKey(d => d.LocalId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.Account_LocalId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.DiagnosticExamStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.DiagnosticExams)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.DiagnosticExams)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.DiagnosticExam_dbo.Voucher_VoucherId");
        });

        modelBuilder.Entity<DiagnosticExamAudit>(entity =>
        {
            entity.ToTable("DiagnosticExamAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Disease>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Disease");

            entity.ToTable("Disease");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AccessExam).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Diseases)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Disease_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<DiseaseAudit>(entity =>
        {
            entity.ToTable("DiseaseAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Doctor");

            entity.ToTable("Doctor");

            entity.HasIndex(e => e.ClinicId, "IX_ClinicId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderStringMapId, "IX_GenderStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.LicenseStatusStringMapId, "IX_LicenseStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.LicenseTypeStringMapId, "IX_LicenseTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.FullName, "IX_NC_Doctor").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_DOCTOR_2").HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_NC_DOCTOR_3").HasFillFactor(90);


            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress2)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LicenseNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LicenseState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Observation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Clinic).WithMany(p => p.Doctors)
                .HasForeignKey(d => d.ClinicId)
                .HasConstraintName("FK_dbo.Doctor_dbo.Account_ClinicId");

            entity.HasOne(d => d.GenderStringMap).WithMany(p => p.DoctorGenderStringMaps)
                .HasForeignKey(d => d.GenderStringMapId)
                .HasConstraintName("FK_dbo.Doctor_dbo.StringMap_GenderStringMapId");

            entity.HasOne(d => d.LicenseStatusStringMap).WithMany(p => p.DoctorLicenseStatusStringMaps)
                .HasForeignKey(d => d.LicenseStatusStringMapId)
                .HasConstraintName("FK_dbo.Doctor_dbo.StringMap_LicenseStatusStringMapId");

            entity.HasOne(d => d.LicenseTypeStringMap).WithMany(p => p.DoctorLicenseTypeStringMaps)
                .HasForeignKey(d => d.LicenseTypeStringMapId)
                .HasConstraintName("FK_dbo.Doctor_dbo.StringMap_LicenseTypeStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.DoctorStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Doctor_dbo.StringMap_StatusCodeStringMapId");

            entity.HasMany(d => d.MedicalSpecialties).WithMany(p => p.Doctors)
                .UsingEntity<Dictionary<string, object>>(
                    "DoctorMedicalSpecialty",
                    r => r.HasOne<MedicalSpecialty>().WithMany()
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.DoctorMedicalSpecialty_dbo.MedicalSpecialty_MedicalSpecialtyId"),
                    l => l.HasOne<Doctor>().WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.DoctorMedicalSpecialty_dbo.Doctor_DoctorId"),
                    j =>
                    {
                        j.HasKey("DoctorId", "MedicalSpecialtyId").HasName("PK_dbo.DoctorMedicalSpecialty");
                        j.ToTable("DoctorMedicalSpecialty");
                        j.HasIndex(new[] { "DoctorId" }, "IX_DoctorId").HasFillFactor(90);
                        j.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<DoctorAudit>(entity =>
        {
            entity.ToTable("DoctorAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DoctorByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DoctorByProgram");

            entity.ToTable("DoctorByProgram");

            entity.HasIndex(e => e.AuthorizeSmsstringMapId, "IX_AuthorizeSMSStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.AuthorizeVisitStringMapId, "IX_AuthorizeVisitStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.AuthorizesTitrationofDosageStringMapId, "IX_AuthorizesTitrationofDosageStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ConsultantId, "IX_ConsultantId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.SourceConsentStringMapId, "IX_SourceConsentStringMapId");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SystemUserId, "IX_SystemUserId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AuthorizeSmsstringMapId).HasColumnName("AuthorizeSMSStringMapId");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.ConsentLgpd).HasColumnName("ConsentLGPD");
            entity.Property(e => e.ConsentLgpddate)
                .HasColumnType("datetime")
                .HasColumnName("ConsentLGPDDate");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1).HasMaxLength(100);
            entity.Property(e => e.EmailAddress2).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.Mobilephone1).HasMaxLength(50);
            entity.Property(e => e.Mobilephone2).HasMaxLength(50);
            entity.Property(e => e.Mobilephone3).HasMaxLength(50);
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ProgramParticipationConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramRequestDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.RequestDiagnosticConsentDate).HasColumnType("datetime");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser).HasMaxLength(50);
            entity.Property(e => e.Telephone1).HasMaxLength(50);
            entity.Property(e => e.Telephone2).HasMaxLength(50);
            entity.Property(e => e.Telephone3).HasMaxLength(50);

            entity.HasOne(d => d.AuthorizeSmsstringMap).WithMany(p => p.DoctorByProgramAuthorizeSmsstringMaps)
                .HasForeignKey(d => d.AuthorizeSmsstringMapId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizeSMSStringMapId");

            entity.HasOne(d => d.AuthorizeVisitStringMap).WithMany(p => p.DoctorByProgramAuthorizeVisitStringMaps)
                .HasForeignKey(d => d.AuthorizeVisitStringMapId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizeVisitStringMapId");

            entity.HasOne(d => d.AuthorizesTitrationofDosageStringMap).WithMany(p => p.DoctorByProgramAuthorizesTitrationofDosageStringMaps)
                .HasForeignKey(d => d.AuthorizesTitrationofDosageStringMapId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_AuthorizesTitrationofDosageStringMapId");

            entity.HasOne(d => d.Consultant).WithMany(p => p.DoctorByProgramConsultants)
                .HasForeignKey(d => d.ConsultantId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.User_ConsultantId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.DoctorByPrograms)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.Doctor_Doctor_Id");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.DoctorByPrograms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.SourceConsentStringMap).WithMany(p => p.DoctorByProgramSourceConsentStringMaps)
                .HasForeignKey(d => d.SourceConsentStringMapId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_SourceConsentStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.DoctorByProgramStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.SystemUser).WithMany(p => p.DoctorByProgramSystemUsers)
                .HasForeignKey(d => d.SystemUserId)
                .HasConstraintName("FK_dbo.DoctorByProgram_dbo.User_SystemUserId");

            entity.HasMany(d => d.Accounts).WithMany(p => p.DoctorByPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "DoctorByProgramAccount",
                    r => r.HasOne<Account>().WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.DoctorByProgramAccount_dbo.Account_AccountId"),
                    l => l.HasOne<DoctorByProgram>().WithMany()
                        .HasForeignKey("DoctorByProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.DoctorByProgramAccount_dbo.DoctorByProgram_DoctorByProgramId"),
                    j =>
                    {
                        j.HasKey("DoctorByProgramId", "AccountId").HasName("PK_dbo.DoctorByProgramAccount");
                        j.ToTable("DoctorByProgramAccount");
                        j.HasIndex(new[] { "AccountId" }, "IX_AccountId").HasFillFactor(90);
                        j.HasIndex(new[] { "DoctorByProgramId" }, "IX_DoctorByProgramId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<DoctorByProgramAccountAudit>(entity =>
        {
            entity.ToTable("DoctorByProgramAccountAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DoctorByProgramAudit>(entity =>
        {
            entity.ToTable("DoctorByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DoctorByProgramBkp02122021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DoctorByProgram_bkp02122021");

            entity.Property(e => e.AuthorizeSmsstringMapId).HasColumnName("AuthorizeSMSStringMapId");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.ConsentLgpd).HasColumnName("ConsentLGPD");
            entity.Property(e => e.ConsentLgpddate)
                .HasColumnType("datetime")
                .HasColumnName("ConsentLGPDDate");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1).HasMaxLength(100);
            entity.Property(e => e.EmailAddress2).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.Mobilephone1).HasMaxLength(50);
            entity.Property(e => e.Mobilephone2).HasMaxLength(50);
            entity.Property(e => e.Mobilephone3).HasMaxLength(50);
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ProgramParticipationConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramRequestDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.RequestDiagnosticConsentDate).HasColumnType("datetime");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser).HasMaxLength(50);
            entity.Property(e => e.Telephone1).HasMaxLength(50);
            entity.Property(e => e.Telephone2).HasMaxLength(50);
            entity.Property(e => e.Telephone3).HasMaxLength(50);
        });

        modelBuilder.Entity<DoctorByProgramBkp02122021Audit>(entity =>
        {
            entity.ToTable("DoctorByProgram_bkp02122021Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DoctorByProgramBkp05112021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DoctorByProgram_bkp_05_11_2021");

            entity.Property(e => e.AuthorizeSmsstringMapId).HasColumnName("AuthorizeSMSStringMapId");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.ConsentLgpd).HasColumnName("ConsentLGPD");
            entity.Property(e => e.ConsentLgpddate)
                .HasColumnType("datetime")
                .HasColumnName("ConsentLGPDDate");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1).HasMaxLength(100);
            entity.Property(e => e.EmailAddress2).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.Mobilephone1).HasMaxLength(50);
            entity.Property(e => e.Mobilephone2).HasMaxLength(50);
            entity.Property(e => e.Mobilephone3).HasMaxLength(50);
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ProgramParticipationConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramRequestDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.RequestDiagnosticConsentDate).HasColumnType("datetime");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser).HasMaxLength(50);
            entity.Property(e => e.Telephone1).HasMaxLength(50);
            entity.Property(e => e.Telephone2).HasMaxLength(50);
            entity.Property(e => e.Telephone3).HasMaxLength(50);
        });

        modelBuilder.Entity<DoctorByProgramBkp05112021audit>(entity =>
        {
            entity.ToTable("DoctorByProgram_bkp_05_11_2021Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DoctorByProgramBkp231121>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DoctorByProgram_Bkp231121");

            entity.Property(e => e.AuthorizeSmsstringMapId).HasColumnName("AuthorizeSMSStringMapId");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.ConsentLgpd).HasColumnName("ConsentLGPD");
            entity.Property(e => e.ConsentLgpddate)
                .HasColumnType("datetime")
                .HasColumnName("ConsentLGPDDate");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1).HasMaxLength(100);
            entity.Property(e => e.EmailAddress2).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.Mobilephone1).HasMaxLength(50);
            entity.Property(e => e.Mobilephone2).HasMaxLength(50);
            entity.Property(e => e.Mobilephone3).HasMaxLength(50);
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ProgramParticipationConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramRequestDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.RequestDiagnosticConsentDate).HasColumnType("datetime");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser).HasMaxLength(50);
            entity.Property(e => e.Telephone1).HasMaxLength(50);
            entity.Property(e => e.Telephone2).HasMaxLength(50);
            entity.Property(e => e.Telephone3).HasMaxLength(50);
        });

        modelBuilder.Entity<DoctorByProgramBkp231121Audit>(entity =>
        {
            entity.ToTable("DoctorByProgram_Bkp231121Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DoctorMedicalSpecialtyAudit>(entity =>
        {
            entity.ToTable("DoctorMedicalSpecialtyAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<DoctorsRepresentative>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DoctorsRepresentative");

            entity.ToTable("DoctorsRepresentative");

            entity.HasIndex(e => e.AccountId, "IX_AccountId");

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.ManagerId, "IX_ManagerId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_DoctorsRepresentative").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_DoctorsRepresentative_2").HasFillFactor(90);

            entity.HasIndex(e => e.RepresentativeId, "IX_RepresentativeId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Account).WithMany(p => p.DoctorsRepresentatives)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Account_AccountId");

            entity.HasOne(d => d.Disease).WithMany(p => p.DoctorsRepresentatives)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.DoctorsRepresentatives)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.DoctorsRepresentatives)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Manager).WithMany(p => p.DoctorsRepresentativeManagers)
                .HasForeignKey(d => d.ManagerId)
                .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Representative_ManagerId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.DoctorsRepresentatives)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.Representative).WithMany(p => p.DoctorsRepresentativeRepresentatives)
                .HasForeignKey(d => d.RepresentativeId)
                .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.Representative_RepresentativeId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.DoctorsRepresentatives)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.DoctorsRepresentative_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<DoctorsRepresentativeAudit>(entity =>
        {
            entity.ToTable("DoctorsRepresentativeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ElmahError>(entity =>
        {
            entity.HasKey(e => e.ErrorId).IsClustered(false);

            entity.ToTable("ELMAH_Error");

            entity.HasIndex(e => new { e.Application, e.TimeUtc, e.Sequence }, "IX_ELMAH_Error_App_Time_Seq")
                .IsDescending(false, true, true)
                .HasFillFactor(90);

            entity.Property(e => e.ErrorId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AllXml)
                .IsRequired()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnType("ntext");
            entity.Property(e => e.Application)
                .IsRequired()
                .HasMaxLength(60)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Host)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message)
                .HasMaxLength(500)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Sequence).ValueGeneratedOnAdd();
            entity.Property(e => e.Source)
                .HasMaxLength(60)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TimeUtc).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.User)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<ElmahErrorAudit>(entity =>
        {
            entity.ToTable("ELMAH_ErrorAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Email>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Email");

            entity.ToTable("Email");

            entity.HasIndex(e => e.EmailBoxSettingId, "IX_EmailBoxSettingId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.OriginRegardingEntityId, "IX_OriginRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TemplateId, "IX_TemplateId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Body).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Ccc).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Cco).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastAttempt).HasColumnType("datetime");
            entity.Property(e => e.MessageError).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MimeType).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.SendedOn).HasColumnType("datetime");
            entity.Property(e => e.Subject).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.To).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.EmailBoxSetting).WithMany(p => p.Emails)
                .HasForeignKey(d => d.EmailBoxSettingId)
                .HasConstraintName("FK_dbo.Email_dbo.EmailBoxSetting_EmailBoxSettingId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Emails)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Email_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.OriginRegardingEntity).WithMany(p => p.EmailOriginRegardingEntities)
                .HasForeignKey(d => d.OriginRegardingEntityId)
                .HasConstraintName("FK_dbo.Email_dbo.RegardingEntity_OriginRegardingEntityId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.EmailRegardingEntities)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.Email_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Emails)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Email_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Template).WithMany(p => p.Emails)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_dbo.Email_dbo.Template_TemplateId");
        });

        modelBuilder.Entity<EmailAudit>(entity =>
        {
            entity.ToTable("EmailAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<EmailBoxSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.EmailBoxSetting");

            entity.ToTable("EmailBoxSetting");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Host).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Password).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Smtp).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.EmailBoxSettings)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.EmailBoxSetting_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<EmailBoxSettingAudit>(entity =>
        {
            entity.ToTable("EmailBoxSettingAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<EntityConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.EntityConfiguration");

            entity.ToTable("EntityConfiguration");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.EntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<EntityConfigurationAudit>(entity =>
        {
            entity.ToTable("EntityConfigurationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<EntityMetadata>(entity =>
        {
            entity.HasKey(e => e.EntityMetadataId).HasName("PK_dbo.EntityMetadata");

            entity.HasIndex(e => e.EntityConfigurationId, "IX_EntityConfigurationId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EntityName, e.EntityTypeCode }, "idx_EntityName").HasFillFactor(90);

            entity.Property(e => e.EntityMetadataId).ValueGeneratedNever();
            entity.Property(e => e.EntityAbreviationCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityName).HasMaxLength(50);
            entity.Property(e => e.IconMenu).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.EntityConfiguration).WithMany(p => p.EntityMetadata)
                .HasForeignKey(d => d.EntityConfigurationId)
                .HasConstraintName("FK_dbo.EntityMetadata_dbo.EntityConfiguration_EntityConfiguration_Id");

            entity.HasMany(d => d.MenuMetadata).WithMany(p => p.EntityMetadata)
                .UsingEntity<Dictionary<string, object>>(
                    "MenuMetadataEntityMetadatum",
                    r => r.HasOne<MenuMetadatum>().WithMany()
                        .HasForeignKey("MenuMetadataId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MenuMetadataEntityMetadata_dbo.MenuMetadata_MenuMetadataId"),
                    l => l.HasOne<EntityMetadata>().WithMany()
                        .HasForeignKey("EntityMetadataId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MenuMetadataEntityMetadata_dbo.EntityMetadata_EntityMetadataId"),
                    j =>
                    {
                        j.HasKey("EntityMetadataId", "MenuMetadataId").HasName("PK_dbo.MenuMetadataEntityMetadata");
                        j.ToTable("MenuMetadataEntityMetadata");
                        j.HasIndex(new[] { "EntityMetadataId" }, "IX_EntityMetadataId").HasFillFactor(90);
                        j.HasIndex(new[] { "MenuMetadataId" }, "IX_MenuMetadataId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<Especialidade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Especialidade");

            entity.Property(e => e.Doctorid).HasColumnName("doctorid");
            entity.Property(e => e.Especialidade1)
                .IsUnicode(false)
                .HasColumnName("Especialidade");
            entity.Property(e => e.Healthprogramid).HasColumnName("healthprogramid");
        });

        modelBuilder.Entity<EspecialidadeAudit>(entity =>
        {
            entity.ToTable("EspecialidadeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Exam");

            entity.ToTable("Exam", tb =>
            {
                tb.HasTrigger("TR_ExamStatusHistory");
                tb.HasTrigger("TR_ExamUpdateVoucherIdInLogisticsSchedule");
            });

            entity.HasIndex(e => e.DiagnosticId, "IX_DiagnosticId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamStatusStringMapId, "IX_ExamStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.LocalId, "IX_LocalId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsScheduleId1, "IX_LogisticsScheduleId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsScheduleItemId, "IX_LogisticsScheduleItemId");

            entity.HasIndex(e => e.LogisticsScheduleId, "IX_LogisticsSchedule_Id").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsStuffId, "IX_LogisticsStuffId").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_EXAM_1");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_EXAM_10");

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted, e.StateCode }, "IX_NC_EXAM_11");

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_EXAM_2").HasFillFactor(90);

            entity.HasIndex(e => new { e.IsDeleted, e.StateCode, e.TreatmentId }, "IX_NC_EXAM_3").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_EXAM_5");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_EXAM_7");

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_EXAM_8");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_EXAM_9");

            entity.HasIndex(e => new { e.ExamDefinitionId, e.IsDeleted }, "IX_NC_Exam").HasFillFactor(90);

            entity.HasIndex(e => e.OwnershipLevelStringMapId, "IX_OwnershipLevelStringMapId");

            entity.HasIndex(e => e.ReschedulingReasonStringMapId, "IX_ReschedulingReasonStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ResultStringMapId, "IX_ResultStringMapId");

            entity.HasIndex(e => e.ScheduleSourceStringMapId, "IX_ScheduleSourceStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId").HasFillFactor(90);

            entity.HasIndex(e => e.WithdrawalPreferenceStringMapId, "IX_WithdrawalPreferenceStringMapId").HasFillFactor(90);

            entity.HasIndex(e => new { e.IsDeleted, e.StateCode }, "ix_nc_Exam_4").HasFillFactor(90);

            entity.HasIndex(e => new { e.ExamDefinitionId, e.IsDeleted, e.StateCode }, "ix_nc_exam_6").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ConsentTermReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.ConsentTermValidatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateIssueReport).HasColumnType("datetime");
            entity.Property(e => e.DateOfApproval).HasColumnType("datetime");
            entity.Property(e => e.DateReturnDoctor).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Distance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DueEticket)
                .HasColumnType("datetime")
                .HasColumnName("DueETicket");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Eticket).HasColumnName("ETicket");
            entity.Property(e => e.ExpectedDateToSend).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LogisticsScheduleId).HasColumnName("LogisticsSchedule_Id");
            entity.Property(e => e.LogisticsScheduleId1).HasColumnName("LogisticsScheduleId");
            entity.Property(e => e.MedicationUseDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RealizationDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherValidatedDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.Exams)
                .HasForeignKey(d => d.DiagnosticId)
                .HasConstraintName("FK_dbo.Exam_dbo.Diagnostic_DiagnosticId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Exams)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.Exam_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.Exams)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.Exam_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.ExamStatusStringMap).WithMany(p => p.ExamExamStatusStringMaps)
                .HasForeignKey(d => d.ExamStatusStringMapId)
                .HasConstraintName("FK_dbo.Exam_dbo.StringMap_ExamStatusStringMapId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.Exams)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.Exam_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Exams)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Exam_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Local).WithMany(p => p.Exams)
                .HasForeignKey(d => d.LocalId)
                .HasConstraintName("FK_dbo.Exam_dbo.Account_LocalId");

            entity.HasOne(d => d.LogisticsSchedule).WithMany(p => p.ExamLogisticsSchedules)
                .HasForeignKey(d => d.LogisticsScheduleId)
                .HasConstraintName("FK_dbo.Exam_dbo.LogisticsSchedule_LogisticsSchedule_Id");

            entity.HasOne(d => d.LogisticsScheduleId1Navigation).WithMany(p => p.ExamLogisticsScheduleId1Navigations)
                .HasForeignKey(d => d.LogisticsScheduleId1)
                .HasConstraintName("FK_dbo.Exam_dbo.LogisticsSchedule_LogisticsScheduleId");

            entity.HasOne(d => d.LogisticsScheduleItem).WithMany(p => p.Exams)
                .HasForeignKey(d => d.LogisticsScheduleItemId)
                .HasConstraintName("FK_dbo.Exam_dbo.LogisticsScheduleItem_LogisticsScheduleItemId");

            entity.HasOne(d => d.LogisticsStuff).WithMany(p => p.Exams)
                .HasForeignKey(d => d.LogisticsStuffId)
                .HasConstraintName("FK_dbo.Exam_dbo.LogisticsStuff_LogisticsStuffId");

            entity.HasOne(d => d.OwnershipLevelStringMap).WithMany(p => p.ExamOwnershipLevelStringMaps)
                .HasForeignKey(d => d.OwnershipLevelStringMapId)
                .HasConstraintName("FK_dbo.Exam_dbo.StringMap_OwnershipLevelStringMapId");

            entity.HasOne(d => d.ReschedulingReasonStringMap).WithMany(p => p.ExamReschedulingReasonStringMaps)
                .HasForeignKey(d => d.ReschedulingReasonStringMapId)
                .HasConstraintName("FK_dbo.Exam_dbo.StringMap_ReschedulingReasonStringMapId");

            entity.HasOne(d => d.ResultStringMap).WithMany(p => p.ExamResultStringMaps)
                .HasForeignKey(d => d.ResultStringMapId)
                .HasConstraintName("FK_dbo.Exam_dbo.StringMap_ResultStringMapId");

            entity.HasOne(d => d.ScheduleSourceStringMap).WithMany(p => p.ExamScheduleSourceStringMaps)
                .HasForeignKey(d => d.ScheduleSourceStringMapId)
                .HasConstraintName("FK_dbo.Exam_dbo.StringMap_ScheduleSourceStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ExamStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Exam_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Exams)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Exam_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Exams)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.Exam_dbo.Voucher_VoucherId");

            entity.HasOne(d => d.WithdrawalPreferenceStringMap).WithMany(p => p.ExamWithdrawalPreferenceStringMaps)
                .HasForeignKey(d => d.WithdrawalPreferenceStringMapId)
                .HasConstraintName("FK_dbo.Exam_dbo.StringMap_WithdrawalPreferenceStringMapId");
        });

        modelBuilder.Entity<ExamAudit>(entity =>
        {
            entity.ToTable("ExamAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamBkp190422>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Exam_BKP_19_04_22");

            entity.Property(e => e.ConsentTermReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.ConsentTermValidatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateIssueReport).HasColumnType("datetime");
            entity.Property(e => e.DateOfApproval).HasColumnType("datetime");
            entity.Property(e => e.DateReturnDoctor).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Distance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DueEticket)
                .HasColumnType("datetime")
                .HasColumnName("DueETicket");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Eticket).HasColumnName("ETicket");
            entity.Property(e => e.ExpectedDateToSend).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LogisticsScheduleId).HasColumnName("LogisticsSchedule_Id");
            entity.Property(e => e.LogisticsScheduleId1).HasColumnName("LogisticsScheduleId");
            entity.Property(e => e.MedicationUseDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RealizationDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherValidatedDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ExamBkp190422audit>(entity =>
        {
            entity.ToTable("Exam_BKP_19_04_22Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamBkp3011>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Exam_BKP3011");

            entity.Property(e => e.ConsentTermReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.ConsentTermValidatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateIssueReport).HasColumnType("datetime");
            entity.Property(e => e.DateOfApproval).HasColumnType("datetime");
            entity.Property(e => e.DateReturnDoctor).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Distance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DueEticket)
                .HasColumnType("datetime")
                .HasColumnName("DueETicket");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Eticket).HasColumnName("ETicket");
            entity.Property(e => e.ExpectedDateToSend).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LogisticsScheduleId).HasColumnName("LogisticsSchedule_Id");
            entity.Property(e => e.LogisticsScheduleId1).HasColumnName("LogisticsScheduleId");
            entity.Property(e => e.MedicationUseDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RealizationDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherValidatedDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ExamBkp3011audit>(entity =>
        {
            entity.ToTable("Exam_BKP3011Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamBkpUpdtNivelSerico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("exam_BKP_updt_nivel_serico");

            entity.Property(e => e.ConsentTermReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.ConsentTermValidatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateIssueReport).HasColumnType("datetime");
            entity.Property(e => e.DateOfApproval).HasColumnType("datetime");
            entity.Property(e => e.DateReturnDoctor).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Distance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DueEticket)
                .HasColumnType("datetime")
                .HasColumnName("DueETicket");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Eticket).HasColumnName("ETicket");
            entity.Property(e => e.ExpectedDateToSend).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LogisticsScheduleId).HasColumnName("LogisticsSchedule_Id");
            entity.Property(e => e.LogisticsScheduleId1).HasColumnName("LogisticsScheduleId");
            entity.Property(e => e.MedicationUseDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RealizationDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherValidatedDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ExamBkpUpdtNivelSericoAudit>(entity =>
        {
            entity.ToTable("exam_BKP_updt_nivel_sericoAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamDefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExamDefinition");

            entity.ToTable("ExamDefinition", tb =>
            {
                tb.HasTrigger("INTEGRA_EXAME_GE");
                tb.HasTrigger("INTEGRA_EXAME_GE_UPDATE");
            });

            entity.HasIndex(e => e.ExamTypeStringMapId, "IX_ExamTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.ExamTypeStringMap).WithMany(p => p.ExamDefinitionExamTypeStringMaps)
                .HasForeignKey(d => d.ExamTypeStringMapId)
                .HasConstraintName("FK_dbo.ExamDefinition_dbo.StringMap_ExamTypeStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ExamDefinitionStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ExamDefinition_dbo.StringMap_StatusCodeStringMapId");

            entity.HasMany(d => d.AccountExamTypeByPrograms).WithMany(p => p.ExamDefinitions)
                .UsingEntity<Dictionary<string, object>>(
                    "ExamDefinitionAccountExamTypeByProgram",
                    r => r.HasOne<AccountExamTypeByProgram>().WithMany()
                        .HasForeignKey("AccountExamTypeByProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExamDefinitionAccountExamTypeByProgram_dbo.AccountExamTypeByProgram_AccountExamTypeByProgramId"),
                    l => l.HasOne<ExamDefinition>().WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExamDefinitionAccountExamTypeByProgram_dbo.ExamDefinition_ExamDefinitionId"),
                    j =>
                    {
                        j.HasKey("ExamDefinitionId", "AccountExamTypeByProgramId").HasName("PK_dbo.ExamDefinitionAccountExamTypeByProgram");
                        j.ToTable("ExamDefinitionAccountExamTypeByProgram");
                        j.HasIndex(new[] { "AccountExamTypeByProgramId" }, "IX_AccountExamTypeByProgramId").HasFillFactor(90);
                        j.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.ExamsNavigation).WithMany(p => p.ExamDefinitions)
                .UsingEntity<Dictionary<string, object>>(
                    "ExamDefinitionExam",
                    r => r.HasOne<Exam>().WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExamDefinitionExam_dbo.Exam_ExamId"),
                    l => l.HasOne<ExamDefinition>().WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExamDefinitionExam_dbo.ExamDefinition_ExamDefinitionId"),
                    j =>
                    {
                        j.HasKey("ExamDefinitionId", "ExamId").HasName("PK_dbo.ExamDefinitionExam");
                        j.ToTable("ExamDefinitionExam");
                        j.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId").HasFillFactor(90);
                        j.HasIndex(new[] { "ExamId" }, "IX_ExamId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.VoucherConfigurations).WithMany(p => p.ExamDefinitions)
                .UsingEntity<Dictionary<string, object>>(
                    "ExamDefinitionVoucherConfiguration",
                    r => r.HasOne<VoucherConfiguration>().WithMany()
                        .HasForeignKey("VoucherConfigurationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExamDefinitionVoucherConfiguration_dbo.VoucherConfiguration_VoucherConfigurationId"),
                    l => l.HasOne<ExamDefinition>().WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExamDefinitionVoucherConfiguration_dbo.ExamDefinition_ExamDefinitionId"),
                    j =>
                    {
                        j.HasKey("ExamDefinitionId", "VoucherConfigurationId").HasName("PK_dbo.ExamDefinitionVoucherConfiguration");
                        j.ToTable("ExamDefinitionVoucherConfiguration");
                        j.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId").HasFillFactor(90);
                        j.HasIndex(new[] { "VoucherConfigurationId" }, "IX_VoucherConfigurationId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<ExamDefinitionAccountExamTypeByProgramAudit>(entity =>
        {
            entity.ToTable("ExamDefinitionAccountExamTypeByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamDefinitionAudit>(entity =>
        {
            entity.ToTable("ExamDefinitionAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamDefinitionExamAudit>(entity =>
        {
            entity.ToTable("ExamDefinitionExamAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamDefinitionHealthProgramAudit>(entity =>
        {
            entity.ToTable("ExamDefinitionHealthProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamDefinitionSettingsByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExamDefinitionSettingsByProgram");

            entity.ToTable("ExamDefinitionSettingsByProgram");

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LabManagementLastUpdate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.ExamDefinitionSettingsByPrograms)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.ExamDefinitionSettingsByProgram_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.ExamDefinitionSettingsByPrograms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.ExamDefinitionSettingsByProgram_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ExamDefinitionSettingsByPrograms)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ExamDefinitionSettingsByProgram_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<ExamDefinitionSettingsByProgramAudit>(entity =>
        {
            entity.ToTable("ExamDefinitionSettingsByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamDefinitionVoucherConfigurationAudit>(entity =>
        {
            entity.ToTable("ExamDefinitionVoucherConfigurationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ExamStatusHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ExamStat__3214EC0794EBDA8A");

            entity.ToTable("ExamStatusHistory");

            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Command)
                .IsRequired()
                .HasMaxLength(6)
                .IsFixedLength();
        });

        modelBuilder.Entity<ExamStatusHistoryAudit>(entity =>
        {
            entity.ToTable("ExamStatusHistoryAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Feriado>(entity =>
        {
            entity.HasKey(e => new { e.NrAno, e.NrMes, e.NrDia, e.SgUf }).HasName("Pk_Feriado");

            entity.ToTable("Feriado");

            entity.Property(e => e.NrAno).HasColumnName("Nr_Ano");
            entity.Property(e => e.NrMes).HasColumnName("Nr_Mes");
            entity.Property(e => e.NrDia).HasColumnName("Nr_Dia");
            entity.Property(e => e.SgUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sg_UF");
            entity.Property(e => e.DsFeriado)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Ds_Feriado");
            entity.Property(e => e.TpFeriado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Tp_Feriado");
        });

        modelBuilder.Entity<FeriadoAudit>(entity =>
        {
            entity.ToTable("FeriadoAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProfessional>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.HealthProfessional");

            entity.ToTable("HealthProfessional");

            entity.HasIndex(e => e.BankAccountTypeStringMapId, "IX_BankAccountTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.BankId, "IX_BankId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderStringMapId, "IX_GenderStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HiringTypeStringMapId, "IX_HiringTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.NurseProfessionalTypeStringMapId, "IX_NurseProfessionalTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ProfessionalLicenseTypeStringMapId, "IX_ProfessionalLicenseTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.UserId, "IX_UserId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.BankAccountNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.BankAgencyNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress2)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Latitude).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Longitude).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Pis)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("PIS");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.BankAccountTypeStringMap).WithMany(p => p.HealthProfessionalBankAccountTypeStringMaps)
                .HasForeignKey(d => d.BankAccountTypeStringMapId)
                .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_BankAccountTypeStringMapId");

            entity.HasOne(d => d.Bank).WithMany(p => p.HealthProfessionals)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_dbo.HealthProfessional_dbo.Bank_BankId");

            entity.HasOne(d => d.GenderStringMap).WithMany(p => p.HealthProfessionalGenderStringMaps)
                .HasForeignKey(d => d.GenderStringMapId)
                .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_GenderStringMapId");

            entity.HasOne(d => d.HiringTypeStringMap).WithMany(p => p.HealthProfessionalHiringTypeStringMaps)
                .HasForeignKey(d => d.HiringTypeStringMapId)
                .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_HiringTypeStringMapId");

            entity.HasOne(d => d.NurseProfessionalTypeStringMap).WithMany(p => p.HealthProfessionalNurseProfessionalTypeStringMaps)
                .HasForeignKey(d => d.NurseProfessionalTypeStringMapId)
                .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_NurseProfessionalTypeStringMapId");

            entity.HasOne(d => d.ProfessionalLicenseTypeStringMap).WithMany(p => p.HealthProfessionalProfessionalLicenseTypeStringMaps)
                .HasForeignKey(d => d.ProfessionalLicenseTypeStringMapId)
                .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_ProfessionalLicenseTypeStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.HealthProfessionalStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.HealthProfessional_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.User).WithMany(p => p.HealthProfessionals)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.HealthProfessional_dbo.User_UserId");

            entity.HasMany(d => d.MedicalSpecialties).WithMany(p => p.HealthProfessionals)
                .UsingEntity<Dictionary<string, object>>(
                    "HealthProfessionalMedicalSpecialty",
                    r => r.HasOne<MedicalSpecialty>().WithMany()
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProfessionalMedicalSpecialty_dbo.MedicalSpecialty_HealthProfessionalId"),
                    l => l.HasOne<HealthProfessional>().WithMany()
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProfessionalMedicalSpecialty_dbo.HealthProfessional_MedicalSpecialtyId"),
                    j =>
                    {
                        j.HasKey("HealthProfessionalId", "MedicalSpecialtyId").HasName("PK_dbo.HealthProfessionalMedicalSpecialty");
                        j.ToTable("HealthProfessionalMedicalSpecialty");
                        j.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId").HasFillFactor(90);
                        j.HasIndex(new[] { "MedicalSpecialtyId" }, "IX_MedicalSpecialtyId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<HealthProfessionalAccount>(entity =>
        {
            entity.HasKey(e => new { e.AccountId, e.HealthProfessionalId });

            entity.ToTable("HealthProfessionalAccount");
        });

        modelBuilder.Entity<HealthProfessionalAccountAudit>(entity =>
        {
            entity.ToTable("HealthProfessionalAccountAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProfessionalAudit>(entity =>
        {
            entity.ToTable("HealthProfessionalAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProfessionalByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.HealthProfessionalByProgram");

            entity.ToTable("HealthProfessionalByProgram");

            entity.HasIndex(e => e.ConsultantId, "IX_ConsultantId").HasFillFactor(90);

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.LocalId, "IX_LocalId").HasFillFactor(90);

            entity.HasIndex(e => e.NurceStatusStringMapId, "IX_NurceStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EffectiveDateFinalDocument).HasColumnType("datetime");
            entity.Property(e => e.EffectiveDateInitialDocument).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1).HasMaxLength(100);
            entity.Property(e => e.EmailAddress2).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(200);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.Mobilephone1).HasMaxLength(50);
            entity.Property(e => e.Mobilephone2).HasMaxLength(50);
            entity.Property(e => e.Mobilephone3).HasMaxLength(50);
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser).HasMaxLength(50);
            entity.Property(e => e.Telephone1).HasMaxLength(50);
            entity.Property(e => e.Telephone2).HasMaxLength(50);
            entity.Property(e => e.Telephone3).HasMaxLength(50);
            entity.Property(e => e.ValueAttendance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ValuePerKm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ValuePerKM");

            entity.HasOne(d => d.Consultant).WithMany(p => p.HealthProfessionalByPrograms)
                .HasForeignKey(d => d.ConsultantId)
                .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.User_ConsultantId");

            entity.HasOne(d => d.Disease).WithMany(p => p.HealthProfessionalByPrograms)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.HealthProfessionalByPrograms)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.Local).WithMany(p => p.HealthProfessionalByPrograms)
                .HasForeignKey(d => d.LocalId)
                .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.Account_LocalId");

            entity.HasOne(d => d.NurceStatusStringMap).WithMany(p => p.HealthProfessionalByProgramNurceStatusStringMaps)
                .HasForeignKey(d => d.NurceStatusStringMapId)
                .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.StringMap_NurceStatusStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.HealthProfessionalByProgramStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.HealthProfessionalByProgram_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<HealthProfessionalByProgramAudit>(entity =>
        {
            entity.ToTable("HealthProfessionalByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProfessionalHealthProgramAudit>(entity =>
        {
            entity.ToTable("HealthProfessionalHealthProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProfessionalMedicalSpecialtyAudit>(entity =>
        {
            entity.ToTable("HealthProfessionalMedicalSpecialtyAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.HealthProgram");

            entity.ToTable("HealthProgram", tb => tb.HasTrigger("INTEGRA_PROGRAMA_GE"));

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.AkkaActorsId, "IX_AkkaActorsId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticPartnerId, "IX_LogisticPartnerId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsTypeStringMapId, "IX_LogisticsTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DashBoardPageName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.HasVisitSla).HasColumnName("HasVisitSLA");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NurseDefaultValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.HealthProgramAccounts)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.HealthProgram_dbo.Account_AccountId");

            entity.HasOne(d => d.AkkaActors).WithMany(p => p.HealthPrograms)
                .HasForeignKey(d => d.AkkaActorsId)
                .HasConstraintName("FK_dbo.HealthProgram_dbo.AkkaActors_AkkaActorsId");

            entity.HasOne(d => d.LogisticPartner).WithMany(p => p.HealthProgramLogisticPartners)
                .HasForeignKey(d => d.LogisticPartnerId)
                .HasConstraintName("FK_dbo.HealthProgram_dbo.Account_LogisticPartnerId");

            entity.HasOne(d => d.LogisticsTypeStringMap).WithMany(p => p.HealthProgramLogisticsTypeStringMaps)
                .HasForeignKey(d => d.LogisticsTypeStringMapId)
                .HasConstraintName("FK_dbo.HealthProgram_dbo.StringMap_LogisticsTypeStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.HealthProgramStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.HealthProgram_dbo.StringMap_StatusCodeStringMapId");

            entity.HasMany(d => d.Accounts).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "HealthProgramAccount",
                    r => r.HasOne<Account>().WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProgramAccount_dbo.Account_AccountId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProgramAccount_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "AccountId").HasName("PK_dbo.HealthProgramAccount");
                        j.ToTable("HealthProgramAccount");
                        j.HasIndex(new[] { "AccountId" }, "IX_AccountId").HasFillFactor(90);
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.CommunicationTypeByPrograms).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "CommunicationTypeByProgramHealthProgram",
                    r => r.HasOne<CommunicationTypeByProgram>().WithMany()
                        .HasForeignKey("CommunicationTypeByProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.CommunicationTypeByProgramHealthProgram_dbo.CommunicationTypeByProgram_CommunicationTypeByProgramId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.CommunicationTypeByProgramHealthProgram_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "CommunicationTypeByProgramId").HasName("PK_dbo.CommunicationTypeByProgramHealthProgram");
                        j.ToTable("CommunicationTypeByProgramHealthProgram");
                        j.HasIndex(new[] { "CommunicationTypeByProgramId" }, "IX_CommunicationTypeByProgramId").HasFillFactor(90);
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.ExamDefinitions).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "ExamDefinitionHealthProgram",
                    r => r.HasOne<ExamDefinition>().WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExamDefinitionHealthProgram_dbo.ExamDefinition_ExamDefinitionId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExamDefinitionHealthProgram_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "ExamDefinitionId").HasName("PK_dbo.ExamDefinitionHealthProgram");
                        j.ToTable("ExamDefinitionHealthProgram", tb => tb.HasTrigger("INTEGRA_PROGRAMA_EXAME_GE"));
                        j.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId").HasFillFactor(90);
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.HealthProfessionals).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "HealthProfessionalHealthProgram",
                    r => r.HasOne<HealthProfessional>().WithMany()
                        .HasForeignKey("HealthProfessionalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProfessionalHealthProgram_dbo.HealthProfessional_HealthProfessionalId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProfessionalHealthProgram_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "HealthProfessionalId").HasName("PK_dbo.HealthProfessionalHealthProgram");
                        j.ToTable("HealthProfessionalHealthProgram");
                        j.HasIndex(new[] { "HealthProfessionalId" }, "IX_HealthProfessionalId").HasFillFactor(90);
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.MedicamentCompetitors).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "MedicamentCompetitorHealthProgram",
                    r => r.HasOne<MedicamentCompetitor>().WithMany()
                        .HasForeignKey("MedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentCompetitorHealthProgram_dbo.MedicamentCompetitor_MedicamentCompetitorId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentCompetitorHealthProgram_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "MedicamentCompetitorId").HasName("PK_dbo.MedicamentCompetitorHealthProgram");
                        j.ToTable("MedicamentCompetitorHealthProgram");
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                        j.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.Medicaments).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "HealthProgramMedicament",
                    r => r.HasOne<Medicament>().WithMany()
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProgramMedicament_dbo.Medicament_MedicamentId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProgramMedicament_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "MedicamentId").HasName("PK_dbo.HealthProgramMedicament");
                        j.ToTable("HealthProgramMedicament", tb => tb.HasTrigger("INTEGRA_PROGRAMA_MEDICAMENTO__GE"));
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                        j.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.MedicationNonadherenceReasons).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "MedicationNonadherenceReasonHealthProgram",
                    r => r.HasOne<MedicationNonadherenceReason>().WithMany()
                        .HasForeignKey("MedicationNonadherenceReasonId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicationNonadherenceReasonHealthProgram_dbo.MedicationNonadherenceReason_MedicationNonadherenceReasonId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicationNonadherenceReasonHealthProgram_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "MedicationNonadherenceReasonId").HasName("PK_dbo.MedicationNonadherenceReasonHealthProgram");
                        j.ToTable("MedicationNonadherenceReasonHealthProgram");
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                        j.HasIndex(new[] { "MedicationNonadherenceReasonId" }, "IX_MedicationNonadherenceReasonId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.ServiceTypes).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "HealthProgramServiceType",
                    r => r.HasOne<ServiceType>().WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProgramServiceType_dbo.ServiceType_ServiceTypeId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.HealthProgramServiceType_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "ServiceTypeId").HasName("PK_dbo.HealthProgramServiceType");
                        j.ToTable("HealthProgramServiceType");
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                        j.HasIndex(new[] { "ServiceTypeId" }, "IX_ServiceTypeId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.TreatmentStatusDetails).WithMany(p => p.HealthPrograms)
                .UsingEntity<Dictionary<string, object>>(
                    "TreatmentStatusDetailHealthProgram",
                    r => r.HasOne<TreatmentStatusDetail>().WithMany()
                        .HasForeignKey("TreatmentStatusDetailId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.TreatmentStatusDetailHealthProgram_dbo.TreatmentStatusDetail_TreatmentStatusDetailId"),
                    l => l.HasOne<HealthProgram>().WithMany()
                        .HasForeignKey("HealthProgramId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.TreatmentStatusDetailHealthProgram_dbo.HealthProgram_HealthProgramId"),
                    j =>
                    {
                        j.HasKey("HealthProgramId", "TreatmentStatusDetailId").HasName("PK_dbo.TreatmentStatusDetailHealthProgram");
                        j.ToTable("TreatmentStatusDetailHealthProgram");
                        j.HasIndex(new[] { "HealthProgramId" }, "IX_HealthProgramId").HasFillFactor(90);
                        j.HasIndex(new[] { "TreatmentStatusDetailId" }, "IX_TreatmentStatusDetailId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<HealthProgramAccountAudit>(entity =>
        {
            entity.ToTable("HealthProgramAccountAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgramAccountBkp190422>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HealthProgramAccount_BKP_19_04_22");
        });

        modelBuilder.Entity<HealthProgramAccountBkp190422audit>(entity =>
        {
            entity.ToTable("HealthProgramAccount_BKP_19_04_22Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgramAudit>(entity =>
        {
            entity.ToTable("HealthProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgramDisease>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.HealthProgramDisease");

            entity.ToTable("HealthProgramDisease");

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SuspectDiseaseId, "IX_SuspectDiseaseId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Disease).WithMany(p => p.HealthProgramDiseaseDiseases)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.HealthProgramDisease_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.HealthProgramDiseases)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.HealthProgramDisease_dbo.HealthProgram_HealthProgram_Id");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.HealthProgramDiseases)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.HealthProgramDisease_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.SuspectDisease).WithMany(p => p.HealthProgramDiseaseSuspectDiseases)
                .HasForeignKey(d => d.SuspectDiseaseId)
                .HasConstraintName("FK_dbo.HealthProgramDisease_dbo.Disease_SuspectDiseaseId");
        });

        modelBuilder.Entity<HealthProgramDiseaseAudit>(entity =>
        {
            entity.ToTable("HealthProgramDiseaseAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgramDiseaseExam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.HealthProgramDiseaseExam");

            entity.ToTable("HealthProgramDiseaseExam");

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamTypeStringMapId, "IX_ExamTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramDiseaseId, "IX_HealthProgramDisease_Id").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.HealthProgramDiseaseId).HasColumnName("HealthProgramDisease_Id");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.HealthProgramDiseaseExams)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.HealthProgramDiseaseExam_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.ExamTypeStringMap).WithMany(p => p.HealthProgramDiseaseExamExamTypeStringMaps)
                .HasForeignKey(d => d.ExamTypeStringMapId)
                .HasConstraintName("FK_dbo.HealthProgramDiseaseExam_dbo.StringMap_ExamTypeStringMapId");

            entity.HasOne(d => d.HealthProgramDisease).WithMany(p => p.HealthProgramDiseaseExams)
                .HasForeignKey(d => d.HealthProgramDiseaseId)
                .HasConstraintName("FK_dbo.HealthProgramDiseaseExam_dbo.HealthProgramDisease_HealthProgramDisease_Id");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.HealthProgramDiseaseExamStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.HealthProgramDiseaseExam_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<HealthProgramDiseaseExamAudit>(entity =>
        {
            entity.ToTable("HealthProgramDiseaseExamAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgramExamByEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.HealthProgramExamByEntity");

            entity.ToTable("HealthProgramExamByEntity");

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.HealthProgramExamByEntities)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.HealthProgramExamByEntity_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.HealthProgramExamByEntities)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.HealthProgramExamByEntity_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.HealthProgramExamByEntities)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.HealthProgramExamByEntity_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<HealthProgramExamByEntityAudit>(entity =>
        {
            entity.ToTable("HealthProgramExamByEntityAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgramMedicamentAudit>(entity =>
        {
            entity.ToTable("HealthProgramMedicamentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgramServiceTypeAudit>(entity =>
        {
            entity.ToTable("HealthProgramServiceTypeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HealthProgramTemplateSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.HealthProgramTemplateSetting");

            entity.ToTable("HealthProgramTemplateSetting");

            entity.HasIndex(e => e.EmailBoxSettingId, "IX_EmailBoxSettingId").HasFillFactor(90);

            entity.HasIndex(e => e.EntityMetadataId, "IX_EntityMetadataId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TemplateId, "IX_TemplateId").HasFillFactor(90);

            entity.HasIndex(e => e.TemplateTypeStringMapStringMapId, "IX_TemplateTypeStringMap_StringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AttributeName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Ccc).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TemplateTypeStringMapStringMapId).HasColumnName("TemplateTypeStringMap_StringMapId");
            entity.Property(e => e.To).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.EmailBoxSetting).WithMany(p => p.HealthProgramTemplateSettings)
                .HasForeignKey(d => d.EmailBoxSettingId)
                .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.EmailBoxSetting_EmailBoxSettingId");

            entity.HasOne(d => d.EntityMetadata).WithMany(p => p.HealthProgramTemplateSettings)
                .HasForeignKey(d => d.EntityMetadataId)
                .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.EntityMetadata_EntityMetadataId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.HealthProgramTemplateSettings)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.HealthProgramTemplateSettingStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Template).WithMany(p => p.HealthProgramTemplateSettings)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.Template_TemplateId");

            entity.HasOne(d => d.TemplateTypeStringMapStringMap).WithMany(p => p.HealthProgramTemplateSettingTemplateTypeStringMapStringMaps)
                .HasForeignKey(d => d.TemplateTypeStringMapStringMapId)
                .HasConstraintName("FK_dbo.HealthProgramTemplateSetting_dbo.StringMap_TemplateTypeStringMap_StringMapId");
        });

        modelBuilder.Entity<HealthProgramTemplateSettingAudit>(entity =>
        {
            entity.ToTable("HealthProgramTemplateSettingAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<HemoEnf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("HemoEnf");

            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Enfremeio)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Hemocentro)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Referência)
                .HasMaxLength(7)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IdentityCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IdentityCode");

            entity.ToTable("IdentityCode");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Prefix).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SequentialValue).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Sufix).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<IdentityCodeAudit>(entity =>
        {
            entity.ToTable("IdentityCodeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Incident>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Incident");

            entity.ToTable("Incident");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.AccountTypeStringMapId, "IX_AccountTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ContactTypeStringMapId, "IX_ContactTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.CustomerTypeStringMapId, "IX_CustomerTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.DistributorLogisticId, "IX_DistributorLogisticId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentProductId, "IX_IncidentProductId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentSubjectId, "IX_IncidentSubjectId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentTypeDetailId, "IX_IncidentTypeDetailId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentTypeId, "IX_IncidentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicalSpecialtyId, "IX_MedicalSpecialtyId");

            entity.HasIndex(e => e.OriginStringMapId, "IX_OriginStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.PrescriptionStatusStringMapId, "IX_PrescriptionStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PreviousMedicamentCompetitorId, "IX_PreviousMedicamentCompetitorId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.RepresentativeId, "IX_RepresentativeId").HasFillFactor(90);

            entity.HasIndex(e => e.RequestStatusStringMapId, "IX_RequestStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusStringMapId, "IX_StatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentLineStringMapId, "IX_TreatmentLineStringMapId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressReference).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cnpj)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CNPJ");
            entity.Property(e => e.Code).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Cte).HasColumnName("CTE");
            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.CustomerAccountName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DoctorCpf).HasColumnName("DoctorCPF");
            entity.Property(e => e.EmailAddress1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InformedDateByPartner).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PrescriptionReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionValidationDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RequestDateEnd).HasColumnType("datetime");
            entity.Property(e => e.RequestDateStart).HasColumnType("datetime");
            entity.Property(e => e.Subject).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TelephoneFax).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Account).WithMany(p => p.IncidentAccounts)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.Incident_dbo.Account_AccountId");

            entity.HasOne(d => d.AccountTypeStringMap).WithMany(p => p.IncidentAccountTypeStringMaps)
                .HasForeignKey(d => d.AccountTypeStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_AccountTypeStringMapId");

            entity.HasOne(d => d.ContactTypeStringMap).WithMany(p => p.IncidentContactTypeStringMaps)
                .HasForeignKey(d => d.ContactTypeStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_ContactTypeStringMapId");

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.IncidentCustom1StringMaps)
                .HasForeignKey(d => d.Custom1StringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.IncidentCustom2StringMaps)
                .HasForeignKey(d => d.Custom2StringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.CustomerTypeStringMap).WithMany(p => p.IncidentCustomerTypeStringMaps)
                .HasForeignKey(d => d.CustomerTypeStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_CustomerTypeStringMapId");

            entity.HasOne(d => d.Disease).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.Incident_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.DistributorLogistic).WithMany(p => p.IncidentDistributorLogistics)
                .HasForeignKey(d => d.DistributorLogisticId)
                .HasConstraintName("FK_dbo.Incident_dbo.Account_DistributorLogisticId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.Incident_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Incident_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.IncidentProduct).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.IncidentProductId)
                .HasConstraintName("FK_dbo.Incident_dbo.IncidentProduct_IncidentProductId");

            entity.HasOne(d => d.IncidentSubject).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.IncidentSubjectId)
                .HasConstraintName("FK_dbo.Incident_dbo.IncidentSubject_IncidentSubjectId");

            entity.HasOne(d => d.IncidentTypeDetail).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.IncidentTypeDetailId)
                .HasConstraintName("FK_dbo.Incident_dbo.IncidentTypeDetail_IncidentTypeDetailId");

            entity.HasOne(d => d.IncidentType).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.IncidentTypeId)
                .HasConstraintName("FK_dbo.Incident_dbo.IncidentType_IncidentTypeId");

            entity.HasOne(d => d.MedicalSpecialty).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.MedicalSpecialtyId)
                .HasConstraintName("FK_dbo.Incident_dbo.MedicalSpecialty_MedicalSpecialtyId");

            entity.HasOne(d => d.OriginStringMap).WithMany(p => p.IncidentOriginStringMaps)
                .HasForeignKey(d => d.OriginStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_OriginStringMapId");

            entity.HasOne(d => d.Patient).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.Incident_dbo.Patient_PatientId");

            entity.HasOne(d => d.PrescriptionStatusStringMap).WithMany(p => p.IncidentPrescriptionStatusStringMaps)
                .HasForeignKey(d => d.PrescriptionStatusStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_PrescriptionStatusStringMapId");

            entity.HasOne(d => d.PreviousMedicamentCompetitor).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.PreviousMedicamentCompetitorId)
                .HasConstraintName("FK_dbo.Incident_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.Incident_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.Representative).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.RepresentativeId)
                .HasConstraintName("FK_dbo.Incident_dbo.Representative_RepresentativeId");

            entity.HasOne(d => d.RequestStatusStringMap).WithMany(p => p.IncidentRequestStatusStringMaps)
                .HasForeignKey(d => d.RequestStatusStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_RequestStatusStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.IncidentStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.StatusStringMap).WithMany(p => p.IncidentStatusStringMaps)
                .HasForeignKey(d => d.StatusStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_StatusStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Incident_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.TreatmentLineStringMap).WithMany(p => p.IncidentTreatmentLineStringMaps)
                .HasForeignKey(d => d.TreatmentLineStringMapId)
                .HasConstraintName("FK_dbo.Incident_dbo.StringMap_TreatmentLineStringMapId");
        });

        modelBuilder.Entity<IncidentAudit>(entity =>
        {
            entity.ToTable("IncidentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<IncidentItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IncidentItem");

            entity.ToTable("IncidentItem");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderStringMapId, "IX_GenderStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentId, "IX_IncidentId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsScheduleId, "IX_LogisticsScheduleId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AprovedAccessDate).HasColumnType("datetime");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf).HasColumnName("CPF");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.RequestAccessDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.IncidentItems)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.IncidentItem_dbo.Account_AccountId");

            entity.HasOne(d => d.Disease).WithMany(p => p.IncidentItems)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.IncidentItem_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.IncidentItems)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.IncidentItem_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.GenderStringMap).WithMany(p => p.IncidentItemGenderStringMaps)
                .HasForeignKey(d => d.GenderStringMapId)
                .HasConstraintName("FK_dbo.IncidentItem_dbo.StringMap_GenderStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.IncidentItems)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.IncidentItem_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentItems)
                .HasForeignKey(d => d.IncidentId)
                .HasConstraintName("FK_dbo.IncidentItem_dbo.Incident_IncidentId");

            entity.HasOne(d => d.LogisticsSchedule).WithMany(p => p.IncidentItems)
                .HasForeignKey(d => d.LogisticsScheduleId)
                .HasConstraintName("FK_dbo.IncidentItem_dbo.LogisticsSchedule_LogisticsScheduleId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.IncidentItemStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.IncidentItem_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<IncidentItemAudit>(entity =>
        {
            entity.ToTable("IncidentItemAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<IncidentProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IncidentProduct");

            entity.ToTable("IncidentProduct");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.IncidentProducts)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.IncidentProduct_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.IncidentProducts)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.IncidentProduct_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<IncidentProductAudit>(entity =>
        {
            entity.ToTable("IncidentProductAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<IncidentSubject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IncidentSubject");

            entity.ToTable("IncidentSubject");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.IncidentSubjects)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.IncidentSubject_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.IncidentSubjects)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.IncidentSubject_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<IncidentSubjectAudit>(entity =>
        {
            entity.ToTable("IncidentSubjectAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<IncidentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IncidentType");

            entity.ToTable("IncidentType");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.IncidentTypes)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.IncidentType_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<IncidentTypeAudit>(entity =>
        {
            entity.ToTable("IncidentTypeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<IncidentTypeDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IncidentTypeDetail");

            entity.ToTable("IncidentTypeDetail");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.IncidentTypeDetails)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.IncidentTypeDetail_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<IncidentTypeDetailAudit>(entity =>
        {
            entity.ToTable("IncidentTypeDetailAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<IncidentTypeDetailProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IncidentTypeDetailProgram");

            entity.ToTable("IncidentTypeDetailProgram");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentProductId, "IX_IncidentProductId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentSubjectId, "IX_IncidentSubjectId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentTypeDetailId, "IX_IncidentTypeDetailId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentTypeId, "IX_IncidentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.IncidentTypeDetailPrograms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.IncidentProduct).WithMany(p => p.IncidentTypeDetailPrograms)
                .HasForeignKey(d => d.IncidentProductId)
                .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.IncidentProduct_IncidentProductId");

            entity.HasOne(d => d.IncidentSubject).WithMany(p => p.IncidentTypeDetailPrograms)
                .HasForeignKey(d => d.IncidentSubjectId)
                .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.IncidentSubject_IncidentSubjectId");

            entity.HasOne(d => d.IncidentTypeDetail).WithMany(p => p.IncidentTypeDetailPrograms)
                .HasForeignKey(d => d.IncidentTypeDetailId)
                .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.IncidentTypeDetail_IncidentTypeDetailId");

            entity.HasOne(d => d.IncidentType).WithMany(p => p.IncidentTypeDetailPrograms)
                .HasForeignKey(d => d.IncidentTypeId)
                .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.IncidentType_IncidentTypeId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.IncidentTypeDetailPrograms)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.IncidentTypeDetailProgram_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<IncidentTypeDetailProgramAudit>(entity =>
        {
            entity.ToTable("IncidentTypeDetailProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<IndexViewsEntityMetadatum>(entity =>
        {
            entity.HasKey(e => e.IndexViewsEntityMetadataId).HasName("PK_dbo.IndexViewsEntityMetadata");

            entity.HasIndex(e => e.EntityMetadataId, "IX_EntityMetadataId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EntityMetadataId, e.AttributeMetadataId, e.ProgramId }, "idx_EntityAttributieProgram").HasFillFactor(90);

            entity.Property(e => e.IndexViewsEntityMetadataId).ValueGeneratedNever();
            entity.Property(e => e.AttributeMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Criteria).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.EntityMetadata).WithMany(p => p.IndexViewsEntityMetadata)
                .HasForeignKey(d => d.EntityMetadataId)
                .HasConstraintName("FK_dbo.IndexViewsEntityMetadata_dbo.EntityMetadata_EntityMetadataId");
        });

        modelBuilder.Entity<InformationCollect>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.InformationCollect");

            entity.ToTable("InformationCollect");

            entity.HasIndex(e => e.CollectionDiagnosisStringMapId, "IX_CollectionDiagnosisStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.PlaceOfCollectionStringMapId, "IX_PlaceOfCollectionStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VisitId, "IX_VisitId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateandTimeCollect).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.CollectionDiagnosisStringMap).WithMany(p => p.InformationCollectCollectionDiagnosisStringMaps)
                .HasForeignKey(d => d.CollectionDiagnosisStringMapId)
                .HasConstraintName("FK_dbo.InformationCollect_dbo.StringMap_CollectionDiagnosisStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.InformationCollects)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.InformationCollect_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.PlaceOfCollectionStringMap).WithMany(p => p.InformationCollectPlaceOfCollectionStringMaps)
                .HasForeignKey(d => d.PlaceOfCollectionStringMapId)
                .HasConstraintName("FK_dbo.InformationCollect_dbo.StringMap_PlaceOfCollectionStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.InformationCollectStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.InformationCollect_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Visit).WithMany(p => p.InformationCollects)
                .HasForeignKey(d => d.VisitId)
                .HasConstraintName("FK_dbo.InformationCollect_dbo.Visit_VisitId");
        });

        modelBuilder.Entity<InformationCollectAudit>(entity =>
        {
            entity.ToTable("InformationCollectAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<InformationVisit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.InformationVisit");

            entity.ToTable("InformationVisit");

            entity.HasIndex(e => e.AbsenceJustificationStringMapId, "IX_AbsenceJustificationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VisitId, "IX_VisitId").HasFillFactor(90);

            entity.HasIndex(e => e.VisitStatusStringMapId, "IX_VisitStatusStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DepartureDateandTimeVisit).HasColumnType("datetime");
            entity.Property(e => e.EntryDateandTimeVisit).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.TotalkmTraveled).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AbsenceJustificationStringMap).WithMany(p => p.InformationVisitAbsenceJustificationStringMaps)
                .HasForeignKey(d => d.AbsenceJustificationStringMapId)
                .HasConstraintName("FK_dbo.InformationVisit_dbo.StringMap_AbsenceJustificationStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.InformationVisitStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.InformationVisit_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Visit).WithMany(p => p.InformationVisits)
                .HasForeignKey(d => d.VisitId)
                .HasConstraintName("FK_dbo.InformationVisit_dbo.Visit_VisitId");

            entity.HasOne(d => d.VisitStatusStringMap).WithMany(p => p.InformationVisitVisitStatusStringMaps)
                .HasForeignKey(d => d.VisitStatusStringMapId)
                .HasConstraintName("FK_dbo.InformationVisit_dbo.StringMap_VisitStatusStringMapId");
        });

        modelBuilder.Entity<InformationVisitAudit>(entity =>
        {
            entity.ToTable("InformationVisitAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Infusion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Infusion");

            entity.ToTable("Infusion", tb => tb.HasTrigger("tr_InfusaoRealizada"));

            entity.HasIndex(e => e.AccountableHealthProfessionalId, "IX_AccountableHealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.ApplicationTypeStringMapId, "IX_ApplicationTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionDispatchNumberStringMapId, "IX_InfusionDispatchNumberStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionPlaceProfessionalId, "IX_InfusionPlaceProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionPlaceTypeStringMapId, "IX_InfusionPlaceTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionStatusStringMapId, "IX_InfusionStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionTypeStringMapId, "IX_InfusionTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionTypeStringMapId, "IX_InfusionTypeStringMapId_2").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionWeekStringMapId, "IX_InfusionWeekStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsId, "IX_LogisticsId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId");

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_INFUSION_0");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_INFUSION_1").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_INFUSION_11").HasFillFactor(90);

            entity.HasIndex(e => new { e.InfusionStatusStringMapId, e.HealthProgramId, e.IsDeleted }, "IX_NC_INFUSION_13");

            entity.HasIndex(e => e.AmpouleAmountExpected, "IX_NC_INFUSION_14");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_INFUSION_15");

            entity.HasIndex(e => new { e.InfusionStatusStringMapId, e.HealthProgramId }, "IX_NC_INFUSION_3").HasFillFactor(90);

            entity.HasIndex(e => new { e.InfusionStatusStringMapId, e.IsDeleted, e.HealthProgramId }, "IX_NC_INFUSION_4").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_INFUSION_5").HasFillFactor(90);

            entity.HasIndex(e => new { e.InfusionTypeStringMapId, e.IsDeleted }, "IX_NC_INFUSION_6").HasFillFactor(90);

            entity.HasIndex(e => new { e.InfusionStatusStringMapId, e.IsDeleted, e.HealthProgramId }, "IX_NC_INFUSION_7").HasFillFactor(90);

            entity.HasIndex(e => new { e.IsDeleted, e.InfusionTypeStringMapId }, "IX_NC_INFUSION_8").HasFillFactor(90);

            entity.HasIndex(e => new { e.InfusionStatusStringMapId, e.IsDeleted, e.HealthProgramId }, "IX_NC_INFUSION_9").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionStatusStringMapId, "IX_NC_Infusion").HasFillFactor(90);

            entity.HasIndex(e => e.Weight, "IX_NC_Infusion_12");

            entity.HasIndex(e => e.InfusionStatusStringMapId, "IX_NC_Infusion_2").HasFillFactor(90);

            entity.HasIndex(e => e.PatientSalesOrderId, "IX_PatientSalesOrderId").HasFillFactor(90);

            entity.HasIndex(e => e.PlaceId, "IX_PlaceId").HasFillFactor(90);

            entity.HasIndex(e => e.ReasonInfusionNotDoneStringMapId, "IX_ReasonInfusionNotDoneStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SupportFieldStringMapId, "IX_SupportFieldStringMapId");

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId").HasFillFactor(90);

            entity.HasIndex(e => e.ActualDate, "ix_nc_Infusion_10").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmpouleAmountExpected).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmpouleAmountStored).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Observations).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PaymentSubmissionDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionValidationDate).HasColumnType("datetime");
            entity.Property(e => e.PreviewDate).HasColumnType("datetime");
            entity.Property(e => e.PreviousInfusionDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduledDate).HasColumnType("datetime");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AccountableHealthProfessional).WithMany(p => p.InfusionAccountableHealthProfessionals)
                .HasForeignKey(d => d.AccountableHealthProfessionalId)
                .HasConstraintName("FK_dbo.Infusion_dbo.HealthProfessional_AccountableHealthProfessionalId");

            entity.HasOne(d => d.ApplicationTypeStringMap).WithMany(p => p.InfusionApplicationTypeStringMaps)
                .HasForeignKey(d => d.ApplicationTypeStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_ApplicationTypeStringMapId");

            entity.HasOne(d => d.Disease).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.Infusion_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.Infusion_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Infusion_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.InfusionDispatchNumberStringMap).WithMany(p => p.InfusionInfusionDispatchNumberStringMaps)
                .HasForeignKey(d => d.InfusionDispatchNumberStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionDispatchNumberStringMapId");

            entity.HasOne(d => d.InfusionPlaceProfessional).WithMany(p => p.InfusionInfusionPlaceProfessionals)
                .HasForeignKey(d => d.InfusionPlaceProfessionalId)
                .HasConstraintName("FK_dbo.Infusion_dbo.HealthProfessional_InfusionPlaceProfessionalId");

            entity.HasOne(d => d.InfusionPlaceTypeStringMap).WithMany(p => p.InfusionInfusionPlaceTypeStringMaps)
                .HasForeignKey(d => d.InfusionPlaceTypeStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionPlaceTypeStringMapId");

            entity.HasOne(d => d.InfusionStatusStringMap).WithMany(p => p.InfusionInfusionStatusStringMaps)
                .HasForeignKey(d => d.InfusionStatusStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionStatusStringMapId");

            entity.HasOne(d => d.InfusionTypeStringMap).WithMany(p => p.InfusionInfusionTypeStringMaps)
                .HasForeignKey(d => d.InfusionTypeStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionTypeStringMapId");

            entity.HasOne(d => d.InfusionWeekStringMap).WithMany(p => p.InfusionInfusionWeekStringMaps)
                .HasForeignKey(d => d.InfusionWeekStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_InfusionWeekStringMapId");

            entity.HasOne(d => d.Logistics).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.LogisticsId)
                .HasConstraintName("FK_dbo.Infusion_dbo.Logistics_LogisticsId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.Infusion_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.PatientSalesOrder).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.PatientSalesOrderId)
                .HasConstraintName("FK_dbo.Infusion_dbo.PatientSalesOrder_PatientSalesOrderId");

            entity.HasOne(d => d.Place).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.PlaceId)
                .HasConstraintName("FK_dbo.Infusion_dbo.Account_PlaceId");

            entity.HasOne(d => d.ReasonInfusionNotDoneStringMap).WithMany(p => p.InfusionReasonInfusionNotDoneStringMaps)
                .HasForeignKey(d => d.ReasonInfusionNotDoneStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_ReasonInfusionNotDoneStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.InfusionStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.SupportFieldStringMap).WithMany(p => p.InfusionSupportFieldStringMaps)
                .HasForeignKey(d => d.SupportFieldStringMapId)
                .HasConstraintName("FK_dbo.Infusion_dbo.StringMap_SupportFieldStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Infusion_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Infusions)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.Infusion_dbo.Voucher_VoucherId");
        });

        modelBuilder.Entity<InfusionAudit>(entity =>
        {
            entity.ToTable("InfusionAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<InfusionBkp190422>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Infusion_BKP_19_04_22");

            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmpouleAmountExpected).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmpouleAmountStored).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Observations).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PaymentSubmissionDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionValidationDate).HasColumnType("datetime");
            entity.Property(e => e.PreviewDate).HasColumnType("datetime");
            entity.Property(e => e.PreviousInfusionDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduledDate).HasColumnType("datetime");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<InfusionBkp190422audit>(entity =>
        {
            entity.ToTable("Infusion_BKP_19_04_22Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Infuso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("infusoes");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");
            entity.Property(e => e.DataInativacao)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("DATA_INATIVACAO");
            entity.Property(e => e.DataRealizada)
                .HasColumnType("datetime")
                .HasColumnName("DATA_REALIZADA");
            entity.Property(e => e.Datareferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATAREFERENCIA");
            entity.Property(e => e.Doenca)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("DOENCA");
            entity.Property(e => e.InfusaoIdAprovadaClinicas)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("INFUSAO_ID_APROVADA_CLINICAS");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.LocalAnterior)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL_ANTERIOR");
            entity.Property(e => e.Ordem).HasColumnName("ORDEM");
            entity.Property(e => e.OrdemSequencial).HasColumnName("ORDEM_SEQUENCIAL");
            entity.Property(e => e.QtdAmpolas)
                .HasColumnType("money")
                .HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais)
                .HasColumnType("money")
                .HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.StatusInfusaoClinicas).HasColumnName("STATUS_INFUSAO_CLINICAS");
            entity.Property(e => e.TipoAcesso)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_ACESSO");
            entity.Property(e => e.TipoInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_INFUSAO");
            entity.Property(e => e.TipoInfusaoAnterior)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_INFUSAO_ANTERIOR");
            entity.Property(e => e.Treatmentid).HasColumnName("TREATMENTID");
        });

        modelBuilder.Entity<InfusoesAudit>(entity =>
        {
            entity.ToTable("infusoesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<IntegrationLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IntegrationLog");

            entity.ToTable("IntegrationLog");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<IntegrationLogAudit>(entity =>
        {
            entity.ToTable("IntegrationLogAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<JsRulesByEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.JsRulesByEntity");

            entity.ToTable("JsRulesByEntity");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.JsRulesByEntities)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.JsRulesByEntity_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.JsRulesByEntities)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.JsRulesByEntity_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<JsRulesByEntityAudit>(entity =>
        {
            entity.ToTable("JsRulesByEntityAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<JsRulesByEntityBkp20201015>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JsRulesByEntity_BKP_20201015");

            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.InternalControl).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<JsRulesByEntityBkp20201015audit>(entity =>
        {
            entity.ToTable("JsRulesByEntity_BKP_20201015Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LanguageAttribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LanguageAttribute");

            entity.ToTable("LanguageAttribute");

            entity.HasIndex(e => new { e.AttributeMetadataId, e.EntityMetadataId, e.AttributeMetadataIdName, e.EntityMetadataIdName }, "Idx_EntityAttributie").HasFillFactor(90);

            entity.HasIndex(e => e.ProgramId, "idx_ProgramId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AttributeMetadataIdName).HasMaxLength(50);
            entity.Property(e => e.CreatedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityMetadataIdName).HasMaxLength(50);
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ErrorMessageDefault).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ErrorMessageForCustomValidation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ErrorMessageForMask).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ErrorMessageForRegexValidation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ErrorMessageForRequeried).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Label).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonStateCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ToolTip).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Translate).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<LanguageAttributeAudit>(entity =>
        {
            entity.ToTable("LanguageAttributeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LanguageDefault>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.SequencialId }).HasName("PK_dbo.LanguageDefault");

            entity.ToTable("LanguageDefault");

            entity.Property(e => e.English).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Portuguese).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<LanguageDefaultAudit>(entity =>
        {
            entity.ToTable("LanguageDefaultAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LanguageEntitiesAudit>(entity =>
        {
            entity.ToTable("LanguageEntitiesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LanguageEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LanguageEntities");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonStateCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Translate).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<LanguageMenuMetadatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LanguageMenuMetadata");

            entity.HasIndex(e => e.MenuMetadataId, "IX_MenuMetadataId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Translate).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.MenuMetadata).WithMany(p => p.LanguageMenuMetadata)
                .HasForeignKey(d => d.MenuMetadataId)
                .HasConstraintName("FK_dbo.LanguageMenuMetadata_dbo.MenuMetadata_MenuMetadataId");
        });

        modelBuilder.Entity<LanguageSectionMetadatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LanguageSectionMetadata");

            entity.HasIndex(e => e.SectionMetadataId, "IX_SectionMetadataId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonStateCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Translate).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.SectionMetadata).WithMany(p => p.LanguageSectionMetadata)
                .HasForeignKey(d => d.SectionMetadataId)
                .HasConstraintName("FK_dbo.LanguageSectionMetadata_dbo.SectionMetadata_SectionMetadataId");
        });

        modelBuilder.Entity<ListaDeTabela>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Coluna).HasMaxLength(128);
            entity.Property(e => e.Tabela)
                .IsRequired()
                .HasMaxLength(128);
        });

        modelBuilder.Entity<ListaDeTabelasAudit>(entity =>
        {
            entity.ToTable("ListaDeTabelasAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LogAtualizacaoNonoDigito>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("log_atualizacao_nono_digito");

            entity.Property(e => e.Campo)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("campo");
            entity.Property(e => e.Codigo).HasColumnName("codigo");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("data");
            entity.Property(e => e.Entidade)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("entidade");
            entity.Property(e => e.Valoranterior)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("valoranterior");
            entity.Property(e => e.Valornovo)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("valornovo");
        });

        modelBuilder.Entity<LogAtualizacaoNonoDigitoAudit>(entity =>
        {
            entity.ToTable("log_atualizacao_nono_digitoAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Logistics>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Logistics");

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentStatusStringMapId, "IX_IncidentStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.IntegrationStatusStringMapId, "IX_IntegrationStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsPartnerId, "IX_LogisticsPartnerId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsStuffId, "IX_LogisticsStuffId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsTypeStringMapId, "IX_LogisticsTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_LOGISTICS_2");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_LOGISTICS_3");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_Logistics");

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.SendStatusStringMapId, "IX_SendStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SendSubStatusStringMapId, "IX_SendSubStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.UcbKitSentReasonStringMapId, "IX_UCB_KitSentReasonStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressReference).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Code).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.DateActionLogistics).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.Devolutivedate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExpectecdDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Observation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PostDate).HasColumnType("datetime");
            entity.Property(e => e.PreviousDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.TrackingCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.UcbDateSendedPrescription)
                .HasColumnType("datetime")
                .HasColumnName("UCB_DateSendedPrescription");
            entity.Property(e => e.UcbHasPrescription).HasColumnName("UCB_HasPrescription");
            entity.Property(e => e.UcbKitSentReasonStringMapId).HasColumnName("UCB_KitSentReasonStringMapId");
            entity.Property(e => e.UcbPrescriptionValidatedBy).HasColumnName("UCB_PrescriptionValidatedBy");
            entity.Property(e => e.UcbReasonSendedBlank).HasColumnName("UCB_ReasonSendedBlank");
            entity.Property(e => e.UcbValidatedPrescription).HasColumnName("UCB_ValidatedPrescription");

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.LogisticCustom1StringMaps)
                .HasForeignKey(d => d.Custom1StringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.LogisticCustom2StringMaps)
                .HasForeignKey(d => d.Custom2StringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Logistics)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Logistics_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.IncidentStatusStringMap).WithMany(p => p.LogisticIncidentStatusStringMaps)
                .HasForeignKey(d => d.IncidentStatusStringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_IncidentStatusStringMapId");

            entity.HasOne(d => d.IntegrationStatusStringMap).WithMany(p => p.LogisticIntegrationStatusStringMaps)
                .HasForeignKey(d => d.IntegrationStatusStringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_IntegrationStatusStringMapId");

            entity.HasOne(d => d.LogisticsPartner).WithMany(p => p.Logistics)
                .HasForeignKey(d => d.LogisticsPartnerId)
                .HasConstraintName("FK_dbo.Logistics_dbo.Account_LogisticsPartnerId");

            entity.HasOne(d => d.LogisticsStuff).WithMany(p => p.Logistics)
                .HasForeignKey(d => d.LogisticsStuffId)
                .HasConstraintName("FK_dbo.Logistics_dbo.LogisticsStuff_LogisticsStuffId");

            entity.HasOne(d => d.LogisticsTypeStringMap).WithMany(p => p.LogisticLogisticsTypeStringMaps)
                .HasForeignKey(d => d.LogisticsTypeStringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_LogisticsTypeStringMapId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.Logistics)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.Logistics_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.Patient).WithMany(p => p.Logistics)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.Logistics_dbo.Patient_PatientId");

            entity.HasOne(d => d.SendStatusStringMap).WithMany(p => p.LogisticSendStatusStringMaps)
                .HasForeignKey(d => d.SendStatusStringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_SendStatusStringMapId");

            entity.HasOne(d => d.SendSubStatusStringMap).WithMany(p => p.LogisticSendSubStatusStringMaps)
                .HasForeignKey(d => d.SendSubStatusStringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_SendSubStatusStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.LogisticStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Logistics)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Logistics_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.UcbKitSentReasonStringMap).WithMany(p => p.LogisticUcbKitSentReasonStringMaps)
                .HasForeignKey(d => d.UcbKitSentReasonStringMapId)
                .HasConstraintName("FK_dbo.Logistics_dbo.StringMap_UCB_KitSentReasonStringMapId");
        });

        modelBuilder.Entity<LogisticsAudit>(entity =>
        {
            entity.ToTable("LogisticsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LogisticsSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LogisticsSchedule");

            entity.ToTable("LogisticsSchedule");

            entity.HasIndex(e => e.AccountSettingsByProgramId, "IX_AccountSettingsByProgramId");

            entity.HasIndex(e => e.ChosenExamTypeStringMapId, "IX_ChosenExamTypeStringMapId");

            entity.HasIndex(e => e.ClientId, "IX_ClientId").HasFillFactor(90);

            entity.HasIndex(e => e.ConsultantId, "IX_ConsultantId").HasFillFactor(90);

            entity.HasIndex(e => e.DeliveryLaboratoryId, "IX_DeliveryLaboratoryId").HasFillFactor(90);

            entity.HasIndex(e => e.DiagnosticId, "IX_DiagnosticId").HasFillFactor(90);

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamId, "IX_ExamId").HasFillFactor(90);

            entity.HasIndex(e => e.ExamId1, "IX_Exam_Id").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentId, "IX_IncidentId").HasFillFactor(90);

            entity.HasIndex(e => e.IntegrationStatusStringMapId, "IX_IntegrationStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.KitTypeStringMapId, "IX_KitTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.LocalDeliveryWithdrawStringMapId, "IX_LocalDeliveryWithdrawStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.LocalId, "IX_LocalId").HasFillFactor(90);

            entity.HasIndex(e => e.LocalTypeStringMapId, "IX_LocalTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsPartnerId, "IX_LogisticsPartnerId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsScheduleTypeStringMapId, "IX_LogisticsScheduleTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsStuffId, "IX_LogisticsStuffId").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_LogisticsSchedule");

            entity.HasIndex(e => e.DiagnosticId, "IX_NC_LogisticsSchedule_1");

            entity.HasIndex(e => e.DiagnosticId, "IX_NC_LogisticsSchedule_2");

            entity.HasIndex(e => e.PreferredTimeStringMapId, "IX_PreferredTimeStringMapId");

            entity.HasIndex(e => e.RequestDoctorId, "IX_RequestDoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.ScheduleStatusStringMapId, "IX_ScheduleStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StorageTubeTypeStringMapId, "IX_StorageTubeTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId");

            entity.HasIndex(e => new { e.LogisticsScheduleTypeStringMapId, e.HealthProgramId, e.Name }, "ix_nc_LogisticsSchedule_0");

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.Custom3StringMapId, "IX_Custom3StringMapId");

            entity.HasIndex(e => e.Custom4StringMapId, "IX_Custom4StringMapId");

            entity.HasIndex(e => e.Custom5StringMapId, "IX_Custom5StringMapId");

            entity.HasIndex(e => e.Custom6StringMapId, "IX_Custom6StringMapId");

            entity.HasIndex(e => e.Custom7StringMapId, "IX_Custom7StringMapId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Action).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CancelDate).HasColumnType("datetime");
            entity.Property(e => e.Cnpj).HasColumnName("CNPJ");
            entity.Property(e => e.ConfirmWithdrawalDate).HasColumnType("datetime");
            entity.Property(e => e.ConsentTermRecivedDate).HasColumnType("datetime");
            entity.Property(e => e.Cpfdoctor)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPFDoctor");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Cte)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CTE");
            entity.Property(e => e.DateForCollecting).HasColumnType("datetime");
            entity.Property(e => e.DateForReceiving).HasColumnType("datetime");
            entity.Property(e => e.DateReceivingBlock).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DeliveryConfirmationDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryConfirmationPendingDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExamId1).HasColumnName("Exam_Id");
            entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.FgfrthroughNgs).HasColumnName("FGFRThroughNGS");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.IsLegacy).HasColumnName("isLegacy");
            entity.Property(e => e.LogisticsPartnerCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PendingAnalysisDate).HasColumnType("datetime");
            entity.Property(e => e.PendingCollectionDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RecollectDate).HasColumnType("datetime");
            entity.Property(e => e.RecollectionDate).HasColumnType("datetime");
            entity.Property(e => e.ReportDate).HasColumnType("datetime");
            entity.Property(e => e.ReportReleaseDate).HasColumnType("datetime");
            entity.Property(e => e.ResultDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ScheduledEnd).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStart).HasColumnType("datetime");
            entity.Property(e => e.SchedulingPendencyDate).HasColumnType("datetime");
            entity.Property(e => e.Telephone).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CustomString1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString4).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString5).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString6).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString7).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime3).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime4).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime5).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime6).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime7).HasColumnType("datetime");

            entity.Property(e => e.CustomBoolean1);
            entity.Property(e => e.CustomBoolean2);
            entity.Property(e => e.CustomBoolean3);
            entity.Property(e => e.CustomBoolean4);
            entity.Property(e => e.CustomBoolean5);
            entity.Property(e => e.CustomBoolean6);
            entity.Property(e => e.CustomBoolean7);

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.LogisticsScheduleCustom1StringMaps)
            .HasForeignKey(d => d.Custom1StringMapId)
            .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.LogisticsScheduleCustom2StringMaps)
            .HasForeignKey(d => d.Custom2StringMapId)
            .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.Custom3StringMap).WithMany(p => p.LogisticsScheduleCustom3StringMaps)
            .HasForeignKey(d => d.Custom3StringMapId)
            .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_Custom3StringMapId");

            entity.HasOne(d => d.Custom4StringMap).WithMany(p => p.LogisticsScheduleCustom4StringMaps)
            .HasForeignKey(d => d.Custom4StringMapId)
            .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_Custom4StringMapId");

            entity.HasOne(d => d.Custom5StringMap).WithMany(p => p.LogisticsScheduleCustom5StringMaps)
            .HasForeignKey(d => d.Custom5StringMapId)
            .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_Custom5StringMapId");

            entity.HasOne(d => d.Custom6StringMap).WithMany(p => p.LogisticsScheduleCustom6StringMaps)
            .HasForeignKey(d => d.Custom6StringMapId)
            .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_Custom6StringMapId");

            entity.HasOne(d => d.Custom7StringMap).WithMany(p => p.LogisticsScheduleCustom7StringMaps)
            .HasForeignKey(d => d.Custom7StringMapId)
            .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_Custom7StringMapId");

            entity.HasOne(d => d.AccountSettingsByProgram).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.AccountSettingsByProgramId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.AccountSettingsByProgram_AccountSettingsByProgramId");

            entity.HasOne(d => d.ChosenExamTypeStringMap).WithMany(p => p.LogisticsScheduleChosenExamTypeStringMaps)
                .HasForeignKey(d => d.ChosenExamTypeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_ChosenExamTypeStringMapId");

            entity.HasOne(d => d.Client).WithMany(p => p.LogisticsScheduleClients)
                .HasForeignKey(d => d.ClientId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Account_ClientId");

            entity.HasOne(d => d.Consultant).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.ConsultantId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.User_ConsultantId");

            entity.HasOne(d => d.DeliveryLaboratory).WithMany(p => p.LogisticsScheduleDeliveryLaboratories)
                .HasForeignKey(d => d.DeliveryLaboratoryId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Account_DeliveryLaboratoryId");

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.DiagnosticId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Diagnostic_DiagnosticId");

            entity.HasOne(d => d.Disease).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.ExamId1Navigation).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.ExamId1)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Exam_Exam_Id");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Incident).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.IncidentId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Incident_IncidentId");

            entity.HasOne(d => d.IntegrationStatusStringMap).WithMany(p => p.LogisticsScheduleIntegrationStatusStringMaps)
                .HasForeignKey(d => d.IntegrationStatusStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_IntegrationStatusStringMapId");

            entity.HasOne(d => d.KitTypeStringMap).WithMany(p => p.LogisticsScheduleKitTypeStringMaps)
                .HasForeignKey(d => d.KitTypeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_KitTypeStringMapId");

            entity.HasOne(d => d.LocalDeliveryWithdrawStringMap).WithMany(p => p.LogisticsScheduleLocalDeliveryWithdrawStringMaps)
                .HasForeignKey(d => d.LocalDeliveryWithdrawStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_LocalDeliveryWithdrawStringMapId");

            entity.HasOne(d => d.Local).WithMany(p => p.LogisticsScheduleLocals)
                .HasForeignKey(d => d.LocalId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Account_LocalId");

            entity.HasOne(d => d.LocalTypeStringMap).WithMany(p => p.LogisticsScheduleLocalTypeStringMaps)
                .HasForeignKey(d => d.LocalTypeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_LocalTypeStringMapId");

            entity.HasOne(d => d.LogisticsPartner).WithMany(p => p.LogisticsScheduleLogisticsPartners)
                .HasForeignKey(d => d.LogisticsPartnerId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Account_LogisticsPartnerId");

            entity.HasOne(d => d.LogisticsScheduleTypeStringMap).WithMany(p => p.LogisticsScheduleLogisticsScheduleTypeStringMaps)
                .HasForeignKey(d => d.LogisticsScheduleTypeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_LogisticsScheduleTypeStringMapId");

            entity.HasOne(d => d.LogisticsStuff).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.LogisticsStuffId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.LogisticsStuff_LogisticsStuffId");

            entity.HasOne(d => d.PreferredTimeStringMap).WithMany(p => p.LogisticsSchedulePreferredTimeStringMaps)
                .HasForeignKey(d => d.PreferredTimeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_PreferredTimeStringMapId");

            entity.HasOne(d => d.RequestDoctor).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.RequestDoctorId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Doctor_RequestDoctorId");

            entity.HasOne(d => d.ScheduleStatusStringMap).WithMany(p => p.LogisticsScheduleScheduleStatusStringMaps)
                .HasForeignKey(d => d.ScheduleStatusStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_ScheduleStatusStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.LogisticsScheduleStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.StorageTubeTypeStringMap).WithMany(p => p.LogisticsScheduleStorageTubeTypeStringMaps)
                .HasForeignKey(d => d.StorageTubeTypeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.StringMap_StorageTubeTypeStringMapId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.LogisticsSchedules)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.LogisticsSchedule_dbo.Voucher_VoucherId");
        });

        modelBuilder.Entity<LogisticsScheduleAudit>(entity =>
        {
            entity.ToTable("LogisticsScheduleAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LogisticsScheduleAudit>(entity =>
        {
            entity.ToTable("LogisticsScheduleAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LogisticsScheduleBkp01072022>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LogisticsSchedule_BKP_01072022");

            entity.Property(e => e.Action).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CancelDate).HasColumnType("datetime");
            entity.Property(e => e.Cnpj).HasColumnName("CNPJ");
            entity.Property(e => e.ConfirmWithdrawalDate).HasColumnType("datetime");
            entity.Property(e => e.ConsentTermRecivedDate).HasColumnType("datetime");
            entity.Property(e => e.Cpfdoctor)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPFDoctor");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Cte)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CTE");
            entity.Property(e => e.DateForCollecting).HasColumnType("datetime");
            entity.Property(e => e.DateForReceiving).HasColumnType("datetime");
            entity.Property(e => e.DateReceivingBlock).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DeliveryConfirmationDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryConfirmationPendingDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExamId1).HasColumnName("Exam_Id");
            entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.FgfrthroughNgs).HasColumnName("FGFRThroughNGS");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.IsLegacy).HasColumnName("isLegacy");
            entity.Property(e => e.LogisticsPartnerCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PendingAnalysisDate).HasColumnType("datetime");
            entity.Property(e => e.PendingCollectionDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RecollectDate).HasColumnType("datetime");
            entity.Property(e => e.RecollectionDate).HasColumnType("datetime");
            entity.Property(e => e.ReportDate).HasColumnType("datetime");
            entity.Property(e => e.ReportReleaseDate).HasColumnType("datetime");
            entity.Property(e => e.ResultDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ScheduledEnd).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStart).HasColumnType("datetime");
            entity.Property(e => e.SchedulingPendencyDate).HasColumnType("datetime");
            entity.Property(e => e.Telephone).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<LogisticsScheduleBkp010720221106>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LogisticsSchedule_BKP_01072022_1106");

            entity.Property(e => e.Action).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CancelDate).HasColumnType("datetime");
            entity.Property(e => e.Cnpj).HasColumnName("CNPJ");
            entity.Property(e => e.ConfirmWithdrawalDate).HasColumnType("datetime");
            entity.Property(e => e.ConsentTermRecivedDate).HasColumnType("datetime");
            entity.Property(e => e.Cpfdoctor)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPFDoctor");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Cte)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CTE");
            entity.Property(e => e.DateForCollecting).HasColumnType("datetime");
            entity.Property(e => e.DateForReceiving).HasColumnType("datetime");
            entity.Property(e => e.DateReceivingBlock).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DeliveryConfirmationDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryConfirmationPendingDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExamId1).HasColumnName("Exam_Id");
            entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.FgfrthroughNgs).HasColumnName("FGFRThroughNGS");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.IsLegacy).HasColumnName("isLegacy");
            entity.Property(e => e.LogisticsPartnerCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PendingAnalysisDate).HasColumnType("datetime");
            entity.Property(e => e.PendingCollectionDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RecollectDate).HasColumnType("datetime");
            entity.Property(e => e.RecollectionDate).HasColumnType("datetime");
            entity.Property(e => e.ReportDate).HasColumnType("datetime");
            entity.Property(e => e.ReportReleaseDate).HasColumnType("datetime");
            entity.Property(e => e.ResultDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ScheduledEnd).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStart).HasColumnType("datetime");
            entity.Property(e => e.SchedulingPendencyDate).HasColumnType("datetime");
            entity.Property(e => e.Telephone).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<LogisticsScheduleBkp010720221106audit>(entity =>
        {
            entity.ToTable("LogisticsSchedule_BKP_01072022_1106Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LogisticsScheduleBkp01072022audit>(entity =>
        {
            entity.ToTable("LogisticsSchedule_BKP_01072022Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LogisticsScheduleItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LogisticsScheduleItem");

            entity.ToTable("LogisticsScheduleItem");

            entity.HasIndex(e => e.LogisticsScheduleId, "IX_LogisticsScheduleId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf).HasColumnName("CPF");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.LogisticsSchedule).WithMany(p => p.LogisticsScheduleItems)
                .HasForeignKey(d => d.LogisticsScheduleId)
                .HasConstraintName("FK_dbo.LogisticsScheduleItem_dbo.LogisticsSchedule_LogisticsScheduleId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.LogisticsScheduleItems)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsScheduleItem_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.LogisticsScheduleItems)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.LogisticsScheduleItem_dbo.Voucher_VoucherId");
        });

        modelBuilder.Entity<LogisticsScheduleItemAudit>(entity =>
        {
            entity.ToTable("LogisticsScheduleItemAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LogisticsStuff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LogisticsStuff");

            entity.ToTable("LogisticsStuff");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.KitId, "IX_KitId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsScheduleId, "IX_LogisticsSchedule_Id").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsStuffTypeStringMapId, "IX_LogisticsStuffTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ManufacturerId, "IX_ManufacturerId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StrengthMedicamentId, "IX_StrengthMedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.StuffStatusStringMapId, "IX_StuffStatusStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Anvisacode)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("ANVISACode");
            entity.Property(e => e.BarCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CodeNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ForecastCast).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ListPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LogisticsScheduleId).HasColumnName("LogisticsSchedule_Id");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Packing).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ProductFeatures).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Sapcode)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("SAPCode");
            entity.Property(e => e.TaxClassification).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.LogisticsStuffs)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Kit).WithMany(p => p.InverseKit)
                .HasForeignKey(d => d.KitId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.LogisticsStuff_KitId");

            entity.HasOne(d => d.LogisticsSchedule).WithMany(p => p.LogisticsStuffs)
                .HasForeignKey(d => d.LogisticsScheduleId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.LogisticsSchedule_LogisticsSchedule_Id");

            entity.HasOne(d => d.LogisticsStuffTypeStringMap).WithMany(p => p.LogisticsStuffLogisticsStuffTypeStringMaps)
                .HasForeignKey(d => d.LogisticsStuffTypeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.StringMap_LogisticsStuffTypeStringMapId");

            entity.HasOne(d => d.Manufacturer).WithMany(p => p.LogisticsStuffs)
                .HasForeignKey(d => d.ManufacturerId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.Account_ManufacturerId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.LogisticsStuffs)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.LogisticsStuffStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.StrengthMedicament).WithMany(p => p.LogisticsStuffs)
                .HasForeignKey(d => d.StrengthMedicamentId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.StrengthMedicament_StrengthMedicamentId");

            entity.HasOne(d => d.StuffStatusStringMap).WithMany(p => p.LogisticsStuffStuffStatusStringMaps)
                .HasForeignKey(d => d.StuffStatusStringMapId)
                .HasConstraintName("FK_dbo.LogisticsStuff_dbo.StringMap_StuffStatusStringMapId");

            entity.HasMany(d => d.Kits).WithMany(p => p.LogisticsStuffs)
                .UsingEntity<Dictionary<string, object>>(
                    "LogisticsStuffKit",
                    r => r.HasOne<LogisticsStuff>().WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.LogisticsStuffKits_dbo.LogisticsStuff_KitsId"),
                    l => l.HasOne<LogisticsStuff>().WithMany()
                        .HasForeignKey("LogisticsStuffId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.LogisticsStuffKits_dbo.LogisticsStuff_LogisticsStuffId"),
                    j =>
                    {
                        j.HasKey("KitsId", "LogisticsStuffId").HasName("PK_dbo.LogisticsStuffKits");
                        j.ToTable("LogisticsStuffKits");
                        j.HasIndex(new[] { "KitsId" }, "IX_KitsId").HasFillFactor(90);
                        j.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.LogisticsStuffs).WithMany(p => p.Kits)
                .UsingEntity<Dictionary<string, object>>(
                    "LogisticsStuffKit",
                    r => r.HasOne<LogisticsStuff>().WithMany()
                        .HasForeignKey("LogisticsStuffId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.LogisticsStuffKits_dbo.LogisticsStuff_LogisticsStuffId"),
                    l => l.HasOne<LogisticsStuff>().WithMany()
                        .HasForeignKey("KitsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.LogisticsStuffKits_dbo.LogisticsStuff_KitsId"),
                    j =>
                    {
                        j.HasKey("KitsId", "LogisticsStuffId").HasName("PK_dbo.LogisticsStuffKits");
                        j.ToTable("LogisticsStuffKits");
                        j.HasIndex(new[] { "KitsId" }, "IX_KitsId").HasFillFactor(90);
                        j.HasIndex(new[] { "LogisticsStuffId" }, "IX_LogisticsStuffId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<LogisticsStuffAudit>(entity =>
        {
            entity.ToTable("LogisticsStuffAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<LogisticsStuffKitsAudit>(entity =>
        {
            entity.ToTable("LogisticsStuffKitsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicalSpecialty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MedicalSpecialty");

            entity.ToTable("MedicalSpecialty");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.MedicalSpecialties)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.MedicalSpecialty_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<MedicalSpecialtyAudit>(entity =>
        {
            entity.ToTable("MedicalSpecialtyAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Medicament>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Medicament");

            entity.ToTable("Medicament", tb =>
            {
                tb.HasTrigger("INTEGRA_MEDICAMENTO_GE");
                tb.HasTrigger("INTEGRA_MEDICAMENTO_GE_UPDATE");
            });

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Medicaments)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Medicament_dbo.StringMap_StatusCodeStringMapId");

            entity.HasMany(d => d.Diseases).WithMany(p => p.Medicaments)
                .UsingEntity<Dictionary<string, object>>(
                    "MedicamentDisease",
                    r => r.HasOne<Disease>().WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentDisease_dbo.Disease_DiseaseId"),
                    l => l.HasOne<Medicament>().WithMany()
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentDisease_dbo.Medicament_MedicamentId"),
                    j =>
                    {
                        j.HasKey("MedicamentId", "DiseaseId").HasName("PK_dbo.MedicamentDisease");
                        j.ToTable("MedicamentDisease");
                        j.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId").HasFillFactor(90);
                        j.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.Posologes).WithMany(p => p.Medicaments)
                .UsingEntity<Dictionary<string, object>>(
                    "PosologeMedicament",
                    r => r.HasOne<Posologe>().WithMany()
                        .HasForeignKey("PosologeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.PosologeMedicament_dbo.Posologe_PosologeId"),
                    l => l.HasOne<Medicament>().WithMany()
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.PosologeMedicament_dbo.Medicament_MedicamentId"),
                    j =>
                    {
                        j.HasKey("MedicamentId", "PosologeId").HasName("PK_dbo.PosologeMedicament");
                        j.ToTable("PosologeMedicament");
                        j.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId").HasFillFactor(90);
                        j.HasIndex(new[] { "PosologeId" }, "IX_PosologeId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.StrengthMedicaments).WithMany(p => p.Medicaments)
                .UsingEntity<Dictionary<string, object>>(
                    "MedicamentStrengthMedicament",
                    r => r.HasOne<StrengthMedicament>().WithMany()
                        .HasForeignKey("StrengthMedicamentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentStrengthMedicament_dbo.StrengthMedicament_StrengthMedicamentId"),
                    l => l.HasOne<Medicament>().WithMany()
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentStrengthMedicament_dbo.Medicament_MedicamentId"),
                    j =>
                    {
                        j.HasKey("MedicamentId", "StrengthMedicamentId").HasName("PK_dbo.MedicamentStrengthMedicament");
                        j.ToTable("MedicamentStrengthMedicament");
                        j.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId").HasFillFactor(90);
                        j.HasIndex(new[] { "StrengthMedicamentId" }, "IX_StrengthMedicamentId").HasFillFactor(90);
                    });

            entity.HasMany(d => d.ExamDefinitions).WithMany(p => p.Medicaments)
                .UsingEntity<Dictionary<string, object>>(
                    "MedicamentExamDefinition",
                    l => l.HasOne<ExamDefinition>().WithMany()
                        .HasForeignKey("ExamDefinitionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentExamDefinition_dbo.ExamDefinition_ExamDefinitionId"),

                    r => r.HasOne<Medicament>().WithMany()
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentExamDefinition_dbo.Medicament_MedicamentId"),
                    j =>
                    {
                        j.HasKey("MedicamentId", "ExamDefinitionId").HasName("PK_dbo.MedicamentExamDefinition");
                        j.ToTable("MedicamentExamDefinition");
                        j.HasIndex(new[] { "MedicamentId" }, "IX_MedicamentId").HasFillFactor(90);
                        j.HasIndex(new[] { "ExamDefinitionId" }, "IX_ExamDefinitionId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<MedicamentAccess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MedicamentAccess");

            entity.ToTable("MedicamentAccess");

            entity.HasIndex(e => e.AccessMannerId, "IX_AccessMannerId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessStatusStringMapId, "IX_AccessStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessSubStatusStringMapId, "IX_AccessSubStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessTypeStringMapId, "IX_AccessTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessWayId, "IX_AccessWayId").HasFillFactor(90);

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.AttemptAccessModifiedById, "IX_AttemptAccessModifiedById").HasFillFactor(90);

            entity.HasIndex(e => e.DetailDifficultyWithAccessStringMapId, "IX_DetailDifficultyWithAccessStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DetailDifficultyWithDocumentsStringMapId, "IX_DetailDifficultyWithDocumentsStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.DetailNoDifficultyWithAccessStringMapId, "IX_DetailNoDifficultyWithAccessStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_MedicamentAccess").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_MedicamentAccess_1").HasFillFactor(90);

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AttemptAccessCancelDate).HasColumnType("datetime");
            entity.Property(e => e.AttemptAccessDate).HasColumnType("datetime");
            entity.Property(e => e.AttemptAccessDateSystem).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentDeliveredDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentDeliveredDateSystem).HasColumnType("datetime");
            entity.Property(e => e.DocumentSeparatedDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentSeparatedDateSystem).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.GotAccessDate).HasColumnType("datetime");
            entity.Property(e => e.GotAccessDateSystem).HasColumnType("datetime");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastAttemptAccessDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NextAttemptAccessDate).HasColumnType("datetime");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AccessManner).WithMany(p => p.MedicamentAccesses)
                .HasForeignKey(d => d.AccessMannerId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.AccessManner_AccessMannerId");

            entity.HasOne(d => d.AccessStatusStringMap).WithMany(p => p.MedicamentAccessAccessStatusStringMaps)
                .HasForeignKey(d => d.AccessStatusStringMapId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_AccessStatusStringMapId");

            entity.HasOne(d => d.AccessSubStatusStringMap).WithMany(p => p.MedicamentAccessAccessSubStatusStringMaps)
                .HasForeignKey(d => d.AccessSubStatusStringMapId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_AccessSubStatusStringMapId");

            entity.HasOne(d => d.AccessTypeStringMap).WithMany(p => p.MedicamentAccessAccessTypeStringMaps)
                .HasForeignKey(d => d.AccessTypeStringMapId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_AccessTypeStringMapId");

            entity.HasOne(d => d.AccessWay).WithMany(p => p.MedicamentAccesses)
                .HasForeignKey(d => d.AccessWayId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.AccessWay_AccessWayId");

            entity.HasOne(d => d.Account).WithMany(p => p.MedicamentAccesses)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.Account_AccountId");

            entity.HasOne(d => d.AttemptAccessModifiedBy).WithMany(p => p.MedicamentAccesses)
                .HasForeignKey(d => d.AttemptAccessModifiedById)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.User_AttemptAccessModifiedById");

            entity.HasOne(d => d.DetailDifficultyWithAccessStringMap).WithMany(p => p.MedicamentAccessDetailDifficultyWithAccessStringMaps)
                .HasForeignKey(d => d.DetailDifficultyWithAccessStringMapId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_DetailDifficultyWithAccessStringMapId");

            entity.HasOne(d => d.DetailDifficultyWithDocumentsStringMap).WithMany(p => p.MedicamentAccessDetailDifficultyWithDocumentsStringMaps)
                .HasForeignKey(d => d.DetailDifficultyWithDocumentsStringMapId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_DetailDifficultyWithDocumentsStringMapId");

            entity.HasOne(d => d.DetailNoDifficultyWithAccessStringMap).WithMany(p => p.MedicamentAccessDetailNoDifficultyWithAccessStringMaps)
                .HasForeignKey(d => d.DetailNoDifficultyWithAccessStringMapId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_DetailNoDifficultyWithAccessStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.MedicamentAccesses)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Patient).WithMany(p => p.MedicamentAccesses)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.Patient_PatientId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.MedicamentAccessStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.MedicamentAccesses)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.MedicamentAccess_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<MedicamentAccessAudit>(entity =>
        {
            entity.ToTable("MedicamentAccessAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicamentAudit>(entity =>
        {
            entity.ToTable("MedicamentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicamentCompetitor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MedicamentCompetitor");

            entity.ToTable("MedicamentCompetitor");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.MedicamentCompetitors)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.MedicamentCompetitor_dbo.StringMap_StatusCodeStringMapId");

            entity.HasMany(d => d.MedicamentCompetitors).WithMany(p => p.Diseases)
                .UsingEntity<Dictionary<string, object>>(
                    "MedicamentCompetitorDisease",
                    r => r.HasOne<Disease>().WithMany()
                        .HasForeignKey("MedicamentCompetitorId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentCompetitorDisease_dbo.Disease_MedicamentCompetitorId"),
                    l => l.HasOne<MedicamentCompetitor>().WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.MedicamentCompetitorDisease_dbo.MedicamentCompetitor_DiseaseId"),
                    j =>
                    {
                        j.HasKey("DiseaseId", "MedicamentCompetitorId").HasName("PK_dbo.MedicamentCompetitorDisease");
                        j.ToTable("MedicamentCompetitorDisease");
                        j.HasIndex(new[] { "DiseaseId" }, "IX_DiseaseId").HasFillFactor(90);
                        j.HasIndex(new[] { "MedicamentCompetitorId" }, "IX_MedicamentCompetitorId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<MedicamentCompetitorAudit>(entity =>
        {
            entity.ToTable("MedicamentCompetitorAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicamentCompetitorDiseaseAudit>(entity =>
        {
            entity.ToTable("MedicamentCompetitorDiseaseAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicamentCompetitorHealthProgramAudit>(entity =>
        {
            entity.ToTable("MedicamentCompetitorHealthProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicamentConcomitant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MedicamentConcomitant");

            entity.ToTable("MedicamentConcomitant");

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DiseaseDescription).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.EndDateDescription).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Indication).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Observation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StartDateDescription).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Disease).WithMany(p => p.MedicamentConcomitants)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.MedicamentConcomitant_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.MedicamentConcomitants)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.MedicamentConcomitant_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.MedicamentConcomitants)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.MedicamentConcomitant_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<MedicamentConcomitantAudit>(entity =>
        {
            entity.ToTable("MedicamentConcomitantAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicamentDiseaseAudit>(entity =>
        {
            entity.ToTable("MedicamentDiseaseAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicamentStrengthMedicamentAudit>(entity =>
        {
            entity.ToTable("MedicamentStrengthMedicamentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicationNonadherenceReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MedicationNonadherenceReason");

            entity.ToTable("MedicationNonadherenceReason");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.MedicationNonadherenceReasons)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.MedicationNonadherenceReason_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<MedicationNonadherenceReasonAudit>(entity =>
        {
            entity.ToTable("MedicationNonadherenceReasonAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MedicationNonadherenceReasonHealthProgramAudit>(entity =>
        {
            entity.ToTable("MedicationNonadherenceReasonHealthProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<MenuMetadatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MenuMetadata");

            entity.HasIndex(e => e.ParentMenuMetadataId, "IX_ParentMenuMetadataId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.IconMenu).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Menu)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.ParentMenuMetadata).WithMany(p => p.InverseParentMenuMetadata)
                .HasForeignKey(d => d.ParentMenuMetadataId)
                .HasConstraintName("FK_dbo.MenuMetadata_dbo.MenuMetadata_ParentMenuMetadataId_Id");
        });

        modelBuilder.Entity<MigrationHistory>(entity =>
        {
            entity.HasKey(e => new { e.MigrationId, e.ContextKey }).HasName("PK_dbo.__MigrationHistory");

            entity.ToTable("__MigrationHistory");

            entity.Property(e => e.MigrationId).HasMaxLength(150);
            entity.Property(e => e.ContextKey).HasMaxLength(300);
            entity.Property(e => e.Model).IsRequired();
            entity.Property(e => e.ProductVersion)
                .HasMaxLength(32)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<Occupation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Occupation");

            entity.ToTable("Occupation");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Family).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Group).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.MainSubGroup).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SubGroup).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Occupations)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Occupation_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<OccupationAudit>(entity =>
        {
            entity.ToTable("OccupationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Paciente>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AlteraçãoManual).HasColumnName("Alteração Manual");
            entity.Property(e => e.CidadeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade do Paciente");
            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Cpfpaciente).HasColumnName("CPFPaciente");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Criadoem).HasColumnType("datetime");
            entity.Property(e => e.DataAniversario).HasColumnType("date");
            entity.Property(e => e.EmailPaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Fase)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FaseDaPatologia).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Genero).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Healthprogramid).HasColumnName("healthprogramid");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NecessitaDevolucao)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NomePaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Patologia)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PrecisaDeLogística)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Precisa de Logística");
            entity.Property(e => e.Programa)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TelefonePaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TipoAnalise)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoAnaliseMédico).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.UfDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UF do Paciente");
        });

        modelBuilder.Entity<PacientesAudit>(entity =>
        {
            entity.ToTable("PacientesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PacientesPesquisa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PacientesPesquisa");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OrigemPaciente)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Programa)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<PacientesPesquisaAudit>(entity =>
        {
            entity.ToTable("PacientesPesquisaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PainelMedicoEntyvio>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PainelMedicoEntyvio$");

            entity.Property(e => e.Crm)
                .HasMaxLength(255)
                .HasColumnName("CRM");
            entity.Property(e => e.Gerente)
                .HasMaxLength(255)
                .HasColumnName("GERENTE");
            entity.Property(e => e.Medico)
                .HasMaxLength(255)
                .HasColumnName("MEDICO");
            entity.Property(e => e.Representante)
                .HasMaxLength(255)
                .HasColumnName("REPRESENTANTE");
            entity.Property(e => e.Setor)
                .HasMaxLength(255)
                .HasColumnName("SETOR");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .HasColumnName("STATUS");
        });

        modelBuilder.Entity<PainelMedicoEntyvioAudit>(entity =>
        {
            entity.ToTable("PainelMedicoEntyvio$Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PainelMedicoMelanoma>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Painel MedicoMelanoma");

            entity.Property(e => e.AceiteMktEmail)
                .HasMaxLength(50)
                .HasColumnName("Aceite_MKT_Email");
            entity.Property(e => e.AceiteMktEmailSecundario)
                .HasMaxLength(50)
                .HasColumnName("Aceite_MKT_Email_Secundario");
            entity.Property(e => e.AceiteRteEmail)
                .HasMaxLength(50)
                .HasColumnName("Aceite_RTE_Email");
            entity.Property(e => e.AceiteRteEmailSecundário)
                .HasMaxLength(50)
                .HasColumnName("Aceite_RTE_Email_Secundário");
            entity.Property(e => e.BusinessLine)
                .HasMaxLength(50)
                .HasColumnName("Business_Line");
            entity.Property(e => e.BusinessUnit)
                .HasMaxLength(50)
                .HasColumnName("Business_Unit");
            entity.Property(e => e.CategoriaEspecial)
                .HasMaxLength(50)
                .HasColumnName("Categoria_Especial");
            entity.Property(e => e.Celular).HasMaxLength(50);
            entity.Property(e => e.Cep)
                .HasMaxLength(50)
                .HasColumnName("CEP");
            entity.Property(e => e.Ciclo).HasMaxLength(50);
            entity.Property(e => e.Cidade).HasMaxLength(50);
            entity.Property(e => e.Cnpj).HasColumnName("CNPJ");
            entity.Property(e => e.Column45)
                .HasMaxLength(50)
                .HasColumnName("column45");
            entity.Property(e => e.Complemento).HasMaxLength(100);
            entity.Property(e => e.Conselho).HasMaxLength(50);
            entity.Property(e => e.ConsentimentoDeAmostra)
                .HasMaxLength(50)
                .HasColumnName("Consentimento_de_Amostra");
            entity.Property(e => e.ConsentimentoPerfil)
                .HasMaxLength(50)
                .HasColumnName("Consentimento_Perfil");
            entity.Property(e => e.Crm)
                .HasMaxLength(50)
                .HasColumnName("CRM");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.EmailColaborador)
                .HasMaxLength(50)
                .HasColumnName("Email_Colaborador");
            entity.Property(e => e.EmailSecundário)
                .HasMaxLength(50)
                .HasColumnName("Email_secundário");
            entity.Property(e => e.Endereço).HasMaxLength(100);
            entity.Property(e => e.EspecialidadePrincipal)
                .HasMaxLength(50)
                .HasColumnName("Especialidade_Principal");
            entity.Property(e => e.EspecialidadePromocional)
                .HasMaxLength(50)
                .HasColumnName("Especialidade_promocional");
            entity.Property(e => e.Estrutura).HasMaxLength(50);
            entity.Property(e => e.Gestor).HasMaxLength(50);
            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .HasColumnName("ID");
            entity.Property(e => e.IdDaConta)
                .HasMaxLength(50)
                .HasColumnName("ID_da_conta");
            entity.Property(e => e.Login)
                .HasMaxLength(50)
                .HasColumnName("LOGIN");
            entity.Property(e => e.Matrícula).HasMaxLength(50);
            entity.Property(e => e.NomeCompleto)
                .HasMaxLength(50)
                .HasColumnName("Nome_Completo");
            entity.Property(e => e.NomeDaConta)
                .HasMaxLength(50)
                .HasColumnName("Nome_da_conta");
            entity.Property(e => e.Objetivo).HasMaxLength(50);
            entity.Property(e => e.OutroTelefone)
                .HasMaxLength(50)
                .HasColumnName("Outro_Telefone");
            entity.Property(e => e.ProdutoRteEmail)
                .HasMaxLength(50)
                .HasColumnName("Produto_RTE_Email");
            entity.Property(e => e.ProdutoRteEmailSecundário)
                .HasMaxLength(50)
                .HasColumnName("Produto_RTE_Email_Secundário");
            entity.Property(e => e.RazãoSocial)
                .HasMaxLength(50)
                .HasColumnName("Razão_social");
            entity.Property(e => e.Segmentação).HasMaxLength(50);
            entity.Property(e => e.TelefonePrimário)
                .HasMaxLength(50)
                .HasColumnName("Telefone_primário");
            entity.Property(e => e.Território).HasMaxLength(100);
            entity.Property(e => e.TerritórioSugerido)
                .HasMaxLength(50)
                .HasColumnName("Território_Sugerido");
            entity.Property(e => e.TipoDeConta)
                .HasMaxLength(50)
                .HasColumnName("Tipo_de_conta");
            entity.Property(e => e.TipoDeRegistroDaConta)
                .HasMaxLength(50)
                .HasColumnName("Tipo_de_registro_da_conta");
            entity.Property(e => e.TsfIdOncore)
                .HasMaxLength(50)
                .HasColumnName("TSF_ID_ONCORE");
            entity.Property(e => e.Uf)
                .HasMaxLength(50)
                .HasColumnName("UF");
        });

        modelBuilder.Entity<PainelMedicoMelanomaAudit>(entity =>
        {
            entity.ToTable("Painel MedicoMelanomaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PainelMedicoTasigna>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Painel MedicoTASIGNA");

            entity.Property(e => e.Cidade).HasMaxLength(50);
            entity.Property(e => e.Ct)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("CT");
            entity.Property(e => e.EMail)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("E_mail");
            entity.Property(e => e.GerCidade)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("GER_Cidade");
            entity.Property(e => e.GerEMail)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("GER_E_mail");
            entity.Property(e => e.GerTelefone)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("GER_Telefone");
            entity.Property(e => e.GerUf)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("GER_UF");
            entity.Property(e => e.Gr)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("GR");
            entity.Property(e => e.Região)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Telefone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Time)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Uf)
                .HasMaxLength(50)
                .HasColumnName("UF");
        });

        modelBuilder.Entity<PainelMedicoTasignaaudit>(entity =>
        {
            entity.ToTable("Painel MedicoTASIGNAAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Patient");

            entity.ToTable("Patient");

            entity.HasIndex(e => e.CivilStatusStringMapId, "IX_CivilStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.EducationStringMapId, "IX_EducationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderStringMapId, "IX_GenderStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_Patient").HasFillFactor(90);

            entity.HasIndex(e => e.OccupationId, "IX_OccupationId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientTypeStringMapId, "IX_PatientTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SystemUserId, "IX_SystemUserId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AbbreviationName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress2)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Stature).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Telephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CivilStatusStringMap).WithMany(p => p.PatientCivilStatusStringMaps)
                .HasForeignKey(d => d.CivilStatusStringMapId)
                .HasConstraintName("FK_dbo.Patient_dbo.StringMap_CivilStatusStringMapId");

            entity.HasOne(d => d.EducationStringMap).WithMany(p => p.PatientEducationStringMaps)
                .HasForeignKey(d => d.EducationStringMapId)
                .HasConstraintName("FK_dbo.Patient_dbo.StringMap_EducationStringMapId");

            entity.HasOne(d => d.GenderStringMap).WithMany(p => p.PatientGenderStringMaps)
                .HasForeignKey(d => d.GenderStringMapId)
                .HasConstraintName("FK_dbo.Patient_dbo.StringMap_GenderStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Patients)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Patient_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Occupation).WithMany(p => p.Patients)
                .HasForeignKey(d => d.OccupationId)
                .HasConstraintName("FK_dbo.Patient_dbo.Occupation_OccupationId");

            entity.HasOne(d => d.PatientTypeStringMap).WithMany(p => p.PatientPatientTypeStringMaps)
                .HasForeignKey(d => d.PatientTypeStringMapId)
                .HasConstraintName("FK_dbo.Patient_dbo.StringMap_PatientTypeStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.PatientStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Patient_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.SystemUser).WithMany(p => p.Patients)
                .HasForeignKey(d => d.SystemUserId)
                .HasConstraintName("FK_dbo.Patient_dbo.User_SystemUserId");
        });

        modelBuilder.Entity<PatientAudit>(entity =>
        {
            entity.ToTable("PatientAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PatientSalesOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PatientSalesOrder");

            entity.ToTable("PatientSalesOrder");

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthcareProviderId, "IX_HealthcareProviderId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientSourceStringMapId, "IX_PatientSourceStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SolicitorStringMapId, "IX_SolicitorStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StrengthMedicamentId, "IX_StrengthMedicamentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ActualDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.BillingDate).HasColumnType("datetime");
            entity.Property(e => e.Cpfcnpj).HasColumnName("CPFCNPJ");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.PurchaseAskDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.StoreSentDate).HasColumnType("datetime");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Doctor).WithMany(p => p.PatientSalesOrders)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.PatientSalesOrders)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.HealthcareProvider).WithMany(p => p.PatientSalesOrders)
                .HasForeignKey(d => d.HealthcareProviderId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.Account_HealthcareProviderId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.PatientSalesOrders)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientSalesOrders)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.Patient_PatientId");

            entity.HasOne(d => d.PatientSourceStringMap).WithMany(p => p.PatientSalesOrderPatientSourceStringMaps)
                .HasForeignKey(d => d.PatientSourceStringMapId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.StringMap_PatientSourceStringMapId");

            entity.HasOne(d => d.SolicitorStringMap).WithMany(p => p.PatientSalesOrderSolicitorStringMaps)
                .HasForeignKey(d => d.SolicitorStringMapId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.StringMap_SolicitorStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.PatientSalesOrderStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.StrengthMedicament).WithMany(p => p.PatientSalesOrders)
                .HasForeignKey(d => d.StrengthMedicamentId)
                .HasConstraintName("FK_dbo.PatientSalesOrder_dbo.StrengthMedicament_StrengthMedicamentId");
        });

        modelBuilder.Entity<PatientSalesOrderAudit>(entity =>
        {
            entity.ToTable("PatientSalesOrderAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Pharmacovigilance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Pharmacovigilance");

            entity.ToTable("Pharmacovigilance");

            entity.HasIndex(e => e.IncidentId, "IX_IncidentId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.Incident).WithMany(p => p.Pharmacovigilances)
                .HasForeignKey(d => d.IncidentId)
                .HasConstraintName("FK_dbo.Pharmacovigilance_dbo.Incident_IncidentId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Pharmacovigilances)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Pharmacovigilance_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Pharmacovigilances)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Pharmacovigilance_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<PharmacovigilanceAudit>(entity =>
        {
            entity.ToTable("PharmacovigilanceAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Phase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Phase");

            entity.ToTable("Phase");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Phases)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Phase_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<PhaseAudit>(entity =>
        {
            entity.ToTable("PhaseAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PhaseRulesMetadatum>(entity =>
        {
            entity.HasKey(e => e.PhaseRulesMetadataId).HasName("PK_dbo.PhaseRulesMetadata");

            entity.HasIndex(e => e.RulesAttributeMetadataId, "IX_RulesAttributeMetadataId").HasFillFactor(90);

            entity.Property(e => e.PhaseRulesMetadataId).ValueGeneratedNever();
            entity.Property(e => e.AttributeMetadataIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AttributeType)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<PhoneCall>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PhoneCall");

            entity.ToTable("PhoneCall");

            entity.HasIndex(e => e.CallForRegardingEntityId, "IX_CallForRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.CallFromRegardingEntityId, "IX_CallFromRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_PHONECALL_1");

            entity.HasIndex(e => e.UnSuccessfully, "IX_NC_PHONECALL_3").HasFillFactor(90);

            entity.HasIndex(e => new { e.PhoneCallStatusStringMapId, e.UnSuccessfully }, "IX_NC_PHONECALL_4").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_PHONECALL_6");

            entity.HasIndex(e => new { e.ActualEnd, e.HealthProgramId }, "IX_NC_PhoneCall").HasFillFactor(90);

            entity.HasIndex(e => e.UnSuccessfully, "IX_NC_PhoneCall_2").HasFillFactor(90);

            entity.HasIndex(e => e.OriginRegardingEntityId, "IX_OriginRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.PhoneCallStatusStringMapId, "IX_PhoneCallStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PhoneCallTypeStringMapId, "IX_PhoneCallTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.UnSuccessfulReasonStringMapId, "IX_UnSuccessfulReasonStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ActualEnd, "ix_nc_phonecall_0");

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "ix_nc_phonecall_5");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ActualEnd).HasColumnType("datetime");
            entity.Property(e => e.ActualStart).HasColumnType("datetime");
            entity.Property(e => e.AgentId).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CallId).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PhoneNumber1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PhoneNumber2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PhoneNumber3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ScheduledEnd).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStart).HasColumnType("datetime");

            entity.HasOne(d => d.CallForRegardingEntity).WithMany(p => p.PhoneCallCallForRegardingEntities)
                .HasForeignKey(d => d.CallForRegardingEntityId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.RegardingEntity_CallForRegardingEntityId");

            entity.HasOne(d => d.CallFromRegardingEntity).WithMany(p => p.PhoneCallCallFromRegardingEntities)
                .HasForeignKey(d => d.CallFromRegardingEntityId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.RegardingEntity_CallFromRegardingEntityId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.PhoneCalls)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.OriginRegardingEntity).WithMany(p => p.PhoneCallOriginRegardingEntities)
                .HasForeignKey(d => d.OriginRegardingEntityId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.RegardingEntity_OriginRegardingEntityId");

            entity.HasOne(d => d.PhoneCallStatusStringMap).WithMany(p => p.PhoneCallPhoneCallStatusStringMaps)
                .HasForeignKey(d => d.PhoneCallStatusStringMapId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.StringMap_PhoneCallStatusStringMapId");

            entity.HasOne(d => d.PhoneCallTypeStringMap).WithMany(p => p.PhoneCallPhoneCallTypeStringMaps)
                .HasForeignKey(d => d.PhoneCallTypeStringMapId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.StringMap_PhoneCallTypeStringMapId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.PhoneCallRegardingEntities)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.PhoneCallStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.UnSuccessfulReasonStringMap).WithMany(p => p.PhoneCallUnSuccessfulReasonStringMaps)
                .HasForeignKey(d => d.UnSuccessfulReasonStringMapId)
                .HasConstraintName("FK_dbo.PhoneCall_dbo.StringMap_UnSuccessfulReasonStringMapId");
        });

        modelBuilder.Entity<PhoneCallAudit>(entity =>
        {
            entity.ToTable("PhoneCallAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Posologe>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Posologe");

            entity.ToTable("Posologe");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Posologes)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Posologe_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<PosologeAudit>(entity =>
        {
            entity.ToTable("PosologeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PosologeMedicamentAudit>(entity =>
        {
            entity.ToTable("PosologeMedicamentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PostalCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PostalCodes");

            entity.HasIndex(e => e.AddressTypeStringMapId, "IX_AddressTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PostalCodeCityId, "IX_PostalCodeCityId").HasFillFactor(90);

            entity.HasIndex(e => e.PostalCodeStateId, "IX_PostalCodeStateId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Country).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.District).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PostalCode1)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("PostalCode");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AddressTypeStringMap).WithMany(p => p.PostalCodeAddressTypeStringMaps)
                .HasForeignKey(d => d.AddressTypeStringMapId)
                .HasConstraintName("FK_dbo.PostalCodes_dbo.StringMap_AddressTypeStringMapId");

            entity.HasOne(d => d.PostalCodeCity).WithMany(p => p.PostalCodes)
                .HasForeignKey(d => d.PostalCodeCityId)
                .HasConstraintName("FK_dbo.PostalCodes_dbo.PostalCodeCity_PostalCodeCityId");

            entity.HasOne(d => d.PostalCodeState).WithMany(p => p.PostalCodes)
                .HasForeignKey(d => d.PostalCodeStateId)
                .HasConstraintName("FK_dbo.PostalCodes_dbo.PostalCodeState_PostalCodeStateId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.PostalCodeStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.PostalCodes_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<PostalCodeCity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PostalCodeCity");

            entity.ToTable("PostalCodeCity");

            entity.HasIndex(e => e.PostalCodeStateId, "IX_PostalCodeStateId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.PostalCodeState).WithMany(p => p.PostalCodeCities)
                .HasForeignKey(d => d.PostalCodeStateId)
                .HasConstraintName("FK_dbo.PostalCodeCity_dbo.PostalCodeState_PostalCodeStateId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.PostalCodeCities)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.PostalCodeCity_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<PostalCodeCityAudit>(entity =>
        {
            entity.ToTable("PostalCodeCityAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PostalCodeState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PostalCodeState");

            entity.ToTable("PostalCodeState");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.PostalCodeStates)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.PostalCodeState_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<PostalCodeStateAudit>(entity =>
        {
            entity.ToTable("PostalCodeStateAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<PostalCodesAudit>(entity =>
        {
            entity.ToTable("PostalCodesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ProcessLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProcessLog");

            entity.ToTable("ProcessLog");

            entity.HasIndex(e => new { e.ObjectId, e.Status, e.IsScreenLocker, e.EntityCode, e.EntityName }, "idx_ObjectIdStatusEntity").HasFillFactor(90);

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EndProcessOn).HasColumnType("datetime");
            entity.Property(e => e.EntityName).HasMaxLength(50);
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(500)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsScreenLocker).HasColumnName("isScreenLocker");
            entity.Property(e => e.Version)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<ProcessLogAudit>(entity =>
        {
            entity.ToTable("ProcessLogAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Profarmaacesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("profarmaacesso");

            entity.Property(e => e.Acesso)
                .IsRequired()
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Cep).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CodPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cod paciente");
            entity.Property(e => e.DataDaTentativaDoAcessoSistema)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("Data da tentativa do Acesso Sistema");
            entity.Property(e => e.DataDeAcesso)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("Data de Acesso");
            entity.Property(e => e.DiasAcesso).HasColumnName("Dias Acesso");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FaseDoPaciente)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Fase do Paciente");
            entity.Property(e => e.FormaDeAcesso)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Forma de Acesso");
            entity.Property(e => e.Formularioid).HasColumnName("FORMULARIOID");
            entity.Property(e => e.IdLocalDeAcesso)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("id - Local de Acesso");
            entity.Property(e => e.LocalDeAcesso)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Local de Acesso");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoDaDificuldadeDeAcesso)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo da Dificuldade de Acesso");
            entity.Property(e => e.MotivoNãoAcesso)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo Não Acesso");
            entity.Property(e => e.Programa)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Situação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Source)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.StatusdoAcesso).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SubStatus)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Sub Status");
            entity.Property(e => e.TipoDeAcesso)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Tipo de Acesso");
            entity.Property(e => e.TypeOfCoverage)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Type of Coverage");
            entity.Property(e => e.Via)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("VIA");
        });

        modelBuilder.Entity<ProfarmaacessoAudit>(entity =>
        {
            entity.ToTable("profarmaacessoAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Profile");

            entity.ToTable("Profile");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<ProfileAudit>(entity =>
        {
            entity.ToTable("ProfileAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Purchase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Purchase");

            entity.ToTable("Purchase");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.FrequencyStringMapId, "IX_FrequencyStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.PrescriptionTypeStringMapId, "IX_PrescriptionTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Doctor).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Identifier).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Lot).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Observations).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PointOfPurchase).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PrescribedDosage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Account).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.Purchase_dbo.Account_AccountId");

            entity.HasOne(d => d.FrequencyStringMap).WithMany(p => p.PurchaseFrequencyStringMaps)
                .HasForeignKey(d => d.FrequencyStringMapId)
                .HasConstraintName("FK_dbo.Purchase_dbo.StringMap_FrequencyStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Purchase_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.Purchase_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.Patient).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.Purchase_dbo.Patient_PatientId");

            entity.HasOne(d => d.PrescriptionTypeStringMap).WithMany(p => p.PurchasePrescriptionTypeStringMaps)
                .HasForeignKey(d => d.PrescriptionTypeStringMapId)
                .HasConstraintName("FK_dbo.Purchase_dbo.StringMap_PrescriptionTypeStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.PurchaseStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Purchase_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Purchase_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<PurchaseAudit>(entity =>
        {
            entity.ToTable("PurchaseAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Question");

            entity.ToTable("Question");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.QuestionDescription).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Questions)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Question_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<QuestionAudit>(entity =>
        {
            entity.ToTable("QuestionAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<QuestionOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.QuestionOptions");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OptionDescription).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.QuestionOptions)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.QuestionOptions_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<QuestionOptionsAudit>(entity =>
        {
            entity.ToTable("QuestionOptionsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RegardingEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RegardingEntity");

            entity.ToTable("RegardingEntity");

            entity.HasIndex(e => e.RegardingObjectIdSource, "IX_NC_RegardingEntity").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingObjectIdTarget, "IX_NC_RegardingObjectIdTarget").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RegardingEntityNameSource).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RegardingEntityNameTarget).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RegardingObjectIdNameSource).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RegardingObjectIdNameTarget).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.RegardingEntities)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.RegardingEntity_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<RegardingEntityAudit>(entity =>
        {
            entity.ToTable("RegardingEntityAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RegionalManager>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RegionalManager");

            entity.ToTable("RegionalManager");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.PostalCodeCityId, "IX_PostalCodeCityId").HasFillFactor(90);

            entity.HasIndex(e => e.PostalCodeStateId, "IX_PostalCodeStateId").HasFillFactor(90);

            entity.HasIndex(e => e.RepresentativeId, "IX_RepresentativeId").HasFillFactor(90);

            entity.HasIndex(e => e.RepresentativeSupervisorId, "IX_RepresentativeSupervisorId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.RegionalManagers)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.RegionalManager_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.PostalCodeCity).WithMany(p => p.RegionalManagers)
                .HasForeignKey(d => d.PostalCodeCityId)
                .HasConstraintName("FK_dbo.RegionalManager_dbo.PostalCodeCity_PostalCodeCityId");

            entity.HasOne(d => d.PostalCodeState).WithMany(p => p.RegionalManagers)
                .HasForeignKey(d => d.PostalCodeStateId)
                .HasConstraintName("FK_dbo.RegionalManager_dbo.PostalCodeState_PostalCodeStateId");

            entity.HasOne(d => d.Representative).WithMany(p => p.RegionalManagerRepresentatives)
                .HasForeignKey(d => d.RepresentativeId)
                .HasConstraintName("FK_dbo.RegionalManager_dbo.Representative_RepresentativeId");

            entity.HasOne(d => d.RepresentativeSupervisor).WithMany(p => p.RegionalManagerRepresentativeSupervisors)
                .HasForeignKey(d => d.RepresentativeSupervisorId)
                .HasConstraintName("FK_dbo.RegionalManager_dbo.Representative_RepresentativeSupervisorId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.RegionalManagers)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.RegionalManager_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<RegionalManagerAudit>(entity =>
        {
            entity.ToTable("RegionalManagerAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RelatorioPacientesAtivosEmFrente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("relatorio_pacientes_ativos_em_frente");

            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FaixaEtaria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Faixa Etaria");
            entity.Property(e => e.GrauDeHemofília)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Grau de Hemofília");
            entity.Property(e => e.Hemcasa)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Idade).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Infusoes).HasColumnName("infusoes");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Modalidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NomeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome do Paciente");
            entity.Property(e => e.Peso).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TratamentoPrograma)
                .HasColumnType("datetime")
                .HasColumnName("Tratamento Programa");
            entity.Property(e => e.Visita).HasColumnName("visita");
        });

        modelBuilder.Entity<RelatorioPacientesAtivosEmFrenteAudit>(entity =>
        {
            entity.ToTable("relatorio_pacientes_ativos_em_frenteAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RelatorioPacientesAtivosEmFrenteTotalInfuso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("relatorio_pacientes_ativos_em_frente_Total_infusoes");

            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Referencia).HasColumnType("datetime");
            entity.Property(e => e.TotalDeInfusões).HasColumnName("Total de Infusões");
        });

        modelBuilder.Entity<RelatorioPacientesAtivosEmFrenteTotalInfusoesAudit>(entity =>
        {
            entity.ToTable("relatorio_pacientes_ativos_em_frente_Total_infusoesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RelatorioPacientesAtivosEmFrenteTotalVisita>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("relatorio_pacientes_ativos_em_frente_Total_Visitas");

            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Referencia).HasColumnType("datetime");
            entity.Property(e => e.TotalDeVisita).HasColumnName("Total de Visita");
        });

        modelBuilder.Entity<RelatorioPacientesAtivosEmFrenteTotalVisitasAudit>(entity =>
        {
            entity.ToTable("relatorio_pacientes_ativos_em_frente_Total_VisitasAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Representative>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Representative");

            entity.ToTable("Representative");

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => new { e.FullName, e.IsDeleted }, "IX_NC_Representative");

            entity.HasIndex(e => new { e.IsDeleted, e.Name }, "IX_NC_Representative_1");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress2)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.Account).WithMany(p => p.Representatives)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.Representative_dbo.Account_AccountId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Representatives)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Representative_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.User).WithMany(p => p.Representatives)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.Representative_dbo.User_UserId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Representatives)
                .HasForeignKey(d => d.ProfessionalTypeStringMapId)
                .HasConstraintName("FK_dbo.Representative_dbo.StringMap_ProfessionalTypeStringMapId");


        });

        modelBuilder.Entity<RepresentativeAccount>(entity =>
        {
            entity.HasKey(e => new { e.RepresentativeId, e.AccountId }).HasName("PK_dbo.RepresentativeAccount");

            entity.ToTable("RepresentativeAccount");
        });

        modelBuilder.Entity<RepresentativeAccountAudit>(entity =>
        {
            entity.ToTable("RepresentativeAccountAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RepresentativeAudit>(entity =>
        {
            entity.ToTable("RepresentativeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RepresentativeBkp15072021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Representative_bkp15072021");

            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailAddress1)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress2)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.SkypeUser)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone2)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<RepresentativeBkp15072021Audit>(entity =>
        {
            entity.ToTable("Representative_bkp15072021Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RepresentativeRegion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RepresentativeRegion");

            entity.ToTable("RepresentativeRegion");

            entity.HasIndex(e => e.RepresentativeId, "IX_Representative_Id");

            entity.HasIndex(e => e.ValidationResultId, "IX_ValidationResult_Id");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.RepresentativeId).HasColumnName("Representative_Id");
            entity.Property(e => e.ValidationResultId).HasColumnName("ValidationResult_Id");

            entity.HasOne(d => d.Representative).WithMany(p => p.RepresentativeRegions)
                .HasForeignKey(d => d.RepresentativeId)
                .HasConstraintName("FK_dbo.RepresentativeRegion_dbo.Representative_Representative_Id");

            entity.HasOne(d => d.ValidationResult).WithMany(p => p.RepresentativeRegions)
                .HasForeignKey(d => d.ValidationResultId)
                .HasConstraintName("FK_dbo.RepresentativeRegion_dbo.ValidationResult_ValidationResult_Id");
        });

        modelBuilder.Entity<RepresentativeRegionAudit>(entity =>
        {
            entity.ToTable("RepresentativeRegionAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ResourceWorkSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ResourceWorkSettings");

            entity.HasIndex(e => e.CalendarTypeStringMapStringMapId, "IX_CalendarTypeStringMap_StringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.ServiceTypeId, "IX_ServiceTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CalendarTypeStringMapStringMapId).HasColumnName("CalendarTypeStringMap_StringMapId");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PeriodAfternoon).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PeriodMorning).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PeriodNocturnal).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ValityEnd).HasColumnType("datetime");
            entity.Property(e => e.ValityStart).HasColumnType("datetime");

            entity.HasOne(d => d.CalendarTypeStringMapStringMap).WithMany(p => p.ResourceWorkSettingCalendarTypeStringMapStringMaps)
                .HasForeignKey(d => d.CalendarTypeStringMapStringMapId)
                .HasConstraintName("FK_dbo.ResourceWorkSettings_dbo.StringMap_CalendarTypeStringMap_StringMapId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.ResourceWorkSettings)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.ResourceWorkSettings_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.ResourceWorkSettings)
                .HasForeignKey(d => d.ServiceTypeId)
                .HasConstraintName("FK_dbo.ResourceWorkSettings_dbo.ServiceType_ServiceTypeId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ResourceWorkSettingStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ResourceWorkSettings_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<ResourceWorkSettingsAudit>(entity =>
        {
            entity.ToTable("ResourceWorkSettingsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RulesAttributeMetadataBkp30092021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RulesAttributeMetadata_bkp_30092021");

            entity.Property(e => e.AttributeMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AttributeType)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomValidation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DefaultCssClass).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExtensionCssClassExtension).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsPickList).HasColumnName("isPickList");
            entity.Property(e => e.Mask)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MaskValidation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PremiseFilter).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Regex)
                .HasMaxLength(500)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScreenAttribuiteSize)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScreenFilter).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SectionName).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<RulesAttributeMetadataBkp30092021audit>(entity =>
        {
            entity.ToTable("RulesAttributeMetadata_bkp_30092021Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<RulesAttributeMetadatum>(entity =>
        {
            entity.ToTable("RulesAttributeMetadata");

            entity.HasKey(e => e.RulesAttributeMetadataId)
                .HasName("PK_dbo.RulesAttributeMetadata");

            entity.HasIndex(e => e.AttributeMetadataId, "IX_AttributeMetadataId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EntityMetadataId, e.AttributeMetadataId, e.ProgramId }, "idx_EntityAtrributieProgram").HasFillFactor(90);

            entity.HasIndex(e => e.ProgramId, "idx_ProgramId").HasFillFactor(90);

            //entity.HasIndex(e => e.AttributeMetadataId, "IX_RulesAttributeMetadata_AttributeMetadataId");

            entity.Property(e => e.RulesAttributeMetadataId).ValueGeneratedNever();

            entity.Property(e => e.AttributeMetadataId);

            entity.Property(e => e.AttributeMetadataIdName).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.AttributeType)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.IsReadOnly);
            entity.Property(e => e.IsOnlyNumber);
            entity.Property(e => e.IsOnlyNumberDecimal);
            entity.Property(e => e.IsOnlyString);
            entity.Property(e => e.IsRequired);
            entity.Property(e => e.IsVisible);
            entity.Property(e => e.IsAllowNull);

            entity.Property(e => e.MaskValidation)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.Mask)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.isPickList);
            entity.Property(e => e.HidePickListOptions)
                .UseCollation("Latin1_General_CI_AS");

            entity.Property(e => e.CustomValidation)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.Regex)
                .HasMaxLength(1000)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.SectionName)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.SectionOrder);
            entity.Property(e => e.DefaultCssClass)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.ExtensionCssClassExtension)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.ScreenAttribuiteSize)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.DisplayOrder);
            entity.Property(e => e.ProgramId);
            entity.Property(e => e.SectionMetadataId);
            entity.Property(e => e.IsVisibleInFormAdd);
            entity.Property(e => e.IsVisibleInFormEdit);

            entity.Property(e => e.PremiseFilter)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.ScreenFilter)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.IsDisabledByHealthProgram);
            entity.Property(e => e.EntityMetadataIdName)
                .UseCollation("Latin1_General_CI_AS");

        });

        modelBuilder.Entity<SchedulingDate>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Data).HasColumnType("date");
        });

        modelBuilder.Entity<SchedulingDatesAudit>(entity =>
        {
            entity.ToTable("SchedulingDatesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<SchedulingHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SchedulingHistory");

            entity.ToTable("SchedulingHistory");

            entity.HasIndex(e => e.CampaignId, "IX_CampaignId");

            entity.HasIndex(e => e.ExamId, "IX_ExamId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.LogisticsScheduleId, "IX_LogisticsScheduleId").HasFillFactor(90);

            entity.HasIndex(e => e.ReschedulingReasonStringMapId, "IX_ReschedulingReasonStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VisitId, "IX_VisitId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.ScheduledDate).HasColumnType("datetime");
            entity.Property(e => e.ScheduledDateBefore).HasColumnType("datetime");

            entity.HasOne(d => d.Campaign).WithMany(p => p.SchedulingHistories)
                .HasForeignKey(d => d.CampaignId)
                .HasConstraintName("FK_dbo.SchedulingHistory_dbo.Campaign_CampaignId");

            entity.HasOne(d => d.Exam).WithMany(p => p.SchedulingHistories)
                .HasForeignKey(d => d.ExamId)
                .HasConstraintName("FK_dbo.SchedulingHistory_dbo.Exam_ExamId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.SchedulingHistories)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.SchedulingHistory_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.SchedulingHistories)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.SchedulingHistory_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.LogisticsSchedule).WithMany(p => p.SchedulingHistories)
                .HasForeignKey(d => d.LogisticsScheduleId)
                .HasConstraintName("FK_dbo.SchedulingHistory_dbo.LogisticsSchedule_LogisticsScheduleId");

            entity.HasOne(d => d.ReschedulingReasonStringMap).WithMany(p => p.SchedulingHistoryReschedulingReasonStringMaps)
                .HasForeignKey(d => d.ReschedulingReasonStringMapId)
                .HasConstraintName("FK_dbo.SchedulingHistory_dbo.StringMap_ReschedulingReasonStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.SchedulingHistoryStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.SchedulingHistory_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Visit).WithMany(p => p.SchedulingHistories)
                .HasForeignKey(d => d.VisitId)
                .HasConstraintName("FK_dbo.SchedulingHistory_dbo.Visit_VisitId");
        });

        modelBuilder.Entity<SchedulingHistoryAudit>(entity =>
        {
            entity.ToTable("SchedulingHistoryAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<SectionExcludedByPhase>(entity =>
        {
            entity.HasKey(e => e.SectionExcludedByPhaseId).HasName("PK_dbo.SectionExcludedByPhase");

            entity.ToTable("SectionExcludedByPhase");

            entity.HasIndex(e => e.EntityMetadataId, "IX_EntityMetadataId").HasFillFactor(90);

            entity.Property(e => e.SectionExcludedByPhaseId).ValueGeneratedNever();

            entity.HasOne(d => d.EntityMetadata).WithMany(p => p.SectionExcludedByPhases)
                .HasForeignKey(d => d.EntityMetadataId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SectionExcludedByPhase_dbo.EntityMetadata_EntityMetadataId");
        });

        modelBuilder.Entity<SectionExcludedByPhaseAudit>(entity =>
        {
            entity.ToTable("SectionExcludedByPhaseAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<SectionMetadataBkp24092021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SectionMetadata_bkp_24092021");

            entity.Property(e => e.CreatedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Help).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonStateCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SectionIdHtm).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Tooltip).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<SectionMetadataBkp24092021audit>(entity =>
        {
            entity.ToTable("SectionMetadata_bkp_24092021Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<SectionMetadatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SectionMetadata");

            entity.HasIndex(e => e.EntityMetadataId, "IX_EntityMetadataId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EntityMetadataId, e.ProgramId }, "idx_EntityAndProgramId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Help).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonStateCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SectionIdHtm).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Tooltip).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.EntityMetadata).WithMany(p => p.SectionMetadata)
                .HasForeignKey(d => d.EntityMetadataId)
                .HasConstraintName("FK_dbo.SectionMetadata_dbo.EntityMetadata_EntityMetadataId");
        });

        modelBuilder.Entity<ServiceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ServiceType");

            entity.ToTable("ServiceType");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ServiceCode).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ServiceTypes)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ServiceType_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<ServiceTypeAudit>(entity =>
        {
            entity.ToTable("ServiceTypeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Sms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SMS");

            entity.ToTable("SMS", tb => tb.HasTrigger("TR_CRE_SMS_DSP_TEMP"));

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.OriginRegardingEntityId, "IX_OriginRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.ParentSmsid, "IX_ParentSMSId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.SmsfromRegardingEntityId, "IX_SMSFromRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.SmstoRegardingEntityId, "IX_SMSToRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.SmsStatusStringMapId, "IX_SmsStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SmsTypeStringMapId, "IX_SmsTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SubjectTypeStringMapId, "IX_SubjectTypeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ActualSend).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Message).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ParentSmsid).HasColumnName("ParentSMSId");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduledSend).HasColumnType("datetime");
            entity.Property(e => e.SmsfromRegardingEntityId).HasColumnName("SMSFromRegardingEntityId");
            entity.Property(e => e.SmstoRegardingEntityId).HasColumnName("SMSToRegardingEntityId");
            entity.Property(e => e.TicketNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ToPhoneNumber).HasMaxLength(500);

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Sms)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.SMS_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.OriginRegardingEntity).WithMany(p => p.SmOriginRegardingEntities)
                .HasForeignKey(d => d.OriginRegardingEntityId)
                .HasConstraintName("FK_dbo.SMS_dbo.RegardingEntity_OriginRegardingEntityId");

            entity.HasOne(d => d.ParentSms).WithMany(p => p.InverseParentSms)
                .HasForeignKey(d => d.ParentSmsid)
                .HasConstraintName("FK_dbo.SMS_dbo.SMS_ParentSMSId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.SmRegardingEntities)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.SMS_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.SmsStatusStringMap).WithMany(p => p.SmSmsStatusStringMaps)
                .HasForeignKey(d => d.SmsStatusStringMapId)
                .HasConstraintName("FK_dbo.SMS_dbo.StringMap_SmsStatusStringMapId");

            entity.HasOne(d => d.SmsTypeStringMap).WithMany(p => p.SmSmsTypeStringMaps)
                .HasForeignKey(d => d.SmsTypeStringMapId)
                .HasConstraintName("FK_dbo.SMS_dbo.StringMap_SmsTypeStringMapId");

            entity.HasOne(d => d.SmsfromRegardingEntity).WithMany(p => p.SmSmsfromRegardingEntities)
                .HasForeignKey(d => d.SmsfromRegardingEntityId)
                .HasConstraintName("FK_dbo.SMS_dbo.RegardingEntity_SMSFromRegardingEntityId");

            entity.HasOne(d => d.SmstoRegardingEntity).WithMany(p => p.SmSmstoRegardingEntities)
                .HasForeignKey(d => d.SmstoRegardingEntityId)
                .HasConstraintName("FK_dbo.SMS_dbo.RegardingEntity_SMSToRegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.SmStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.SMS_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.SubjectTypeStringMap).WithMany(p => p.SmSubjectTypeStringMaps)
                .HasForeignKey(d => d.SubjectTypeStringMapId)
                .HasConstraintName("FK_dbo.SMS_dbo.StringMap_SubjectTypeStringMapId");
        });

        modelBuilder.Entity<Smsaudit>(entity =>
        {
            entity.ToTable("SMSAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<StepLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.StepLogs");

            entity.HasIndex(e => e.ProcessLogId, "IX_ProcessLogId").HasFillFactor(90);

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EndStepOn).HasColumnType("datetime");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(500)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Version)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ProcessLog).WithMany(p => p.StepLogs)
                .HasForeignKey(d => d.ProcessLogId)
                .HasConstraintName("FK_dbo.StepLogs_dbo.ProcessLog_ProcessLogId");
        });

        modelBuilder.Entity<StepLogsAudit>(entity =>
        {
            entity.ToTable("StepLogsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<StrengthMedicament>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.StrengthMedicament");

            entity.ToTable("StrengthMedicament");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.StrengthMedicaments)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.StrengthMedicament_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<StrengthMedicamentAudit>(entity =>
        {
            entity.ToTable("StrengthMedicamentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<StringMap>(entity =>
        {
            entity.HasKey(e => e.StringMapId).HasName("PK_dbo.StringMap");

            entity.ToTable("StringMap");

            entity.HasIndex(e => e.AttributeMetadataId, "IX_AttributeMetadataId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EntityMetadataId, e.AttributeMetadataId, e.ProgramId }, "idx_EntityAttributieProgramId").HasFillFactor(90);

            entity.Property(e => e.StringMapId).ValueGeneratedNever();
            entity.Property(e => e.AttributeMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Flag).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OptionName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OptionNameLangEn)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("OptionNameLangEN");

            entity.HasOne(d => d.AttributeMetadata).WithMany(p => p.StringMaps)
                .HasForeignKey(d => d.AttributeMetadataId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.StringMap_dbo.AttributeMetadata_AttributeMetadataId");
        });

        modelBuilder.Entity<StringMapAudit>(entity =>
        {
            entity.ToTable("StringMapAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Subject");

            entity.ToTable("Subject");

            entity.HasIndex(e => e.ParentSubjectId, "IX_ParentSubjectId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Version)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ParentSubject).WithMany(p => p.InverseParentSubject)
                .HasForeignKey(d => d.ParentSubjectId)
                .HasConstraintName("FK_dbo.Subject_dbo.Subject_ParentSubjectId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Subjects)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Subject_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<SubjectAudit>(entity =>
        {
            entity.ToTable("SubjectAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Survey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Survey");

            entity.ToTable("Survey");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SurveyTypeStringMapId, "IX_SurveyTypeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SourceEntityId).HasColumnName("SourceEntityID");
            entity.Property(e => e.SourceEntityName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SourceEntityTypeCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SurveyDescription).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Surveys)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Survey_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.SurveyStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Survey_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.SurveyTypeStringMap).WithMany(p => p.SurveySurveyTypeStringMaps)
                .HasForeignKey(d => d.SurveyTypeStringMapId)
                .HasConstraintName("FK_dbo.Survey_dbo.StringMap_SurveyTypeStringMapId");
        });

        modelBuilder.Entity<SurveyAudit>(entity =>
        {
            entity.ToTable("SurveyAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<SurveyQuestionList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SurveyQuestionList");

            entity.ToTable("SurveyQuestionList");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.SurveyQuestionLists)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.SurveyQuestionList_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<SurveyQuestionListAudit>(entity =>
        {
            entity.ToTable("SurveyQuestionListAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<SurveyResponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SurveyResponse");

            entity.ToTable("SurveyResponse");

            entity.HasIndex(e => new { e.QuestionId, e.SurveyId, e.IsDeleted }, "IX_NC_SurveyResponse").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ObjectId, "ix_nc_SurveyResponse_2");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ResponseDescription).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.SurveyResponses)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.SurveyResponse_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.SurveyResponses)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.SurveyResponse_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<SurveyResponseAudit>(entity =>
        {
            entity.ToTable("SurveyResponseAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<SurveyResponseLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SurveyResponseLine");

            entity.ToTable("SurveyResponseLine");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.SurveyResponseLines)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.SurveyResponseLine_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<SurveyResponseLineAudit>(entity =>
        {
            entity.ToTable("SurveyResponseLineAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TLogCollate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("T_LOG_COLLATE");

            entity.Property(e => e.Coluna)
                .HasMaxLength(250)
                .HasColumnName("COLUNA");
            entity.Property(e => e.Obs).HasColumnName("OBS");
            entity.Property(e => e.Query)
                .HasMaxLength(500)
                .HasColumnName("QUERY");
            entity.Property(e => e.Status).HasColumnName("STATUS");
            entity.Property(e => e.Tabela)
                .HasMaxLength(250)
                .HasColumnName("TABELA");
            entity.Property(e => e.Tamanho)
                .HasMaxLength(10)
                .HasColumnName("TAMANHO");
            entity.Property(e => e.Tipo)
                .HasMaxLength(500)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<TLogCollateaudit>(entity =>
        {
            entity.ToTable("T_LOG_COLLATEAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Care.Api.Models.Task>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Task");

            entity.ToTable("Task");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.OriginRegardingEntityId, "IX_OriginRegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingEntityId, "IX_RegardingEntityId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Task_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.OriginRegardingEntity).WithMany(p => p.TaskOriginRegardingEntities)
                .HasForeignKey(d => d.OriginRegardingEntityId)
                .HasConstraintName("FK_dbo.Task_dbo.RegardingEntity_OriginRegardingEntityId");

            entity.HasOne(d => d.RegardingEntity).WithMany(p => p.TaskRegardingEntities)
                .HasForeignKey(d => d.RegardingEntityId)
                .HasConstraintName("FK_dbo.Task_dbo.RegardingEntity_RegardingEntityId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Task_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<TaskAudit>(entity =>
        {
            entity.ToTable("TaskAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TbRelatorioJanssenSustenna>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TB_RELATORIO_JANSSEN_SUSTENNA");

            entity.Property(e => e.AnoAcesso)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Ano acesso");
            entity.Property(e => e.AnoCadastro)
                .HasMaxLength(4000)
                .HasColumnName("Ano (Cadastro)");
            entity.Property(e => e.AnoInativação).HasColumnName("Ano (inativação)");
            entity.Property(e => e.CidadeMédicoAcompanhamento)
                .IsRequired()
                .HasColumnName("Cidade médico acompanhamento");
            entity.Property(e => e.CidadePaciente)
                .IsRequired()
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade - Paciente");
            entity.Property(e => e.CrmMédicoAcompanhamento)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CRM médico acompanhamento");
            entity.Property(e => e.CrmMédicoPrescritor)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CRM médico prescritor");
            entity.Property(e => e.CrmUfMédicoAcompanhamento)
                .IsRequired()
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CRM UF médico acompanhamento");
            entity.Property(e => e.CrmUfMédicoPrescritor)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CRM UF médico prescritor");
            entity.Property(e => e.Código)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DataDoÚltimoEnvioDoBenefícioDeIt)
                .HasMaxLength(4000)
                .HasColumnName("Data do último envio do Benefício de IT");
            entity.Property(e => e.DiaDoTratamentoDoBenefícioDeIt).HasColumnName("Dia do Tratamento do Benefício de IT");
            entity.Property(e => e.DoseDoBenefícioDeIt)
                .IsRequired()
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Dose do Benefício de IT");
            entity.Property(e => e.DtCadastro)
                .HasMaxLength(4000)
                .HasColumnName("Dt. Cadastro");
            entity.Property(e => e.DtDaMigração)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Dt da migração");
            entity.Property(e => e.DtFinalTentativa)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Dt. Final Tentativa");
            entity.Property(e => e.DtInativação)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Dt. Inativação");
            entity.Property(e => e.DtInícioTentativa)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Dt. Início Tentativa");
            entity.Property(e => e.DtInícioTratamento)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Dt. Início Tratamento");
            entity.Property(e => e.DtÚltimoContato)
                .HasMaxLength(4000)
                .HasColumnName("Dt. Último Contato");
            entity.Property(e => e.DtÚltimoContatoSucesso)
                .HasMaxLength(4000)
                .HasColumnName("Dt. Último Contato Sucesso");
            entity.Property(e => e.ExcedeuLimiteDoBenefício)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Excedeu Limite do Benefício");
            entity.Property(e => e.Fase)
                .IsRequired()
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FormaDeAquisição)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Forma de Aquisição");
            entity.Property(e => e.InformaçõesPrimeiroLaudo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Informações primeiro laudo");
            entity.Property(e => e.LocalQueRecebeuOBenefícioDeIt)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Local que recebeu o Benefício de IT");
            entity.Property(e => e.MedicamentoAnterior)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Medicamento Anterior?");
            entity.Property(e => e.MedicamentoAnterior1)
                .IsRequired()
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Medicamento Anterior");
            entity.Property(e => e.MedicamentoAtual)
                .IsRequired()
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Medicamento Atual");
            entity.Property(e => e.MesAcesso)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Mes acesso");
            entity.Property(e => e.MesAcessoNum)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Mes acesso Num");
            entity.Property(e => e.MigrouDoBeneficioDeIt)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Migrou do Beneficio de IT ?");
            entity.Property(e => e.MotivoDeInativação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo de Inativação");
            entity.Property(e => e.MédicoAcompanhamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Médico Acompanhamento");
            entity.Property(e => e.MédicoPrescritor)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Médico Prescritor");
            entity.Property(e => e.MêsCadastro)
                .HasMaxLength(4000)
                .HasColumnName("Mês (Cadastro)");
            entity.Property(e => e.MêsCadastroNum).HasColumnName("Mês (Cadastro) num");
            entity.Property(e => e.MêsInativação)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Mês (inativação)");
            entity.Property(e => e.MêsInativaçãoNum).HasColumnName("Mês (inativação) Num");
            entity.Property(e => e.NovoLaudoEnviadoEstáCorreto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Novo laudo enviado está correto?");
            entity.Property(e => e.OrigemCadastro)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Origem Cadastro");
            entity.Property(e => e.OrigemTratamento)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Origem Tratamento");
            entity.Property(e => e.PacientesQueReceberamOBenefícioDeIt)
                .IsRequired()
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Pacientes que receberam o Benefício de IT");
            entity.Property(e => e.PacientesQueSolicitaramOBeneficioDeIt)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Pacientes que solicitaram o Beneficio de IT");
            entity.Property(e => e.Patologia)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PlanoDeSaúde)
                .IsRequired()
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Plano de saúde");
            entity.Property(e => e.PlanoDeSaúdeDetalhe)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Plano de Saúde detalhe");
            entity.Property(e => e.PossuiPlanoDeSaúde)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Possui plano de saúde");
            entity.Property(e => e.QtdContatosSemSucesso).HasColumnName("QTD CONTATOS SEM SUCESSO");
            entity.Property(e => e.QtdDeEnviosBenefícioDeIt).HasColumnName("Qtd de envios (benefício de  IT)");
            entity.Property(e => e.StatusAcesso)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Status Acesso");
            entity.Property(e => e.StatusDoPaciente)
                .IsRequired()
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status do paciente");
            entity.Property(e => e.SubstatusAcesso)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Substatus Acesso");
            entity.Property(e => e.TempoDeAcessoDias).HasColumnName("Tempo de Acesso (Dias)");
            entity.Property(e => e.TempoDeAcessoDiasResumo)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Tempo de acesso (dias) - Resumo");
            entity.Property(e => e.TempoDeProgramaEmMeses).HasColumnName("Tempo de Programa (em meses)");
            entity.Property(e => e.TempoDeProgramaEmMesesResumo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Tempo de Programa (em meses) - Resumo");
            entity.Property(e => e.TempoDeTratamentoEmMesesPersistência).HasColumnName("Tempo de tratamento em meses (persistência)");
            entity.Property(e => e.TempoDeTratamentoEmMesesPersistênciaResumo)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Tempo de tratamento em meses (persistência) - Resumo");
            entity.Property(e => e.TipoDeAcesso)
                .IsRequired()
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Tipo de acesso");
            entity.Property(e => e.UfPaciente)
                .IsRequired()
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UF Paciente");
        });

        modelBuilder.Entity<TbRelatorioJanssenSustennaaudit>(entity =>
        {
            entity.ToTable("TB_RELATORIO_JANSSEN_SUSTENNAAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblAcompanhamentoInfusaoShire>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_AcompanhamentoInfusao_Shire");

            entity.Property(e => e.CidadeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade do paciente");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CódigoDoTratamento).HasColumnName("Código do Tratamento");
            entity.Property(e => e.CódigoPaciente).HasColumnName("Código Paciente");
            entity.Property(e => e.DataAgendada)
                .HasMaxLength(4000)
                .HasColumnName("Data Agendada");
            entity.Property(e => e.DataDeInícioDoTratamento)
                .HasMaxLength(4000)
                .HasColumnName("Data de Início do Tratamento");
            entity.Property(e => e.DataInativação)
                .HasMaxLength(4000)
                .HasColumnName("Data Inativação");
            entity.Property(e => e.DataPrevista)
                .HasColumnType("datetime")
                .HasColumnName("Data Prevista");
            entity.Property(e => e.DataPrimeiraInfusão)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Data Primeira Infusão");
            entity.Property(e => e.DataPrimeiroAtendimento)
                .HasMaxLength(4000)
                .HasColumnName("Data Primeiro Atendimento");
            entity.Property(e => e.DataRealizada)
                .HasMaxLength(4000)
                .HasColumnName("Data Realizada");
            entity.Property(e => e.DataReferencia)
                .HasColumnType("datetime")
                .HasColumnName("Data Referencia");
            entity.Property(e => e.DataReferência)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Data Referência");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName(" Doença");
            entity.Property(e => e.EstadoDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Estado do Paciente");
            entity.Property(e => e.FaseDoTratamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Fase do tratamento");
            entity.Property(e => e.Importcode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("importcode");
            entity.Property(e => e.Iniciais).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LocalDaInfusão)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Local da Infusão");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoDaFalta)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo da Falta");
            entity.Property(e => e.MotivoDoAfastamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo do Afastamento");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OptionName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Paciente)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.QtdeAmpolasIdeais)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Qtde Ampolas Ideais");
            entity.Property(e => e.QtdeAmpolasReais)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Qtde Ampolas Reais");
            entity.Property(e => e.Situação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusDaInfusão)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status da Infusão");
            entity.Property(e => e.TipoDeAcesso)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Tipo de Acesso");
        });

        modelBuilder.Entity<TblAcompanhamentoInfusaoShireAudit>(entity =>
        {
            entity.ToTable("tbl_AcompanhamentoInfusao_ShireAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblCare>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TBL_CARE");

            entity.Property(e => e.CodigoDoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("codigo do paciente");
            entity.Property(e => e.CpfCare)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF_CARE");
            entity.Property(e => e.DataAgendadaCare)
                .HasColumnType("datetime")
                .HasColumnName("data agendada care");
            entity.Property(e => e.DataRealizadoCare)
                .HasColumnType("datetime")
                .HasColumnName("data_realizado_care");
            entity.Property(e => e.Diagnosticid).HasColumnName("diagnosticid");
            entity.Property(e => e.Exameid).HasColumnName("exameid");
            entity.Property(e => e.LocalExameCare)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL EXAME CARE");
            entity.Property(e => e.StatusDoExameCare)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("status do exame care");
            entity.Property(e => e.TipoDoExameCare)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("tipo_do_exame_care");
            entity.Property(e => e.VoucherCare)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("voucher_care");
        });

        modelBuilder.Entity<TblCareaudit>(entity =>
        {
            entity.ToTable("TBL_CAREAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblClinica>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TBL_CLINICAS");

            entity.Property(e => e.CpfClinica)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("CPF_CLINICA");
            entity.Property(e => e.DataRealizadaClinica)
                .HasColumnType("datetime")
                .HasColumnName("data_realizada_clinica");
            entity.Property(e => e.LocalExameClinica)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("LOCAL EXAME CLINICA");
            entity.Property(e => e.NomePaciente)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("NOME_PACIENTE");
            entity.Property(e => e.StatusVoucherClinica)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("status voucher clinica");
            entity.Property(e => e.VoucherClinica)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("voucher_clinica");
        });

        modelBuilder.Entity<TblClinicasaudit>(entity =>
        {
            entity.ToTable("TBL_CLINICASAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblCorrecaoInfuso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_correcao_infusoes");

            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OptionName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PreviewDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblCorrecaoInfusoesAudit>(entity =>
        {
            entity.ToTable("tbl_correcao_infusoesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblDddsNonoDigito>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TBL_DDDS_NONO_DIGITO");

            entity.Property(e => e.Ddd).HasColumnName("DDD");
        });

        modelBuilder.Entity<TblDddsNonoDigitoaudit>(entity =>
        {
            entity.ToTable("TBL_DDDS_NONO_DIGITOAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblDeletarInfusao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_deletar_infusao");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<TblDeletarInfusaoAudit>(entity =>
        {
            entity.ToTable("tbl_deletar_infusaoAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblFeriadosNacionai>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_feriados_nacionais");

            entity.Property(e => e.Data)
                .HasColumnType("smalldatetime")
                .HasColumnName("data");
            entity.Property(e => e.Descricao)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TblFeriadosNacionaisAudit>(entity =>
        {
            entity.ToTable("tbl_feriados_nacionaisAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblFinal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_final");

            entity.Property(e => e.Data)
                .IsRequired()
                .HasMaxLength(4000);
        });

        modelBuilder.Entity<TblFinalAudit>(entity =>
        {
            entity.ToTable("tbl_finalAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblInfuso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_infusoes");

            entity.Property(e => e.CidadeDoPaciente)
                .HasMaxLength(30)
                .HasColumnName("Cidade do paciente");
            entity.Property(e => e.Crm)
                .HasMaxLength(50)
                .HasColumnName("CRM");
            entity.Property(e => e.CódigoDoPaciente)
                .HasMaxLength(15)
                .HasColumnName("Código do paciente");
            entity.Property(e => e.DataDaPrimeiraInfusão)
                .HasMaxLength(10)
                .HasColumnName("Data da primeira infusão");
            entity.Property(e => e.DataPrevista)
                .HasColumnType("datetime")
                .HasColumnName("Data prevista");
            entity.Property(e => e.DataRealizada)
                .HasColumnType("datetime")
                .HasColumnName("Data realizada");
            entity.Property(e => e.DataReferencia).HasColumnType("datetime");
            entity.Property(e => e.Doença).HasMaxLength(15);
            entity.Property(e => e.EmailMedico).HasMaxLength(100);
            entity.Property(e => e.EstadoDoPaciente)
                .HasMaxLength(15)
                .HasColumnName("Estado do paciente");
            entity.Property(e => e.FaseDoTratamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Fase do tratamento");
            entity.Property(e => e.Gerente).HasMaxLength(30);
            entity.Property(e => e.IniciaisDoPaciente)
                .HasMaxLength(6)
                .HasColumnName("Iniciais do paciente");
            entity.Property(e => e.LocalDaInfusão)
                .HasMaxLength(100)
                .HasColumnName("Local da infusão");
            entity.Property(e => e.Medico).HasMaxLength(60);
            entity.Property(e => e.ModalidadeDaInfusão)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modalidade da infusão");
            entity.Property(e => e.ModalidadeDeFornecimento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modalidade de fornecimento");
            entity.Property(e => e.MotivoDaFalta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Motivo da falta");
            entity.Property(e => e.NomeDoPaciente)
                .HasMaxLength(400)
                .HasColumnName("Nome do paciente");
            entity.Property(e => e.QtdeAmpolas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Qtde ampolas");
            entity.Property(e => e.QtdeAmpolasIdeais)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Qtde ampolas ideais");
            entity.Property(e => e.Representante).HasMaxLength(50);
            entity.Property(e => e.Situação).HasMaxLength(7);
            entity.Property(e => e.StatusDaInfusão)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Status da infusão");
            entity.Property(e => e.Ufcrm)
                .HasMaxLength(5)
                .HasColumnName("UFCRM");
        });

        modelBuilder.Entity<TblInfusoes2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_infusoes_2");

            entity.Property(e => e.CidadeDoPaciente)
                .HasMaxLength(30)
                .HasColumnName("Cidade do paciente");
            entity.Property(e => e.Crm)
                .HasMaxLength(50)
                .HasColumnName("CRM");
            entity.Property(e => e.CódigoDoPaciente)
                .HasMaxLength(15)
                .HasColumnName("Código do paciente");
            entity.Property(e => e.DataDaPrimeiraInfusão)
                .HasMaxLength(10)
                .HasColumnName("Data da primeira infusão");
            entity.Property(e => e.DataPrevista)
                .HasColumnType("datetime")
                .HasColumnName("Data prevista");
            entity.Property(e => e.DataRealizada)
                .HasColumnType("datetime")
                .HasColumnName("Data realizada");
            entity.Property(e => e.DataReferencia).HasColumnType("datetime");
            entity.Property(e => e.Doença).HasMaxLength(15);
            entity.Property(e => e.EmailMedico).HasMaxLength(100);
            entity.Property(e => e.EstadoDoPaciente)
                .HasMaxLength(15)
                .HasColumnName("Estado do paciente");
            entity.Property(e => e.FaseDoTratamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Fase do tratamento");
            entity.Property(e => e.Gerente).HasMaxLength(30);
            entity.Property(e => e.IniciaisDoPaciente)
                .HasMaxLength(6)
                .HasColumnName("Iniciais do paciente");
            entity.Property(e => e.LocalDaInfusão)
                .HasMaxLength(100)
                .HasColumnName("Local da infusão");
            entity.Property(e => e.Medico).HasMaxLength(60);
            entity.Property(e => e.ModalidadeDaInfusão)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modalidade da infusão");
            entity.Property(e => e.ModalidadeDeFornecimento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modalidade de fornecimento");
            entity.Property(e => e.MotivoDaFalta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Motivo da falta");
            entity.Property(e => e.NomeDoPaciente)
                .HasMaxLength(400)
                .HasColumnName("Nome do paciente");
            entity.Property(e => e.QtdeAmpolas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Qtde ampolas");
            entity.Property(e => e.QtdeAmpolasIdeais)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Qtde ampolas ideais");
            entity.Property(e => e.Representante).HasMaxLength(50);
            entity.Property(e => e.Situação).HasMaxLength(7);
            entity.Property(e => e.StatusDaInfusão)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Status da infusão");
            entity.Property(e => e.Ufcrm)
                .HasMaxLength(5)
                .HasColumnName("UFCRM");
        });

        modelBuilder.Entity<TblInfusoes2audit>(entity =>
        {
            entity.ToTable("tbl_infusoes_2Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblInfusoesAudit>(entity =>
        {
            entity.ToTable("tbl_infusoesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblInfusoesPrevista>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_infusoes_previstas");

            entity.HasIndex(e => e.Linha, "IX_NC_tbl_infusoes_previstas");

            entity.Property(e => e.CidadeDoPaciente)
                .HasMaxLength(30)
                .HasColumnName("Cidade do paciente");
            entity.Property(e => e.Crm)
                .HasMaxLength(50)
                .HasColumnName("CRM");
            entity.Property(e => e.CódigoDoPaciente)
                .HasMaxLength(15)
                .HasColumnName("Código do paciente");
            entity.Property(e => e.DataDaPrimeiraInfusão)
                .HasMaxLength(10)
                .HasColumnName("Data da primeira infusão");
            entity.Property(e => e.DataPrevista)
                .HasMaxLength(19)
                .HasColumnName("Data prevista");
            entity.Property(e => e.DataRealizada)
                .HasColumnType("datetime")
                .HasColumnName("Data realizada");
            entity.Property(e => e.DataReferencia).HasColumnType("datetime");
            entity.Property(e => e.Doença).HasMaxLength(15);
            entity.Property(e => e.EmailMedico).HasMaxLength(100);
            entity.Property(e => e.EstadoDoPaciente)
                .HasMaxLength(15)
                .HasColumnName("Estado do paciente");
            entity.Property(e => e.FaseDoTratamento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Fase do tratamento");
            entity.Property(e => e.Gerente).HasMaxLength(30);
            entity.Property(e => e.IniciaisDoPaciente)
                .HasMaxLength(6)
                .HasColumnName("Iniciais do paciente");
            entity.Property(e => e.LocalDaInfusão)
                .HasMaxLength(100)
                .HasColumnName("Local da infusão");
            entity.Property(e => e.Medico).HasMaxLength(60);
            entity.Property(e => e.ModalidadeDaInfusão)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modalidade da infusão");
            entity.Property(e => e.ModalidadeDeFornecimento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modalidade de fornecimento");
            entity.Property(e => e.MotivoDaFalta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Motivo da falta");
            entity.Property(e => e.NomeDoPaciente)
                .HasMaxLength(400)
                .HasColumnName("Nome do paciente");
            entity.Property(e => e.QtdeAmpolas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Qtde ampolas");
            entity.Property(e => e.QtdeAmpolasIdeais)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Qtde ampolas ideais");
            entity.Property(e => e.Representante).HasMaxLength(50);
            entity.Property(e => e.Situação).HasMaxLength(7);
            entity.Property(e => e.StatusDaInfusão)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Status da infusão");
            entity.Property(e => e.Ufcrm)
                .HasMaxLength(5)
                .HasColumnName("UFCRM");
        });

        modelBuilder.Entity<TblInfusoesPrevistasAudit>(entity =>
        {
            entity.ToTable("tbl_infusoes_previstasAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblNovartisGeral>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TBL_NOVARTIS_GERAL");

            entity.Property(e => e.AlteraçãoManual).HasColumnName("Alteração Manual");
            entity.Property(e => e.CanceladoPor)
                .HasMaxLength(50)
                .HasColumnName("Cancelado Por");
            entity.Property(e => e.CidadeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade do Paciente");
            entity.Property(e => e.CnpjinstituicaoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CNPJInstituicaoPaciente");
            entity.Property(e => e.CodigoDoExame)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CodigoMultirao)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ConsultorVoucher)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Cpfpaciente).HasColumnName("CPFPaciente");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Criadoem).HasColumnType("datetime");
            entity.Property(e => e.Crm)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CRM");
            entity.Property(e => e.DataAgendadoPosPendenciaRecebimentoColeta).HasColumnType("date");
            entity.Property(e => e.DataAgendamentoLogistica).HasColumnType("datetime");
            entity.Property(e => e.DataAniversario).HasColumnType("date");
            entity.Property(e => e.DataCancelamentoVoucher)
                .HasColumnType("datetime")
                .HasColumnName("Data Cancelamento Voucher");
            entity.Property(e => e.DataColetaEmAnalise).HasMaxLength(4000);
            entity.Property(e => e.DataConclusao).HasColumnType("date");
            entity.Property(e => e.DataDevolucaoLogistica).HasColumnType("date");
            entity.Property(e => e.DataLaudoAnexado).HasMaxLength(4000);
            entity.Property(e => e.DataMultirao).HasColumnType("date");
            entity.Property(e => e.DataPendenciaRecebimentoColeta).HasColumnType("date");
            entity.Property(e => e.DataRecolhimento).HasMaxLength(4000);
            entity.Property(e => e.DataSolicitacaoExame).HasColumnType("date");
            entity.Property(e => e.DataSolicitacaoProtocolo).HasColumnType("datetime");
            entity.Property(e => e.DataTransporte).HasColumnType("date");
            entity.Property(e => e.DocumentosPendentes).HasColumnType("date");
            entity.Property(e => e.DocumentosPendentesPfs)
                .HasColumnType("date")
                .HasColumnName("DocumentosPendentesPFS");
            entity.Property(e => e.EmailPaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EnderecoInstituicaoPaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Especialidade)
                .IsUnicode(false)
                .HasColumnName("especialidade");
            entity.Property(e => e.ExameSolicitado)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Fase)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FaseDaPatologia).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Genero).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.GerenteVoucher)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Healthprogramid).HasColumnName("healthprogramid");
            entity.Property(e => e.InstituicaoPaciente)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Laboratorio)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medico)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoCancelamentoVoucher).HasColumnName("Motivo Cancelamento Voucher");
            entity.Property(e => e.Multirao)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NecessitaDevolucao)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NomePaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NumeroInstituicaoPaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ParceiroLogístico)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Parceiro Logístico");
            entity.Property(e => e.Patologia)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PrecisaDeLogística)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Precisa de Logística");
            entity.Property(e => e.Programa)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ProgramaVoucher)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ResultadoCompleto).HasColumnName("Resultado Completo");
            entity.Property(e => e.StatusDoMédico).HasColumnName("Status do Médico");
            entity.Property(e => e.StatusExame)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StatusVoucher)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.TelefonePaciente).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TipoAnalise)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoAnaliseMédico).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TipoDeColeta)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Tipo de Coleta");
            entity.Property(e => e.UfDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UF do Paciente");
            entity.Property(e => e.Ufcrm)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UFCRM");
            entity.Property(e => e.UfinstituicaoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UFInstituicaoPaciente");
            entity.Property(e => e.Uflaboratorio)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("UFLaboratorio");
            entity.Property(e => e.Visao).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Voucher).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.VoucherCriadoEm).HasColumnType("date");
            entity.Property(e => e.VoucherUsadoEm).HasColumnType("date");
        });

        modelBuilder.Entity<TblNovartisGeralaudit>(entity =>
        {
            entity.ToTable("TBL_NOVARTIS_GERALAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblRelatorioComparativoPatientmapEnzimai>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_relatorio_comparativo_patientmap_enzimais");

            entity.Property(e => e.AceitaVisita)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Aceita Visita");
            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Crm)
                .IsRequired()
                .HasColumnName("crm");
            entity.Property(e => e.DataConclusaoCadastro)
                .HasMaxLength(10)
                .HasColumnName("Data Conclusao Cadastro");
            entity.Property(e => e.DataEntrada)
                .HasMaxLength(19)
                .HasColumnName("Data Entrada");
            entity.Property(e => e.DataInativacao)
                .HasMaxLength(10)
                .HasColumnName("Data Inativacao");
            entity.Property(e => e.DataNascimento)
                .HasMaxLength(10)
                .HasColumnName("Data Nascimento");
            entity.Property(e => e.DataProximaAcao)
                .HasMaxLength(10)
                .HasColumnName("Data Proxima Acao");
            entity.Property(e => e.DetalheDoStatusDoTratamento)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Detalhe do status do Tratamento");
            entity.Property(e => e.Doenca)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FaixaEtaria)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Faixa Etaria");
            entity.Property(e => e.Fase).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Gerente)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medico)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoInativacao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo Inativacao");
            entity.Property(e => e.NomeOperadoraDeSaude)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome Operadora de Saude");
            entity.Property(e => e.OrigemDoCadastro)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Origem do Cadastro");
            entity.Property(e => e.PatientId)
                .HasMaxLength(36)
                .IsUnicode(false);
            entity.Property(e => e.PossuiPlanoDeSaude)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Possui Plano de Saude");
            entity.Property(e => e.Programa)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Região)
                .IsRequired()
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Representante)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Sexo).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SituacaoTratamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Situacao Tratamento");
            entity.Property(e => e.StatusDoTratamento)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status do Tratamento");
            entity.Property(e => e.UltimoContatoComSucesso)
                .HasMaxLength(19)
                .HasColumnName("Ultimo contato Com Sucesso");
            entity.Property(e => e.UltimoContatoSemSucesso)
                .HasMaxLength(19)
                .HasColumnName("Ultimo contato Sem Sucesso");
        });

        modelBuilder.Entity<TblRelatorioComparativoPatientmapEnzimaisAudit>(entity =>
        {
            entity.ToTable("tbl_relatorio_comparativo_patientmap_enzimaisAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TblRelatorioEntrenosEntyvioGeral2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_relatorio_entrenos_entyvio_geral_2");

            entity.Property(e => e.AcessoAprovado)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Acesso Aprovado?");
            entity.Property(e => e.AcessoVigente)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Acesso Vigente?");
            entity.Property(e => e.AgingIdade)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.CanalDeAcesso)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Canal de Acesso");
            entity.Property(e => e.CódPaciente)
                .HasMaxLength(50)
                .HasColumnName("Cód. Paciente");
            entity.Property(e => e.CódTratamento)
                .HasMaxLength(50)
                .HasColumnName("Cód. Tratamento");
            entity.Property(e => e.DataAdesão).HasColumnType("date");
            entity.Property(e => e.DataCriação)
                .HasColumnType("date")
                .HasColumnName("Data Criação");
            entity.Property(e => e.DataDeRespostaSobreAcesso)
                .HasColumnType("date")
                .HasColumnName("Data de Resposta sobre Acesso");
            entity.Property(e => e.DataDeSolicitaçãoDeAcesso)
                .HasColumnType("date")
                .HasColumnName("Data de Solicitação de Acesso");
            entity.Property(e => e.DataNascimento)
                .HasColumnType("date")
                .HasColumnName("Data Nascimento");
            entity.Property(e => e.DataPrescrição)
                .HasColumnType("date")
                .HasColumnName("Data Prescrição");
            entity.Property(e => e.DataQueForneceuOrientaçãoSobreAcesso)
                .HasColumnType("date")
                .HasColumnName("Data que Forneceu Orientação Sobre Acesso");
            entity.Property(e => e.DataResultado)
                .HasColumnType("date")
                .HasColumnName("Data Resultado");
            entity.Property(e => e.DataUtilizaçãoIt).HasColumnName("Data Utilização IT");
            entity.Property(e => e.DtPrimeiraDoseInduçãoDoTratamento)
                .HasColumnType("date")
                .HasColumnName("Dt. Primeira Dose Indução do Tratamento");
            entity.Property(e => e.DtPrimeiraDoseManutençãoDoTratamento)
                .HasColumnType("date")
                .HasColumnName("Dt. Primeira Dose Manutenção do Tratamento");
            entity.Property(e => e.DtRetornoAoMédico)
                .HasColumnType("date")
                .HasColumnName("Dt. Retorno ao Médico");
            entity.Property(e => e.DtÚltimaDoseInduçãoDoTratamento)
                .HasColumnType("date")
                .HasColumnName("Dt. Última Dose Indução do Tratamento");
            entity.Property(e => e.DtÚltimaDoseManutençãoDoTratamento)
                .HasColumnType("date")
                .HasColumnName("Dt. Última Dose Manutenção do Tratamento");
            entity.Property(e => e.DtÚltimoContato)
                .HasColumnType("date")
                .HasColumnName("Dt. Último Contato");
            entity.Property(e => e.DtÚltimoContatoEfetivo)
                .HasColumnType("date")
                .HasColumnName("Dt. Último Contato Efetivo");
            entity.Property(e => e.EtapaAtual).HasColumnName("Etapa Atual");
            entity.Property(e => e.FaixaEtaria)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Faixa Etaria");
            entity.Property(e => e.FaseAtual)
                .HasMaxLength(150)
                .HasColumnName("Fase Atual");
            entity.Property(e => e.FormaDeAcesso)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FrequênciaManutençãoTrat)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Frequência Manutenção Trat.");
            entity.Property(e => e.Idade).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.InativadoEm)
                .HasColumnType("date")
                .HasColumnName("Inativado Em");
            entity.Property(e => e.Indicação).HasMaxLength(150);
            entity.Property(e => e.LocalExame)
                .HasMaxLength(150)
                .HasColumnName("Local Exame");
            entity.Property(e => e.MedicamentosAnteriores).HasColumnName("Medicamentos Anteriores");
            entity.Property(e => e.MotivoInativação).HasColumnName("Motivo Inativação");
            entity.Property(e => e.Médico).HasMaxLength(200);
            entity.Property(e => e.NroCrm).HasColumnName("Nro. CRM");
            entity.Property(e => e.OperadoraDeSaúde)
                .HasMaxLength(150)
                .HasColumnName("Operadora de Saúde");
            entity.Property(e => e.OperadoraDeSaúdeAcesso)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Operadora de Saúde - Acesso");
            entity.Property(e => e.PossuiPlano)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Possui Plano?");
            entity.Property(e => e.PossuiPrescrição)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("Possui Prescrição?");
            entity.Property(e => e.Produto).HasMaxLength(150);
            entity.Property(e => e.QtdDosesInduçãoDoTratamento).HasColumnName("Qtd. Doses Indução do Tratamento");
            entity.Property(e => e.QtdDosesManutençãoDoTratamento).HasColumnName("Qtd. Doses Manutenção do tratamento");
            entity.Property(e => e.QtdeContatos).HasColumnName("Qtde Contatos");
            entity.Property(e => e.QtdeContatosEfetivos).HasColumnName("Qtde. Contatos Efetivos");
            entity.Property(e => e.QuantidadePrescrição).HasColumnName("Quantidade Prescrição");
            entity.Property(e => e.RecebeuIt)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Recebeu IT?");
            entity.Property(e => e.Situação)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TratamentosAnteriores).HasColumnName("Tratamentos Anteriores");
            entity.Property(e => e.UfCrm).HasColumnName("UF CRM");
            entity.Property(e => e.UfNúmeroCrm).HasColumnName("UF/Número CRM");
            entity.Property(e => e.ÓrgãoPúblico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Órgão Público");
        });

        modelBuilder.Entity<TblRelatorioEntrenosEntyvioGeral2audit>(entity =>
        {
            entity.ToTable("tbl_relatorio_entrenos_entyvio_geral_2Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TempContingenciaAudit>(entity =>
        {
            entity.ToTable("TempContingenciaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TempContingencium>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.NoteText).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TempCuidarMaisAcesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CUIDAR_MAIS_ACESSO");

            entity.Property(e => e.Documento)
                .IsRequired()
                .HasMaxLength(217)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.Exame)
                .IsRequired()
                .HasMaxLength(1026)
                .IsUnicode(false)
                .HasColumnName("exame");
            entity.Property(e => e.Forma)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("forma");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Procedimento)
                .IsRequired()
                .HasMaxLength(436)
                .IsUnicode(false)
                .HasColumnName("procedimento");
            entity.Property(e => e.Via)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("via");
        });

        modelBuilder.Entity<TempCuidarMaisAcessoAccessProcedureByProgram>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgram");

            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.Documento)
                .IsRequired()
                .HasMaxLength(183)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.Forma)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("forma");
            entity.Property(e => e.Procedimento)
                .IsRequired()
                .HasMaxLength(775)
                .IsUnicode(false)
                .HasColumnName("procedimento");
            entity.Property(e => e.Via)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("via");
        });

        modelBuilder.Entity<TempCuidarMaisAcessoAccessProcedureByProgramAudit>(entity =>
        {
            entity.ToTable("TEMP_CUIDAR_MAIS_ACESSO_AccessProcedureByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TempCuidarMaisAcessoaudit>(entity =>
        {
            entity.ToTable("TEMP_CUIDAR_MAIS_ACESSOAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TempInfusionCare>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempInfusionCare");

            entity.Property(e => e.MostRecentAdministrationDate)
                .HasColumnType("datetime")
                .HasColumnName("Most Recent Administration Date");
            entity.Property(e => e.WhoAdministerTreatment)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Who Administer Treatment?");
        });

        modelBuilder.Entity<TempInfusionCareAudit>(entity =>
        {
            entity.ToTable("TempInfusionCareAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TempPesquisa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempPesquisa");

            entity.Property(e => e.DataPesquisa).HasColumnType("datetime");
            entity.Property(e => e.Diagnosticid).HasColumnName("DIAGNOSTICID");
            entity.Property(e => e.Pergunta1)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("PERGUNTA1");
            entity.Property(e => e.Pergunta2)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("PERGUNTA2");
        });

        modelBuilder.Entity<TempPesquisaAudit>(entity =>
        {
            entity.ToTable("TempPesquisaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Template>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Template");

            entity.ToTable("Template");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.SmsTypeStringMapId, "IX_SmsTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TemplateTypeStringMapId, "IX_TemplateTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ValidationResultId, "IX_ValidationResult_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Message).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Subject).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ValidationResultId).HasColumnName("ValidationResult_Id");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Templates)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Template_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.SmsTypeStringMap).WithMany(p => p.TemplateSmsTypeStringMaps)
                .HasForeignKey(d => d.SmsTypeStringMapId)
                .HasConstraintName("FK_dbo.Template_dbo.StringMap_SmsTypeStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TemplateStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Template_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.TemplateTypeStringMap).WithMany(p => p.TemplateTemplateTypeStringMaps)
                .HasForeignKey(d => d.TemplateTypeStringMapId)
                .HasConstraintName("FK_dbo.Template_dbo.StringMap_TemplateTypeStringMapId");

            entity.HasOne(d => d.ValidationResult).WithMany(p => p.Templates)
                .HasForeignKey(d => d.ValidationResultId)
                .HasConstraintName("FK_dbo.Template_dbo.ValidationResult_ValidationResult_Id");
        });

        modelBuilder.Entity<TemplateAudit>(entity =>
        {
            entity.ToTable("TemplateAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TesteSomar22112019>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("teste_somar_22112019");

            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Medico)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MesInativacao).HasMaxLength(4000);
            entity.Property(e => e.Situacao)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusDetalheDoTratamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status detalhe do tratamento");
            entity.Property(e => e.StatusDoTratamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status do tratamento");
        });

        modelBuilder.Entity<TesteSomar22112019audit>(entity =>
        {
            entity.ToTable("teste_somar_22112019Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TesteXml>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TESTE_XML");

            entity.Property(e => e.Xml)
                .IsUnicode(false)
                .HasColumnName("XML");
        });

        modelBuilder.Entity<TesteXmlaudit>(entity =>
        {
            entity.ToTable("TESTE_XMLAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TherapeuticHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TherapeuticHistory");

            entity.ToTable("TherapeuticHistory");

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.DosageUnitStringMapId, "IX_DosageUnitStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentId, "IX_IncidentId");

            entity.HasIndex(e => e.MedicamentCompetitorId, "IX_MedicamentCompetitorId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SupplyMethodStringMapId, "IX_SupplyMethodStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateModificationDosage).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FinishDate).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Doctor).WithMany(p => p.TherapeuticHistories)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.DosageUnitStringMap).WithMany(p => p.TherapeuticHistoryDosageUnitStringMaps)
                .HasForeignKey(d => d.DosageUnitStringMapId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.StringMap_DosageUnitStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.TherapeuticHistories)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Incident).WithMany(p => p.TherapeuticHistories)
                .HasForeignKey(d => d.IncidentId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.Incident_IncidentId");

            entity.HasOne(d => d.MedicamentCompetitor).WithMany(p => p.TherapeuticHistories)
                .HasForeignKey(d => d.MedicamentCompetitorId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.MedicamentCompetitor_MedicamentCompetitorId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.TherapeuticHistories)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TherapeuticHistoryStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.SupplyMethodStringMap).WithMany(p => p.TherapeuticHistorySupplyMethodStringMaps)
                .HasForeignKey(d => d.SupplyMethodStringMapId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.StringMap_SupplyMethodStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TherapeuticHistories)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.TherapeuticHistory_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<TherapeuticHistoryAudit>(entity =>
        {
            entity.ToTable("TherapeuticHistoryAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TherapeuticType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TherapeuticType");

            entity.ToTable("TherapeuticType");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TherapeuticTypes)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TherapeuticType_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<TherapeuticTypeAudit>(entity =>
        {
            entity.ToTable("TherapeuticTypeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Tmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp");

            entity.Property(e => e.Healthprogramid).HasColumnName("HEALTHPROGRAMID");
            entity.Property(e => e.Voucher)
                .IsRequired()
                .HasMaxLength(52);
        });

        modelBuilder.Entity<TmpAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_account");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpAccountAudit>(entity =>
        {
            entity.ToTable("tmp_accountAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpAccountSeetingByProgram>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_accountSeetingByProgram");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpAccountSeetingByProgramAudit>(entity =>
        {
            entity.ToTable("tmp_accountSeetingByProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpAmpola>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_AMPOLAS");

            entity.Property(e => e.Ampouleamount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ampouleamount");
            entity.Property(e => e.Ampouleamountcorrigido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ampouleamountcorrigido");
            entity.Property(e => e.Ampouleamountexpected)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ampouleamountexpected");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("name");
            entity.Property(e => e.Weight)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("weight");
            entity.Property(e => e.WeightAnterior).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TmpAmpolasaudit>(entity =>
        {
            entity.ToTable("TMP_AMPOLASAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpApoioDiagnostico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_APOIO_DIAGNOSTICO");

            entity.Property(e => e.Doctorid).HasColumnName("DOCTORID");
            entity.Property(e => e.Qtde).HasColumnName("QTDE");
        });

        modelBuilder.Entity<TmpApoioDiagnosticoaudit>(entity =>
        {
            entity.ToTable("TMP_APOIO_DIAGNOSTICOAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpAudit>(entity =>
        {
            entity.ToTable("tmpAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpDataDeAdesao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpDataDeAdesao");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DataDaAdesao).HasColumnType("date");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Programa)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TmpDataDeAdesaoAudit>(entity =>
        {
            entity.ToTable("TmpDataDeAdesaoAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpDataUltimaRetiradaAmostra>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_DATA_ULTIMA_RETIRADA_AMOSTRA");

            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Doctorid).HasColumnName("DOCTORID");
        });

        modelBuilder.Entity<TmpDataUltimaRetiradaAmostraaudit>(entity =>
        {
            entity.ToTable("TMP_DATA_ULTIMA_RETIRADA_AMOSTRAAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpDeletar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_deletar");

            entity.Property(e => e.Action).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Cnpj).HasColumnName("CNPJ");
            entity.Property(e => e.Cpfdoctor)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPFDoctor");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Cte)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CTE");
            entity.Property(e => e.DateForCollecting).HasColumnType("datetime");
            entity.Property(e => e.DateForReceiving).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExamId1).HasColumnName("Exam_Id");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InternalControl)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.IsLegacy).HasColumnName("isLegacy");
            entity.Property(e => e.LogisticsPartnerCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduledEnd).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStart).HasColumnType("datetime");
            entity.Property(e => e.Telephone).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TmpDeletar10Dup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_deletar_10_dup");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("data");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OptionName).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TmpDeletar10DupAudit>(entity =>
        {
            entity.ToTable("tmp_deletar_10_dupAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpDeletarAudit>(entity =>
        {
            entity.ToTable("tmp_deletarAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpDropoutsaudit>(entity =>
        {
            entity.ToTable("TMP_DROPOUTSAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpDuplicidadeVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_duplicidade_vouchers");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CriacaoVoucher).HasColumnType("datetime");
            entity.Property(e => e.Exame)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Voucher).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TmpDuplicidadeVouchersAudit>(entity =>
        {
            entity.ToTable("tmp_duplicidade_vouchersAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpEnrolled>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_ENROLLED");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas).HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais).HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpEnrolledaudit>(entity =>
        {
            entity.ToTable("TMP_ENROLLEDAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpEntradaLocal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_ENTRADA_LOCAL");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas).HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais).HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpEntradaLocalaudit>(entity =>
        {
            entity.ToTable("TMP_ENTRADA_LOCALAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpEntradaPausa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_ENTRADA_PAUSA");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas).HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais).HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpEntradaPausaaudit>(entity =>
        {
            entity.ToTable("TMP_ENTRADA_PAUSAAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpFinalPacientesEmFrente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_final_pacientes_em_frente");

            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FaixaEtaria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Faixa Etaria");
            entity.Property(e => e.GrauDeHemofília)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Grau de Hemofília");
            entity.Property(e => e.Hemcasa)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Idade).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Infusoes).HasColumnName("infusoes");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Modalidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NomeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome do Paciente");
            entity.Property(e => e.Peso).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TratamentoPrograma)
                .HasColumnType("datetime")
                .HasColumnName("Tratamento Programa");
            entity.Property(e => e.Visita).HasColumnName("visita");
        });

        modelBuilder.Entity<TmpFinalPacientesEmFrenteAudit>(entity =>
        {
            entity.ToTable("tmp_final_pacientes_em_frenteAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpInfusionTeste>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_infusion_teste");

            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OptionName)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("optionName");
            entity.Property(e => e.PreviewDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpInfusionTesteAudit>(entity =>
        {
            entity.ToTable("tmp_infusion_testeAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpInfusionTesteInserir>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_infusion_teste_inserir");

            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OptionName)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("optionName");
            entity.Property(e => e.PreviewDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpInfusionTesteInserirAudit>(entity =>
        {
            entity.ToTable("tmp_infusion_teste_inserirAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpInfuso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_INFUSOES");

            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmpouleAmountExpected).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CidadeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade do paciente");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CódigoDoTratamento).HasColumnName("Código do Tratamento");
            entity.Property(e => e.CódigoPaciente).HasColumnName("Código Paciente");
            entity.Property(e => e.DataAgendada)
                .HasMaxLength(4000)
                .HasColumnName("Data Agendada");
            entity.Property(e => e.DataInativação)
                .HasMaxLength(4000)
                .HasColumnName("Data Inativação");
            entity.Property(e => e.DataInícioDoTratamento)
                .HasMaxLength(4000)
                .HasColumnName("Data Início do Tratamento");
            entity.Property(e => e.DataPrimeiraInfusão)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Data Primeira Infusão");
            entity.Property(e => e.DataPrimeiroAtendimento)
                .HasMaxLength(4000)
                .HasColumnName("Data Primeiro Atendimento");
            entity.Property(e => e.DataRealizada)
                .HasMaxLength(4000)
                .HasColumnName("Data Realizada");
            entity.Property(e => e.DataReferência)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Data Referência");
            entity.Property(e => e.DataReferência2)
                .HasColumnType("datetime")
                .HasColumnName("Data Referência2");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName(" Doença");
            entity.Property(e => e.EstadoDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Estado do Paciente");
            entity.Property(e => e.FlagRealizado).HasColumnName("Flag Realizado");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LocalDaInfusão)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Local da Infusão");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoDoAfastamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo do Afastamento");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OptionName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Paciente)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Situação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusDaInfusão)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status da Infusão");
            entity.Property(e => e.TipoDeAcesso)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Tipo de Acesso");
        });

        modelBuilder.Entity<TmpInfusoesCompleto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_INFUSOES_COMPLETO");

            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmpouleAmountExpected).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CidadeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade do paciente");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CódigoDoTratamento).HasColumnName("Código do Tratamento");
            entity.Property(e => e.CódigoPaciente).HasColumnName("Código Paciente");
            entity.Property(e => e.DataAgendada)
                .HasMaxLength(4000)
                .HasColumnName("Data Agendada");
            entity.Property(e => e.DataCriacaoTratamento)
                .HasColumnType("datetime")
                .HasColumnName("Data Criacao Tratamento");
            entity.Property(e => e.DataInativação)
                .HasColumnType("datetime")
                .HasColumnName("Data Inativação");
            entity.Property(e => e.DataInfusao1)
                .HasColumnType("datetime")
                .HasColumnName("Data_Infusao_1");
            entity.Property(e => e.DataInícioDoTratamento)
                .HasMaxLength(4000)
                .HasColumnName("Data Início do Tratamento");
            entity.Property(e => e.DataPrimeiraInfusão)
                .HasColumnType("datetime")
                .HasColumnName("Data Primeira Infusão");
            entity.Property(e => e.DataPrimeiroAtendimento)
                .HasMaxLength(4000)
                .HasColumnName("Data Primeiro Atendimento");
            entity.Property(e => e.DataRealizada)
                .HasMaxLength(4000)
                .HasColumnName("Data Realizada");
            entity.Property(e => e.DataReferência)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Data Referência");
            entity.Property(e => e.DataReferência2)
                .HasColumnType("datetime")
                .HasColumnName("Data Referência2");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName(" Doença");
            entity.Property(e => e.EstadoDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Estado do Paciente");
            entity.Property(e => e.FlagRealizado).HasColumnName("Flag Realizado");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LocalDaInfusão)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Local da Infusão");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoDoAfastamento)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo do Afastamento");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Name)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("name");
            entity.Property(e => e.NomeGerente)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome Gerente");
            entity.Property(e => e.NomeRepresentante)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome Representante");
            entity.Property(e => e.OptionName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Paciente)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Situação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusDaInfusão)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status da Infusão");
            entity.Property(e => e.TipoDeAcesso)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Tipo de Acesso");
        });

        modelBuilder.Entity<TmpInfusoesCompletoAdd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_INFUSOES_COMPLETO_ADD");

            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmpouleAmountExpected).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CidadeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade do paciente");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CódigoDoTratamento).HasColumnName("Código do Tratamento");
            entity.Property(e => e.CódigoPaciente).HasColumnName("Código Paciente");
            entity.Property(e => e.DataAgendada)
                .HasMaxLength(4000)
                .HasColumnName("Data Agendada");
            entity.Property(e => e.DataCriacaoTratamento)
                .HasColumnType("datetime")
                .HasColumnName("Data Criacao Tratamento");
            entity.Property(e => e.DataInativação)
                .HasColumnType("datetime")
                .HasColumnName("Data Inativação");
            entity.Property(e => e.DataInfusao1)
                .HasColumnType("datetime")
                .HasColumnName("Data_Infusao_1");
            entity.Property(e => e.DataInícioDoTratamento)
                .HasMaxLength(4000)
                .HasColumnName("Data Início do Tratamento");
            entity.Property(e => e.DataPrimeiraInfusão)
                .HasColumnType("datetime")
                .HasColumnName("Data Primeira Infusão");
            entity.Property(e => e.DataPrimeiroAtendimento)
                .HasMaxLength(4000)
                .HasColumnName("Data Primeiro Atendimento");
            entity.Property(e => e.DataRealizada)
                .HasMaxLength(4000)
                .HasColumnName("Data Realizada");
            entity.Property(e => e.DataReferência)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Data Referência");
            entity.Property(e => e.DataReferência2)
                .HasColumnType("datetime")
                .HasColumnName("Data Referência2");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName(" Doença");
            entity.Property(e => e.EstadoDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Estado do Paciente");
            entity.Property(e => e.FlagRealizado).HasColumnName("Flag Realizado");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LocalDaInfusão)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Local da Infusão");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoDoAfastamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo do Afastamento");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("name");
            entity.Property(e => e.NomeGerente)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome Gerente");
            entity.Property(e => e.NomeRepresentante)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome Representante");
            entity.Property(e => e.OptionName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Paciente)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Situação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusDaInfusão)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status da Infusão");
            entity.Property(e => e.TipoDeAcesso)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Tipo de Acesso");
        });

        modelBuilder.Entity<TmpInfusoesCompletoAddaudit>(entity =>
        {
            entity.ToTable("TMP_INFUSOES_COMPLETO_ADDAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpInfusoesCompletoaudit>(entity =>
        {
            entity.ToTable("TMP_INFUSOES_COMPLETOAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpInfusoesRoll>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_INFUSOES_Roll");

            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmpouleAmountExpected).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CidadeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Cidade do paciente");
            entity.Property(e => e.Cpf)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF");
            entity.Property(e => e.CódigoDoTratamento).HasColumnName("Código do Tratamento");
            entity.Property(e => e.CódigoPaciente).HasColumnName("Código Paciente");
            entity.Property(e => e.DataAgendada)
                .HasMaxLength(4000)
                .HasColumnName("Data Agendada");
            entity.Property(e => e.DataInativação)
                .HasMaxLength(4000)
                .HasColumnName("Data Inativação");
            entity.Property(e => e.DataInícioDoTratamento)
                .HasMaxLength(4000)
                .HasColumnName("Data Início do Tratamento");
            entity.Property(e => e.DataPrimeiraInfusão)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("Data Primeira Infusão");
            entity.Property(e => e.DataPrimeiroAtendimento)
                .HasMaxLength(4000)
                .HasColumnName("Data Primeiro Atendimento");
            entity.Property(e => e.DataRealizada)
                .HasMaxLength(4000)
                .HasColumnName("Data Realizada");
            entity.Property(e => e.DataReferência)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Data Referência");
            entity.Property(e => e.DataReferência2)
                .HasColumnType("datetime")
                .HasColumnName("Data Referência2");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName(" Doença");
            entity.Property(e => e.EstadoDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Estado do Paciente");
            entity.Property(e => e.FlagRealizado).HasColumnName("Flag Realizado");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LocalDaInfusão)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Local da Infusão");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.MotivoDoAfastamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Motivo do Afastamento");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OptionName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Paciente)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Situação)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusDaInfusão)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Status da Infusão");
            entity.Property(e => e.TipoDeAcesso)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Tipo de Acesso");
        });

        modelBuilder.Entity<TmpInfusoesRollAudit>(entity =>
        {
            entity.ToTable("TMP_INFUSOES_RollAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpInfusoesaudit>(entity =>
        {
            entity.ToTable("TMP_INFUSOESAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpKpiInfuso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_kpi_infusoes");

            entity.Property(e => e.InfusionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NewTratamentoname)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("new_tratamentoname");
            entity.Property(e => e.QtdAmpolas)
                .HasColumnType("numeric(23, 10)")
                .HasColumnName("qtd_ampolas");
            entity.Property(e => e.QtdAmpolasIdeais)
                .HasColumnType("numeric(23, 10)")
                .HasColumnName("qtd_ampolas_ideais");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TmpKpiInfusoesAudit>(entity =>
        {
            entity.ToTable("tmp_kpi_infusoesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpLogisticSchedule>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_LogisticSchedule");

            entity.Property(e => e.CodigoNoMaterial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Codigo no material");
            entity.Property(e => e.DocumentStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Document Status");
            entity.Property(e => e.IdMedicamentoCare)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Id Medicamento CARE");
            entity.Property(e => e.IdProgramaCare)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Id Programa CARE");
            entity.Property(e => e.NomeDoMaterial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nome do Material");
            entity.Property(e => e.NomeDoPrograma)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Nome do Programa");
            entity.Property(e => e.ProgramaNoCare)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Programa NO CARE");
        });

        modelBuilder.Entity<TmpLogisticScheduleAudit>(entity =>
        {
            entity.ToTable("TMP_LogisticScheduleAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpMarcarComoIsDeletedNoCare>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_marcar_como_is_deleted_no_care");
        });

        modelBuilder.Entity<TmpMarcarComoIsDeletedNoCareAudit>(entity =>
        {
            entity.ToTable("tmp_marcar_como_is_deleted_no_careAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpMarcarDeleted>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_marcar_deleted");

            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<TmpMarcarDeleted2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_marcar_deleted2");

            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<TmpMarcarDeleted2Audit>(entity =>
        {
            entity.ToTable("tmp_marcar_deleted2Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpMarcarDeletedAudit>(entity =>
        {
            entity.ToTable("tmp_marcar_deletedAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpMedico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_MEDICOS");

            entity.Property(e => e.ClienteIdentificacao)
                .IsRequired()
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CLIENTE_IDENTIFICACAO");
            entity.Property(e => e.ClienteNome)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CLIENTE_NOME");
            entity.Property(e => e.Doctorid).HasColumnName("DOCTORID");
            entity.Property(e => e.Licensenumber)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LICENSENUMBER");
            entity.Property(e => e.Licensestate)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LICENSESTATE");
        });

        modelBuilder.Entity<TmpMedicosaudit>(entity =>
        {
            entity.ToTable("TMP_MEDICOSAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpNaoEncontrado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_nao_encontrado");

            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DataPrimeiraInfusao)
                .HasColumnType("datetime")
                .HasColumnName("data_primeira_infusao");
            entity.Property(e => e.DataReferência)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Data Referência");
            entity.Property(e => e.Doença)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName(" Doença");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Gerente)
                .IsRequired()
                .HasMaxLength(320)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InfusionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medico)
                .HasMaxLength(320)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NewDatadeinativao)
                .HasColumnType("date")
                .HasColumnName("new_datadeinativao");
            entity.Property(e => e.NewSituacaoname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("new_situacaoname");
            entity.Property(e => e.NewStatusdotratamentoname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("new_statusdotratamentoname");
            entity.Property(e => e.NewTratamentoname)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("new_tratamentoname");
            entity.Property(e => e.QtdAmpolas)
                .HasColumnType("numeric(23, 10)")
                .HasColumnName("qtd_ampolas");
            entity.Property(e => e.QtdAmpolasIdeais)
                .HasColumnType("numeric(23, 10)")
                .HasColumnName("qtd_ampolas_ideais");
            entity.Property(e => e.Representante)
                .IsRequired()
                .HasMaxLength(320)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TipoDeAcesso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Tipo de Acesso");
            entity.Property(e => e.TipoRegistro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpNaoEncontradoAudit>(entity =>
        {
            entity.ToTable("tmp_nao_encontradoAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpNovo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_NOVOS");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas).HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais).HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpNovosaudit>(entity =>
        {
            entity.ToTable("TMP_NOVOSAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpPacienteEnrolled>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_PACIENTE_ENROLLED");

            entity.Property(e => e.Doctorid).HasColumnName("DOCTORID");
            entity.Property(e => e.Qtde).HasColumnName("QTDE");
        });

        modelBuilder.Entity<TmpPacienteEnrolledaudit>(entity =>
        {
            entity.ToTable("TMP_PACIENTE_ENROLLEDAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpPacientesAtivosEmFrente>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_pacientes_ativos_em_frente");

            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FaixaEtaria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Faixa Etaria");
            entity.Property(e => e.GrauDeHemofília)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Grau de Hemofília");
            entity.Property(e => e.Hemcasa)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Idade).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Modalidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NomeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome do Paciente");
            entity.Property(e => e.Peso).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TratamentoPrograma)
                .HasColumnType("datetime")
                .HasColumnName("Tratamento Programa");
        });

        modelBuilder.Entity<TmpPacientesAtivosEmFrenteAudit>(entity =>
        {
            entity.ToTable("tmp_pacientes_ativos_em_frenteAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpPacientesAtivosEmFrenteDado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_pacientes_ativos_em_frente_dados");

            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Doença)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FaixaEtaria)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Faixa Etaria");
            entity.Property(e => e.GrauDeHemofília)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Grau de Hemofília");
            entity.Property(e => e.Hemcasa)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Idade).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Infusoes).HasColumnName("infusoes");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Modalidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Médico)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NomeDoPaciente)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Nome do Paciente");
            entity.Property(e => e.Peso).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TratamentoPrograma)
                .HasColumnType("datetime")
                .HasColumnName("Tratamento Programa");
        });

        modelBuilder.Entity<TmpPacientesAtivosEmFrenteDadosAudit>(entity =>
        {
            entity.ToTable("tmp_pacientes_ativos_em_frente_dadosAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpPacientesAtivosEmFrenteInfuso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_pacientes_ativos_em_frente_Infusoes");

            entity.Property(e => e.DataDaInfusão)
                .HasColumnType("datetime")
                .HasColumnName("Data da Infusão");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TmpPacientesAtivosEmFrenteInfusoesAudit>(entity =>
        {
            entity.ToTable("tmp_pacientes_ativos_em_frente_InfusoesAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpPacientesAtivosEmFrenteVisitaAudit>(entity =>
        {
            entity.ToTable("tmp_pacientes_ativos_em_frente_visitaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpPacientesAtivosEmFrenteVisitum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_pacientes_ativos_em_frente_visita");

            entity.Property(e => e.DataDaVisita)
                .HasColumnType("datetime")
                .HasColumnName("Data da Visita");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.QuantidadeDeVisitas).HasColumnName("Quantidade de Visitas");
        });

        modelBuilder.Entity<TmpPacientesBase>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_PACIENTES_BASE");
        });

        modelBuilder.Entity<TmpPacientesBaseaudit>(entity =>
        {
            entity.ToTable("TMP_PACIENTES_BASEAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpRetention>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_RETENTION");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas).HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais).HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpRetentionaudit>(entity =>
        {
            entity.ToTable("TMP_RETENTIONAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpRetorno>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_retorno");

            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Phaseid).HasColumnName("phaseid");
            entity.Property(e => e.Treatmentstatusdetailid).HasColumnName("treatmentstatusdetailid");
            entity.Property(e => e.Treatmentstatusid).HasColumnName("treatmentstatusid");
        });

        modelBuilder.Entity<TmpRetorno2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_retorno2");

            entity.Property(e => e.Phaseid).HasColumnName("phaseid");
            entity.Property(e => e.Treatmentstatusdetailid).HasColumnName("treatmentstatusdetailid");
            entity.Property(e => e.Treatmentstatusid).HasColumnName("treatmentstatusid");
        });

        modelBuilder.Entity<TmpRetorno2Audit>(entity =>
        {
            entity.ToTable("tmp_retorno2Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpRetornoAudit>(entity =>
        {
            entity.ToTable("tmp_retornoAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpSaidaLocal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_SAIDA_LOCAL");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas).HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais).HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpSaidaLocalaudit>(entity =>
        {
            entity.ToTable("TMP_SAIDA_LOCALAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpSaidaPausa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_SAIDA_PAUSA");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas).HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais).HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpSaidaPausaaudit>(entity =>
        {
            entity.ToTable("TMP_SAIDA_PAUSAAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpScheduleHierarquiaAudit>(entity =>
        {
            entity.ToTable("tmp_Schedule_HierarquiaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpScheduleHierarquium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Schedule_Hierarquia");

            entity.Property(e => e.ConsultorGerente)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Consultor_Gerente");
            entity.Property(e => e.ConsultorSchedule).HasColumnName("Consultor_Schedule");
            entity.Property(e => e.MedicoConsultor)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Medico_Consultor");
            entity.Property(e => e.MedicoGerente)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Medico_Gerente");
            entity.Property(e => e.MedicoSchedule)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Medico_Schedule");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TmpSemana>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_semana");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DataInfusao).HasColumnType("date");
            entity.Property(e => e.EstaNoKpi)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Esta no KPI");
            entity.Property(e => e.Mes)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Qtde).HasColumnName("QTDE");
            entity.Property(e => e.RazaoNaoRealizacao).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Semana)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.StatusInfusao).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusTratamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TipoDeInfusão)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Tipo de Infusão");
        });

        modelBuilder.Entity<TmpSemanaAudit>(entity =>
        {
            entity.ToTable("tmp_semanaAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpTotalInfusion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_TOTAL_INFUSIONS");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas).HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais).HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpTotalInfusionsaudit>(entity =>
        {
            entity.ToTable("TMP_TOTAL_INFUSIONSAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpUltimaEntradaaudit>(entity =>
        {
            entity.ToTable("TMP_ULTIMA_ENTRADAAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpUltimaEntradum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_ULTIMA_ENTRADA");

            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Doctorid).HasColumnName("DOCTORID");
        });

        modelBuilder.Entity<TmpValidar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_validar");

            entity.Property(e => e.Cidade).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DataPrimeiraInfusao)
                .HasColumnType("datetime")
                .HasColumnName("data_primeira_infusao");
            entity.Property(e => e.DataReferência)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Data Referência");
            entity.Property(e => e.Doença)
                .HasMaxLength(200)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName(" Doença");
            entity.Property(e => e.Estado).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Gerente)
                .IsRequired()
                .HasMaxLength(320)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.InfusionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Local).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Medico)
                .HasMaxLength(320)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NewDatadeinativao)
                .HasColumnType("date")
                .HasColumnName("new_datadeinativao");
            entity.Property(e => e.NewSituacaoname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("new_situacaoname");
            entity.Property(e => e.NewStatusdotratamentoname)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("new_statusdotratamentoname");
            entity.Property(e => e.NewTratamentoname)
                .HasMaxLength(100)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("new_tratamentoname");
            entity.Property(e => e.QtdAmpolas)
                .HasColumnType("numeric(23, 10)")
                .HasColumnName("qtd_ampolas");
            entity.Property(e => e.QtdAmpolasIdeais)
                .HasColumnType("numeric(23, 10)")
                .HasColumnName("qtd_ampolas_ideais");
            entity.Property(e => e.Representante)
                .IsRequired()
                .HasMaxLength(320)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusInfusao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TipoDeAcesso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Tipo de Acesso");
            entity.Property(e => e.TipoRegistro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpValidarAudit>(entity =>
        {
            entity.ToTable("tmp_validarAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpVial>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_VIALS");

            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CODIGO_PACIENTE");
            entity.Property(e => e.DataReferencia)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DATA_REFERENCIA");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Infusionid).HasColumnName("INFUSIONID");
            entity.Property(e => e.Local)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LOCAL");
            entity.Property(e => e.QtdAmpolas)
                .HasColumnType("money")
                .HasColumnName("QTD_AMPOLAS");
            entity.Property(e => e.QtdAmpolasIdeais)
                .HasColumnType("money")
                .HasColumnName("QTD_AMPOLAS_IDEAIS");
            entity.Property(e => e.StatusInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("STATUS_INFUSAO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
            entity.Property(e => e.TipoRegistro)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("TIPO_REGISTRO");
        });

        modelBuilder.Entity<TmpVialsaudit>(entity =>
        {
            entity.ToTable("TMP_VIALSAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TmpVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_VOUCHER");

            entity.Property(e => e.AnoMês)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ANO_MÊS");
            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");
            entity.Property(e => e.PacientesQueReceberamOBeneficioDeIt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Pacientes que receberam o BENEFICIO de IT");
        });

        modelBuilder.Entity<TmpVoucheraudit>(entity =>
        {
            entity.ToTable("TMP_VOUCHERAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Tracking>(entity =>
        {
            entity.ToTable("Tracking");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Field)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
        });

        modelBuilder.Entity<TrackingAudit>(entity =>
        {
            entity.ToTable("TrackingAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TrainingRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TrainingRecord");

            entity.ToTable("TrainingRecord");

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TrainingRecordTypeStringMapId, "IX_TrainingRecordTypeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.RecycleTrainingDate).HasColumnType("datetime");
            entity.Property(e => e.TrainingDate).HasColumnType("datetime");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.TrainingRecords)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.TrainingRecord_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.TrainingRecords)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.TrainingRecord_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TrainingRecordStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TrainingRecord_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.TrainingRecordTypeStringMap).WithMany(p => p.TrainingRecordTrainingRecordTypeStringMaps)
                .HasForeignKey(d => d.TrainingRecordTypeStringMapId)
                .HasConstraintName("FK_dbo.TrainingRecord_dbo.StringMap_TrainingRecordTypeStringMapId");
        });

        modelBuilder.Entity<TrainingRecordAudit>(entity =>
        {
            entity.ToTable("TrainingRecordAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Treatment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Treatment");

            entity.ToTable("Treatment", tb => tb.HasTrigger("TR_UpdateFriendlycode"));

            entity.HasIndex(e => e.AccessTypeStringMapId, "IX_AccessTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.CaregiverId, "IX_CaregiverId").HasFillFactor(90);

            entity.HasIndex(e => e.CivilStatusStringMapId, "IX_CivilStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ContractTypeStringMapId, "IX_ContractTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.CreatedOn, "IX_CreatedOn");

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.DiagnosticId, "IX_DiagnosticId").HasFillFactor(90);

            entity.HasIndex(e => e.Disease5Id, "IX_Disease5Id");
            entity.HasIndex(e => e.Disease4Id, "IX_Disease4Id");
            entity.HasIndex(e => e.Disease3Id, "IX_Disease3Id");
            entity.HasIndex(e => e.Disease2Id, "IX_Disease2Id");

            entity.HasIndex(e => e.DiseaseId, "IX_DiseaseId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorPrescriberId, "IX_DoctorPrescriberId").HasFillFactor(90);

            entity.HasIndex(e => e.DosageUnitStringMapId, "IX_DosageUnitStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.EducationStringMapId, "IX_EducationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderStringMapId, "IX_GenderStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HEALTHPROGRAMID_2").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted, e.StateCode }, "IX_HEALTHPROGRAMID_ISDELETED_STATECODE").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted, e.StateCode }, "IX_HEALTHPROGRAMID_ISDELETED_STATECODE_V2").HasFillFactor(90);

            entity.HasIndex(e => e.HealthCareProviderId, "IX_HealthCareProviderId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionPlaceId, "IX_InfusionPlaceId").HasFillFactor(90);

            entity.HasIndex(e => e.KinshipStringMapId, "IX_KinshipStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.MainContactStringMapId, "IX_MainContactStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentCompetitorId, "IX_MedicamentCompetitorId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicamentId, "IX_MedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.ModalityStringMapId, "IX_ModalityStringMapId").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted, e.ModifiedOn }, "IX_NC_TREATMENT_0");

            entity.HasIndex(e => new { e.IsDeleted, e.HealthProgramId, e.PhaseId }, "IX_NC_TREATMENT_1").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_TREATMENT_12");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_TREATMENT_13");

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_TREATMENT_14");

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted, e.ModifiedOn }, "IX_NC_TREATMENT_15");

            entity.HasIndex(e => new { e.TreatmentSituationId, e.IsDeleted, e.HealthProgramId, e.PhaseId }, "IX_NC_TREATMENT_4").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_TREATMENT_5").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_TREATMENT_8").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.FriendlyCode }, "IX_NC_Treatment").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_Treatment_10").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted, e.StateCode }, "IX_NC_Treatment_11").HasFillFactor(90);

            entity.HasIndex(e => e.FriendlyCode, "IX_NC_Treatment_2").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_NC_Treatment_3").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_Treatment_6").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "IX_NC_Treatment_7").HasFillFactor(90);

            entity.HasIndex(e => e.OccupationId, "IX_OccupationId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientSourceStringMapId, "IX_PatientSourceStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PhaseId, "IX_PhaseId").HasFillFactor(90);

            entity.HasIndex(e => e.PhaseStringMapId, "IX_PhaseStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PosologeId, "IX_PosologeId").HasFillFactor(90);

            entity.HasIndex(e => e.PreferredTimeStringMapId, "IX_PreferredTimeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PrescriptionStatusStringMapId, "IX_PrescriptionStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ReasonInactivationStringMapId, "IX_ReasonInactivationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SourceConsentStringMapId, "IX_SourceConsentStringMapId");

            entity.HasIndex(e => e.StageOfDiseaseStringMapId, "IX_StageOfDiseaseStringMapId");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StrengthMedicamentId, "IX_StrengthMedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.TherapeuticTypeId, "IX_TherapeuticTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentCustomDataId, "IX_TreatmentCustomDataId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentSituationId, "IX_TreatmentSituationId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentStatusDetailId, "IX_TreatmentStatusDetailId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentStatusDetailStringMapId, "IX_TreatmentStatusDetailStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentStatusId, "IX_TreatmentStatusId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentStatusStringMapId, "IX_TreatmentStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.HasIndex(e => e.VisitRefusalReasonStringMapId, "IX_VisitRefusalReasonStringMapId");

            entity.HasIndex(e => e.CreatedOn, "ix_Treatment_CreatedOn_desc").IsDescending();

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted }, "ix_nc_Treatment_9").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.BirthdateCaregiver)
                .HasColumnType("datetime")
                .HasColumnName("Birthdate_Caregiver");
            entity.Property(e => e.Cid).HasColumnName("CID");
            entity.Property(e => e.ConsentLgpd).HasColumnName("ConsentLGPD");
            entity.Property(e => e.ConsentLgpddate)
                .HasColumnType("datetime")
                .HasColumnName("ConsentLGPDDate");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("CPF");
            entity.Property(e => e.CpfCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF_Caregiver");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomBoolean1).HasColumnName("CustomBoolean_1");
            entity.Property(e => e.CustomBoolean11).HasColumnName("CustomBoolean1");
            entity.Property(e => e.CustomBoolean2).HasColumnName("CustomBoolean_2");
            entity.Property(e => e.CustomBoolean21).HasColumnName("CustomBoolean2");
            entity.Property(e => e.CustomBoolean3).HasColumnName("CustomBoolean_3");
            entity.Property(e => e.CustomBoolean4).HasColumnName("CustomBoolean_4");
            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DiagnosticEmailConsentDate).HasColumnType("datetime");
            entity.Property(e => e.DiagnosticPhonecallConsentDate).HasColumnType("datetime");
            entity.Property(e => e.DoctorPhonecallsConsentDate).HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EmailAddress1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("EmailAddress1_Caregiver");
            entity.Property(e => e.EmailAddress2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("FirstName_Caregiver");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("FullName_Caregiver");
            entity.Property(e => e.GotAccessDate).HasColumnType("datetime");
            entity.Property(e => e.HasOps).HasColumnName("HasOPS");
            entity.Property(e => e.HealthInsuranceType).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LastNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LastName_Caregiver");
            entity.Property(e => e.Mobilephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Mobilephone1_Caregiver");
            entity.Property(e => e.Mobilephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PatientDiagnosedDate).HasColumnType("datetime");
            entity.Property(e => e.Pncode).HasColumnName("PNCode");
            entity.Property(e => e.PrescriptionDueDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionValidatedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PrescriptionValidationDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramParticipationConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramParticipationDiagnosticConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.Rne).HasColumnName("RNE");
            entity.Property(e => e.SkypeUser).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SkypeUserCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("SkypeUser_Caregiver");
            entity.Property(e => e.Stature).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SystemAccessStartDate).HasColumnType("datetime");
            entity.Property(e => e.SystemLastContactDate).HasColumnType("datetime");
            entity.Property(e => e.SystemLastSuccessfullContactDate).HasColumnType("datetime");
            entity.Property(e => e.SystemRegistrationEndDate).HasColumnType("datetime");
            entity.Property(e => e.SystemTreatmentInativationDate).HasColumnType("datetime");
            entity.Property(e => e.SystemTreatmentStartDate).HasColumnType("datetime");
            entity.Property(e => e.Telephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Telephone1_Caregiver");
            entity.Property(e => e.Telephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TreatmentStartDate).HasColumnType("datetime");
            entity.Property(e => e.TreatmentStopDate).HasColumnType("datetime");
            entity.Property(e => e.TreatmentTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AccessTypeStringMap).WithMany(p => p.TreatmentAccessTypeStringMaps)
                .HasForeignKey(d => d.AccessTypeStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_AccessTypeStringMapId");

            entity.HasOne(d => d.Account).WithMany(p => p.TreatmentAccounts)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Account_AccountId");

            entity.HasOne(d => d.Caregiver).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.CaregiverId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Caregiver_CaregiverId");

            entity.HasOne(d => d.CivilStatusStringMap).WithMany(p => p.TreatmentCivilStatusStringMaps)
                .HasForeignKey(d => d.CivilStatusStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_CivilStatusStringMapId");

            entity.HasOne(d => d.ContractTypeStringMap).WithMany(p => p.TreatmentContractTypeStringMaps)
                .HasForeignKey(d => d.ContractTypeStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_ContractTypeStringMapId");

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.TreatmentCustom1StringMaps)
                .HasForeignKey(d => d.Custom1StringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.TreatmentCustom2StringMaps)
                .HasForeignKey(d => d.Custom2StringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.Custom3StringMap).WithMany(p => p.TreatmentCustom3StringMaps)
                .HasForeignKey(d => d.Custom3StringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_Custom3StringMapId");

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.DiagnosticId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Diagnostic_DiagnosticId");

            entity.HasOne(d => d.Disease2).WithMany(p => p.TreatmentDisease2s)
                .HasForeignKey(d => d.Disease2Id)
                .HasConstraintName("FK_dbo.Treatment_dbo.Disease_Disease2Id");

            entity.HasOne(d => d.Disease).WithMany(p => p.TreatmentDiseases)
                .HasForeignKey(d => d.DiseaseId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Disease_DiseaseId");

            entity.HasOne(d => d.Disease3).WithMany(p => p.TreatmentDisease3s)
                .HasForeignKey(d => d.Disease3Id)
                .HasConstraintName("FK_dbo.Treatment_dbo.Disease_Disease3Id");

            entity.HasOne(d => d.Disease4).WithMany(p => p.TreatmentDisease4s)
                .HasForeignKey(d => d.Disease4Id)
                .HasConstraintName("FK_dbo.Treatment_dbo.Disease_Disease4Id");

            entity.HasOne(d => d.Disease5).WithMany(p => p.TreatmentDisease5s)
                .HasForeignKey(d => d.Disease5Id)
                .HasConstraintName("FK_dbo.Treatment_dbo.Disease_Disease5Id");

            entity.HasOne(d => d.Doctor).WithMany(p => p.TreatmentDoctors)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.DoctorPrescriber).WithMany(p => p.TreatmentDoctorPrescribers)
                .HasForeignKey(d => d.DoctorPrescriberId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Doctor_DoctorPrescriberId");

            entity.HasOne(d => d.DosageUnitStringMap).WithMany(p => p.TreatmentDosageUnitStringMaps)
                .HasForeignKey(d => d.DosageUnitStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_DosageUnitStringMapId");

            entity.HasOne(d => d.EducationStringMap).WithMany(p => p.TreatmentEducationStringMaps)
                .HasForeignKey(d => d.EducationStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_EducationStringMapId");

            entity.HasOne(d => d.GenderStringMap).WithMany(p => p.TreatmentGenderStringMaps)
                .HasForeignKey(d => d.GenderStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_GenderStringMapId");

            entity.HasOne(d => d.HealthCareProvider).WithMany(p => p.TreatmentHealthCareProviders)
                .HasForeignKey(d => d.HealthCareProviderId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Account_HealthCareProviderId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Treatment_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.InfusionPlace).WithMany(p => p.TreatmentInfusionPlaces)
                .HasForeignKey(d => d.InfusionPlaceId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Account_InfusionPlaceId");

            entity.HasOne(d => d.KinshipStringMap).WithMany(p => p.TreatmentKinshipStringMaps)
                .HasForeignKey(d => d.KinshipStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_KinshipStringMapId");

            entity.HasOne(d => d.MainContactStringMap).WithMany(p => p.TreatmentMainContactStringMaps)
                .HasForeignKey(d => d.MainContactStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_MainContactStringMapId");

            entity.HasOne(d => d.MedicamentCompetitor).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.MedicamentCompetitorId)
                .HasConstraintName("FK_dbo.Treatment_dbo.MedicamentCompetitor_MedicamentCompetitorId");

            entity.HasOne(d => d.Medicament).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.MedicamentId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Medicament_MedicamentId");

            entity.HasOne(d => d.ModalityStringMap).WithMany(p => p.TreatmentModalityStringMaps)
                .HasForeignKey(d => d.ModalityStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_ModalityStringMapId");

            entity.HasOne(d => d.Occupation).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.OccupationId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Occupation_OccupationId");

            entity.HasOne(d => d.Patient).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Patient_PatientId");

            entity.HasOne(d => d.PatientSourceStringMap).WithMany(p => p.TreatmentPatientSourceStringMaps)
                .HasForeignKey(d => d.PatientSourceStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_PatientSourceStringMapId");

            entity.HasOne(d => d.Phase).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.PhaseId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Phase_PhaseId");

            entity.HasOne(d => d.PhaseStringMap).WithMany(p => p.TreatmentPhaseStringMaps)
                .HasForeignKey(d => d.PhaseStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_PhaseStringMapId");

            entity.HasOne(d => d.Posologe).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.PosologeId)
                .HasConstraintName("FK_dbo.Treatment_dbo.Posologe_PosologeId");

            entity.HasOne(d => d.PreferredTimeStringMap).WithMany(p => p.TreatmentPreferredTimeStringMaps)
                .HasForeignKey(d => d.PreferredTimeStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_PreferredTimeStringMapId");

            entity.HasOne(d => d.PrescriptionStatusStringMap).WithMany(p => p.TreatmentPrescriptionStatusStringMaps)
                .HasForeignKey(d => d.PrescriptionStatusStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_PrescriptionStatusStringMapId");

            entity.HasOne(d => d.ReasonInactivationStringMap).WithMany(p => p.TreatmentReasonInactivationStringMaps)
                .HasForeignKey(d => d.ReasonInactivationStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_ReasonInactivationStringMapId");

            entity.HasOne(d => d.SourceConsentStringMap).WithMany(p => p.TreatmentSourceConsentStringMaps)
                .HasForeignKey(d => d.SourceConsentStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_SourceConsentStringMapId");

            entity.HasOne(d => d.StageOfDiseaseStringMap).WithMany(p => p.TreatmentStageOfDiseaseStringMaps)
                .HasForeignKey(d => d.StageOfDiseaseStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_StageOfDiseaseStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.StrengthMedicament).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.StrengthMedicamentId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StrengthMedicament_StrengthMedicamentId");

            entity.HasOne(d => d.TherapeuticType).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.TherapeuticTypeId)
                .HasConstraintName("FK_dbo.Treatment_dbo.TherapeuticType_TherapeuticTypeId");

            entity.HasOne(d => d.TreatmentCustomData).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.TreatmentCustomDataId)
                .HasConstraintName("FK_dbo.Treatment_dbo.TreatmentCustomData_TreatmentCustomDataId");

            entity.HasOne(d => d.TreatmentSituation).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.TreatmentSituationId)
                .HasConstraintName("FK_dbo.Treatment_dbo.TreatmentSituation_TreatmentSituationId");

            entity.HasOne(d => d.TreatmentStatusDetail).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.TreatmentStatusDetailId)
                .HasConstraintName("FK_dbo.Treatment_dbo.TreatmentStatusDetail_TreatmentStatusDetailId");

            entity.HasOne(d => d.TreatmentStatusDetailStringMap).WithMany(p => p.TreatmentTreatmentStatusDetailStringMaps)
                .HasForeignKey(d => d.TreatmentStatusDetailStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_TreatmentStatusDetailStringMapId");

            entity.HasOne(d => d.TreatmentStatus).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.TreatmentStatusId)
                .HasConstraintName("FK_dbo.Treatment_dbo.TreatmentStatus_TreatmentStatusId");

            entity.HasOne(d => d.TreatmentStatusStringMap).WithMany(p => p.TreatmentTreatmentStatusStringMaps)
                .HasForeignKey(d => d.TreatmentStatusStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_TreatmentStatusStringMapId");

            entity.HasOne(d => d.User).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.Treatment_dbo.User_UserId");

            entity.HasOne(d => d.VisitRefusalReasonStringMap).WithMany(p => p.TreatmentVisitRefusalReasonStringMaps)
                .HasForeignKey(d => d.VisitRefusalReasonStringMapId)
                .HasConstraintName("FK_dbo.Treatment_dbo.StringMap_VisitRefusalReasonStringMapId");

            entity.HasMany(d => d.CaregiverTreatments).WithOne(p => p.Treatment).HasForeignKey(d => d.TreatmentId);
        });

        modelBuilder.Entity<CaregiverTreatment>(entity =>
        {
            entity.HasKey(d => new { d.TreatmentId, d.CaregiverId });

            entity.HasOne(d => d.Caregiver).WithMany(d => d.CaregiverTreatments);

            entity.HasOne(d => d.Treatment).WithMany(d => d.CaregiverTreatments);
        });

        modelBuilder.Entity<TreatmentAddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentAddress");

            entity.ToTable("TreatmentAddress");

            entity.HasIndex(e => e.AddressTypeStringMapId, "IX_AddressTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.CoverageAreaId, "IX_CoverageAreaId").HasFillFactor(90);

            entity.HasIndex(e => e.CustomerAddressId, "IX_CustomerAddressId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.MainAddress, "IX_NC_TreatmentAddress").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddressCity).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressComplement).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressCountry).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressDistrict).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressNumber).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressPostalCode).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressReference).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.AddressState).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.AddressTypeStringMap).WithMany(p => p.TreatmentAddressAddressTypeStringMaps)
                .HasForeignKey(d => d.AddressTypeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentAddress_dbo.StringMap_AddressTypeStringMapId");

            entity.HasOne(d => d.CoverageArea).WithMany(p => p.TreatmentAddresses)
                .HasForeignKey(d => d.CoverageAreaId)
                .HasConstraintName("FK_dbo.TreatmentAddress_dbo.CoverageArea_CoverageAreaId");

            entity.HasOne(d => d.CustomerAddress).WithMany(p => p.TreatmentAddresses)
                .HasForeignKey(d => d.CustomerAddressId)
                .HasConstraintName("FK_dbo.TreatmentAddress_dbo.CustomerAddress_CustomerAddressId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.TreatmentAddresses)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.TreatmentAddress_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentAddressStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentAddress_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentAddresses)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.TreatmentAddress_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<TreatmentAddressAudit>(entity =>
        {
            entity.ToTable("TreatmentAddressAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentAndDiagnosticAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentAndDiagnosticAction");

            entity.ToTable("TreatmentAndDiagnosticAction");

            entity.HasIndex(e => e.ActionCategoryId, "IX_ActionCategoryId").HasFillFactor(90);

            entity.HasIndex(e => e.ActionConfigurationId, "IX_ActionConfigurationId").HasFillFactor(90);

            entity.HasIndex(e => e.ActionRuleId, "IX_ActionRuleId").HasFillFactor(90);

            entity.HasIndex(e => e.DiagnosticId, "IX_DiagnosticId").HasFillFactor(90);

            entity.HasIndex(e => e.IncidentId, "IX_IncidentId").HasFillFactor(90);

            entity.HasIndex(e => new { e.ActionConfigurationId, e.IsDeleted }, "IX_NC_TreatmentAndDiagnosticAction_2").HasFillFactor(90);

            entity.HasIndex(e => e.PhoneCallId, "IX_PhoneCallId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.ActionStatus, "ix_nc_TreatmentAndDiagnosticAction").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduledDate).HasColumnType("datetime");
            entity.Property(e => e.SourceEntityName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SourceEntityTypeCode).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.ActionCategory).WithMany(p => p.TreatmentAndDiagnosticActions)
                .HasForeignKey(d => d.ActionCategoryId)
                .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionCategory_ActionCategoryId");

            entity.HasOne(d => d.ActionConfiguration).WithMany(p => p.TreatmentAndDiagnosticActions)
                .HasForeignKey(d => d.ActionConfigurationId)
                .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionConfiguration_ActionConfigurationId");

            entity.HasOne(d => d.ActionRule).WithMany(p => p.TreatmentAndDiagnosticActions)
                .HasForeignKey(d => d.ActionRuleId)
                .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.ActionRule_ActionRuleId");

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.TreatmentAndDiagnosticActions)
                .HasForeignKey(d => d.DiagnosticId)
                .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.Diagnostic_DiagnosticId");

            entity.HasOne(d => d.Incident).WithMany(p => p.TreatmentAndDiagnosticActions)
                .HasForeignKey(d => d.IncidentId)
                .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.Incident_IncidentId");

            entity.HasOne(d => d.PhoneCall).WithMany(p => p.TreatmentAndDiagnosticActions)
                .HasForeignKey(d => d.PhoneCallId)
                .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.PhoneCall_PhoneCallId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentAndDiagnosticActions)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentAndDiagnosticActions)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.TreatmentAndDiagnosticAction_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<TreatmentAndDiagnosticActionAudit>(entity =>
        {
            entity.ToTable("TreatmentAndDiagnosticActionAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentAttendance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentAttendance");

            entity.ToTable("TreatmentAttendance");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastInfusionDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.NextInfusionDate).HasColumnType("datetime");
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentAttendances)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentAttendance_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentAttendances)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.TreatmentAttendance_dbo.Treatment_TreatmentId");
        });

        modelBuilder.Entity<TreatmentAttendanceAudit>(entity =>
        {
            entity.ToTable("TreatmentAttendanceAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentAudit>(entity =>
        {
            entity.ToTable("TreatmentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.HasIndex(e => e.RegardingObjectId, "ix_nc_TreatmentAudit");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentBillingAudit>(entity =>
        {
            entity.ToTable("TreatmentBillingAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentBkp05112021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Treatment_bkp_05_11_2021");

            entity.Property(e => e.AmpouleAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Birthdate).HasColumnType("datetime");
            entity.Property(e => e.BirthdateCaregiver)
                .HasColumnType("datetime")
                .HasColumnName("Birthdate_Caregiver");
            entity.Property(e => e.Cid).HasColumnName("CID");
            entity.Property(e => e.ConsentLgpd).HasColumnName("ConsentLGPD");
            entity.Property(e => e.ConsentLgpddate)
                .HasColumnType("datetime")
                .HasColumnName("ConsentLGPDDate");
            entity.Property(e => e.ConsentToReceiveSms).HasColumnName("ConsentToReceiveSMS");
            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("CPF");
            entity.Property(e => e.CpfCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("CPF_Caregiver");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomBoolean1).HasColumnName("CustomBoolean_1");
            entity.Property(e => e.CustomBoolean11).HasColumnName("CustomBoolean1");
            entity.Property(e => e.CustomBoolean2).HasColumnName("CustomBoolean_2");
            entity.Property(e => e.CustomBoolean21).HasColumnName("CustomBoolean2");
            entity.Property(e => e.CustomBoolean3).HasColumnName("CustomBoolean_3");
            entity.Property(e => e.CustomBoolean4).HasColumnName("CustomBoolean_4");
            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DiagnosticEmailConsentDate).HasColumnType("datetime");
            entity.Property(e => e.DiagnosticPhonecallConsentDate).HasColumnType("datetime");
            entity.Property(e => e.DoctorPhonecallsConsentDate).HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EmailAddress1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EmailAddress1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("EmailAddress1_Caregiver");
            entity.Property(e => e.EmailAddress2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FirstNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("FirstName_Caregiver");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FullNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("FullName_Caregiver");
            entity.Property(e => e.GotAccessDate).HasColumnType("datetime");
            entity.Property(e => e.HasOps).HasColumnName("HasOPS");
            entity.Property(e => e.HealthInsuranceType).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.LastNameCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("LastName_Caregiver");
            entity.Property(e => e.Mobilephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Mobilephone1_Caregiver");
            entity.Property(e => e.Mobilephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Mobilephone3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PatientDiagnosedDate).HasColumnType("datetime");
            entity.Property(e => e.Pncode).HasColumnName("PNCode");
            entity.Property(e => e.PrescriptionDueDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionValidatedByName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.PrescriptionValidationDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramParticipationConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramParticipationDiagnosticConsentDate).HasColumnType("datetime");
            entity.Property(e => e.ProgramTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Rg)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("RG");
            entity.Property(e => e.Rne).HasColumnName("RNE");
            entity.Property(e => e.SkypeUser).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SkypeUserCaregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("SkypeUser_Caregiver");
            entity.Property(e => e.Stature).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SystemAccessStartDate).HasColumnType("datetime");
            entity.Property(e => e.SystemLastContactDate).HasColumnType("datetime");
            entity.Property(e => e.SystemLastSuccessfullContactDate).HasColumnType("datetime");
            entity.Property(e => e.SystemRegistrationEndDate).HasColumnType("datetime");
            entity.Property(e => e.SystemTreatmentInativationDate).HasColumnType("datetime");
            entity.Property(e => e.SystemTreatmentStartDate).HasColumnType("datetime");
            entity.Property(e => e.Telephone1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone1Caregiver)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("Telephone1_Caregiver");
            entity.Property(e => e.Telephone2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TreatmentStartDate).HasColumnType("datetime");
            entity.Property(e => e.TreatmentStopDate).HasColumnType("datetime");
            entity.Property(e => e.TreatmentTime).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TreatmentBkp05112021audit>(entity =>
        {
            entity.ToTable("Treatment_bkp_05_11_2021Audit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentCustomDataAudit>(entity =>
        {
            entity.ToTable("TreatmentCustomDataAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentCustomData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentCustomData");

            entity.HasIndex(e => e.AccessDetailStringMapId, "IX_AccessDetailStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.AccessWayId, "IX_AccessWayId").HasFillFactor(90);

            entity.HasIndex(e => e.AccountId, "IX_AccountId").HasFillFactor(90);

            entity.HasIndex(e => e.ApplicatorTypeStringMapId, "IX_ApplicatorTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ContractHasCoparticipationStringMapId, "IX_ContractHasCoparticipationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ContractTypeStringMapId, "IX_ContractTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.DoctorAuthorizesDosageTitrationStringMapId, "IX_DoctorAuthorizesDosageTitrationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.FormofAccessStringMapId, "IX_FormofAccessStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HemophiliaDegreeStringMapId, "IX_HemophiliaDegreeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.IfxitcodeId, "IX_IFXITCodeId").HasFillFactor(90);

            entity.HasIndex(e => e.IfxitstatusStringMapId, "IX_IFXITStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.IfxotcodeId, "IX_IFXOTCodeId").HasFillFactor(90);

            entity.HasIndex(e => e.IfxotstatusStringMapId, "IX_IFXOTStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionSiteId, "IX_InfusionSiteId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionTypeStringMapId, "IX_InfusionTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.IsWorkingStringMapStringMapId, "IX_IsWorkingStringMap_StringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.JanssenitstatusStringMapId, "IX_JANSSENITStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.JanssenotstatusStringMapId, "IX_JANSSENOTStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicalIndicationStringMapId, "IX_MedicalIndicationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.MedicalInstructionAccessWayStringMapId, "IX_MedicalInstructionAccessWayStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_NC_TreatmentCustomData");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_TreatmentCustomData_2");

            entity.HasIndex(e => e.OptimizationSubTypeStringMapId, "IX_OptimizationSubTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.OptimizationTypeStringMapId, "IX_OptimizationTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientTypeStringMapId, "IX_PatientTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PlanCoverageStringMapId, "IX_PlanCoverageStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.PreviousMedicamentCompetitorId, "IX_PreviousMedicamentCompetitorId").HasFillFactor(90);

            entity.HasIndex(e => e.PreviousMedicamentId, "IX_PreviousMedicamentId").HasFillFactor(90);

            entity.HasIndex(e => e.ReasonForNotAcceptingSmsstringMapId, "IX_ReasonForNotAcceptingSMSStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.RepresentativeId, "IX_RepresentativeId").HasFillFactor(90);

            entity.HasIndex(e => e.RiskRatingStringMapId, "IX_RiskRatingStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StageOfDiseaseStringMapId, "IX_StageOfDiseaseStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StorageLocationStringMapId, "IX_StorageLocationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.SupplyMethodStringMapId, "IX_SupplyMethodStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentCyclesStringMapId, "IX_TreatmentCyclesStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentIntervalStringMapId, "IX_TreatmentIntervalStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentTypeStringMapId, "IX_TreatmentTypeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VisitRefusalReasonStringMapId, "IX_VisitRefusalReasonStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AcceptsDailySmsdelivery).HasColumnName("AcceptsDailySMSDelivery");
            entity.Property(e => e.AcceptsIbetaplusRegistration).HasColumnName("AcceptsIBetaplusRegistration");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.Betaferonisthefirsttreatmentdrug).HasColumnName("BETAFERONisthefirsttreatmentdrug");
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.DateLeftTheBenefit).HasColumnType("datetime");
            entity.Property(e => e.DateOfLastMedicalAppointment).HasColumnType("datetime");
            entity.Property(e => e.DateOfLastSuswithdrawal)
                .HasColumnType("datetime")
                .HasColumnName("DateOfLastSUSWithdrawal");
            entity.Property(e => e.DateOfNextInfusion).HasColumnType("datetime");
            entity.Property(e => e.DateReceivementTerm).HasColumnType("datetime");
            entity.Property(e => e.DateValidation).HasColumnType("datetime");
            entity.Property(e => e.DateoflastMri)
                .HasColumnType("datetime")
                .HasColumnName("DateoflastMRI");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DiseaseDiagnosticDate).HasColumnType("datetime");
            entity.Property(e => e.DiseaseDiagnosticDate2).HasColumnType("datetime");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.HasOps).HasColumnName("HasOPS");
            entity.Property(e => e.IfxitcodeId).HasColumnName("IFXITCodeId");
            entity.Property(e => e.IfxitstatusStringMapId).HasColumnName("IFXITStatusStringMapId");
            entity.Property(e => e.IfxotcodeId).HasColumnName("IFXOTCodeId");
            entity.Property(e => e.IfxotstatusStringMapId).HasColumnName("IFXOTStatusStringMapId");
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.IsWorkingStringMapStringMapId).HasColumnName("IsWorkingStringMap_StringMapId");
            entity.Property(e => e.ItbenefitApproved).HasColumnName("ITBenefitApproved");
            entity.Property(e => e.ItbenefitException).HasColumnName("ITBenefitException");
            entity.Property(e => e.ItbenefitRefusalReason).HasColumnName("ITBenefitRefusalReason");
            entity.Property(e => e.ItbilledInfusions).HasColumnName("ITBilledInfusions");
            entity.Property(e => e.ItperformedInfusions).HasColumnName("ITPerformedInfusions");
            entity.Property(e => e.JanssenitstatusStringMapId).HasColumnName("JANSSENITStatusStringMapId");
            entity.Property(e => e.JanssenotstatusStringMapId).HasColumnName("JANSSENOTStatusStringMapId");
            entity.Property(e => e.MedicalReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MyPkfiTpatient).HasColumnName("myPKFiTPatient");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OtbenefitApproved).HasColumnName("OTBenefitApproved");
            entity.Property(e => e.OtbenefitRefusalReason).HasColumnName("OTBenefitRefusalReason");
            entity.Property(e => e.OtperformedInfusions).HasColumnName("OTPerformedInfusions");
            entity.Property(e => e.OtprescriptionSent).HasColumnName("OTPrescriptionSent");
            entity.Property(e => e.OtprescriptionValidated).HasColumnName("OTPrescriptionValidated");
            entity.Property(e => e.OtprescriptionValidatedBy).HasColumnName("OTPrescriptionValidatedBy");
            entity.Property(e => e.OtprescriptionValidatedOn)
                .HasColumnType("datetime")
                .HasColumnName("OTPrescriptionValidatedOn");
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.PatientTypeDateChanged).HasColumnType("datetime");
            entity.Property(e => e.PatientWillBeginItbenefit).HasColumnName("PatientWillBeginITBenefit");
            entity.Property(e => e.PatientWillBeginOtbenefit).HasColumnName("PatientWillBeginOTBenefit");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.ReasonForNotAcceptingSmsstringMapId).HasColumnName("ReasonForNotAcceptingSMSStringMapId");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.SupportFieldInt).HasDefaultValueSql("((0))");
            entity.Property(e => e.SupportFieldInt2).HasDefaultValueSql("((0))");
            entity.Property(e => e.SupportFieldInt3).HasDefaultValueSql("((0))");
            entity.Property(e => e.SusprotocolNumber).HasColumnName("SUSProtocolNumber");
            entity.Property(e => e.TransplantedDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateRiskRatingDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");

            entity.HasOne(d => d.AccessDetailStringMap).WithMany(p => p.TreatmentCustomDataAccessDetailStringMaps)
                .HasForeignKey(d => d.AccessDetailStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_AccessDetailStringMapId");

            entity.HasOne(d => d.AccessWay).WithMany(p => p.TreatmentCustomData)
                .HasForeignKey(d => d.AccessWayId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.AccessWay_AccessWayId");

            entity.HasOne(d => d.Account).WithMany(p => p.TreatmentCustomDataAccounts)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Account_AccountId");

            entity.HasOne(d => d.ApplicatorTypeStringMap).WithMany(p => p.TreatmentCustomDataApplicatorTypeStringMaps)
                .HasForeignKey(d => d.ApplicatorTypeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_ApplicatorTypeStringMapId");

            entity.HasOne(d => d.ContractHasCoparticipationStringMap).WithMany(p => p.TreatmentCustomDataContractHasCoparticipationStringMaps)
                .HasForeignKey(d => d.ContractHasCoparticipationStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_ContractHasCoparticipationStringMapId");

            entity.HasOne(d => d.ContractTypeStringMap).WithMany(p => p.TreatmentCustomDataContractTypeStringMaps)
                .HasForeignKey(d => d.ContractTypeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_ContractTypeStringMapId");

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.TreatmentCustomDataCustom1StringMaps)
                .HasForeignKey(d => d.Custom1StringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.TreatmentCustomDataCustom2StringMaps)
                .HasForeignKey(d => d.Custom2StringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.DoctorAuthorizesDosageTitrationStringMap).WithMany(p => p.TreatmentCustomDataDoctorAuthorizesDosageTitrationStringMaps)
                .HasForeignKey(d => d.DoctorAuthorizesDosageTitrationStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_DoctorAuthorizesDosageTitrationStringMapId");

            entity.HasOne(d => d.FormofAccessStringMap).WithMany(p => p.TreatmentCustomDataFormofAccessStringMaps)
                .HasForeignKey(d => d.FormofAccessStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_FormofAccessStringMapId");

            entity.HasOne(d => d.HemophiliaDegreeStringMap).WithMany(p => p.TreatmentCustomDataHemophiliaDegreeStringMaps)
                .HasForeignKey(d => d.HemophiliaDegreeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_HemophiliaDegreeStringMapId");

            entity.HasOne(d => d.Ifxitcode).WithMany(p => p.TreatmentCustomDataIfxitcodes)
                .HasForeignKey(d => d.IfxitcodeId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Voucher_IFXITCodeId");

            entity.HasOne(d => d.IfxitstatusStringMap).WithMany(p => p.TreatmentCustomDataIfxitstatusStringMaps)
                .HasForeignKey(d => d.IfxitstatusStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_IFXITStatusStringMapId");

            entity.HasOne(d => d.Ifxotcode).WithMany(p => p.TreatmentCustomDataIfxotcodes)
                .HasForeignKey(d => d.IfxotcodeId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Voucher_IFXOTCodeId");

            entity.HasOne(d => d.IfxotstatusStringMap).WithMany(p => p.TreatmentCustomDataIfxotstatusStringMaps)
                .HasForeignKey(d => d.IfxotstatusStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_IFXOTStatusStringMapId");

            entity.HasOne(d => d.InfusionSite).WithMany(p => p.TreatmentCustomDataInfusionSites)
                .HasForeignKey(d => d.InfusionSiteId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Account_InfusionSiteId");

            entity.HasOne(d => d.InfusionTypeStringMap).WithMany(p => p.TreatmentCustomDataInfusionTypeStringMaps)
                .HasForeignKey(d => d.InfusionTypeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_InfusionTypeStringMapId");

            entity.HasOne(d => d.IsWorkingStringMapStringMap).WithMany(p => p.TreatmentCustomDataIsWorkingStringMapStringMaps)
                .HasForeignKey(d => d.IsWorkingStringMapStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_IsWorkingStringMap_StringMapId");

            entity.HasOne(d => d.JanssenitstatusStringMap).WithMany(p => p.TreatmentCustomDataJanssenitstatusStringMaps)
                .HasForeignKey(d => d.JanssenitstatusStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_JANSSENITStatusStringMapId");

            entity.HasOne(d => d.JanssenotstatusStringMap).WithMany(p => p.TreatmentCustomDataJanssenotstatusStringMaps)
                .HasForeignKey(d => d.JanssenotstatusStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_JANSSENOTStatusStringMapId");

            entity.HasOne(d => d.MedicalIndicationStringMap).WithMany(p => p.TreatmentCustomDataMedicalIndicationStringMaps)
                .HasForeignKey(d => d.MedicalIndicationStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_MedicalIndicationStringMapId");

            entity.HasOne(d => d.MedicalInstructionAccessWayStringMap).WithMany(p => p.TreatmentCustomDataMedicalInstructionAccessWayStringMaps)
                .HasForeignKey(d => d.MedicalInstructionAccessWayStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_MedicalInstructionAccessWayStringMapId");

            entity.HasOne(d => d.OptimizationTypeStringMap).WithMany(p => p.TreatmentCustomDataOptimizationTypeStringMaps)
                .HasForeignKey(d => d.OptimizationTypeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_OptimizationTypeStringMapId");

            entity.HasOne(d => d.PatientTypeStringMap).WithMany(p => p.TreatmentCustomDataPatientTypeStringMaps)
                .HasForeignKey(d => d.PatientTypeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_PatientTypeStringMapId");

            entity.HasOne(d => d.PlanCoverageStringMap).WithMany(p => p.TreatmentCustomDataPlanCoverageStringMaps)
                .HasForeignKey(d => d.PlanCoverageStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_PlanCoverageStringMapId");

            entity.HasOne(d => d.PreviousMedicamentCompetitor).WithMany(p => p.TreatmentCustomData)
                .HasForeignKey(d => d.PreviousMedicamentCompetitorId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.MedicamentCompetitor_PreviousMedicamentCompetitorId");

            entity.HasOne(d => d.PreviousMedicament).WithMany(p => p.TreatmentCustomData)
                .HasForeignKey(d => d.PreviousMedicamentId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Medicament_PreviousMedicamentId");

            entity.HasOne(d => d.ReasonForNotAcceptingSmsstringMap).WithMany(p => p.TreatmentCustomDataReasonForNotAcceptingSmsstringMaps)
                .HasForeignKey(d => d.ReasonForNotAcceptingSmsstringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_ReasonForNotAcceptingSMSStringMapId");

            entity.HasOne(d => d.Representative).WithMany(p => p.TreatmentCustomData)
                .HasForeignKey(d => d.RepresentativeId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.Representative_RepresentativeId");

            entity.HasOne(d => d.RiskRatingStringMap).WithMany(p => p.TreatmentCustomDataRiskRatingStringMaps)
                .HasForeignKey(d => d.RiskRatingStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_RiskRatingStringMapId");

            entity.HasOne(d => d.StageOfDiseaseStringMap).WithMany(p => p.TreatmentCustomDataStageOfDiseaseStringMaps)
                .HasForeignKey(d => d.StageOfDiseaseStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_StageOfDiseaseStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentCustomDataStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.StorageLocationStringMap).WithMany(p => p.TreatmentCustomDataStorageLocationStringMaps)
                .HasForeignKey(d => d.StorageLocationStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_StorageLocationStringMapId");

            entity.HasOne(d => d.SupplyMethodStringMap).WithMany(p => p.TreatmentCustomDataSupplyMethodStringMaps)
                .HasForeignKey(d => d.SupplyMethodStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_SupplyMethodStringMapId");

            entity.HasOne(d => d.TreatmentCyclesStringMap).WithMany(p => p.TreatmentCustomDataTreatmentCyclesStringMaps)
                .HasForeignKey(d => d.TreatmentCyclesStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentCyclesStringMapId");

            entity.HasOne(d => d.TreatmentIntervalStringMap).WithMany(p => p.TreatmentCustomDataTreatmentIntervalStringMaps)
                .HasForeignKey(d => d.TreatmentIntervalStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentIntervalStringMapId");

            entity.HasOne(d => d.TreatmentTypeStringMap).WithMany(p => p.TreatmentCustomDataTreatmentTypeStringMaps)
                .HasForeignKey(d => d.TreatmentTypeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_TreatmentTypeStringMapId");

            entity.HasOne(d => d.VisitRefusalReasonStringMap).WithMany(p => p.TreatmentCustomDataVisitRefusalReasonStringMaps)
                .HasForeignKey(d => d.VisitRefusalReasonStringMapId)
                .HasConstraintName("FK_dbo.TreatmentCustomData_dbo.StringMap_VisitRefusalReasonStringMapId");
        });

        modelBuilder.Entity<TreatmentHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentHistory");

            entity.ToTable("TreatmentHistory");

            entity.HasIndex(e => e.HistoryDoctorId, "IX_HistoryDoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.HistoryModalityStringMapId, "IX_HistoryModalityStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HistoryPhaseStringMapId, "IX_HistoryPhaseStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HistoryStatusDetailStringMapId, "IX_HistoryStatusDetailStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HistoryStatusStringMapId, "IX_HistoryStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => new { e.PhaseId, e.IsDeleted }, "IX_NC_TreatmentHistory_0");

            entity.HasIndex(e => e.IsDeleted, "IX_NC_TreatmentHistory_1");

            entity.HasIndex(e => e.PhaseId, "IX_PhaseId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentSituationId, "IX_TreatmentSituationId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentStatusDetailId, "IX_TreatmentStatusDetailId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentStatusId, "IX_TreatmentStatusId").HasFillFactor(90);

            entity.HasIndex(e => e.PhaseId, "ix_nc_TreatmentHistory").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DetailModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HistoryDoctor).WithMany(p => p.TreatmentHistories)
                .HasForeignKey(d => d.HistoryDoctorId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.Doctor_HistoryDoctorId");

            entity.HasOne(d => d.HistoryModalityStringMap).WithMany(p => p.TreatmentHistoryHistoryModalityStringMaps)
                .HasForeignKey(d => d.HistoryModalityStringMapId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_HistoryModalityStringMapId");

            entity.HasOne(d => d.HistoryPhaseStringMap).WithMany(p => p.TreatmentHistoryHistoryPhaseStringMaps)
                .HasForeignKey(d => d.HistoryPhaseStringMapId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_HistoryPhaseStringMapId");

            entity.HasOne(d => d.HistoryStatusDetailStringMap).WithMany(p => p.TreatmentHistoryHistoryStatusDetailStringMaps)
                .HasForeignKey(d => d.HistoryStatusDetailStringMapId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_HistoryStatusDetailStringMapId");

            entity.HasOne(d => d.HistoryStatusStringMap).WithMany(p => p.TreatmentHistoryHistoryStatusStringMaps)
                .HasForeignKey(d => d.HistoryStatusStringMapId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_HistoryStatusStringMapId");

            entity.HasOne(d => d.Phase).WithMany(p => p.TreatmentHistories)
                .HasForeignKey(d => d.PhaseId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.Phase_PhaseId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentHistoryStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentHistories)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.TreatmentSituation).WithMany(p => p.TreatmentHistories)
                .HasForeignKey(d => d.TreatmentSituationId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.TreatmentSituation_TreatmentSituationId");

            entity.HasOne(d => d.TreatmentStatusDetail).WithMany(p => p.TreatmentHistories)
                .HasForeignKey(d => d.TreatmentStatusDetailId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.TreatmentStatusDetail_TreatmentStatusDetailId");

            entity.HasOne(d => d.TreatmentStatus).WithMany(p => p.TreatmentHistories)
                .HasForeignKey(d => d.TreatmentStatusId)
                .HasConstraintName("FK_dbo.TreatmentHistory_dbo.TreatmentStatus_TreatmentStatusId");
        });

        modelBuilder.Entity<TreatmentHistoryAudit>(entity =>
        {
            entity.ToTable("TreatmentHistoryAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentPayment");

            entity.ToTable("TreatmentPayment");

            entity.HasIndex(e => e.ExamId, "IX_ExamId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.InfusionId, "IX_InfusionId").HasFillFactor(90);

            entity.HasIndex(e => e.PatientId, "IX_PatientId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentPaymentStatusStringMapId, "IX_TreatmentPaymentStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VisitId, "IX_VisitId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName).HasMaxLength(50);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EstimatedVisitkm).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FriendlyCode).HasMaxLength(50);
            entity.Property(e => e.ImportCode).HasMaxLength(50);
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.OwnerIdName).HasMaxLength(50);
            entity.Property(e => e.PerformedVisitkm).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReasonDeleted).HasMaxLength(250);
            entity.Property(e => e.ValueVisit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ValueVisitCalculated).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ValueVisitPay).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ValueVisitPerKm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ValueVisitPerKM");

            entity.HasOne(d => d.Exam).WithMany(p => p.TreatmentPayments)
                .HasForeignKey(d => d.ExamId)
                .HasConstraintName("FK_dbo.TreatmentBilling_dbo.Exam_ExamId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.TreatmentPayments)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.TreatmentPayment_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.TreatmentPayments)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.TreatmentPayment_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Infusion).WithMany(p => p.TreatmentPayments)
                .HasForeignKey(d => d.InfusionId)
                .HasConstraintName("FK_dbo.TreatmentBilling_dbo.Infusion_InfusionId");

            entity.HasOne(d => d.Patient).WithMany(p => p.TreatmentPayments)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_dbo.TreatmentPayment_dbo.Patient_PatientId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentPaymentStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentBilling_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentPayments)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.TreatmentPayment_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.TreatmentPaymentStatusStringMap).WithMany(p => p.TreatmentPaymentTreatmentPaymentStatusStringMaps)
                .HasForeignKey(d => d.TreatmentPaymentStatusStringMapId)
                .HasConstraintName("FK_dbo.TreatmentBilling_dbo.StringMap_TreatmentBillingStatusStringMapId");

            entity.HasOne(d => d.Visit).WithMany(p => p.TreatmentPayments)
                .HasForeignKey(d => d.VisitId)
                .HasConstraintName("FK_dbo.TreatmentBilling_dbo.Visit_VisitId");
        });

        modelBuilder.Entity<TreatmentPaymentAudit>(entity =>
        {
            entity.ToTable("TreatmentPaymentAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentReceitadevidaFind>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Treatment_RECEITADEVIDA_FIND");

            entity.HasIndex(e => e.Cpf, "IX_CPF").HasFillFactor(90);

            entity.Property(e => e.Cpf)
                .HasMaxLength(255)
                .HasColumnName("CPF");
            entity.Property(e => e.FullName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<TreatmentReceitadevidaFindaudit>(entity =>
        {
            entity.ToTable("Treatment_RECEITADEVIDA_FINDAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentSettings");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.PhaseId, "IX_PhaseId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentSituationId, "IX_TreatmentSituationId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentStatusDetailId, "IX_TreatmentStatusDetailId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentStatusId, "IX_TreatmentStatusId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.TreatmentSettings)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.TreatmentSettings_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Phase).WithMany(p => p.TreatmentSettings)
                .HasForeignKey(d => d.PhaseId)
                .HasConstraintName("FK_dbo.TreatmentSettings_dbo.Phase_PhaseId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentSettings)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentSettings_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.TreatmentSituation).WithMany(p => p.TreatmentSettings)
                .HasForeignKey(d => d.TreatmentSituationId)
                .HasConstraintName("FK_dbo.TreatmentSettings_dbo.TreatmentSituation_TreatmentSituationId");

            entity.HasOne(d => d.TreatmentStatusDetail).WithMany(p => p.TreatmentSettings)
                .HasForeignKey(d => d.TreatmentStatusDetailId)
                .HasConstraintName("FK_dbo.TreatmentSettings_dbo.TreatmentStatusDetail_TreatmentStatusDetailId");

            entity.HasOne(d => d.TreatmentStatus).WithMany(p => p.TreatmentSettings)
                .HasForeignKey(d => d.TreatmentStatusId)
                .HasConstraintName("FK_dbo.TreatmentSettings_dbo.TreatmentStatus_TreatmentStatusId");
        });

        modelBuilder.Entity<TreatmentSettingsAudit>(entity =>
        {
            entity.ToTable("TreatmentSettingsAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentSituation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentSituation");

            entity.ToTable("TreatmentSituation");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentSituations)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentSituation_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<TreatmentSituationAudit>(entity =>
        {
            entity.ToTable("TreatmentSituationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentStatus");

            entity.ToTable("TreatmentStatus");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentStatuses)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentStatus_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<TreatmentStatusAudit>(entity =>
        {
            entity.ToTable("TreatmentStatusAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentStatusDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TreatmentStatusDetail");

            entity.ToTable("TreatmentStatusDetail");

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.GroupName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TreatmentStatusDetails)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TreatmentStatusDetail_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<TreatmentStatusDetailAudit>(entity =>
        {
            entity.ToTable("TreatmentStatusDetailAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TreatmentStatusDetailHealthProgramAudit>(entity =>
        {
            entity.ToTable("TreatmentStatusDetailHealthProgramAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.User");

            entity.ToTable("User");

            entity.HasIndex(e => e.ProfileId, "IX_Profile_Id").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAccessTry).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.LastAccess).HasColumnType("datetime");
            entity.Property(e => e.Mobilephone).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Password).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ProfileId).HasColumnName("Profile_Id");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Telephone).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.UserName).UseCollation("Latin1_General_CI_AI");

            //entity.HasOne(d => d.Profile).WithMany(p => p.Users)
            //    .HasForeignKey(d => d.ProfileId)
            //    .HasConstraintName("FK_dbo.User_dbo.Profile_Profile_Id");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.Users)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.User_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<UserAccessProfileHealthProgram>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UserAccessProfile_HealthProgram");

            entity.Property(e => e.Email).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<UserAudit>(entity =>
        {
            entity.ToTable("UserAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<UserSystemLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.UserSystemLog");

            entity.ToTable("UserSystemLog");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId");

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.FinishDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.UserSystemLogs)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.UserSystemLog_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.User).WithMany(p => p.UserSystemLogs)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.UserSystemLog_dbo.User_UserId");
        });

        modelBuilder.Entity<UserSystemLogAudit>(entity =>
        {
            entity.ToTable("UserSystemLogAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<VLogisticsScheduleAudit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_LogisticsScheduleAudit");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues).HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues).HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<VMonitoramentoEnzimai>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_monitoramento_enzimais");

            entity.Property(e => e.AnoMes).HasMaxLength(7);
            entity.Property(e => e.ClassificacaoInfusoes)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CLASSIFICACAO_INFUSOES");
            entity.Property(e => e.Clinica)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CodigoPaciente)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeclaracaoClinica).HasMaxLength(500);
            entity.Property(e => e.DescricaoDeclaracaoClinica).HasMaxLength(500);
            entity.Property(e => e.Doenca)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Fase).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IdInfusaoClinica)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.IdSiteAprovacao).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LoteClinica).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LoteSiteAprovacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Medicamento)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Situacao)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.StatusAprovacao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("STATUS_APROVACAO");
            entity.Property(e => e.StatusInfusaoCare).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TipoAcesso)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_ACESSO");
            entity.Property(e => e.TipoDeInfusao)
                .UseCollation("Latin1_General_CI_AI")
                .HasColumnName("TIPO_DE_INFUSAO");
        });

        modelBuilder.Entity<ValidationResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ValidationResult");

            entity.ToTable("ValidationResult");

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<ValidationResultAudit>(entity =>
        {
            entity.ToTable("ValidationResultAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ViewsEntityMetadatum>(entity =>
        {
            entity.HasKey(e => e.ViewsEntityMetadataId).HasName("PK_dbo.ViewsEntityMetadata");

            entity.HasIndex(e => new { e.SourceEntityMetadataId, e.SourceAttributeMetadataId, e.ProgramId, e.IsVisible }, "idx_MetadataId").HasFillFactor(90);

            entity.Property(e => e.ViewsEntityMetadataId).ValueGeneratedNever();
            entity.Property(e => e.AttributeName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Name).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SourceAttributeMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SourceEntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TargetAttributeMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.TargetEntityMetadataIdName).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Type).UseCollation("Latin1_General_CI_AI");
        });

        modelBuilder.Entity<Visit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Visit");

            entity.ToTable("Visit");

            entity.HasIndex(e => e.CampaignId, "IX_CampaignId");

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.DiagnosticId, "IX_DiagnosticId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProfessionalId, "IX_HealthProfessionalId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.LocalId, "IX_LocalId").HasFillFactor(90);

            entity.HasIndex(e => e.PreSchedulingStatusStringMapId, "IX_PreSchedulingStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.ServiceTypeId, "IX_ServiceTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusStringMapId, "IX_StatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentAddressId, "IX_TreatmentAddressId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId");

            entity.HasIndex(e => e.IsDeleted, "ix_nc_Visit");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Code).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ConclusionDateEnd).HasColumnType("datetime");
            entity.Property(e => e.ConclusionDateStart).HasColumnType("datetime");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DistanceBetweenPatientHealthProfessional).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Observation).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ScheduleDateEnd).HasColumnType("datetime");
            entity.Property(e => e.ScheduleDateStart).HasColumnType("datetime");

            entity.HasOne(d => d.Campaign).WithMany(p => p.Visits)
                .HasForeignKey(d => d.CampaignId)
                .HasConstraintName("FK_dbo.Visit_dbo.Campaign_CampaignId");

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.VisitCustom1StringMaps)
                .HasForeignKey(d => d.Custom1StringMapId)
                .HasConstraintName("FK_dbo.Visit_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.VisitCustom2StringMaps)
                .HasForeignKey(d => d.Custom2StringMapId)
                .HasConstraintName("FK_dbo.Visit_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.Visits)
                .HasForeignKey(d => d.DiagnosticId)
                .HasConstraintName("FK_dbo.Visit_dbo.Diagnostic_DiagnosticId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Visits)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.Visit_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.HealthProfessional).WithMany(p => p.Visits)
                .HasForeignKey(d => d.HealthProfessionalId)
                .HasConstraintName("FK_dbo.Visit_dbo.HealthProfessional_HealthProfessionalId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Visits)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Visit_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Local).WithMany(p => p.Visits)
                .HasForeignKey(d => d.LocalId)
                .HasConstraintName("FK_dbo.Visit_dbo.Account_LocalId");

            entity.HasOne(d => d.PreSchedulingStatusStringMap).WithMany(p => p.VisitPreSchedulingStatusStringMaps)
                .HasForeignKey(d => d.PreSchedulingStatusStringMapId)
                .HasConstraintName("FK_dbo.Visit_dbo.StringMap_PreSchedulingStatusStringMapId");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.Visits)
                .HasForeignKey(d => d.ServiceTypeId)
                .HasConstraintName("FK_dbo.Visit_dbo.ServiceType_ServiceTypeId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.VisitStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Visit_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.StatusStringMap).WithMany(p => p.VisitStatusStringMaps)
                .HasForeignKey(d => d.StatusStringMapId)
                .HasConstraintName("FK_dbo.Visit_dbo.StringMap_StatusStringMapId");

            entity.HasOne(d => d.TreatmentAddress).WithMany(p => p.Visits)
                .HasForeignKey(d => d.TreatmentAddressId)
                .HasConstraintName("FK_dbo.Visit_dbo.TreatmentAddress_TreatmentAddressId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Visits)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Visit_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Visits)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.Visit_dbo.Voucher_VoucherId");
        });

        modelBuilder.Entity<VisitAudit>(entity =>
        {
            entity.ToTable("VisitAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Voucher");

            entity.ToTable("Voucher");

            entity.HasIndex(e => e.AccountId, "IX_AccountId");

            entity.HasIndex(e => e.DiagnosticId, "IX_DiagnosticId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId");

            entity.HasIndex(e => e.ExamDefinitionId, "IX_ExamDefinitionId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.ManagerId, "IX_ManagerId");

            entity.HasIndex(e => e.HealthProgramId, "IX_NC_VOUCHER");

            entity.HasIndex(e => e.HealthProgramId, "IX_NC_VOUCHER_2");

            entity.HasIndex(e => e.RepresentativeId, "IX_RepresentativeId").HasFillFactor(90);

            entity.HasIndex(e => e.SourceStringMapId, "IX_SourceStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.TreatmentId, "IX_TreatmentId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherConfigurationId, "IX_VoucherConfigurationId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherStatusStringMapId, "IX_VoucherStatusStringMapId").HasFillFactor(90);

            entity.HasIndex(e => new { e.HealthProgramId, e.IsDeleted, e.UseDate }, "idx_voucher_healthprogramid").HasFillFactor(90);

            entity.HasIndex(e => e.Custom1StringMapId, "IX_Custom1StringMapId");

            entity.HasIndex(e => e.Custom2StringMapId, "IX_Custom2StringMapId");

            entity.HasIndex(e => e.Custom3StringMapId, "IX_Custom3StringMapId");

            entity.HasIndex(e => e.Custom4StringMapId, "IX_Custom4StringMapId");

            entity.HasIndex(e => e.Custom5StringMapId, "IX_Custom5StringMapId");

            entity.HasIndex(e => e.Custom6StringMapId, "IX_Custom6StringMapId");

            entity.HasIndex(e => e.Custom7StringMapId, "IX_Custom7StringMapId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ExplainNotUsed).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.IssuanceDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.NotSendViaSms).HasColumnName("NotSendViaSMS");
            entity.Property(e => e.Number).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.UseDate).HasColumnType("datetime");

            entity.Property(e => e.CustomString1).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString2).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString3).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString4).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString5).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString6).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CustomString7).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CustomDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime2).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime3).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime4).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime5).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime6).HasColumnType("datetime");
            entity.Property(e => e.CustomDateTime7).HasColumnType("datetime");

            entity.Property(e => e.CustomBoolean1);
            entity.Property(e => e.CustomBoolean2);
            entity.Property(e => e.CustomBoolean3);
            entity.Property(e => e.CustomBoolean4);
            entity.Property(e => e.CustomBoolean5);
            entity.Property(e => e.CustomBoolean6);
            entity.Property(e => e.CustomBoolean7);

            entity.HasOne(d => d.Custom1StringMap).WithMany(p => p.VoucherCustom1StringMaps)
            .HasForeignKey(d => d.Custom1StringMapId)
            .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_Custom1StringMapId");

            entity.HasOne(d => d.Custom2StringMap).WithMany(p => p.VoucherCustom2StringMaps)
            .HasForeignKey(d => d.Custom2StringMapId)
            .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_Custom2StringMapId");

            entity.HasOne(d => d.Custom3StringMap).WithMany(p => p.VoucherCustom3StringMaps)
            .HasForeignKey(d => d.Custom3StringMapId)
            .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_Custom3StringMapId");

            entity.HasOne(d => d.Custom4StringMap).WithMany(p => p.VoucherCustom4StringMaps)
            .HasForeignKey(d => d.Custom4StringMapId)
            .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_Custom4StringMapId");

            entity.HasOne(d => d.Custom5StringMap).WithMany(p => p.VoucherCustom5StringMaps)
            .HasForeignKey(d => d.Custom5StringMapId)
            .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_Custom5StringMapId");

            entity.HasOne(d => d.Custom6StringMap).WithMany(p => p.VoucherCustom6StringMaps)
            .HasForeignKey(d => d.Custom6StringMapId)
            .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_Custom6StringMapId");

            entity.HasOne(d => d.Custom7StringMap).WithMany(p => p.VoucherCustom7StringMaps)
            .HasForeignKey(d => d.Custom7StringMapId)
            .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_Custom7StringMapId");

            entity.HasOne(d => d.Account).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_dbo.Voucher_dbo.Account_AccountId");

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.DiagnosticId)
                .HasConstraintName("FK_dbo.Voucher_dbo.Diagnostic_DiagnosticId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.Voucher_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.ExamDefinition).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.ExamDefinitionId)
                .HasConstraintName("FK_dbo.Voucher_dbo.ExamDefinition_ExamDefinitionId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Voucher_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.Manager).WithMany(p => p.VoucherManagers)
                .HasForeignKey(d => d.ManagerId)
                .HasConstraintName("FK_dbo.Voucher_dbo.Representative_ManagerId");

            entity.HasOne(d => d.Representative).WithMany(p => p.VoucherRepresentatives)
                .HasForeignKey(d => d.RepresentativeId)
                .HasConstraintName("FK_dbo.Voucher_dbo.Representative_RepresentativeId");

            entity.HasOne(d => d.SourceStringMap).WithMany(p => p.VoucherSourceStringMaps)
                .HasForeignKey(d => d.SourceStringMapId)
                .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_SourceStringMapId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.VoucherStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Treatment).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.TreatmentId)
                .HasConstraintName("FK_dbo.Voucher_dbo.Treatment_TreatmentId");

            entity.HasOne(d => d.VoucherConfiguration).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.VoucherConfigurationId)
                .HasConstraintName("FK_dbo.Voucher_dbo.VoucherConfiguration_VoucherConfigurationId");

            entity.HasOne(d => d.VoucherStatusStringMap).WithMany(p => p.VoucherVoucherStatusStringMaps)
                .HasForeignKey(d => d.VoucherStatusStringMapId)
                .HasConstraintName("FK_dbo.Voucher_dbo.StringMap_VoucherStatusStringMapId");
        });

        modelBuilder.Entity<VoucherAudit>(entity =>
        {
            entity.ToTable("VoucherAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<VoucherConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.VoucherConfiguration");

            entity.ToTable("VoucherConfiguration");

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherConfigTypeStringMapId, "IX_VoucherConfigTypeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CodePattern).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.FriendlyCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ImportCode)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ReasonDeleted)
                .HasMaxLength(250)
                .UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.VoucherConfigurations)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.VoucherConfiguration_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.VoucherConfigurationStatusCodeStringMaps)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.VoucherConfiguration_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.VoucherConfigTypeStringMap).WithMany(p => p.VoucherConfigurationVoucherConfigTypeStringMaps)
                .HasForeignKey(d => d.VoucherConfigTypeStringMapId)
                .HasConstraintName("FK_dbo.VoucherConfiguration_dbo.StringMap_VoucherConfigTypeStringMapId");
        });

        modelBuilder.Entity<VoucherConfigurationAudit>(entity =>
        {
            entity.ToTable("VoucherConfigurationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Zzmig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("zzmig");

            entity.Property(e => e.Descricao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<ZzmigAudit>(entity =>
        {
            entity.ToTable("zzmigAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId");

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<UserPasswordHistory>(entity =>
        {
            entity.ToTable("UserPasswordHistory");
            entity.HasKey(e => e.Id).HasName("PK_dbo.UserPasswordHistory");
            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId");
            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.PreviousPassword).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CurrentPassword).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CreatedOn)
                .HasComment("Data de criação do registro no banco de dados")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasComment("Chave estrangeira da tabela User, indica qual usuário que inseriu o registro no sistema");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .HasComment("Nome do usuário que inseriu o registro no sistema.")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.UserPasswordHistorys)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.UserPasswordHistory_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.User).WithMany(p => p.UserPasswordHistorys)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.UserPasswordHistory_dbo.User_UserId");
        });

        modelBuilder.Entity<UserPasswordHistoryAudit>(entity =>
        {
            entity.ToTable("UserPasswordHistoryAudit");
            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);
            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<UrlShortener>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.UrlShortener");

            entity.ToTable("UrlShortener");

            entity.HasIndex(e => e.UserId, "IX_UserId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.Url);
            entity.Property(e => e.ShortUrl);
            entity.Property(e => e.ShortCode);

            entity.HasOne(d => d.User).WithMany(p => p.UrlShorteners)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.UrlShortener_dbo.User_UserId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.UrlShorteners)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.UrlShortener_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.UrlShorteners)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.UrlShortener_dbo.StringMap_StatusCodeStringMapId");
        });

        modelBuilder.Entity<UrlShortenerAudit>(entity =>
        {
            entity.ToTable("UrlShortenerAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<ClickTracking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ClickTracking");

            entity.ToTable("ClickTracking");

            entity.HasIndex(e => e.UserId, "IX_UserId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);

            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.EmailId, "IX_EmailId").HasFillFactor(90);

            entity.HasIndex(e => e.TemplateEmailId, "IX_TemplateEmailId").HasFillFactor(90);

            entity.HasIndex(e => e.SmsId, "IX_SmsId").HasFillFactor(90);

            entity.HasIndex(e => e.TemplateSmsId, "IX_TemplateSmsId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.DestinationUrl);
            entity.Property(e => e.ClickDate).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.ClickTrackings)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.ClickTracking_dbo.User_UserId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.ClickTrackings)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.ClickTracking_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.ClickTrackings)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.ClickTracking_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.Email).WithMany(p => p.ClickTrackings)
                .HasForeignKey(d => d.EmailId)
                .HasConstraintName("FK_dbo.ClickTracking_dbo.Email_EmailId");

            entity.HasOne(d => d.Sms).WithMany(p => p.ClickTrackings)
                .HasForeignKey(d => d.SmsId)
                .HasConstraintName("FK_dbo.ClickTracking_dbo.Sms_SmsId");

            entity.HasOne(d => d.TemplateEmail).WithMany(p => p.ClickTrackingEmails)
                .HasForeignKey(d => d.TemplateEmailId)
                .HasConstraintName("FK_dbo.ClickTracking_dbo.Template_TemplateEmailId");

            entity.HasOne(d => d.TemplateSms).WithMany(p => p.ClickTrackingSmss)
                .HasForeignKey(d => d.TemplateSmsId)
                .HasConstraintName("FK_dbo.ClickTracking_dbo.Template_TemplateSmsId");
        });

        modelBuilder.Entity<ClickTrackingAudit>(entity =>
        {
            entity.ToTable("ClickTrackingAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<TemplateConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TemplateConfiguration");

            entity.ToTable("TemplateConfiguration");

            entity.HasIndex(e => e.UserId, "IX_UserId").HasFillFactor(90);
            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);
            entity.HasIndex(e => e.StatusCodeStringMapId, "IX_StatusCodeStringMapId").HasFillFactor(90);
            entity.HasIndex(e => e.TemplateEmailId, "IX_TemplateEmailId").HasFillFactor(90);
            entity.HasIndex(e => e.TemplateSmsId, "IX_TemplateSmsId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedByName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OwnerIdName)
                .HasMaxLength(50)
                .UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.Name);
            entity.Property(e => e.Description);            
            entity.Property(e => e.ParametersLinkSMS);
            entity.Property(e => e.ParametersLinkEmail);
            entity.Property(e => e.ScheduledSend).HasColumnType("datetime");            

            entity.HasOne(d => d.User).WithMany(p => p.TemplateConfigurations)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.TemplateConfiguration_dbo.User_UserId");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.TemplateConfigurations)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.TemplateConfiguration_dbo.HealthProgram_HealthProgramId");

            entity.HasOne(d => d.StatusCodeStringMap).WithMany(p => p.TemplateConfigurations)
                .HasForeignKey(d => d.StatusCodeStringMapId)
                .HasConstraintName("FK_dbo.TemplateConfiguration_dbo.StringMap_StatusCodeStringMapId");

            entity.HasOne(d => d.TemplateEmail).WithMany(p => p.TemplateConfigurationEmails)
                .HasForeignKey(d => d.TemplateEmailId)
                .HasConstraintName("FK_dbo.TemplateConfiguration_dbo.Template_TemplateEmailId");

            entity.HasOne(d => d.TemplateSms).WithMany(p => p.TemplateConfigurationSmss)
                .HasForeignKey(d => d.TemplateSmsId)
                .HasConstraintName("FK_dbo.TemplateConfiguration_dbo.Template_TemplateSmsId");
        });

        modelBuilder.Entity<TemplateConfigurationAudit>(entity =>
        {
            entity.ToTable("TemplateConfigurationAudit");

            entity.HasIndex(e => e.RegardingObjectId, "IX_RegardingObjectId").HasFillFactor(90);

            entity.HasIndex(e => new { e.Message, e.RegardingObjectId, e.UserId }, "IX_RegardingObjectIdMessage").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fields).UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.Message).HasMaxLength(20);
            entity.Property(e => e.Version)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.XmlnewValues)
                .HasColumnType("xml")
                .HasColumnName("XMLNewValues");
            entity.Property(e => e.XmloldValues)
                .HasColumnType("xml")
                .HasColumnName("XMLOldValues");
        });

        modelBuilder.Entity<Unsubscribe>(entity =>
        {
            entity.ToTable("Unsubscribe");
            entity.HasKey(e => e.Id).HasName("PK_dbo.Unsubscribe");
            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId");


            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.Property(e => e.EmailUnsubscribed).UseCollation("Latin1_General_CI_AI");

            entity.Property(e => e.CreatedOn)
                .HasComment("Data de criação do registro no banco de dados")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasComment("Chave estrangeira da tabela User, indica qual usuário que inseriu o registro no sistema");
            entity.Property(e => e.CreatedByName)
                .HasMaxLength(50)
                .HasComment("Nome do usuário que inseriu o registro no sistema.")
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.EntityOriginalValues).UseCollation("Latin1_General_CI_AI");

            entity.HasOne(d => d.HealthProgram).WithMany(p => p.Unsubscribes)
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.Unsubscribe_dbo.HealthProgram_HealthProgramId");
        });
                
        modelBuilder.Entity<RepresentativeDoctorByProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RepresentativeDoctorByProgram");

            entity.ToTable("RepresentativeDoctorByProgram");

            entity.HasIndex(e => e.RepresentativeId, "IX_RepresentativeId").HasFillFactor(90);

            entity.HasIndex(e => e.DoctorId, "IX_DoctorId").HasFillFactor(90);

            entity.HasIndex(e => e.SituationStringMapId, "IX_SituationStringMapId").HasFillFactor(90);

            entity.HasIndex(e => e.HealthProgramId, "IX_HealthProgramId").HasFillFactor(90);


            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.RegisterDate).HasColumnType("datetime");


            entity.HasOne(d => d.Representative).WithMany(p => p.RepresentativeDoctorByPrograms)
                .HasForeignKey(d => d.RepresentativeId)
                .HasConstraintName("FK_dbo.RepresentativeDoctorByProgram_dbo.Representative_RepresentativeId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.RepresentativeDoctorByPrograms)
                .HasForeignKey(d => d.DoctorId)
                .HasConstraintName("FK_dbo.RepresentativeDoctorByProgram_dbo.Doctor_DoctorId");

            entity.HasOne(d => d.SituationStringMap).WithMany()
                .HasForeignKey(d => d.SituationStringMapId)
                .HasConstraintName("FK_dbo.RepresentativeDoctorByProgram_dbo.StringMap_SituationStringMapId");

            entity.HasOne(d => d.HealthProgram).WithMany()
                .HasForeignKey(d => d.HealthProgramId)
                .HasConstraintName("FK_dbo.RepresentativeDoctorByProgram_dbo.HealthProgram_HealthProgramId");


        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
